
	.data
	.globl	_mz_crc32.s_crc_table
_mz_crc32.s_crc_table:
	.data
	.globl	_.str
_.str:
	.asciz	"11.0.2\000"
	.data
	.globl	_mz_error.s_error_descs
_mz_error.s_error_descs:
	.quad	0
	.quad	_.str.1
	.quad	1
	.quad	_.str.2
	.quad	2
	.quad	_.str.3
	.quad	-1
	.quad	_.str.4
	.quad	-2
	.quad	_.str.5
	.quad	-3
	.quad	_.str.6
	.quad	-4
	.quad	_.str.7
	.quad	-5
	.quad	_.str.8
	.quad	-6
	.quad	_.str.9
	.quad	-10000
	.quad	_.str.10
	.data
	.globl	_.str.1
_.str.1:
	.asciz	"\000"
	.data
	.globl	_.str.2
_.str.2:
	.asciz	"stream end\000"
	.data
	.globl	_.str.3
_.str.3:
	.asciz	"need dictionary\000"
	.data
	.globl	_.str.4
_.str.4:
	.asciz	"file error\000"
	.data
	.globl	_.str.5
_.str.5:
	.asciz	"stream error\000"
	.data
	.globl	_.str.6
_.str.6:
	.asciz	"data error\000"
	.data
	.globl	_.str.7
_.str.7:
	.asciz	"out of memory\000"
	.data
	.globl	_.str.8
_.str.8:
	.asciz	"buf error\000"
	.data
	.globl	_.str.9
_.str.9:
	.asciz	"version error\000"
	.data
	.globl	_.str.10
_.str.10:
	.asciz	"parameter error\000"
	.data
	.globl	___func__.tdefl_compress_buffer
___func__.tdefl_compress_buffer:
	.asciz	"tdefl_compress_buffer\000"
	.data
	.globl	_.str.11
_.str.11:
	.asciz	"example1.c\000"
	.data
	.globl	_.str.12
_.str.12:
	.asciz	"d->m_pPut_buf_func\000"
	.data
	.globl	_s_tdefl_num_probes
_s_tdefl_num_probes:
	.quad	0
	.quad	1
	.quad	6
	.quad	32
	.quad	16
	.quad	32
	.quad	128
	.quad	256
	.quad	512
	.quad	768
	.quad	1500
	.data
	.globl	_tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes
_tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes:
	.quad	0
	.quad	1
	.quad	6
	.quad	32
	.quad	16
	.quad	32
	.quad	128
	.quad	256
	.quad	512
	.quad	768
	.quad	1500
	.data
	.globl	_tdefl_write_image_to_png_file_in_memory_ex.chans
_tdefl_write_image_to_png_file_in_memory_ex.chans:
	.asciz	"\000\000\004\002\006"
	.data
	.globl	___const.tdefl_write_image_to_png_file_in_memory_ex.pnghdr
___const.tdefl_write_image_to_png_file_in_memory_ex.pnghdr:
	.asciz	"\211PNG\015\012\032\012\000\000\000\015IHDR\000\000\000\000\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000IDAT"
	.data
	.globl	_.str.13
_.str.13:
	.asciz	"\000\000\000\000\000\000\000\000IEND\256B`\202\000"
	.data
	.globl	_tinfl_decompress.s_length_base
_tinfl_decompress.s_length_base:
	.quad	3
	.quad	4
	.quad	5
	.quad	6
	.quad	7
	.quad	8
	.quad	9
	.quad	10
	.quad	11
	.quad	13
	.quad	15
	.quad	17
	.quad	19
	.quad	23
	.quad	27
	.quad	31
	.quad	35
	.quad	43
	.quad	51
	.quad	59
	.quad	67
	.quad	83
	.quad	99
	.quad	115
	.quad	131
	.quad	163
	.quad	195
	.quad	227
	.quad	258
	.quad	0
	.quad	0
	.data
	.globl	_tinfl_decompress.s_length_extra
_tinfl_decompress.s_length_extra:
	.asciz	"\000\000\000\000\000\000\000\000\001\001\001\001\002\002\002\002\003\003\003\003\004\004\004\004\005\005\005\005\000\000\000"
	.data
	.globl	_tinfl_decompress.s_dist_base
_tinfl_decompress.s_dist_base:
	.quad	1
	.quad	2
	.quad	3
	.quad	4
	.quad	5
	.quad	7
	.quad	9
	.quad	13
	.quad	17
	.quad	25
	.quad	33
	.quad	49
	.quad	65
	.quad	97
	.quad	129
	.quad	193
	.quad	257
	.quad	385
	.quad	513
	.quad	769
	.quad	1025
	.quad	1537
	.quad	2049
	.quad	3073
	.quad	4097
	.quad	6145
	.quad	8193
	.quad	12289
	.quad	16385
	.quad	24577
	.quad	0
	.quad	0
	.data
	.globl	_tinfl_decompress.s_dist_extra
_tinfl_decompress.s_dist_extra:
	.asciz	"\000\000\000\000\001\001\002\002\003\003\004\004\005\005\006\006\007\007\010\010\011\011\012\012\013\013\014\014\015\015\000\000"
	.data
	.globl	_tinfl_decompress.s_length_dezigzag
_tinfl_decompress.s_length_dezigzag:
	.asciz	"\020\021\022\000\010\007\011\006\012\005\013\004\014\003\015\002\016\001\017"
	.data
	.globl	_tinfl_decompress.s_min_table_sizes
_tinfl_decompress.s_min_table_sizes:
	.quad	257
	.quad	1
	.quad	4
	.data
	.globl	_.str.14
_.str.14:
	.asciz	"\005\005\004\000"
	.data
	.globl	_.str.15
_.str.15:
	.asciz	"\002\003\007\000"
	.data
	.globl	_.str.16
_.str.16:
	.asciz	"\003\003\013\000"
	.data
	.globl	___func__.tinfl_decompress
___func__.tinfl_decompress:
	.asciz	"tinfl_decompress\000"
	.data
	.globl	_.str.17
_.str.17:
	.asciz	"!num_bits\000"
	.data
	.globl	_.str.18
_.str.18:
	.asciz	"rb\000"
	.data
	.globl	_.str.19
_.str.19:
	.asciz	"wb\000"
	.data
	.globl	_.str.20
_.str.20:
	.asciz	"w+b\000"
	.data
	.globl	_.str.21
_.str.21:
	.asciz	"r+b\000"
	.data
	.globl	___func__.mz_zip_writer_add_mem_ex_v2
___func__.mz_zip_writer_add_mem_ex_v2:
	.asciz	"mz_zip_writer_add_mem_ex_v2\000"
	.data
	.globl	_.str.22
_.str.22:
	.asciz	"(local_dir_header_ofs & (pZip->m_file_offset_alignment - 1)) == 0\000"
	.data
	.globl	_.str.23
_.str.23:
	.asciz	"bit_flags & MZ_ZIP_LDH_BIT_FLAG_HAS_LOCATOR\000"
	.data
	.globl	___func__.mz_zip_writer_add_read_buf_callback
___func__.mz_zip_writer_add_read_buf_callback:
	.asciz	"mz_zip_writer_add_read_buf_callback\000"
	.data
	.globl	_.str.24
_.str.24:
	.asciz	"(cur_archive_file_ofs & (pZip->m_file_offset_alignment - 1)) == 0\000"
	.data
	.globl	___func__.mz_zip_writer_add_from_zip_reader
___func__.mz_zip_writer_add_from_zip_reader:
	.asciz	"mz_zip_writer_add_from_zip_reader\000"
	.data
	.globl	_.str.25
_.str.25:
	.asciz	"no error\000"
	.data
	.globl	_.str.26
_.str.26:
	.asciz	"undefined error\000"
	.data
	.globl	_.str.27
_.str.27:
	.asciz	"too many files\000"
	.data
	.globl	_.str.28
_.str.28:
	.asciz	"file too large\000"
	.data
	.globl	_.str.29
_.str.29:
	.asciz	"unsupported method\000"
	.data
	.globl	_.str.30
_.str.30:
	.asciz	"unsupported encryption\000"
	.data
	.globl	_.str.31
_.str.31:
	.asciz	"unsupported feature\000"
	.data
	.globl	_.str.32
_.str.32:
	.asciz	"failed finding central directory\000"
	.data
	.globl	_.str.33
_.str.33:
	.asciz	"not a ZIP archive\000"
	.data
	.globl	_.str.34
_.str.34:
	.asciz	"invalid header or archive is corrupted\000"
	.data
	.globl	_.str.35
_.str.35:
	.asciz	"unsupported multidisk archive\000"
	.data
	.globl	_.str.36
_.str.36:
	.asciz	"decompression failed or archive is corrupted\000"
	.data
	.globl	_.str.37
_.str.37:
	.asciz	"compression failed\000"
	.data
	.globl	_.str.38
_.str.38:
	.asciz	"unexpected decompressed size\000"
	.data
	.globl	_.str.39
_.str.39:
	.asciz	"CRC-32 check failed\000"
	.data
	.globl	_.str.40
_.str.40:
	.asciz	"unsupported central directory size\000"
	.data
	.globl	_.str.41
_.str.41:
	.asciz	"allocation failed\000"
	.data
	.globl	_.str.42
_.str.42:
	.asciz	"file open failed\000"
	.data
	.globl	_.str.43
_.str.43:
	.asciz	"file create failed\000"
	.data
	.globl	_.str.44
_.str.44:
	.asciz	"file write failed\000"
	.data
	.globl	_.str.45
_.str.45:
	.asciz	"file read failed\000"
	.data
	.globl	_.str.46
_.str.46:
	.asciz	"file close failed\000"
	.data
	.globl	_.str.47
_.str.47:
	.asciz	"file seek failed\000"
	.data
	.globl	_.str.48
_.str.48:
	.asciz	"file stat failed\000"
	.data
	.globl	_.str.49
_.str.49:
	.asciz	"invalid parameter\000"
	.data
	.globl	_.str.50
_.str.50:
	.asciz	"invalid filename\000"
	.data
	.globl	_.str.51
_.str.51:
	.asciz	"buffer too small\000"
	.data
	.globl	_.str.52
_.str.52:
	.asciz	"internal error\000"
	.data
	.globl	_.str.53
_.str.53:
	.asciz	"file not found\000"
	.data
	.globl	_.str.54
_.str.54:
	.asciz	"archive is too large\000"
	.data
	.globl	_.str.55
_.str.55:
	.asciz	"validation failed\000"
	.data
	.globl	_.str.56
_.str.56:
	.asciz	"write callback failed\000"
	.data
	.globl	_.str.57
_.str.57:
	.asciz	"total errors\000"
	.data
	.globl	_.str.58
_.str.58:
	.asciz	"unknown error\000"
	.data
	.globl	_s_pStr
_s_pStr:
	.quad	_.str.79
	.data
	.globl	_.str.59
_.str.59:
	.asciz	"miniz.c version: %s\012\000"
	.data
	.globl	_.str.60
_.str.60:
	.asciz	"Out of memory!\012\000"
	.data
	.globl	_.str.61
_.str.61:
	.asciz	"compress() failed!\012\000"
	.data
	.globl	_.str.62
_.str.62:
	.asciz	"Compressed from %u to %u bytes\012\000"
	.data
	.globl	_.str.63
_.str.63:
	.asciz	"Simple fuzzy test: step %u total_succeeded: %u\012\000"
	.data
	.globl	_.str.64
_.str.64:
	.asciz	"uncompress failed!\012\000"
	.data
	.globl	_.str.65
_.str.65:
	.asciz	"Decompressed from %u to %u bytes\012\000"
	.data
	.globl	_.str.66
_.str.66:
	.asciz	"Decompression failed!\012\000"
	.data
	.globl	_.str.67
_.str.67:
	.asciz	"Success.\012\000"
	.data
	.globl	___func__.tdefl_compress_normal
___func__.tdefl_compress_normal:
	.asciz	"tdefl_compress_normal\000"
	.data
	.globl	_.str.68
_.str.68:
	.asciz	"d->m_lookahead_size >= len_to_move\000"
	.data
	.globl	___func__.tdefl_find_match
___func__.tdefl_find_match:
	.asciz	"tdefl_find_match\000"
	.data
	.globl	_.str.69
_.str.69:
	.asciz	"max_match_len <= TDEFL_MAX_MATCH_LEN\000"
	.data
	.globl	___func__.tdefl_record_match
___func__.tdefl_record_match:
	.asciz	"tdefl_record_match\000"
	.data
	.globl	_.str.70
_.str.70:
	.asciz	"(match_len >= TDEFL_MIN_MATCH_LEN) && (match_dist >= 1) && (match_dist <= TDEFL_LZ_DICT_SIZE)\000"
	.data
	.globl	_s_tdefl_small_dist_sym
_s_tdefl_small_dist_sym:
	.asciz	
	.data
	.globl	_s_tdefl_large_dist_sym
_s_tdefl_large_dist_sym:
	.asciz	
	.data
	.globl	_s_tdefl_len_sym
_s_tdefl_len_sym:
	.quad	257
	.quad	258
	.quad	259
	.quad	260
	.quad	261
	.quad	262
	.quad	263
	.quad	264
	.quad	265
	.quad	265
	.quad	266
	.quad	266
	.quad	267
	.quad	267
	.quad	268
	.quad	268
	.quad	269
	.quad	269
	.quad	269
	.quad	269
	.quad	270
	.quad	270
	.quad	270
	.quad	270
	.quad	271
	.quad	271
	.quad	271
	.quad	271
	.quad	272
	.quad	272
	.quad	272
	.quad	272
	.quad	273
	.quad	273
	.quad	273
	.quad	273
	.quad	273
	.quad	273
	.quad	273
	.quad	273
	.quad	274
	.quad	274
	.quad	274
	.quad	274
	.quad	274
	.quad	274
	.quad	274
	.quad	274
	.quad	275
	.quad	275
	.quad	275
	.quad	275
	.quad	275
	.quad	275
	.quad	275
	.quad	275
	.quad	276
	.quad	276
	.quad	276
	.quad	276
	.quad	276
	.quad	276
	.quad	276
	.quad	276
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	277
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	278
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	279
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	280
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	281
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	282
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	283
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	284
	.quad	285
	.data
	.globl	___func__.tdefl_flush_block
___func__.tdefl_flush_block:
	.asciz	"tdefl_flush_block\000"
	.data
	.globl	_.str.71
_.str.71:
	.asciz	"!d->m_output_flush_remaining\000"
	.data
	.globl	_.str.72
_.str.72:
	.asciz	"bits <= ((1U << len) - 1U)\000"
	.data
	.globl	_.str.73
_.str.73:
	.asciz	"d->m_pOutput_buf < d->m_pOutput_buf_end\000"
	.data
	.globl	___func__.tdefl_start_static_block
___func__.tdefl_start_static_block:
	.asciz	"tdefl_start_static_block\000"
	.data
	.globl	___func__.tdefl_start_dynamic_block
___func__.tdefl_start_dynamic_block:
	.asciz	"tdefl_start_dynamic_block\000"
	.data
	.globl	_s_tdefl_packed_code_size_syms_swizzle
_s_tdefl_packed_code_size_syms_swizzle:
	.asciz	"\020\021\022\000\010\007\011\006\012\005\013\004\014\003\015\002\016\001\017"
	.data
	.globl	_.str.74
_.str.74:
	.asciz	"code < TDEFL_MAX_HUFF_SYMBOLS_2\000"
	.data
	.globl	___func__.tdefl_compress_lz_codes
___func__.tdefl_compress_lz_codes:
	.asciz	"tdefl_compress_lz_codes\000"
	.data
	.globl	_.str.75
_.str.75:
	.asciz	"d->m_huff_code_sizes[0][s_tdefl_len_sym[match_len]]\000"
	.data
	.globl	_mz_bitmasks
_mz_bitmasks:
	.quad	0
	.quad	1
	.quad	3
	.quad	7
	.quad	15
	.quad	31
	.quad	63
	.quad	127
	.quad	255
	.quad	511
	.quad	1023
	.quad	2047
	.quad	4095
	.quad	8191
	.quad	16383
	.quad	32767
	.quad	65535
	.data
	.globl	_s_tdefl_len_extra
_s_tdefl_len_extra:
	.asciz	
	.data
	.globl	_s_tdefl_small_dist_extra
_s_tdefl_small_dist_extra:
	.asciz	
	.data
	.globl	_s_tdefl_large_dist_extra
_s_tdefl_large_dist_extra:
	.asciz	"\000\000\010\010\011\011\011\011\012\012\012\012\012\012\012\012\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\013\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\014\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015"
	.data
	.globl	_.str.76
_.str.76:
	.asciz	"d->m_huff_code_sizes[1][sym]\000"
	.data
	.globl	_.str.77
_.str.77:
	.asciz	"d->m_huff_code_sizes[0][lit]\000"
	.data
	.globl	___func__.mz_zip_array_ensure_capacity
___func__.mz_zip_array_ensure_capacity:
	.asciz	"mz_zip_array_ensure_capacity\000"
	.data
	.globl	_.str.78
_.str.78:
	.asciz	"pArray->m_element_size\000"
	.data
	.globl	_.str.79
_.str.79:
	.asciz	"Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.Good morning Dr. Chandra. This is Hal. I am ready for my first lesson.\000"
	.text
	.globl	_mz_adler32
_mz_adler32:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%r13
	popq	%r14
	# %4 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %5 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i64 %0, i64* %5
	movq	%r14, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%r13, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %7
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %12 = load i64, i64* %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = and i64 %12, 65535
	movq	%rdx, %rax
	movq	$65535, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %14 = trunc i64 %13 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %14, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %15 = load i64, i64* %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = lshr i64 %15, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %17 = trunc i64 %16 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %17, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %18 = load i64, i64* %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %19 = urem i64 %18, 5552
	movq	%rdx, %rax
	movq	$5552, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %rdx
	# store i64 %19, i64* %11
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %20 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %21 = icmp ne i8* %20, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %21, label %23, label %22
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_adler3222
	jmp	mz_adler3223
	.text
mz_adler3222:
	# store i64 1, i64* %4
	movq	$1, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %145
	jmp	mz_adler32145
	.text
mz_adler3223:
	# br label %24
	jmp	mz_adler3224
	.text
mz_adler3224:
	# %25 = load i64, i64* %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = icmp ne i64 %25, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %26, label %27, label %139
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_adler32139
	jmp	mz_adler3227
	.text
mz_adler3227:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %28
	jmp	mz_adler3228
	.text
mz_adler3228:
	# %29 = load i32, i32* %8
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %30 = add i32 %29, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %31 = zext i32 %30 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %32 = load i64, i64* %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %33 = icmp ult i64 %31, %32
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %33, label %34, label %112
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_adler32112
	jmp	mz_adler3234
	.text
mz_adler3234:
	# %35 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = getelementptr i8, i8* %35, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %37 = load i8, i8* %36
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %38 = zext i8 %37 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %39 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = add i32 %39, %38
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %40, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %41 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %42 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %43 = add i32 %42, %41
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %43, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %44 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = getelementptr i8, i8* %44, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %46 = load i8, i8* %45
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %47 = zext i8 %46 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %48 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %49 = add i32 %48, %47
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %49, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %50 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %51 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %52 = add i32 %51, %50
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %52, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %53 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %54 = getelementptr i8, i8* %53, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %55 = load i8, i8* %54
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %56 = zext i8 %55 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %57 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %58 = add i32 %57, %56
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %58, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %59 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %60 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %61 = add i32 %60, %59
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %61, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %62 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = getelementptr i8, i8* %62, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %64 = load i8, i8* %63
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %65 = zext i8 %64 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %66 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %67 = add i32 %66, %65
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %67, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %68 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %69 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %70 = add i32 %69, %68
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %70, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %71 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %72 = getelementptr i8, i8* %71, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %73 = load i8, i8* %72
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %74 = zext i8 %73 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %75 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %76 = add i32 %75, %74
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %76, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %77 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %78 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %79 = add i32 %78, %77
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %79, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %80 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %81 = getelementptr i8, i8* %80, i64 5
	movq	%rdx, %rcx
	movq	$5, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %82 = load i8, i8* %81
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %83 = zext i8 %82 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %84 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %85 = add i32 %84, %83
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %85, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %86 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %87 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %88 = add i32 %87, %86
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %88, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %89 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = getelementptr i8, i8* %89, i64 6
	movq	%rdx, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %91 = load i8, i8* %90
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %92 = zext i8 %91 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %93 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %94 = add i32 %93, %92
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %94, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %95 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %96 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %97 = add i32 %96, %95
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %97, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %98 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = getelementptr i8, i8* %98, i64 7
	movq	%rdx, %rcx
	movq	$7, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %100 = load i8, i8* %99
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %101 = zext i8 %100 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %102 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %103 = add i32 %102, %101
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %103, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %104 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %105 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %106 = add i32 %105, %104
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %106, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %107
	jmp	mz_adler32107
	.text
mz_adler32107:
	# %108 = load i32, i32* %8
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %109 = add i32 %108, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %109, i32* %8
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %110 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr i8, i8* %110, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %111, i8** %6
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %28
	jmp	mz_adler3228
	.text
mz_adler32112:
	# br label %113
	jmp	mz_adler32113
	.text
mz_adler32113:
	# %114 = load i32, i32* %8
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %115 = zext i32 %114 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %116 = load i64, i64* %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %117 = icmp ult i64 %115, %116
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %117, label %118, label %131
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_adler32131
	jmp	mz_adler32118
	.text
mz_adler32118:
	# %119 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %120 = getelementptr i8, i8* %119, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %120, i8** %6
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %121 = load i8, i8* %119
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %122 = zext i8 %121 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %123 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %124 = add i32 %123, %122
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %124, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %125 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %126 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %127 = add i32 %126, %125
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %127, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %128
	jmp	mz_adler32128
	.text
mz_adler32128:
	# %129 = load i32, i32* %8
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %130 = add i32 %129, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %130, i32* %8
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %113
	jmp	mz_adler32113
	.text
mz_adler32131:
	# %132 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %133 = urem i32 %132, 65521
	movq	%rdx, %rax
	movq	$65521, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %rdx
	# store i32 %133, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %134 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %135 = urem i32 %134, 65521
	movq	%rdx, %rax
	movq	$65521, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %rdx
	# store i32 %135, i32* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %136 = load i64, i64* %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %137 = load i64, i64* %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %138 = sub i64 %137, %136
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %138, i64* %7
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i64 5552, i64* %11
	movq	$5552, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %24
	jmp	mz_adler3224
	.text
mz_adler32139:
	# %140 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %141 = shl i32 %140, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %142 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %143 = add i32 %141, %142
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %144 = zext i32 %143 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %144, i64* %4
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %145
	jmp	mz_adler32145
	.text
mz_adler32145:
	# %146 = load i64, i64* %4
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %146
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_crc32
_mz_crc32:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%r9
	popq	%r10
	popq	%r11
	# %4 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i64 %0, i64* %4
	movq	%r11, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %5
	movq	%r10, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %6
	movq	%r9, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %9 = load i64, i64* %4
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %10 = trunc i64 %9 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %11 = xor i32 %10, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %11, i32* %7
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %12 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %12, i8** %8
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %13
	jmp	mz_crc3213
	.text
mz_crc3213:
	# %14 = load i64, i64* %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %15 = icmp uge i64 %14, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %15, label %16, label %73
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_crc3273
	jmp	mz_crc3216
	.text
mz_crc3216:
	# %17 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %18 = lshr i32 %17, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %19 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %20 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %21 = getelementptr i8, i8* %20, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %22 = load i8, i8* %21
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %23 = zext i8 %22 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %24 = xor i32 %19, %23
	movq	%r9, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %25 = and i32 %24, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %26 = zext i32 %25 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %27 = getelementptr [256 x i32], i8* @mz_crc32.s_crc_table, i64 0, i64 %26
	leaq	_mz_crc32.s_crc_table(%rip), %rcx
	movq	$0, %rax
	imulq	$1024, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %28 = load i32, i32* %27
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %29 = xor i32 %18, %28
	movq	%r8, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %29, i32* %7
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %30 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %31 = lshr i32 %30, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %32 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %33 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr i8, i8* %33, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %35 = load i8, i8* %34
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %36 = zext i8 %35 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %37 = xor i32 %32, %36
	movq	%r9, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %38 = and i32 %37, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %39 = zext i32 %38 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = getelementptr [256 x i32], i8* @mz_crc32.s_crc_table, i64 0, i64 %39
	leaq	_mz_crc32.s_crc_table(%rip), %rcx
	movq	$0, %rax
	imulq	$1024, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %41 = load i32, i32* %40
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %42 = xor i32 %31, %41
	movq	%r8, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %42, i32* %7
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %43 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %44 = lshr i32 %43, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %45 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %46 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = getelementptr i8, i8* %46, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %48 = load i8, i8* %47
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %49 = zext i8 %48 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %50 = xor i32 %45, %49
	movq	%r9, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %51 = and i32 %50, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %52 = zext i32 %51 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %53 = getelementptr [256 x i32], i8* @mz_crc32.s_crc_table, i64 0, i64 %52
	leaq	_mz_crc32.s_crc_table(%rip), %rcx
	movq	$0, %rax
	imulq	$1024, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %54 = load i32, i32* %53
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %55 = xor i32 %44, %54
	movq	%r8, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %55, i32* %7
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %56 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %57 = lshr i32 %56, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %58 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %59 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = getelementptr i8, i8* %59, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %61 = load i8, i8* %60
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %62 = zext i8 %61 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %63 = xor i32 %58, %62
	movq	%r9, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %64 = and i32 %63, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %65 = zext i32 %64 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %66 = getelementptr [256 x i32], i8* @mz_crc32.s_crc_table, i64 0, i64 %65
	leaq	_mz_crc32.s_crc_table(%rip), %rcx
	movq	$0, %rax
	imulq	$1024, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %67 = load i32, i32* %66
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %68 = xor i32 %57, %67
	movq	%r8, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %68, i32* %7
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %69 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %70 = getelementptr i8, i8* %69, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %70, i8** %8
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %71 = load i64, i64* %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %72 = sub i64 %71, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %72, i64* %6
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %13
	jmp	mz_crc3213
	.text
mz_crc3273:
	# br label %74
	jmp	mz_crc3274
	.text
mz_crc3274:
	# %75 = load i64, i64* %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %76 = icmp ne i64 %75, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %76, label %77, label %95
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_crc3295
	jmp	mz_crc3277
	.text
mz_crc3277:
	# %78 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %79 = lshr i32 %78, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %80 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %81 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %82 = getelementptr i8, i8* %81, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %83 = load i8, i8* %82
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %84 = zext i8 %83 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %85 = xor i32 %80, %84
	movq	%r9, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %86 = and i32 %85, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %87 = zext i32 %86 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %88 = getelementptr [256 x i32], i8* @mz_crc32.s_crc_table, i64 0, i64 %87
	leaq	_mz_crc32.s_crc_table(%rip), %rcx
	movq	$0, %rax
	imulq	$1024, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %89 = load i32, i32* %88
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %90 = xor i32 %79, %89
	movq	%r8, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %90, i32* %7
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %91 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = getelementptr i8, i8* %91, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %92, i8** %8
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %93 = load i64, i64* %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %94 = add i64 %93, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %94, i64* %6
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %74
	jmp	mz_crc3274
	.text
mz_crc3295:
	# %96 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %97 = xor i32 %96, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %98 = zext i32 %97 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i64 %98
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_free
_mz_free:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %3)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_miniz_def_alloc_func
_miniz_def_alloc_func:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdi
	popq	%r8
	popq	%r9
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %5 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %4
	movq	%r9, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %5
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %6
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %7 = load i8*, i8** %4
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %8 = load i64, i64* %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %9 = load i64, i64* %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %10 = load i64, i64* %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %11 = load i64, i64* %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %12 = mul i64 %10, %11
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %13 = call i8* @malloc (i64 %12)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i8* %13
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_miniz_def_free_func
_miniz_def_free_func:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rsi
	popq	%rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %4
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %5 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %6 = load i8*, i8** %4
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %7 = load i8*, i8** %4
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %7)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_miniz_def_realloc_func
_miniz_def_realloc_func:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r9
	popq	%r10
	popq	%r11
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%r10, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %7
	movq	%r9, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %8
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %9 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %10 = load i8*, i8** %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %11 = load i64, i64* %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %12 = load i64, i64* %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = load i8*, i8** %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %14 = load i64, i64* %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = load i64, i64* %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = mul i64 %14, %15
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %17 = call i8* @realloc (i8* %13, i64 %16)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_realloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i8* %17
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_version
_mz_version:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	# ret i8* @.str
	leaq	_.str(%rip), %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_deflateInit
_mz_deflateInit:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %4
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %5 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %6 = load i32, i32* %4
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %7 = call i32 @mz_deflateInit2 (i8* %5, i32 %6, i32 8, i32 15, i32 9, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$8, %rax
	pushq	%rax
	movq	$15, %rax
	pushq	%rax
	movq	$9, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_deflateInit2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %7
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_deflateInit2
_mz_deflateInit2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$24, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	popq	%r14
	popq	%r15
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %8
	movq	-8(%rbp), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %9
	movq	-16(%rbp), %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %10
	movq	-24(%rbp), %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i32 %3, i32* %11
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# store i32 %4, i32* %12
	movq	%r15, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# store i32 %5, i32* %13
	movq	%r14, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %16 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %r14
	movl	%eax, %r14d
	# %17 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %18 = load i32, i32* %13
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %19 = call i32 @tdefl_create_comp_flags_from_zip_params (i32 %16, i32 %17, i32 %18)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r14, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_create_comp_flags_from_zip_params
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %20 = or i32 8192, %19
	movq	$8192, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %20, i32* %15
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %21 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %22 = icmp ne i8* %21, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %22, label %24, label %23
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit223
	jmp	mz_deflateInit224
	.text
mz_deflateInit223:
	# store i32 -2, i32* %7
	movq	$-2, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %92
	jmp	mz_deflateInit292
	.text
mz_deflateInit224:
	# %25 = load i32, i32* %10
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %26 = icmp ne i32 %25, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %26, label %40, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit227
	jmp	mz_deflateInit240
	.text
mz_deflateInit227:
	# %28 = load i32, i32* %12
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %29 = icmp slt i32 %28, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %29, label %40, label %30
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit230
	jmp	mz_deflateInit240
	.text
mz_deflateInit230:
	# %31 = load i32, i32* %12
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %32 = icmp sgt i32 %31, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setg	%dl
	# br i1 %32, label %40, label %33
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit233
	jmp	mz_deflateInit240
	.text
mz_deflateInit233:
	# %34 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %35 = icmp ne i32 %34, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %35, label %36, label %41
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit241
	jmp	mz_deflateInit236
	.text
mz_deflateInit236:
	# %37 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %38 = sub i32 0, %37
	movq	$0, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %39 = icmp ne i32 %38, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %39, label %40, label %41
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit241
	jmp	mz_deflateInit240
	.text
mz_deflateInit240:
	# store i32 -10000, i32* %7
	movq	$-10000, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %92
	jmp	mz_deflateInit292
	.text
mz_deflateInit241:
	# %42 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %43 = getelementptr %struct.mz_stream_s, i8* %42, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %43
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %44 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = getelementptr %struct.mz_stream_s, i8* %44, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 1, i64* %45
	movq	$1, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %46 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = getelementptr %struct.mz_stream_s, i8* %46, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %47
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %48 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = getelementptr %struct.mz_stream_s, i8* %48, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %49
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %50 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %51 = getelementptr %struct.mz_stream_s, i8* %50, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %51
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %52 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = getelementptr %struct.mz_stream_s, i8* %52, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %53
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %54 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = getelementptr %struct.mz_stream_s, i8* %54, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %56 = load i8*, i8** %55
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %57 = icmp ne i8* %56, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %57, label %61, label %58
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit258
	jmp	mz_deflateInit261
	.text
mz_deflateInit258:
	# %59 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = getelementptr %struct.mz_stream_s, i8* %59, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @miniz_def_alloc_func, i8** %60
	leaq	_miniz_def_alloc_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %61
	jmp	mz_deflateInit261
	.text
mz_deflateInit261:
	# %62 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = getelementptr %struct.mz_stream_s, i8* %62, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %64 = load i8*, i8** %63
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = icmp ne i8* %64, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %65, label %69, label %66
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit266
	jmp	mz_deflateInit269
	.text
mz_deflateInit266:
	# %67 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = getelementptr %struct.mz_stream_s, i8* %67, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @miniz_def_free_func, i8** %68
	leaq	_miniz_def_free_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %69
	jmp	mz_deflateInit269
	.text
mz_deflateInit269:
	# %70 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = getelementptr %struct.mz_stream_s, i8* %70, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %72 = load i8*, i8** %71
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %73 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %74 = getelementptr %struct.mz_stream_s, i8* %73, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %75 = load i8*, i8** %74
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %76 = call i8* %72 (i8* %75, i64 1, i64 319352)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$319352, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %76, i8** %14
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %77 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %78 = icmp ne i8* %77, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %78, label %80, label %79
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit279
	jmp	mz_deflateInit280
	.text
mz_deflateInit279:
	# store i32 -4, i32* %7
	movq	$-4, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %92
	jmp	mz_deflateInit292
	.text
mz_deflateInit280:
	# %81 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %82 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %83 = getelementptr %struct.mz_stream_s, i8* %82, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %81, i8** %83
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %84 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %85 = load i32, i32* %15
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %86 = call i32 @tdefl_init (i8* %84, i8* null, i8* null, i32 %85)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_init
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %87 = icmp ne i32 %86, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %87, label %88, label %91
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateInit291
	jmp	mz_deflateInit288
	.text
mz_deflateInit288:
	# %89 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = call i32 @mz_deflateEnd (i8* %89)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_deflateEnd
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 -10000, i32* %7
	movq	$-10000, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %92
	jmp	mz_deflateInit292
	.text
mz_deflateInit291:
	# store i32 0, i32* %7
	movq	$0, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %92
	jmp	mz_deflateInit292
	.text
mz_deflateInit292:
	# %93 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %93
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_create_comp_flags_from_zip_params
_tdefl_create_comp_flags_from_zip_params:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%rdi
	popq	%r9
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i32 %0, i32* %4
	movq	%r9, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# store i32 %1, i32* %5
	movq	%rdi, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %6
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %8 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %9 = icmp sge i32 %8, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setge	%dil
	# br i1 %9, label %10, label %18
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_create_comp_flags_from_zip_params18
	jmp	tdefl_create_comp_flags_from_zip_params10
	.text
tdefl_create_comp_flags_from_zip_params10:
	# %11 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %12 = icmp slt i32 10, %11
	movq	$10, %rax
	movq	%rdi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setl	%dil
	# br i1 %12, label %13, label %14
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_create_comp_flags_from_zip_params14
	jmp	tdefl_create_comp_flags_from_zip_params13
	.text
tdefl_create_comp_flags_from_zip_params13:
	# br label %16
	movq	$10, %rdx
	jmp	tdefl_create_comp_flags_from_zip_params16
	.text
tdefl_create_comp_flags_from_zip_params14:
	# %15 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# br label %16
	jmp	tdefl_create_comp_flags_from_zip_params16
	.text
tdefl_create_comp_flags_from_zip_params16:
	# %17 = phi i32 [10, %13], [%15, %14]
	# br label %19
	jmp	tdefl_create_comp_flags_from_zip_params19
	.text
tdefl_create_comp_flags_from_zip_params18:
	# br label %19
	movq	$6, %rdx
	jmp	tdefl_create_comp_flags_from_zip_params19
	.text
tdefl_create_comp_flags_from_zip_params19:
	# %20 = phi i32 [%17, %16], [6, %18]
	# %21 = sext i32 %20 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %22 = getelementptr [11 x i32], i8* @s_tdefl_num_probes, i64 0, i64 %21
	leaq	_s_tdefl_num_probes(%rip), %rcx
	movq	$0, %rax
	imulq	$44, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %23 = load i32, i32* %22
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %24 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %25 = icmp sle i32 %24, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setle	%dil
	# %26 = zext i1 %25 to i64
	movq	%rdi, %rax
	movq	%rax, %rdx
	# %27 = select i1 %25, i32 16384, i32 0
	movq	%rdi, %rcx
	movq	$16384, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# %28 = or i32 %23, %27
	movq	%r9, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %28, i32* %7
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %29 = load i32, i32* %5
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %30 = icmp sgt i32 %29, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setg	%dl
	# br i1 %30, label %31, label %34
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_create_comp_flags_from_zip_params34
	jmp	tdefl_create_comp_flags_from_zip_params31
	.text
tdefl_create_comp_flags_from_zip_params31:
	# %32 = load i32, i32* %7
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %33 = or i32 %32, 4096
	movq	%rdx, %rax
	movq	$4096, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %33, i32* %7
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %34
	jmp	tdefl_create_comp_flags_from_zip_params34
	.text
tdefl_create_comp_flags_from_zip_params34:
	# %35 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %36 = icmp ne i32 %35, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %36, label %40, label %37
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_create_comp_flags_from_zip_params37
	jmp	tdefl_create_comp_flags_from_zip_params40
	.text
tdefl_create_comp_flags_from_zip_params37:
	# %38 = load i32, i32* %7
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %39 = or i32 %38, 524288
	movq	%rdx, %rax
	movq	$524288, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %39, i32* %7
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %68
	jmp	tdefl_create_comp_flags_from_zip_params68
	.text
tdefl_create_comp_flags_from_zip_params40:
	# %41 = load i32, i32* %6
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %42 = icmp eq i32 %41, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %42, label %43, label %46
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_create_comp_flags_from_zip_params46
	jmp	tdefl_create_comp_flags_from_zip_params43
	.text
tdefl_create_comp_flags_from_zip_params43:
	# %44 = load i32, i32* %7
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %45 = or i32 %44, 131072
	movq	%rdx, %rax
	movq	$131072, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %45, i32* %7
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %67
	jmp	tdefl_create_comp_flags_from_zip_params67
	.text
tdefl_create_comp_flags_from_zip_params46:
	# %47 = load i32, i32* %6
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %48 = icmp eq i32 %47, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %48, label %49, label %52
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_create_comp_flags_from_zip_params52
	jmp	tdefl_create_comp_flags_from_zip_params49
	.text
tdefl_create_comp_flags_from_zip_params49:
	# %50 = load i32, i32* %7
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %51 = and i32 %50, -4096
	movq	%rdx, %rax
	movq	$-4096, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %51, i32* %7
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %66
	jmp	tdefl_create_comp_flags_from_zip_params66
	.text
tdefl_create_comp_flags_from_zip_params52:
	# %53 = load i32, i32* %6
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %54 = icmp eq i32 %53, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %54, label %55, label %58
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_create_comp_flags_from_zip_params58
	jmp	tdefl_create_comp_flags_from_zip_params55
	.text
tdefl_create_comp_flags_from_zip_params55:
	# %56 = load i32, i32* %7
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %57 = or i32 %56, 262144
	movq	%rdx, %rax
	movq	$262144, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %57, i32* %7
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %65
	jmp	tdefl_create_comp_flags_from_zip_params65
	.text
tdefl_create_comp_flags_from_zip_params58:
	# %59 = load i32, i32* %6
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %60 = icmp eq i32 %59, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %60, label %61, label %64
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_create_comp_flags_from_zip_params64
	jmp	tdefl_create_comp_flags_from_zip_params61
	.text
tdefl_create_comp_flags_from_zip_params61:
	# %62 = load i32, i32* %7
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %63 = or i32 %62, 65536
	movq	%rdx, %rax
	movq	$65536, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %63, i32* %7
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %64
	jmp	tdefl_create_comp_flags_from_zip_params64
	.text
tdefl_create_comp_flags_from_zip_params64:
	# br label %65
	jmp	tdefl_create_comp_flags_from_zip_params65
	.text
tdefl_create_comp_flags_from_zip_params65:
	# br label %66
	jmp	tdefl_create_comp_flags_from_zip_params66
	.text
tdefl_create_comp_flags_from_zip_params66:
	# br label %67
	jmp	tdefl_create_comp_flags_from_zip_params67
	.text
tdefl_create_comp_flags_from_zip_params67:
	# br label %68
	jmp	tdefl_create_comp_flags_from_zip_params68
	.text
tdefl_create_comp_flags_from_zip_params68:
	# %69 = load i32, i32* %7
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %69
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_init
_tdefl_init:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r9
	popq	%r10
	popq	%r11
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%r10, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %7
	movq	%r9, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %8
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %9 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %10 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %11 = getelementptr %struct.tdefl_compressor, i8* %10, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %9, i8** %11
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %12 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %13 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.tdefl_compressor, i8* %13, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %12, i8** %14
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %15 = load i32, i32* %8
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %16 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %17 = getelementptr %struct.tdefl_compressor, i8* %16, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %15, i32* %17
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %18 = load i32, i32* %8
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %19 = and i32 %18, 4095
	movq	%rdx, %rax
	movq	$4095, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %20 = add i32 %19, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %21 = sdiv i32 %20, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cqto	
	idivl	%ecx
	movq	%rax, %rdx
	# %22 = add i32 1, %21
	movq	$1, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %23 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %24 = getelementptr %struct.tdefl_compressor, i8* %23, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %25 = getelementptr [2 x i32], i8* %24, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %22, i32* %25
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %26 = load i32, i32* %8
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %27 = and i32 %26, 16384
	movq	%rdx, %rax
	movq	$16384, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %28 = icmp ne i32 %27, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %29 = zext i1 %28 to i32
	movq	%rdx, %rax
	movq	%rax, %rdi
	# %30 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %31 = getelementptr %struct.tdefl_compressor, i8* %30, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %29, i32* %31
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %32 = load i32, i32* %8
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %33 = and i32 %32, 4095
	movq	%rdx, %rax
	movq	$4095, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %34 = ashr i32 %33, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %35 = add i32 %34, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %36 = sdiv i32 %35, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cqto	
	idivl	%ecx
	movq	%rax, %rdx
	# %37 = add i32 1, %36
	movq	$1, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %38 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %39 = getelementptr %struct.tdefl_compressor, i8* %38, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %40 = getelementptr [2 x i32], i8* %39, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %37, i32* %40
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %41 = load i32, i32* %8
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %42 = and i32 %41, 32768
	movq	%rdx, %rax
	movq	$32768, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %43 = icmp ne i32 %42, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %43, label %53, label %44
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_init44
	jmp	tdefl_init53
	.text
tdefl_init44:
	# %45 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %46 = getelementptr %struct.tdefl_compressor, i8* %45, i32 0, i32 41
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$41, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %47 = getelementptr [32768 x i16], i8* %46, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %48 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = getelementptr %struct.tdefl_compressor, i8* %48, i32 0, i32 41
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$41, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %50 = getelementptr [32768 x i16], i8* %49, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %51 = call i64 @llvm.objectsize.i64.p0 (i8* %50, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	movq $-1, %rax
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %52 = call i8* @__memset_chk (i8* %47, i32 0, i64 65536, i64 %51)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$65536, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %53
	jmp	tdefl_init53
	.text
tdefl_init53:
	# %54 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = getelementptr %struct.tdefl_compressor, i8* %54, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %55
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %56 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %57 = getelementptr %struct.tdefl_compressor, i8* %56, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %57
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %58 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = getelementptr %struct.tdefl_compressor, i8* %58, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %59
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %60 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %61 = getelementptr %struct.tdefl_compressor, i8* %60, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %61
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %62 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = getelementptr %struct.tdefl_compressor, i8* %62, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %63
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %64 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = getelementptr %struct.tdefl_compressor, i8* %64, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %65
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %66 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = getelementptr %struct.tdefl_compressor, i8* %66, i32 0, i32 25
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$25, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %67
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %68 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %69 = getelementptr %struct.tdefl_compressor, i8* %68, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %69
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %70 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = getelementptr %struct.tdefl_compressor, i8* %70, i32 0, i32 24
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$24, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %71
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %72 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %73 = getelementptr %struct.tdefl_compressor, i8* %72, i32 0, i32 23
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$23, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %73
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %74 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %75 = getelementptr %struct.tdefl_compressor, i8* %74, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %75
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %76 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = getelementptr %struct.tdefl_compressor, i8* %76, i32 0, i32 21
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %77
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %78 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %79 = getelementptr %struct.tdefl_compressor, i8* %78, i32 0, i32 39
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$39, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %80 = getelementptr [65536 x i8], i8* %79, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %81 = getelementptr i8, i8* %80, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %82 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %83 = getelementptr %struct.tdefl_compressor, i8* %82, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %81, i8** %83
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %84 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %85 = getelementptr %struct.tdefl_compressor, i8* %84, i32 0, i32 39
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$39, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %86 = getelementptr [65536 x i8], i8* %85, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %87 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = getelementptr %struct.tdefl_compressor, i8* %87, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %86, i8** %88
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %89 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = getelementptr %struct.tdefl_compressor, i8* %89, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %91 = load i8*, i8** %90
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 0, i8* %91
	movq	$0, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %92 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %93 = getelementptr %struct.tdefl_compressor, i8* %92, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 8, i32* %93
	movq	$8, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %94 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %95 = getelementptr %struct.tdefl_compressor, i8* %94, i32 0, i32 42
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$42, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %96 = getelementptr [85196 x i8], i8* %95, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$85196, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %97 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %98 = getelementptr %struct.tdefl_compressor, i8* %97, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %96, i8** %98
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %99 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %100 = getelementptr %struct.tdefl_compressor, i8* %99, i32 0, i32 42
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$42, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %101 = getelementptr [85196 x i8], i8* %100, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$85196, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %102 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %103 = getelementptr %struct.tdefl_compressor, i8* %102, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %101, i8** %103
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %104 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %105 = getelementptr %struct.tdefl_compressor, i8* %104, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %105
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %106 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %107 = getelementptr %struct.tdefl_compressor, i8* %106, i32 0, i32 20
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$20, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %107
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %108 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %109 = getelementptr %struct.tdefl_compressor, i8* %108, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %109
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %110 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr %struct.tdefl_compressor, i8* %110, i32 0, i32 18
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %111
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %112 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %113 = getelementptr %struct.tdefl_compressor, i8* %112, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %113
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %114 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = getelementptr %struct.tdefl_compressor, i8* %114, i32 0, i32 27
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$27, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %115
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %116 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %117 = getelementptr %struct.tdefl_compressor, i8* %116, i32 0, i32 28
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$28, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %117
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %118 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %119 = getelementptr %struct.tdefl_compressor, i8* %118, i32 0, i32 29
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$29, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %119
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %120 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %121 = getelementptr %struct.tdefl_compressor, i8* %120, i32 0, i32 30
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %121
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %122 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = getelementptr %struct.tdefl_compressor, i8* %122, i32 0, i32 31
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$31, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %123
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %124 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = getelementptr %struct.tdefl_compressor, i8* %124, i32 0, i32 32
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$32, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %125
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %126 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %127 = getelementptr %struct.tdefl_compressor, i8* %126, i32 0, i32 33
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$33, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %127
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %128 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %129 = getelementptr %struct.tdefl_compressor, i8* %128, i32 0, i32 34
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %129
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %130 = load i32, i32* %8
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %131 = and i32 %130, 32768
	movq	%rdx, %rax
	movq	$32768, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %132 = icmp ne i32 %131, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %132, label %142, label %133
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_init133
	jmp	tdefl_init142
	.text
tdefl_init133:
	# %134 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %135 = getelementptr %struct.tdefl_compressor, i8* %134, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %136 = getelementptr [33025 x i8], i8* %135, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %137 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %138 = getelementptr %struct.tdefl_compressor, i8* %137, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %139 = getelementptr [33025 x i8], i8* %138, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %140 = call i64 @llvm.objectsize.i64.p0 (i8* %139, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %141 = call i8* @__memset_chk (i8* %136, i32 0, i64 33025, i64 %140)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$33025, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %142
	jmp	tdefl_init142
	.text
tdefl_init142:
	# %143 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %144 = getelementptr %struct.tdefl_compressor, i8* %143, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %145 = getelementptr [3 x [288 x i16]], i8* %144, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %146 = getelementptr [288 x i16], i8* %145, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %147 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %148 = getelementptr %struct.tdefl_compressor, i8* %147, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %149 = getelementptr [3 x [288 x i16]], i8* %148, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %150 = getelementptr [288 x i16], i8* %149, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %151 = call i64 @llvm.objectsize.i64.p0 (i8* %150, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %152 = call i8* @__memset_chk (i8* %146, i32 0, i64 576, i64 %151)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$576, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %153 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %154 = getelementptr %struct.tdefl_compressor, i8* %153, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %155 = getelementptr [3 x [288 x i16]], i8* %154, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %156 = getelementptr [288 x i16], i8* %155, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %157 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %158 = getelementptr %struct.tdefl_compressor, i8* %157, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %159 = getelementptr [3 x [288 x i16]], i8* %158, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %160 = getelementptr [288 x i16], i8* %159, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %161 = call i64 @llvm.objectsize.i64.p0 (i8* %160, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %162 = call i8* @__memset_chk (i8* %156, i32 0, i64 64, i64 %161)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$64, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 0
	movq	$0, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_deflateEnd
_mz_deflateEnd:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %7, label %6
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateEnd6
	jmp	mz_deflateEnd7
	.text
mz_deflateEnd6:
	# store i32 -2, i32* %2
	movq	$-2, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %25
	jmp	mz_deflateEnd25
	.text
mz_deflateEnd7:
	# %8 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %9 = getelementptr %struct.mz_stream_s, i8* %8, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %10 = load i8*, i8** %9
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %11 = icmp ne i8* %10, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %11, label %12, label %24
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateEnd24
	jmp	mz_deflateEnd12
	.text
mz_deflateEnd12:
	# %13 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %14 = getelementptr %struct.mz_stream_s, i8* %13, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %15 = load i8*, i8** %14
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %16 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %17 = getelementptr %struct.mz_stream_s, i8* %16, i32 0, i32 10
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %18 = load i8*, i8** %17
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %19 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = getelementptr %struct.mz_stream_s, i8* %19, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %21 = load i8*, i8** %20
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void %15 (i8* %18, i8* %21)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %22 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = getelementptr %struct.mz_stream_s, i8* %22, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %23
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %24
	jmp	mz_deflateEnd24
	.text
mz_deflateEnd24:
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %25
	jmp	mz_deflateEnd25
	.text
mz_deflateEnd25:
	# %26 = load i32, i32* %2
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %26
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_deflateReset
_mz_deflateReset:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %6, label %21
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateReset21
	jmp	mz_deflateReset6
	.text
mz_deflateReset6:
	# %7 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = getelementptr %struct.mz_stream_s, i8* %7, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %9 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %10 = icmp ne i8* %9, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %10, label %11, label %21
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateReset21
	jmp	mz_deflateReset11
	.text
mz_deflateReset11:
	# %12 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %13 = getelementptr %struct.mz_stream_s, i8* %12, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %14 = load i8*, i8** %13
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = icmp ne i8* %14, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %15, label %16, label %21
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateReset21
	jmp	mz_deflateReset16
	.text
mz_deflateReset16:
	# %17 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %18 = getelementptr %struct.mz_stream_s, i8* %17, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %19 = load i8*, i8** %18
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = icmp ne i8* %19, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %20, label %22, label %21
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateReset21
	jmp	mz_deflateReset22
	.text
mz_deflateReset21:
	# store i32 -2, i32* %2
	movq	$-2, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %36
	jmp	mz_deflateReset36
	.text
mz_deflateReset22:
	# %23 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %24 = getelementptr %struct.mz_stream_s, i8* %23, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %24
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %25 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %26 = getelementptr %struct.mz_stream_s, i8* %25, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %26
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %27 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %28 = getelementptr %struct.mz_stream_s, i8* %27, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %29 = load i8*, i8** %28
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %30 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %31 = getelementptr %struct.mz_stream_s, i8* %30, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %32 = load i8*, i8** %31
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %33 = getelementptr %struct.tdefl_compressor, i8* %32, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %34 = load i32, i32* %33
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %35 = call i32 @tdefl_init (i8* %29, i8* null, i8* null, i32 %34)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_init
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %36
	jmp	mz_deflateReset36
	.text
mz_deflateReset36:
	# %37 = load i32, i32* %2
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %37
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_deflate
_mz_deflate:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%rsi
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r12
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %4
	movq	%rsi, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %5
	movq	%rbx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %12 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %13 = icmp ne i8* %12, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %13, label %14, label %30
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate30
	jmp	mz_deflate14
	.text
mz_deflate14:
	# %15 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %16 = getelementptr %struct.mz_stream_s, i8* %15, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %17 = load i8*, i8** %16
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %18 = icmp ne i8* %17, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %18, label %19, label %30
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate30
	jmp	mz_deflate19
	.text
mz_deflate19:
	# %20 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %21 = icmp slt i32 %20, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setl	%bl
	# br i1 %21, label %30, label %22
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate22
	jmp	mz_deflate30
	.text
mz_deflate22:
	# %23 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %24 = icmp sgt i32 %23, 4
	movq	%rbx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setg	%bl
	# br i1 %24, label %30, label %25
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate25
	jmp	mz_deflate30
	.text
mz_deflate25:
	# %26 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %27 = getelementptr %struct.mz_stream_s, i8* %26, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %28 = load i8*, i8** %27
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %29 = icmp ne i8* %28, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %29, label %31, label %30
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate30
	jmp	mz_deflate31
	.text
mz_deflate30:
	# store i32 -2, i32* %3
	movq	$-2, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %171
	jmp	mz_deflate171
	.text
mz_deflate31:
	# %32 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %33 = getelementptr %struct.mz_stream_s, i8* %32, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %34 = load i32, i32* %33
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %35 = icmp ne i32 %34, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %35, label %37, label %36
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate36
	jmp	mz_deflate37
	.text
mz_deflate36:
	# store i32 -5, i32* %3
	movq	$-5, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %171
	jmp	mz_deflate171
	.text
mz_deflate37:
	# %38 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %39 = icmp eq i32 %38, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %39, label %40, label %41
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate41
	jmp	mz_deflate40
	.text
mz_deflate40:
	# store i32 2, i32* %5
	movq	$2, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %41
	jmp	mz_deflate41
	.text
mz_deflate41:
	# %42 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %43 = getelementptr %struct.mz_stream_s, i8* %42, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %44 = load i8*, i8** %43
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %45 = getelementptr %struct.tdefl_compressor, i8* %44, i32 0, i32 26
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %46 = load i32, i32* %45
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %47 = icmp eq i32 %46, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %47, label %48, label %53
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate53
	jmp	mz_deflate48
	.text
mz_deflate48:
	# %49 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %50 = icmp eq i32 %49, 4
	movq	%rbx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# %51 = zext i1 %50 to i64
	movq	%rsi, %rax
	movq	%rax, %rbx
	# %52 = select i1 %50, i32 1, i32 -5
	pushq	%rdx
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-5, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rbx
	popq	%rdx
	# store i32 %52, i32* %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %171
	jmp	mz_deflate171
	.text
mz_deflate53:
	# %54 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %55 = getelementptr %struct.mz_stream_s, i8* %54, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %56 = load i64, i64* %55
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i64 %56, i64* %8
	movq	%rbx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %57 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %58 = getelementptr %struct.mz_stream_s, i8* %57, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %59 = load i64, i64* %58
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i64 %59, i64* %9
	movq	%rbx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# br label %60
	jmp	mz_deflate60
	.text
mz_deflate60:
	# %61 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %62 = getelementptr %struct.mz_stream_s, i8* %61, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %63 = load i32, i32* %62
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %64 = zext i32 %63 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i64 %64, i64* %6
	movq	%rbx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %65 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %66 = getelementptr %struct.mz_stream_s, i8* %65, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %67 = load i32, i32* %66
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %68 = zext i32 %67 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i64 %68, i64* %7
	movq	%rbx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %69 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %70 = getelementptr %struct.mz_stream_s, i8* %69, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %71 = load i8*, i8** %70
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %72 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %73 = getelementptr %struct.mz_stream_s, i8* %72, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %74 = load i8*, i8** %73
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %75 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %76 = getelementptr %struct.mz_stream_s, i8* %75, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %77 = load i8*, i8** %76
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %78 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %79 = call i32 @tdefl_compress (i8* %71, i8* %74, i8* %6, i8* %77, i8* %7, i32 %78)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 %79, i32* %11
	movq	%rbx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %80 = load i64, i64* %6
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %81 = trunc i64 %80 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %82 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %83 = getelementptr %struct.mz_stream_s, i8* %82, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %84 = load i8*, i8** %83
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %85 = zext i32 %81 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %86 = getelementptr i8, i8* %84, i64 %85
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %86, i8** %83
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %87 = load i64, i64* %6
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %88 = trunc i64 %87 to i32
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %89 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %90 = getelementptr %struct.mz_stream_s, i8* %89, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %91 = load i32, i32* %90
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %92 = sub i32 %91, %88
	movq	%rbx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %92, i32* %90
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %93 = load i64, i64* %6
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %94 = trunc i64 %93 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %95 = zext i32 %94 to i64
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %96 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %97 = getelementptr %struct.mz_stream_s, i8* %96, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %98 = load i64, i64* %97
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %99 = add i64 %98, %95
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %99, i64* %97
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %100 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %101 = getelementptr %struct.mz_stream_s, i8* %100, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %102 = load i8*, i8** %101
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %103 = call i32 @tdefl_get_adler32 (i8* %102)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_get_adler32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %104 = zext i32 %103 to i64
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %105 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %106 = getelementptr %struct.mz_stream_s, i8* %105, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 %104, i64* %106
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %107 = load i64, i64* %7
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %108 = trunc i64 %107 to i32
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %109 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %110 = getelementptr %struct.mz_stream_s, i8* %109, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %111 = load i8*, i8** %110
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %112 = zext i32 %108 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %113 = getelementptr i8, i8* %111, i64 %112
	movq	%rbx, %rcx
	movq	%rdi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %113, i8** %110
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %114 = load i64, i64* %7
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %115 = trunc i64 %114 to i32
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %116 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %117 = getelementptr %struct.mz_stream_s, i8* %116, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %118 = load i32, i32* %117
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %119 = sub i32 %118, %115
	movq	%rbx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %119, i32* %117
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %120 = load i64, i64* %7
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %121 = trunc i64 %120 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %122 = zext i32 %121 to i64
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %123 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %124 = getelementptr %struct.mz_stream_s, i8* %123, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %125 = load i64, i64* %124
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %126 = add i64 %125, %122
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %126, i64* %124
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %127 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %128 = icmp slt i32 %127, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setl	%bl
	# br i1 %128, label %129, label %130
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate130
	jmp	mz_deflate129
	.text
mz_deflate129:
	# store i32 -2, i32* %10
	movq	$-2, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %169
	jmp	mz_deflate169
	.text
mz_deflate130:
	# %131 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %132 = icmp eq i32 %131, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %132, label %133, label %134
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate134
	jmp	mz_deflate133
	.text
mz_deflate133:
	# store i32 1, i32* %10
	movq	$1, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %169
	jmp	mz_deflate169
	.text
mz_deflate134:
	# %135 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %136 = getelementptr %struct.mz_stream_s, i8* %135, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %137 = load i32, i32* %136
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %138 = icmp ne i32 %137, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %138, label %140, label %139
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate139
	jmp	mz_deflate140
	.text
mz_deflate139:
	# br label %169
	jmp	mz_deflate169
	.text
mz_deflate140:
	# %141 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %142 = getelementptr %struct.mz_stream_s, i8* %141, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %143 = load i32, i32* %142
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %144 = icmp ne i32 %143, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %144, label %165, label %145
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate145
	jmp	mz_deflate165
	.text
mz_deflate145:
	# %146 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %147 = icmp ne i32 %146, 4
	movq	%rbx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %147, label %148, label %165
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate165
	jmp	mz_deflate148
	.text
mz_deflate148:
	# %149 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %150 = icmp ne i32 %149, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %150, label %163, label %151
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate151
	jmp	mz_deflate163
	.text
mz_deflate151:
	# %152 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %153 = getelementptr %struct.mz_stream_s, i8* %152, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %154 = load i64, i64* %153
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %155 = load i64, i64* %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %156 = icmp ne i64 %154, %155
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %156, label %163, label %157
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate157
	jmp	mz_deflate163
	.text
mz_deflate157:
	# %158 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %159 = getelementptr %struct.mz_stream_s, i8* %158, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %160 = load i64, i64* %159
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %161 = load i64, i64* %9
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %162 = icmp ne i64 %160, %161
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %162, label %163, label %164
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflate164
	jmp	mz_deflate163
	.text
mz_deflate163:
	# br label %169
	jmp	mz_deflate169
	.text
mz_deflate164:
	# store i32 -5, i32* %3
	movq	$-5, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %171
	jmp	mz_deflate171
	.text
mz_deflate165:
	# br label %166
	jmp	mz_deflate166
	.text
mz_deflate166:
	# br label %167
	jmp	mz_deflate167
	.text
mz_deflate167:
	# br label %168
	jmp	mz_deflate168
	.text
mz_deflate168:
	# br label %60
	jmp	mz_deflate60
	.text
mz_deflate169:
	# %170 = load i32, i32* %10
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i32 %170, i32* %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %171
	jmp	mz_deflate171
	.text
mz_deflate171:
	# %172 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %172
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compress
_tdefl_compress:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	popq	%r12
	popq	%r13
	popq	%rdx
	popq	%r14
	popq	%r15
	popq	-8(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %8
	movq	-8(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %9
	movq	%r15, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %10
	movq	%r14, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %11
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %4, i8** %12
	movq	%r13, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 %5, i32* %13
	movq	%r12, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %14 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %15 = icmp ne i8* %14, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %15, label %27, label %16
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress16
	jmp	tdefl_compress27
	.text
tdefl_compress16:
	# %17 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = icmp ne i8* %17, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %18, label %19, label %21
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress21
	jmp	tdefl_compress19
	.text
tdefl_compress19:
	# %20 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %20
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %21
	jmp	tdefl_compress21
	.text
tdefl_compress21:
	# %22 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = icmp ne i8* %22, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %23, label %24, label %26
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress26
	jmp	tdefl_compress24
	.text
tdefl_compress24:
	# %25 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %25
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %26
	jmp	tdefl_compress26
	.text
tdefl_compress26:
	# store i32 -2, i32* %7
	movq	$-2, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	tdefl_compress234
	.text
tdefl_compress27:
	# %28 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %29 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %30 = getelementptr %struct.tdefl_compressor, i8* %29, i32 0, i32 27
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$27, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# store i8* %28, i8** %30
	movq	%r14, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %31 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %32 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %33 = getelementptr %struct.tdefl_compressor, i8* %32, i32 0, i32 29
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$29, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# store i8* %31, i8** %33
	movq	%r14, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %34 = load i8*, i8** %11
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %35 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %36 = getelementptr %struct.tdefl_compressor, i8* %35, i32 0, i32 28
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$28, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# store i8* %34, i8** %36
	movq	%r14, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %37 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %38 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %39 = getelementptr %struct.tdefl_compressor, i8* %38, i32 0, i32 30
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# store i8* %37, i8** %39
	movq	%r14, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %40 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %41 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %42 = getelementptr %struct.tdefl_compressor, i8* %41, i32 0, i32 32
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$32, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# store i8* %40, i8** %42
	movq	%r14, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %43 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %44 = icmp ne i8* %43, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %44, label %45, label %48
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress48
	jmp	tdefl_compress45
	.text
tdefl_compress45:
	# %46 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %47 = load i64, i64* %46
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# br label %49
	movq	%r12, %r13
	jmp	tdefl_compress49
	.text
tdefl_compress48:
	# br label %49
	movq	$0, %r13
	jmp	tdefl_compress49
	.text
tdefl_compress49:
	# %50 = phi i64 [%47, %45], [0, %48]
	# %51 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %52 = getelementptr %struct.tdefl_compressor, i8* %51, i32 0, i32 33
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$33, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# store i64 %50, i64* %52
	movq	%r13, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %53 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %54 = getelementptr %struct.tdefl_compressor, i8* %53, i32 0, i32 34
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# store i64 0, i64* %54
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %55 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %r13
	movl	%eax, %r13d
	# %56 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %57 = getelementptr %struct.tdefl_compressor, i8* %56, i32 0, i32 31
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$31, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# store i32 %55, i32* %57
	movq	%r13, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %58 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %59 = getelementptr %struct.tdefl_compressor, i8* %58, i32 0, i32 0
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %60 = load i8*, i8** %59
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %61 = icmp ne i8* %60, null
	movq	%r12, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r12
	setne	%r12b
	# %62 = zext i1 %61 to i32
	movq	%r12, %rax
	movq	%rax, %r12
	# %63 = load i8*, i8** %11
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %64 = icmp ne i8* %63, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %64, label %68, label %65
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rdx
	je	tdefl_compress65
	jmp	tdefl_compress68
	.text
tdefl_compress65:
	# %66 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = icmp ne i8* %66, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br label %68
	jmp	tdefl_compress68
	.text
tdefl_compress68:
	# %69 = phi i1 [1, %49], [%67, %65]
	# %70 = zext i1 %69 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %71 = icmp eq i32 %62, %70
	movq	%r12, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %71, label %105, label %72
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress72
	jmp	tdefl_compress105
	.text
tdefl_compress72:
	# %73 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %74 = getelementptr %struct.tdefl_compressor, i8* %73, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %75 = load i32, i32* %74
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %76 = icmp ne i32 %75, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %76, label %105, label %77
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress77
	jmp	tdefl_compress105
	.text
tdefl_compress77:
	# %78 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %79 = getelementptr %struct.tdefl_compressor, i8* %78, i32 0, i32 25
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$25, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %80 = load i32, i32* %79
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %81 = icmp ne i32 %80, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %81, label %82, label %85
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress85
	jmp	tdefl_compress82
	.text
tdefl_compress82:
	# %83 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %84 = icmp ne i32 %83, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %84, label %105, label %85
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress85
	jmp	tdefl_compress105
	.text
tdefl_compress85:
	# %86 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %87 = icmp ne i8* %86, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %87, label %88, label %95
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress95
	jmp	tdefl_compress88
	.text
tdefl_compress88:
	# %89 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = load i64, i64* %89
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %91 = icmp ne i64 %90, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %91, label %92, label %95
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress95
	jmp	tdefl_compress92
	.text
tdefl_compress92:
	# %93 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %94 = icmp ne i8* %93, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %94, label %95, label %105
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress105
	jmp	tdefl_compress95
	.text
tdefl_compress95:
	# %96 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %97 = icmp ne i8* %96, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %97, label %98, label %118
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress118
	jmp	tdefl_compress98
	.text
tdefl_compress98:
	# %99 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %100 = load i64, i64* %99
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %101 = icmp ne i64 %100, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %101, label %102, label %118
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress118
	jmp	tdefl_compress102
	.text
tdefl_compress102:
	# %103 = load i8*, i8** %11
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %104 = icmp ne i8* %103, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %104, label %118, label %105
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress105
	jmp	tdefl_compress118
	.text
tdefl_compress105:
	# %106 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %107 = icmp ne i8* %106, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %107, label %108, label %110
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress110
	jmp	tdefl_compress108
	.text
tdefl_compress108:
	# %109 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %109
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %110
	jmp	tdefl_compress110
	.text
tdefl_compress110:
	# %111 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %112 = icmp ne i8* %111, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %112, label %113, label %115
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress115
	jmp	tdefl_compress113
	.text
tdefl_compress113:
	# %114 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %114
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %115
	jmp	tdefl_compress115
	.text
tdefl_compress115:
	# %116 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %117 = getelementptr %struct.tdefl_compressor, i8* %116, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 -2, i32* %117
	movq	$-2, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 -2, i32* %7
	movq	$-2, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	tdefl_compress234
	.text
tdefl_compress118:
	# %119 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %120 = icmp eq i32 %119, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %121 = zext i1 %120 to i32
	movq	%rdx, %rax
	movq	%rax, %rdi
	# %122 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = getelementptr %struct.tdefl_compressor, i8* %122, i32 0, i32 25
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$25, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %124 = load i32, i32* %123
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %125 = or i32 %124, %121
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %125, i32* %123
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %126 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %127 = getelementptr %struct.tdefl_compressor, i8* %126, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %128 = load i32, i32* %127
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %129 = icmp ne i32 %128, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %129, label %135, label %130
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress130
	jmp	tdefl_compress135
	.text
tdefl_compress130:
	# %131 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %132 = getelementptr %struct.tdefl_compressor, i8* %131, i32 0, i32 23
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$23, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %133 = load i32, i32* %132
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %134 = icmp ne i32 %133, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %134, label %135, label %140
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress140
	jmp	tdefl_compress135
	.text
tdefl_compress135:
	# %136 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %137 = call i32 @tdefl_flush_output_buffer (i8* %136)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_flush_output_buffer
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %138 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %139 = getelementptr %struct.tdefl_compressor, i8* %138, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %137, i32* %139
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 %137, i32* %7
	movq	%rbx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	tdefl_compress234
	.text
tdefl_compress140:
	# %141 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %142 = call i32 @tdefl_compress_normal (i8* %141)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_normal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %143 = icmp ne i32 %142, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %143, label %148, label %144
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress144
	jmp	tdefl_compress148
	.text
tdefl_compress144:
	# %145 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %146 = getelementptr %struct.tdefl_compressor, i8* %145, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %147 = load i32, i32* %146
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %147, i32* %7
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	tdefl_compress234
	.text
tdefl_compress148:
	# %149 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %150 = getelementptr %struct.tdefl_compressor, i8* %149, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %151 = load i32, i32* %150
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %152 = and i32 %151, 12288
	movq	%rdx, %rax
	movq	$12288, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %153 = icmp ne i32 %152, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %153, label %154, label %174
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress174
	jmp	tdefl_compress154
	.text
tdefl_compress154:
	# %155 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %156 = icmp ne i8* %155, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %156, label %157, label %174
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress174
	jmp	tdefl_compress157
	.text
tdefl_compress157:
	# %158 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %159 = getelementptr %struct.tdefl_compressor, i8* %158, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %160 = load i32, i32* %159
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %161 = zext i32 %160 to i64
	movq	%rdx, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %162 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %163 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %164 = getelementptr %struct.tdefl_compressor, i8* %163, i32 0, i32 32
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$32, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %165 = load i8*, i8** %164
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %166 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %167 = ptrtoint i8** %165 to i64
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %168 = ptrtoint i8** %166 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %169 = sub i64 %167, %168
	movq	%rsi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %170 = call i64 @mz_adler32 (i64 %161, i8* %162, i64 %169)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_adler32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %171 = trunc i64 %170 to i32
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %172 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %173 = getelementptr %struct.tdefl_compressor, i8* %172, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %171, i32* %173
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %174
	jmp	tdefl_compress174
	.text
tdefl_compress174:
	# %175 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %176 = icmp ne i32 %175, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %176, label %177, label %229
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress229
	jmp	tdefl_compress177
	.text
tdefl_compress177:
	# %178 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %179 = getelementptr %struct.tdefl_compressor, i8* %178, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %180 = load i32, i32* %179
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %181 = icmp ne i32 %180, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %181, label %229, label %182
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress182
	jmp	tdefl_compress229
	.text
tdefl_compress182:
	# %183 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %184 = getelementptr %struct.tdefl_compressor, i8* %183, i32 0, i32 33
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$33, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %185 = load i64, i64* %184
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %186 = icmp ne i64 %185, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %186, label %229, label %187
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress187
	jmp	tdefl_compress229
	.text
tdefl_compress187:
	# %188 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %189 = getelementptr %struct.tdefl_compressor, i8* %188, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %190 = load i32, i32* %189
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %191 = icmp ne i32 %190, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %191, label %229, label %192
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress192
	jmp	tdefl_compress229
	.text
tdefl_compress192:
	# %193 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %194 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %195 = call i32 @tdefl_flush_block (i8* %193, i32 %194)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_flush_block
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %196 = icmp slt i32 %195, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %196, label %197, label %201
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress201
	jmp	tdefl_compress197
	.text
tdefl_compress197:
	# %198 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %199 = getelementptr %struct.tdefl_compressor, i8* %198, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %200 = load i32, i32* %199
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %200, i32* %7
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	tdefl_compress234
	.text
tdefl_compress201:
	# %202 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %203 = icmp eq i32 %202, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %204 = zext i1 %203 to i32
	movq	%rdx, %rax
	movq	%rax, %rsi
	# %205 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %206 = getelementptr %struct.tdefl_compressor, i8* %205, i32 0, i32 23
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$23, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %204, i32* %206
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %207 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %208 = icmp eq i32 %207, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %208, label %209, label %228
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress228
	jmp	tdefl_compress209
	.text
tdefl_compress209:
	# %210 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %211 = getelementptr %struct.tdefl_compressor, i8* %210, i32 0, i32 41
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$41, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %212 = getelementptr [32768 x i16], i8* %211, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %213 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %214 = getelementptr %struct.tdefl_compressor, i8* %213, i32 0, i32 41
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$41, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %215 = getelementptr [32768 x i16], i8* %214, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %216 = call i64 @llvm.objectsize.i64.p0 (i8* %215, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %217 = call i8* @__memset_chk (i8* %212, i32 0, i64 65536, i64 %216)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$65536, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %218 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %219 = getelementptr %struct.tdefl_compressor, i8* %218, i32 0, i32 40
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$40, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %220 = getelementptr [32768 x i16], i8* %219, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %221 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %222 = getelementptr %struct.tdefl_compressor, i8* %221, i32 0, i32 40
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$40, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %223 = getelementptr [32768 x i16], i8* %222, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %224 = call i64 @llvm.objectsize.i64.p0 (i8* %223, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %225 = call i8* @__memset_chk (i8* %220, i32 0, i64 65536, i64 %224)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$65536, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %226 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %227 = getelementptr %struct.tdefl_compressor, i8* %226, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %227
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %228
	jmp	tdefl_compress228
	.text
tdefl_compress228:
	# br label %229
	jmp	tdefl_compress229
	.text
tdefl_compress229:
	# %230 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %231 = call i32 @tdefl_flush_output_buffer (i8* %230)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_flush_output_buffer
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %232 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %233 = getelementptr %struct.tdefl_compressor, i8* %232, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %231, i32* %233
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 %231, i32* %7
	movq	%rbx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	tdefl_compress234
	.text
tdefl_compress234:
	# %235 = load i32, i32* %7
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %235
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_get_adler32
_tdefl_get_adler32:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = getelementptr %struct.tdefl_compressor, i8* %3, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %5 = load i32, i32* %4
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %5
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_deflateBound
_mz_deflateBound:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %3
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %4
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %5 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %6 = load i64, i64* %4
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %7 = mul i64 %6, 110
	movq	%rdx, %rax
	movq	$110, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %8 = udiv i64 %7, 100
	movq	%rdx, %rax
	movq	$100, %rcx
	cqto	
	divq	%rcx
	movq	%rax, %rdx
	# %9 = add i64 128, %8
	movq	$128, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %10 = load i64, i64* %4
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %11 = add i64 128, %10
	movq	$128, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %12 = load i64, i64* %4
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = udiv i64 %12, 31744
	movq	%rdx, %rax
	movq	$31744, %rcx
	cqto	
	divq	%rcx
	movq	%rax, %rdx
	# %14 = add i64 %13, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %15 = mul i64 %14, 5
	movq	%rdx, %rax
	movq	$5, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %16 = add i64 %11, %15
	movq	%r8, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %17 = icmp ugt i64 %9, %16
	movq	%r9, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %17, label %18, label %23
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_deflateBound23
	jmp	mz_deflateBound18
	.text
mz_deflateBound18:
	# %19 = load i64, i64* %4
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %20 = mul i64 %19, 110
	movq	%rdx, %rax
	movq	$110, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %21 = udiv i64 %20, 100
	movq	%rdx, %rax
	movq	$100, %rcx
	cqto	
	divq	%rcx
	movq	%rax, %rdx
	# %22 = add i64 128, %21
	movq	$128, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# br label %31
	movq	%rsi, %rdx
	jmp	mz_deflateBound31
	.text
mz_deflateBound23:
	# %24 = load i64, i64* %4
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %25 = add i64 128, %24
	movq	$128, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %26 = load i64, i64* %4
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %27 = udiv i64 %26, 31744
	movq	%rdx, %rax
	movq	$31744, %rcx
	cqto	
	divq	%rcx
	movq	%rax, %rdx
	# %28 = add i64 %27, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %29 = mul i64 %28, 5
	movq	%rdx, %rax
	movq	$5, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %30 = add i64 %25, %29
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# br label %31
	movq	%rbx, %rdx
	jmp	mz_deflateBound31
	.text
mz_deflateBound31:
	# %32 = phi i64 [%22, %18], [%30, %23]
	# ret i64 %32
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_compress2
_mz_compress2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%r13
	popq	%rdx
	popq	%r14
	popq	%r15
	popq	-8(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %13 = alloca %struct.mz_stream_s
	subq	$100, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %7
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %8
	movq	%r15, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %9
	movq	%r14, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %11
	movq	%r13, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# call void @memset (i8* %13, i8 0, i64 112, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$112, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %14 = load i64, i64* %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %15 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %16 = load i64, i64* %15
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %17 = or i64 %14, %16
	movq	%r14, %rax
	movq	%r13, %rcx
	orq	%rcx, %rax
	movq	%rax, %r13
	# %18 = icmp ugt i64 %17, 4294967295
	movq	%r13, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	seta	%r13b
	# br i1 %18, label %19, label %20
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_compress220
	jmp	mz_compress219
	.text
mz_compress219:
	# store i32 -10000, i32* %6
	movq	$-10000, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	mz_compress256
	.text
mz_compress220:
	# %21 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %22 = getelementptr %struct.mz_stream_s, i8* %13, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# store i8* %21, i8** %22
	movq	%r13, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %23 = load i64, i64* %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %24 = trunc i64 %23 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %25 = getelementptr %struct.mz_stream_s, i8* %13, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 %24, i32* %25
	movq	%r9, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %26 = load i8*, i8** %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %27 = getelementptr %struct.mz_stream_s, i8* %13, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %26, i8** %27
	movq	%r9, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %28 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %29 = load i64, i64* %28
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %30 = trunc i64 %29 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %31 = getelementptr %struct.mz_stream_s, i8* %13, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 %30, i32* %31
	movq	%r9, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %32 = load i32, i32* %11
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %33 = call i32 @mz_deflateInit (i8* %13, i32 %32)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_deflateInit
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# store i32 %33, i32* %12
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %34 = load i32, i32* %12
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %35 = icmp ne i32 %34, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %35, label %36, label %38
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_compress238
	jmp	mz_compress236
	.text
mz_compress236:
	# %37 = load i32, i32* %12
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %37, i32* %6
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	mz_compress256
	.text
mz_compress238:
	# %39 = call i32 @mz_deflate (i8* %13, i32 4)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$4, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_deflate
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# store i32 %39, i32* %12
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %40 = load i32, i32* %12
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %41 = icmp ne i32 %40, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %41, label %42, label %51
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_compress251
	jmp	mz_compress242
	.text
mz_compress242:
	# %43 = call i32 @mz_deflateEnd (i8* %13)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_deflateEnd
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %44 = load i32, i32* %12
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %45 = icmp eq i32 %44, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %45, label %46, label %47
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_compress247
	jmp	mz_compress246
	.text
mz_compress246:
	# br label %49
	movq	$-5, %rdx
	jmp	mz_compress249
	.text
mz_compress247:
	# %48 = load i32, i32* %12
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# br label %49
	jmp	mz_compress249
	.text
mz_compress249:
	# %50 = phi i32 [-5, %46], [%48, %47]
	# store i32 %50, i32* %6
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	mz_compress256
	.text
mz_compress251:
	# %52 = getelementptr %struct.mz_stream_s, i8* %13, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %53 = load i64, i64* %52
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %54 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %53, i64* %54
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %55 = call i32 @mz_deflateEnd (i8* %13)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_deflateEnd
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %55, i32* %6
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	mz_compress256
	.text
mz_compress256:
	# %57 = load i32, i32* %6
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %57
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_compress
_mz_compress:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r9
	popq	%r10
	popq	%r11
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%r10, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %7
	movq	%r9, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %8
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %9 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %10 = load i8*, i8** %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %11 = load i8*, i8** %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %12 = load i64, i64* %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = call i32 @mz_compress2 (i8* %9, i8* %10, i8* %11, i64 %12, i32 -1)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$-1, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_compress2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %13
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_compressBound
_mz_compressBound:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i64 %0, i64* %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i64, i64* %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = call i64 @mz_deflateBound (i8* null, i64 %3)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_deflateBound
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i64 %4
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_inflateInit2
_mz_inflateInit2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%r8
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %4
	movq	%r8, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %5
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %7 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = icmp ne i8* %7, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %8, label %10, label %9
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateInit29
	jmp	mz_inflateInit210
	.text
mz_inflateInit29:
	# store i32 -2, i32* %3
	movq	$-2, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	mz_inflateInit279
	.text
mz_inflateInit210:
	# %11 = load i32, i32* %5
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %12 = icmp ne i32 %11, 15
	movq	%rbx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %12, label %13, label %18
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateInit218
	jmp	mz_inflateInit213
	.text
mz_inflateInit213:
	# %14 = load i32, i32* %5
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %15 = sub i32 0, %14
	movq	$0, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %16 = icmp ne i32 %15, 15
	movq	%rbx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %16, label %17, label %18
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateInit218
	jmp	mz_inflateInit217
	.text
mz_inflateInit217:
	# store i32 -10000, i32* %3
	movq	$-10000, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	mz_inflateInit279
	.text
mz_inflateInit218:
	# %19 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = getelementptr %struct.mz_stream_s, i8* %19, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %20
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %21 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %22 = getelementptr %struct.mz_stream_s, i8* %21, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %22
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %23 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %24 = getelementptr %struct.mz_stream_s, i8* %23, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* null, i8** %24
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %25 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %26 = getelementptr %struct.mz_stream_s, i8* %25, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %26
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %27 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %28 = getelementptr %struct.mz_stream_s, i8* %27, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %28
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %29 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %30 = getelementptr %struct.mz_stream_s, i8* %29, i32 0, i32 13
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %30
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %31 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %32 = getelementptr %struct.mz_stream_s, i8* %31, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %33 = load i8*, i8** %32
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %34 = icmp ne i8* %33, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %34, label %38, label %35
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateInit235
	jmp	mz_inflateInit238
	.text
mz_inflateInit235:
	# %36 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %37 = getelementptr %struct.mz_stream_s, i8* %36, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* @miniz_def_alloc_func, i8** %37
	leaq	_miniz_def_alloc_func(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %38
	jmp	mz_inflateInit238
	.text
mz_inflateInit238:
	# %39 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = getelementptr %struct.mz_stream_s, i8* %39, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %41 = load i8*, i8** %40
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %42 = icmp ne i8* %41, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %42, label %46, label %43
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateInit243
	jmp	mz_inflateInit246
	.text
mz_inflateInit243:
	# %44 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %45 = getelementptr %struct.mz_stream_s, i8* %44, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* @miniz_def_free_func, i8** %45
	leaq	_miniz_def_free_func(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %46
	jmp	mz_inflateInit246
	.text
mz_inflateInit246:
	# %47 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %48 = getelementptr %struct.mz_stream_s, i8* %47, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %49 = load i8*, i8** %48
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %50 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %51 = getelementptr %struct.mz_stream_s, i8* %50, i32 0, i32 10
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %52 = load i8*, i8** %51
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %53 = call i8* %49 (i8* %52, i64 1, i64 41168)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$41168, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i8* %53, i8** %6
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %54 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %55 = icmp ne i8* %54, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %55, label %57, label %56
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateInit256
	jmp	mz_inflateInit257
	.text
mz_inflateInit256:
	# store i32 -4, i32* %3
	movq	$-4, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	mz_inflateInit279
	.text
mz_inflateInit257:
	# %58 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %59 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %60 = getelementptr %struct.mz_stream_s, i8* %59, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %58, i8** %60
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %61
	jmp	mz_inflateInit261
	.text
mz_inflateInit261:
	# %62 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %63 = getelementptr %struct.inflate_state, i8* %62, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %64 = getelementptr %struct.tinfl_decompressor_tag, i8* %63, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %64
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %65
	jmp	mz_inflateInit265
	.text
mz_inflateInit265:
	# %66 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %67 = getelementptr %struct.inflate_state, i8* %66, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %67
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %68 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %69 = getelementptr %struct.inflate_state, i8* %68, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %69
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %70 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %71 = getelementptr %struct.inflate_state, i8* %70, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 1, i32* %71
	movq	$1, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %72 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %73 = getelementptr %struct.inflate_state, i8* %72, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 1, i32* %73
	movq	$1, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %74 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %75 = getelementptr %struct.inflate_state, i8* %74, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %75
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %76 = load i32, i32* %5
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %77 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %78 = getelementptr %struct.inflate_state, i8* %77, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %76, i32* %78
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %3
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	mz_inflateInit279
	.text
mz_inflateInit279:
	# %80 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %80
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_inflateInit
_mz_inflateInit:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = call i32 @mz_inflateInit2 (i8* %3, i32 15)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$15, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_inflateInit2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %4
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_inflateReset
_mz_inflateReset:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rdi
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %5 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %6 = icmp ne i8* %5, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %6, label %8, label %7
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateReset7
	jmp	mz_inflateReset8
	.text
mz_inflateReset7:
	# store i32 -2, i32* %2
	movq	$-2, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %39
	jmp	mz_inflateReset39
	.text
mz_inflateReset8:
	# %9 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %10 = getelementptr %struct.mz_stream_s, i8* %9, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %12 = getelementptr %struct.mz_stream_s, i8* %11, i32 0, i32 12
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i64 0, i64* %12
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %13 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %14 = getelementptr %struct.mz_stream_s, i8* %13, i32 0, i32 6
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* null, i8** %14
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %15 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %16 = getelementptr %struct.mz_stream_s, i8* %15, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i64 0, i64* %16
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %17 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %18 = getelementptr %struct.mz_stream_s, i8* %17, i32 0, i32 5
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i64 0, i64* %18
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %19 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %20 = getelementptr %struct.mz_stream_s, i8* %19, i32 0, i32 13
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i64 0, i64* %20
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %21 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %22 = getelementptr %struct.mz_stream_s, i8* %21, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %23 = load i8*, i8** %22
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %23, i8** %4
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %24
	jmp	mz_inflateReset24
	.text
mz_inflateReset24:
	# %25 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = getelementptr %struct.inflate_state, i8* %25, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %27 = getelementptr %struct.tinfl_decompressor_tag, i8* %26, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %27
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %28
	jmp	mz_inflateReset28
	.text
mz_inflateReset28:
	# %29 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %30 = getelementptr %struct.inflate_state, i8* %29, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %30
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %31 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = getelementptr %struct.inflate_state, i8* %31, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %32
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %33 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr %struct.inflate_state, i8* %33, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %34
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %35 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = getelementptr %struct.inflate_state, i8* %35, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %36
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %37 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = getelementptr %struct.inflate_state, i8* %37, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %39
	jmp	mz_inflateReset39
	.text
mz_inflateReset39:
	# %40 = load i32, i32* %2
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %40
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_inflate
_mz_inflate:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$56, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rdx
	popq	%rbx
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r15
	# %12 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# store i8* %0, i8** %4
	movq	%rbx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %5
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 8, i32* %9
	movq	$8, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %14 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %15 = icmp ne i8* %14, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %15, label %16, label %21
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate21
	jmp	mz_inflate16
	.text
mz_inflate16:
	# %17 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %18 = getelementptr %struct.mz_stream_s, i8* %17, i32 0, i32 7
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %19 = load i8*, i8** %18
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %20 = icmp ne i8* %19, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %20, label %22, label %21
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate21
	jmp	mz_inflate22
	.text
mz_inflate21:
	# store i32 -2, i32* %3
	movq	$-2, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate22:
	# %23 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %24 = icmp eq i32 %23, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %24, label %25, label %26
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate26
	jmp	mz_inflate25
	.text
mz_inflate25:
	# store i32 2, i32* %5
	movq	$2, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %26
	jmp	mz_inflate26
	.text
mz_inflate26:
	# %27 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %28 = icmp ne i32 %27, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %28, label %29, label %36
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate36
	jmp	mz_inflate29
	.text
mz_inflate29:
	# %30 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %31 = icmp ne i32 %30, 2
	movq	%rsi, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %31, label %32, label %36
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate36
	jmp	mz_inflate32
	.text
mz_inflate32:
	# %33 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %34 = icmp ne i32 %33, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %34, label %35, label %36
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate36
	jmp	mz_inflate35
	.text
mz_inflate35:
	# store i32 -2, i32* %3
	movq	$-2, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate36:
	# %37 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %38 = getelementptr %struct.mz_stream_s, i8* %37, i32 0, i32 7
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %39 = load i8*, i8** %38
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %39, i8** %6
	movq	%rsi, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# %40 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %41 = getelementptr %struct.inflate_state, i8* %40, i32 0, i32 5
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %42 = load i32, i32* %41
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %43 = icmp sgt i32 %42, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setg	%sil
	# br i1 %43, label %44, label %47
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate47
	jmp	mz_inflate44
	.text
mz_inflate44:
	# %45 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %46 = or i32 %45, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %46, i32* %9
	movq	%rsi, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %47
	jmp	mz_inflate47
	.text
mz_inflate47:
	# %48 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %49 = getelementptr %struct.mz_stream_s, i8* %48, i32 0, i32 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %50 = load i32, i32* %49
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %51 = zext i32 %50 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i64 %51, i64* %12
	movq	%rsi, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %52 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %53 = getelementptr %struct.inflate_state, i8* %52, i32 0, i32 3
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %54 = load i32, i32* %53
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i32 %54, i32* %8
	movq	%rsi, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %55 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %56 = getelementptr %struct.inflate_state, i8* %55, i32 0, i32 3
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 0, i32* %56
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %57 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %58 = getelementptr %struct.inflate_state, i8* %57, i32 0, i32 7
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %59 = load i32, i32* %58
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %60 = icmp slt i32 %59, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setl	%sil
	# br i1 %60, label %61, label %62
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate62
	jmp	mz_inflate61
	.text
mz_inflate61:
	# store i32 -3, i32* %3
	movq	$-3, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate62:
	# %63 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %64 = getelementptr %struct.inflate_state, i8* %63, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %65 = load i32, i32* %64
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %66 = icmp ne i32 %65, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %66, label %67, label %71
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate71
	jmp	mz_inflate67
	.text
mz_inflate67:
	# %68 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %69 = icmp ne i32 %68, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %69, label %70, label %71
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate71
	jmp	mz_inflate70
	.text
mz_inflate70:
	# store i32 -2, i32* %3
	movq	$-2, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate71:
	# %72 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %73 = icmp eq i32 %72, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# %74 = zext i1 %73 to i32
	movq	%rsi, %rax
	movq	%rax, %r11
	# %75 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %76 = getelementptr %struct.inflate_state, i8* %75, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %77 = load i32, i32* %76
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %78 = or i32 %77, %74
	movq	%rsi, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %78, i32* %76
	movq	%rsi, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %79 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %80 = icmp eq i32 %79, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %80, label %81, label %169
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate169
	jmp	mz_inflate81
	.text
mz_inflate81:
	# %82 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %83 = icmp ne i32 %82, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %83, label %84, label %169
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate169
	jmp	mz_inflate84
	.text
mz_inflate84:
	# %85 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %86 = or i32 %85, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %86, i32* %9
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %87 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = getelementptr %struct.mz_stream_s, i8* %87, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %89 = load i32, i32* %88
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %90 = zext i32 %89 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %90, i64* %10
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# %91 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = getelementptr %struct.mz_stream_s, i8* %91, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %93 = load i32, i32* %92
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %94 = zext i32 %93 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %94, i64* %11
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %95 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %96 = getelementptr %struct.inflate_state, i8* %95, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %97 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %98 = getelementptr %struct.mz_stream_s, i8* %97, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %99 = load i8*, i8** %98
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %100 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %101 = getelementptr %struct.mz_stream_s, i8* %100, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %102 = load i8*, i8** %101
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %103 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %104 = getelementptr %struct.mz_stream_s, i8* %103, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %105 = load i8*, i8** %104
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %106 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %107 = call i32 @tinfl_decompress (i8* %96, i8* %99, i8* %10, i8* %102, i8* %105, i8* %11, i32 %106)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	-56(%rbp), %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%r15, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_decompress
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %107, i32* %13
	movq	%rdx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %108 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %109 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %110 = getelementptr %struct.inflate_state, i8* %109, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %108, i32* %110
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %111 = load i64, i64* %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %112 = trunc i64 %111 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %113 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %114 = getelementptr %struct.mz_stream_s, i8* %113, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %115 = load i8*, i8** %114
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %116 = zext i32 %112 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %117 = getelementptr i8, i8* %115, i64 %116
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %117, i8** %114
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %118 = load i64, i64* %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %119 = trunc i64 %118 to i32
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %120 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %121 = getelementptr %struct.mz_stream_s, i8* %120, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %122 = load i32, i32* %121
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %123 = sub i32 %122, %119
	movq	%rdx, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %123, i32* %121
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %124 = load i64, i64* %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = trunc i64 %124 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %126 = zext i32 %125 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %127 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = getelementptr %struct.mz_stream_s, i8* %127, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %129 = load i64, i64* %128
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %130 = add i64 %129, %126
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %130, i64* %128
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %131 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %132 = getelementptr %struct.inflate_state, i8* %131, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %133 = getelementptr %struct.tinfl_decompressor_tag, i8* %132, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %134 = load i32, i32* %133
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %135 = zext i32 %134 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %136 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %137 = getelementptr %struct.mz_stream_s, i8* %136, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %135, i64* %137
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %138 = load i64, i64* %11
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %139 = trunc i64 %138 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %140 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %141 = getelementptr %struct.mz_stream_s, i8* %140, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %142 = load i8*, i8** %141
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %143 = zext i32 %139 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %144 = getelementptr i8, i8* %142, i64 %143
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %144, i8** %141
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %145 = load i64, i64* %11
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %146 = trunc i64 %145 to i32
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %147 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %148 = getelementptr %struct.mz_stream_s, i8* %147, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %149 = load i32, i32* %148
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %150 = sub i32 %149, %146
	movq	%rdx, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %150, i32* %148
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %151 = load i64, i64* %11
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %152 = trunc i64 %151 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %153 = zext i32 %152 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %154 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %155 = getelementptr %struct.mz_stream_s, i8* %154, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %156 = load i64, i64* %155
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %157 = add i64 %156, %153
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %157, i64* %155
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %158 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %159 = icmp slt i32 %158, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %159, label %160, label %161
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate161
	jmp	mz_inflate160
	.text
mz_inflate160:
	# store i32 -3, i32* %3
	movq	$-3, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate161:
	# %162 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %163 = icmp ne i32 %162, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %163, label %164, label %167
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate167
	jmp	mz_inflate164
	.text
mz_inflate164:
	# %165 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %166 = getelementptr %struct.inflate_state, i8* %165, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 -1, i32* %166
	movq	$-1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 -5, i32* %3
	movq	$-5, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate167:
	# br label %168
	jmp	mz_inflate168
	.text
mz_inflate168:
	# store i32 1, i32* %3
	movq	$1, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate169:
	# %170 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %171 = icmp ne i32 %170, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %171, label %172, label %175
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate175
	jmp	mz_inflate172
	.text
mz_inflate172:
	# %173 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %174 = or i32 %173, 2
	movq	%rsi, %rax
	movq	$2, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %174, i32* %9
	movq	%rsi, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %175
	jmp	mz_inflate175
	.text
mz_inflate175:
	# %176 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %177 = getelementptr %struct.inflate_state, i8* %176, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %178 = load i32, i32* %177
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %179 = icmp ne i32 %178, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %179, label %180, label %260
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate260
	jmp	mz_inflate180
	.text
mz_inflate180:
	# %181 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %182 = getelementptr %struct.inflate_state, i8* %181, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %183 = load i32, i32* %182
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %184 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %185 = getelementptr %struct.mz_stream_s, i8* %184, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %186 = load i32, i32* %185
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %187 = icmp ult i32 %183, %186
	movq	%r8, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setb	%sil
	# br i1 %187, label %188, label %192
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate192
	jmp	mz_inflate188
	.text
mz_inflate188:
	# %189 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %190 = getelementptr %struct.inflate_state, i8* %189, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %191 = load i32, i32* %190
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# br label %196
	movq	%rdi, %rbx
	jmp	mz_inflate196
	.text
mz_inflate192:
	# %193 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %194 = getelementptr %struct.mz_stream_s, i8* %193, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %195 = load i32, i32* %194
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# br label %196
	jmp	mz_inflate196
	.text
mz_inflate196:
	# %197 = phi i32 [%191, %188], [%195, %192]
	# store i32 %197, i32* %7
	movq	%rbx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %198 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %199 = getelementptr %struct.mz_stream_s, i8* %198, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %200 = load i8*, i8** %199
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %201 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %202 = getelementptr %struct.inflate_state, i8* %201, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %203 = getelementptr [32768 x i8], i8* %202, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$32768, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %204 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %205 = getelementptr %struct.inflate_state, i8* %204, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %206 = load i32, i32* %205
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %207 = zext i32 %206 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %208 = getelementptr i8, i8* %203, i64 %207
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %209 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %210 = zext i32 %209 to i64
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %211 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %212 = getelementptr %struct.mz_stream_s, i8* %211, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %213 = load i8*, i8** %212
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %214 = call i64 @llvm.objectsize.i64.p0 (i8* %213, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %215 = call i8* @__memcpy_chk (i8* %200, i8* %208, i64 %210, i64 %214)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %216 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %217 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %218 = getelementptr %struct.mz_stream_s, i8* %217, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %219 = load i8*, i8** %218
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %220 = zext i32 %216 to i64
	movq	%r8, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %221 = getelementptr i8, i8* %219, i64 %220
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %221, i8** %218
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %222 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %223 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %224 = getelementptr %struct.mz_stream_s, i8* %223, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %225 = load i32, i32* %224
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %226 = sub i32 %225, %222
	movq	%rbx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %226, i32* %224
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %227 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %228 = zext i32 %227 to i64
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %229 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %230 = getelementptr %struct.mz_stream_s, i8* %229, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %231 = load i64, i64* %230
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %232 = add i64 %231, %228
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %232, i64* %230
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %233 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %234 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %235 = getelementptr %struct.inflate_state, i8* %234, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %236 = load i32, i32* %235
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %237 = sub i32 %236, %233
	movq	%rbx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %237, i32* %235
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %238 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %239 = getelementptr %struct.inflate_state, i8* %238, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %240 = load i32, i32* %239
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %241 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %242 = add i32 %240, %241
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %243 = and i32 %242, 32767
	movq	%rbx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %244 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %245 = getelementptr %struct.inflate_state, i8* %244, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %243, i32* %245
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %246 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %247 = getelementptr %struct.inflate_state, i8* %246, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %248 = load i32, i32* %247
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %249 = icmp eq i32 %248, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %249, label %250, label %256
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rbx
	je	mz_inflate256
	jmp	mz_inflate250
	.text
mz_inflate250:
	# %251 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %252 = getelementptr %struct.inflate_state, i8* %251, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %253 = load i32, i32* %252
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %254 = icmp ne i32 %253, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %255 = xor i1 %254, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# br label %256
	movq	%rdx, %rbx
	jmp	mz_inflate256
	.text
mz_inflate256:
	# %257 = phi i1 [0, %196], [%255, %250]
	# %258 = zext i1 %257 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %259 = select i1 %257, i32 1, i32 0
	movq	%rbx, %rcx
	movq	$1, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %259, i32* %3
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate260:
	# br label %261
	jmp	mz_inflate261
	.text
mz_inflate261:
	# %262 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %263 = getelementptr %struct.mz_stream_s, i8* %262, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %264 = load i32, i32* %263
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %265 = zext i32 %264 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i64 %265, i64* %10
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# %266 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %267 = getelementptr %struct.inflate_state, i8* %266, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %268 = load i32, i32* %267
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %269 = sub i32 32768, %268
	movq	$32768, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %270 = zext i32 %269 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i64 %270, i64* %11
	movq	%rbx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %271 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %272 = getelementptr %struct.inflate_state, i8* %271, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %273 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %274 = getelementptr %struct.mz_stream_s, i8* %273, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %275 = load i8*, i8** %274
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %276 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %277 = getelementptr %struct.inflate_state, i8* %276, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %278 = getelementptr [32768 x i8], i8* %277, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$32768, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %279 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %280 = getelementptr %struct.inflate_state, i8* %279, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %281 = getelementptr [32768 x i8], i8* %280, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$32768, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %282 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %283 = getelementptr %struct.inflate_state, i8* %282, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %284 = load i32, i32* %283
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %285 = zext i32 %284 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %286 = getelementptr i8, i8* %281, i64 %285
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %287 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %288 = call i32 @tinfl_decompress (i8* %272, i8* %275, i8* %10, i8* %278, i8* %286, i8* %11, i32 %287)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	-56(%rbp), %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%r15, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_decompress
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 %288, i32* %13
	movq	%rbx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %289 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %290 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %291 = getelementptr %struct.inflate_state, i8* %290, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %289, i32* %291
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %292 = load i64, i64* %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %293 = trunc i64 %292 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %294 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %295 = getelementptr %struct.mz_stream_s, i8* %294, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %296 = load i8*, i8** %295
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %297 = zext i32 %293 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %298 = getelementptr i8, i8* %296, i64 %297
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %298, i8** %295
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %299 = load i64, i64* %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %300 = trunc i64 %299 to i32
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %301 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %302 = getelementptr %struct.mz_stream_s, i8* %301, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %303 = load i32, i32* %302
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %304 = sub i32 %303, %300
	movq	%rbx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %304, i32* %302
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %305 = load i64, i64* %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %306 = trunc i64 %305 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %307 = zext i32 %306 to i64
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %308 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %309 = getelementptr %struct.mz_stream_s, i8* %308, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %310 = load i64, i64* %309
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %311 = add i64 %310, %307
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %311, i64* %309
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %312 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %313 = getelementptr %struct.inflate_state, i8* %312, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %314 = getelementptr %struct.tinfl_decompressor_tag, i8* %313, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %315 = load i32, i32* %314
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %316 = zext i32 %315 to i64
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %317 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %318 = getelementptr %struct.mz_stream_s, i8* %317, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 %316, i64* %318
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %319 = load i64, i64* %11
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %320 = trunc i64 %319 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %321 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %322 = getelementptr %struct.inflate_state, i8* %321, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %320, i32* %322
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %323 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %324 = getelementptr %struct.inflate_state, i8* %323, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %325 = load i32, i32* %324
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %326 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %327 = getelementptr %struct.mz_stream_s, i8* %326, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %328 = load i32, i32* %327
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %329 = icmp ult i32 %325, %328
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %329, label %330, label %334
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate334
	jmp	mz_inflate330
	.text
mz_inflate330:
	# %331 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %332 = getelementptr %struct.inflate_state, i8* %331, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %333 = load i32, i32* %332
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# br label %338
	movq	%r10, %rbx
	jmp	mz_inflate338
	.text
mz_inflate334:
	# %335 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %336 = getelementptr %struct.mz_stream_s, i8* %335, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %337 = load i32, i32* %336
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# br label %338
	movq	%r8, %rbx
	jmp	mz_inflate338
	.text
mz_inflate338:
	# %339 = phi i32 [%333, %330], [%337, %334]
	# store i32 %339, i32* %7
	movq	%rbx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %340 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %341 = getelementptr %struct.mz_stream_s, i8* %340, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %342 = load i8*, i8** %341
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %343 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %344 = getelementptr %struct.inflate_state, i8* %343, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %345 = getelementptr [32768 x i8], i8* %344, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$32768, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %346 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %347 = getelementptr %struct.inflate_state, i8* %346, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %348 = load i32, i32* %347
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %349 = zext i32 %348 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %350 = getelementptr i8, i8* %345, i64 %349
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %351 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %352 = zext i32 %351 to i64
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %353 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %354 = getelementptr %struct.mz_stream_s, i8* %353, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %355 = load i8*, i8** %354
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %356 = call i64 @llvm.objectsize.i64.p0 (i8* %355, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %357 = call i8* @__memcpy_chk (i8* %342, i8* %350, i64 %352, i64 %356)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %358 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %359 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %360 = getelementptr %struct.mz_stream_s, i8* %359, i32 0, i32 3
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %361 = load i8*, i8** %360
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %362 = zext i32 %358 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %363 = getelementptr i8, i8* %361, i64 %362
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %363, i8** %360
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %364 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %365 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %366 = getelementptr %struct.mz_stream_s, i8* %365, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %367 = load i32, i32* %366
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %368 = sub i32 %367, %364
	movq	%rbx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %368, i32* %366
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %369 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %370 = zext i32 %369 to i64
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %371 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %372 = getelementptr %struct.mz_stream_s, i8* %371, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %373 = load i64, i64* %372
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %374 = add i64 %373, %370
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %374, i64* %372
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %375 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %376 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %377 = getelementptr %struct.inflate_state, i8* %376, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %378 = load i32, i32* %377
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %379 = sub i32 %378, %375
	movq	%rbx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %379, i32* %377
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %380 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %381 = getelementptr %struct.inflate_state, i8* %380, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %382 = load i32, i32* %381
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %383 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %384 = add i32 %382, %383
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %385 = and i32 %384, 32767
	movq	%rbx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %386 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %387 = getelementptr %struct.inflate_state, i8* %386, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %385, i32* %387
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %388 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %389 = icmp slt i32 %388, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setl	%bl
	# br i1 %389, label %390, label %391
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate391
	jmp	mz_inflate390
	.text
mz_inflate390:
	# store i32 -3, i32* %3
	movq	$-3, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate391:
	# %392 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %393 = icmp eq i32 %392, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %393, label %394, label %398
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate398
	jmp	mz_inflate394
	.text
mz_inflate394:
	# %395 = load i64, i64* %12
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %396 = icmp ne i64 %395, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %396, label %398, label %397
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate397
	jmp	mz_inflate398
	.text
mz_inflate397:
	# store i32 -5, i32* %3
	movq	$-5, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate398:
	# %399 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %400 = icmp eq i32 %399, 4
	movq	%rbx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %400, label %401, label %419
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate419
	jmp	mz_inflate401
	.text
mz_inflate401:
	# %402 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %403 = icmp eq i32 %402, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %403, label %404, label %411
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate411
	jmp	mz_inflate404
	.text
mz_inflate404:
	# %405 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %406 = getelementptr %struct.inflate_state, i8* %405, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %407 = load i32, i32* %406
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %408 = icmp ne i32 %407, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# %409 = zext i1 %408 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %410 = select i1 %408, i32 -5, i32 1
	movq	%rbx, %rcx
	movq	$-5, %rax
	movq	$1, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %410, i32* %3
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate411:
	# %412 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %413 = getelementptr %struct.mz_stream_s, i8* %412, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %414 = load i32, i32* %413
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %415 = icmp ne i32 %414, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %415, label %417, label %416
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate416
	jmp	mz_inflate417
	.text
mz_inflate416:
	# store i32 -5, i32* %3
	movq	$-5, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate417:
	# br label %418
	jmp	mz_inflate418
	.text
mz_inflate418:
	# br label %439
	jmp	mz_inflate439
	.text
mz_inflate419:
	# %420 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %421 = icmp eq i32 %420, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %421, label %437, label %422
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate422
	jmp	mz_inflate437
	.text
mz_inflate422:
	# %423 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %424 = getelementptr %struct.mz_stream_s, i8* %423, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %425 = load i32, i32* %424
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %426 = icmp ne i32 %425, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %426, label %427, label %437
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate437
	jmp	mz_inflate427
	.text
mz_inflate427:
	# %428 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %429 = getelementptr %struct.mz_stream_s, i8* %428, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %430 = load i32, i32* %429
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %431 = icmp ne i32 %430, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %431, label %432, label %437
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate437
	jmp	mz_inflate432
	.text
mz_inflate432:
	# %433 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %434 = getelementptr %struct.inflate_state, i8* %433, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %435 = load i32, i32* %434
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %436 = icmp ne i32 %435, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %436, label %437, label %438
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflate438
	jmp	mz_inflate437
	.text
mz_inflate437:
	# br label %442
	jmp	mz_inflate442
	.text
mz_inflate438:
	# br label %439
	jmp	mz_inflate439
	.text
mz_inflate439:
	# br label %440
	jmp	mz_inflate440
	.text
mz_inflate440:
	# br label %441
	jmp	mz_inflate441
	.text
mz_inflate441:
	# br label %261
	jmp	mz_inflate261
	.text
mz_inflate442:
	# %443 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %444 = icmp eq i32 %443, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %444, label %445, label %451
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rbx
	je	mz_inflate451
	jmp	mz_inflate445
	.text
mz_inflate445:
	# %446 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %447 = getelementptr %struct.inflate_state, i8* %446, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$41164, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %448 = load i32, i32* %447
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %449 = icmp ne i32 %448, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %450 = xor i1 %449, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# br label %451
	movq	%rdx, %rbx
	jmp	mz_inflate451
	.text
mz_inflate451:
	# %452 = phi i1 [0, %442], [%450, %445]
	# %453 = zext i1 %452 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %454 = select i1 %452, i32 1, i32 0
	movq	%rbx, %rcx
	movq	$1, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %454, i32* %3
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %455
	jmp	mz_inflate455
	.text
mz_inflate455:
	# %456 = load i32, i32* %3
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %456
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tinfl_decompress
_tinfl_decompress:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$680, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rdx
	popq	%r8
	popq	%r9
	popq	%r10
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -8(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %16 = alloca [3 x i8*]
	subq	$24, %rsp
	movq	%rsp, -72(%rbp)
	# %17 = alloca [3 x i8*]
	subq	$24, %rsp
	movq	%rsp, -80(%rbp)
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %23 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -144(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %28 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %29 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -192(%rbp)
	# %32 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %33 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -208(%rbp)
	# %34 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -216(%rbp)
	# %35 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %36 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -240(%rbp)
	# %38 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %39 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -256(%rbp)
	# %40 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -264(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -272(%rbp)
	# %42 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -280(%rbp)
	# %43 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %44 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -296(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -304(%rbp)
	# %46 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -312(%rbp)
	# %47 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -320(%rbp)
	# %48 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %49 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -336(%rbp)
	# %50 = alloca [17 x i32]
	subq	$68, %rsp
	movq	%rsp, -344(%rbp)
	# %51 = alloca [16 x i32]
	subq	$64, %rsp
	movq	%rsp, -352(%rbp)
	# %52 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -360(%rbp)
	# %53 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -368(%rbp)
	# %54 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -376(%rbp)
	# %55 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -384(%rbp)
	# %56 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -392(%rbp)
	# %57 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -400(%rbp)
	# %58 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -408(%rbp)
	# %59 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -416(%rbp)
	# %60 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -424(%rbp)
	# %61 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -432(%rbp)
	# %62 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -440(%rbp)
	# %63 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -448(%rbp)
	# %64 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -456(%rbp)
	# %65 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -464(%rbp)
	# %66 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -472(%rbp)
	# %67 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -480(%rbp)
	# %68 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -488(%rbp)
	# %69 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -496(%rbp)
	# %70 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -504(%rbp)
	# %71 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -512(%rbp)
	# %72 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -520(%rbp)
	# %73 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -528(%rbp)
	# %74 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -536(%rbp)
	# %75 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -544(%rbp)
	# %76 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -552(%rbp)
	# %77 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -560(%rbp)
	# %78 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -568(%rbp)
	# %79 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -576(%rbp)
	# %80 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -584(%rbp)
	# %81 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -592(%rbp)
	# %82 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -600(%rbp)
	# %83 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -608(%rbp)
	# store i8* %0, i8** %9
	movq	%r10, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %10
	movq	%r9, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %11
	movq	%r8, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %12
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %4, i8** %13
	movq	%rdi, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %5, i8** %14
	movq	%rsi, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %6, i32* %15
	movq	%rbx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 -1, i32* %18
	movq	$-1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %84 = load i8*, i8** %10
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# store i8* %84, i8** %24
	movq	%r12, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %85 = load i8*, i8** %10
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -616(%rbp)
	# %86 = load i8*, i8** %11
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %87 = load i64, i64* %86
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %88 = getelementptr i8, i8* %85, i64 %87
	movq	-616(%rbp), %rcx
	movq	%r12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# store i8* %88, i8** %25
	movq	%r12, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# %89 = load i8*, i8** %13
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# store i8* %89, i8** %26
	movq	%r12, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %90 = load i8*, i8** %13
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %91 = icmp ne i8* %90, null
	movq	%r12, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r12
	setne	%r12b
	# br i1 %91, label %92, label %97
	movq	%r12, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress97
	jmp	tinfl_decompress92
	.text
tinfl_decompress92:
	# %93 = load i8*, i8** %13
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %94 = load i8*, i8** %14
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %95 = load i64, i64* %94
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %96 = getelementptr i8, i8* %93, i64 %95
	movq	%r12, %rcx
	movq	%r11, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# br label %98
	jmp	tinfl_decompress98
	.text
tinfl_decompress97:
	# br label %98
	movq	$0, %r11
	jmp	tinfl_decompress98
	.text
tinfl_decompress98:
	# %99 = phi i8* [%96, %92], [null, %97]
	# store i8* %99, i8** %27
	movq	%r11, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# %100 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %101 = and i32 %100, 4
	movq	%r11, %rax
	movq	$4, %rcx
	andq	%rcx, %rax
	movq	%rax, %r11
	# %102 = icmp ne i32 %101, 0
	movq	%r11, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r11
	setne	%r11b
	# br i1 %102, label %103, label %104
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress104
	jmp	tinfl_decompress103
	.text
tinfl_decompress103:
	# br label %114
	movq	$-1, %r8
	jmp	tinfl_decompress114
	.text
tinfl_decompress104:
	# %105 = load i8*, i8** %13
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %106 = load i8*, i8** %12
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %107 = ptrtoint i8** %105 to i64
	movq	%r11, %rax
	movq	%rax, %r11
	# %108 = ptrtoint i8** %106 to i64
	movq	%r8, %rax
	movq	%rax, %r8
	# %109 = sub i64 %107, %108
	movq	%r11, %rax
	movq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, %r11
	# %110 = load i8*, i8** %14
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %111 = load i64, i64* %110
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %112 = add i64 %109, %111
	movq	%r11, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %113 = sub i64 %112, 1
	movq	%r8, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %r8
	# br label %114
	jmp	tinfl_decompress114
	.text
tinfl_decompress114:
	# %115 = phi i64 [-1, %103], [%113, %104]
	# store i64 %115, i64* %28
	movq	%r8, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# %116 = load i64, i64* %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %117 = add i64 %116, 1
	movq	%r8, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %r11
	# %118 = load i64, i64* %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %119 = and i64 %117, %118
	movq	%r11, %rax
	movq	%r8, %rcx
	andq	%rcx, %rax
	movq	%rax, %r8
	# %120 = icmp ne i64 %119, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %120, label %125, label %121
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress121
	jmp	tinfl_decompress125
	.text
tinfl_decompress121:
	# %122 = load i8*, i8** %13
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %123 = load i8*, i8** %12
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %124 = icmp ult i8* %122, %123
	movq	%r11, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setb	%r8b
	# br i1 %124, label %125, label %128
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress128
	jmp	tinfl_decompress125
	.text
tinfl_decompress125:
	# %126 = load i8*, i8** %14
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %126
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %127 = load i8*, i8** %11
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %127
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 -3, i32* %8
	movq	$-3, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2874
	jmp	tinfl_decompress2874
	.text
tinfl_decompress128:
	# %129 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %130 = getelementptr %struct.tinfl_decompressor_tag, i8* %129, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %131 = getelementptr [576 x i16], i8* %130, i64 0, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %132 = getelementptr [3 x i8*], i8* %16, i64 0, i64 0
	movq	-72(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %131, i8** %132
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %133 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %134 = getelementptr %struct.tinfl_decompressor_tag, i8* %133, i32 0, i32 16
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %135 = getelementptr [64 x i16], i8* %134, i64 0, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %136 = getelementptr [3 x i8*], i8* %16, i64 0, i64 1
	movq	-72(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %135, i8** %136
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %137 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %138 = getelementptr %struct.tinfl_decompressor_tag, i8* %137, i32 0, i32 17
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %139 = getelementptr [38 x i16], i8* %138, i64 0, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$76, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %140 = getelementptr [3 x i8*], i8* %16, i64 0, i64 2
	movq	-72(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %139, i8** %140
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %141 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %142 = getelementptr %struct.tinfl_decompressor_tag, i8* %141, i32 0, i32 18
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %143 = getelementptr [288 x i8], i8* %142, i64 0, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %144 = getelementptr [3 x i8*], i8* %17, i64 0, i64 0
	movq	-80(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %143, i8** %144
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %145 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %146 = getelementptr %struct.tinfl_decompressor_tag, i8* %145, i32 0, i32 19
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %147 = getelementptr [32 x i8], i8* %146, i64 0, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %148 = getelementptr [3 x i8*], i8* %17, i64 0, i64 1
	movq	-80(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %147, i8** %148
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %149 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %150 = getelementptr %struct.tinfl_decompressor_tag, i8* %149, i32 0, i32 20
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$20, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %151 = getelementptr [19 x i8], i8* %150, i64 0, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$19, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %152 = getelementptr [3 x i8*], i8* %17, i64 0, i64 2
	movq	-80(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %151, i8** %152
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %153 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %154 = getelementptr %struct.tinfl_decompressor_tag, i8* %153, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %155 = load i32, i32* %154
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i32 %155, i32* %19
	movq	%r8, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %156 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %157 = getelementptr %struct.tinfl_decompressor_tag, i8* %156, i32 0, i32 12
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %158 = load i64, i64* %157
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i64 %158, i64* %23
	movq	%r8, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %159 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %160 = getelementptr %struct.tinfl_decompressor_tag, i8* %159, i32 0, i32 8
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %161 = load i32, i32* %160
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i32 %161, i32* %20
	movq	%r8, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %162 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %163 = getelementptr %struct.tinfl_decompressor_tag, i8* %162, i32 0, i32 9
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %164 = load i32, i32* %163
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i32 %164, i32* %21
	movq	%r8, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %165 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %166 = getelementptr %struct.tinfl_decompressor_tag, i8* %165, i32 0, i32 10
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %167 = load i32, i32* %166
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i32 %167, i32* %22
	movq	%r8, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %168 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %169 = getelementptr %struct.tinfl_decompressor_tag, i8* %168, i32 0, i32 13
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %170 = load i64, i64* %169
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i64 %170, i64* %29
	movq	%r8, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# %171 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %172 = getelementptr %struct.tinfl_decompressor_tag, i8* %171, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %173 = load i32, i32* %172
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# switch i32 %173, label %2655 [\n    i32 0, label %174\n    i32 1, label %201\n    i32 2, label %225\n    i32 36, label %296\n    i32 3, label %321\n    i32 5, label %385\n    i32 6, label %445\n    i32 7, label %495\n    i32 39, label %544\n    i32 51, label %576\n    i32 52, label %614\n    i32 9, label %636\n    i32 38, label %652\n    i32 10, label %742\n    i32 11, label %837\n    i32 14, label %947\n    i32 35, label %1090\n    i32 16, label %1345\n    i32 17, label %1459\n    i32 18, label %1489\n    i32 21, label %1586\n    i32 23, label %1735\n    i32 24, label %1838\n    i32 25, label %2030\n    i32 26, label %2156\n    i32 27, label %2280\n    i32 37, label %2347\n    i32 53, label %2387\n    i32 32, label %2484\n    i32 41, label %2580\n    i32 42, label %2625\n    i32 34, label %2652\n  ]
	movq	%r8, %rax
	movl	$0, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress174
	movl	$1, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress201
	movl	$2, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress225
	movl	$36, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress296
	movl	$3, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress321
	movl	$5, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress385
	movl	$6, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress445
	movl	$7, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress495
	movl	$39, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress544
	movl	$51, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress576
	movl	$52, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress614
	movl	$9, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress636
	movl	$38, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress652
	movl	$10, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress742
	movl	$11, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress837
	movl	$14, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress947
	movl	$35, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress1090
	movl	$16, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress1345
	movl	$17, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress1459
	movl	$18, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress1489
	movl	$21, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress1586
	movl	$23, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress1735
	movl	$24, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress1838
	movl	$25, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2030
	movl	$26, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2156
	movl	$27, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2280
	movl	$37, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2347
	movl	$53, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2387
	movl	$32, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2484
	movl	$41, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2580
	movl	$42, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2625
	movl	$34, %ecx
	cmpq	%rax, %rcx
	je	tinfl_decompress2652
	jmp	tinfl_decompress2655
	.text
tinfl_decompress174:
	# %175 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %176 = getelementptr %struct.tinfl_decompressor_tag, i8* %175, i32 0, i32 3
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 0, i32* %176
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %177 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %178 = getelementptr %struct.tinfl_decompressor_tag, i8* %177, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 0, i32* %178
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %22
	movq	$0, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %21
	movq	$0, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %20
	movq	$0, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %19
	movq	$0, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i64 0, i64* %23
	movq	$0, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %179 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %180 = getelementptr %struct.tinfl_decompressor_tag, i8* %179, i32 0, i32 7
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 1, i32* %180
	movq	$1, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %181 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %182 = getelementptr %struct.tinfl_decompressor_tag, i8* %181, i32 0, i32 4
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 1, i32* %182
	movq	$1, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %183 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %184 = and i32 %183, 1
	movq	%r8, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %r8
	# %185 = icmp ne i32 %184, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %185, label %186, label %300
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress300
	jmp	tinfl_decompress186
	.text
tinfl_decompress186:
	# br label %187
	jmp	tinfl_decompress187
	.text
tinfl_decompress187:
	# br label %188
	jmp	tinfl_decompress188
	.text
tinfl_decompress188:
	# %189 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %190 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %191 = icmp uge i8* %189, %190
	movq	%r11, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setnb	%r8b
	# br i1 %191, label %192, label %203
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress203
	jmp	tinfl_decompress192
	.text
tinfl_decompress192:
	# br label %193
	jmp	tinfl_decompress193
	.text
tinfl_decompress193:
	# %194 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %195 = and i32 %194, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %196 = icmp ne i32 %195, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %197 = zext i1 %196 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %198 = select i1 %196, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %198, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %199 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %200 = getelementptr %struct.tinfl_decompressor_tag, i8* %199, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %200
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress201:
	# br label %202
	jmp	tinfl_decompress202
	.text
tinfl_decompress202:
	# br label %188
	jmp	tinfl_decompress188
	.text
tinfl_decompress203:
	# %204 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %205 = getelementptr i8, i8* %204, i32 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %205, i8** %24
	movq	%r8, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %206 = load i8, i8* %204
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %207 = zext i8 %206 to i32
	movq	%r8, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %208 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %209 = getelementptr %struct.tinfl_decompressor_tag, i8* %208, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 %207, i32* %209
	movq	%r11, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %210
	jmp	tinfl_decompress210
	.text
tinfl_decompress210:
	# br label %211
	jmp	tinfl_decompress211
	.text
tinfl_decompress211:
	# br label %212
	jmp	tinfl_decompress212
	.text
tinfl_decompress212:
	# %213 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %214 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %215 = icmp uge i8* %213, %214
	movq	%r11, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setnb	%r8b
	# br i1 %215, label %216, label %227
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress227
	jmp	tinfl_decompress216
	.text
tinfl_decompress216:
	# br label %217
	jmp	tinfl_decompress217
	.text
tinfl_decompress217:
	# %218 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %219 = and i32 %218, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %220 = icmp ne i32 %219, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %221 = zext i1 %220 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %222 = select i1 %220, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %222, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %223 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %224 = getelementptr %struct.tinfl_decompressor_tag, i8* %223, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 2, i32* %224
	movq	$2, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress225:
	# br label %226
	jmp	tinfl_decompress226
	.text
tinfl_decompress226:
	# br label %212
	jmp	tinfl_decompress212
	.text
tinfl_decompress227:
	# %228 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %229 = getelementptr i8, i8* %228, i32 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i8* %229, i8** %24
	movq	%r11, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %230 = load i8, i8* %228
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %231 = zext i8 %230 to i32
	movq	%r8, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %232 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %233 = getelementptr %struct.tinfl_decompressor_tag, i8* %232, i32 0, i32 3
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 %231, i32* %233
	movq	%r11, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	tinfl_decompress234
	.text
tinfl_decompress234:
	# %235 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %236 = getelementptr %struct.tinfl_decompressor_tag, i8* %235, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %237 = load i32, i32* %236
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %238 = mul i32 %237, 256
	movq	%r8, %rax
	movq	$256, %rcx
	imulq	%rcx, %rax
	movq	%rax, %r11
	# %239 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %240 = getelementptr %struct.tinfl_decompressor_tag, i8* %239, i32 0, i32 3
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %241 = load i32, i32* %240
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %242 = add i32 %238, %241
	movq	%r11, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %243 = urem i32 %242, 31
	pushq	%rdx
	movq	%r8, %rax
	movq	$31, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %r8
	popq	%rdx
	# %244 = icmp ne i32 %243, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %244, label %257, label %245
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rdi
	je	tinfl_decompress245
	jmp	tinfl_decompress257
	.text
tinfl_decompress245:
	# %246 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %247 = getelementptr %struct.tinfl_decompressor_tag, i8* %246, i32 0, i32 3
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %248 = load i32, i32* %247
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %249 = and i32 %248, 32
	movq	%r8, %rax
	movq	$32, %rcx
	andq	%rcx, %rax
	movq	%rax, %r8
	# %250 = icmp ne i32 %249, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %250, label %257, label %251
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rdi
	je	tinfl_decompress251
	jmp	tinfl_decompress257
	.text
tinfl_decompress251:
	# %252 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %253 = getelementptr %struct.tinfl_decompressor_tag, i8* %252, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %254 = load i32, i32* %253
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %255 = and i32 %254, 15
	movq	%rdi, %rax
	movq	$15, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %256 = icmp ne i32 %255, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br label %257
	jmp	tinfl_decompress257
	.text
tinfl_decompress257:
	# %258 = phi i1 [1, %245], [1, %234], [%256, %251]
	# %259 = zext i1 %258 to i32
	movq	%rdi, %rax
	movq	%rax, %rdi
	# store i32 %259, i32* %21
	movq	%rdi, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %260 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %261 = and i32 %260, 4
	movq	%rdi, %rax
	movq	$4, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %262 = icmp ne i32 %261, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %262, label %287, label %263
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress263
	jmp	tinfl_decompress287
	.text
tinfl_decompress263:
	# %264 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %265 = getelementptr %struct.tinfl_decompressor_tag, i8* %264, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %266 = load i32, i32* %265
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %267 = lshr i32 %266, 4
	movq	%rdi, %rax
	movq	$4, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# %268 = add i32 8, %267
	movq	$8, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %269 = shl i32 1, %268
	movq	$1, %rax
	movq	%rdi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %270 = icmp ugt i32 %269, 32768
	movq	%rdi, %rax
	movq	$32768, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	seta	%dil
	# br i1 %270, label %282, label %271
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rdx
	je	tinfl_decompress271
	jmp	tinfl_decompress282
	.text
tinfl_decompress271:
	# %272 = load i64, i64* %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %273 = add i64 %272, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %274 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %275 = getelementptr %struct.tinfl_decompressor_tag, i8* %274, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %276 = load i32, i32* %275
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %277 = lshr i32 %276, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %278 = add i32 8, %277
	movq	$8, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %279 = zext i32 %278 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %280 = shl i64 1, %279
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %281 = icmp ult i64 %273, %280
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br label %282
	jmp	tinfl_decompress282
	.text
tinfl_decompress282:
	# %283 = phi i1 [1, %263], [%281, %271]
	# %284 = zext i1 %283 to i32
	movq	%rdx, %rax
	movq	%rax, %rdi
	# %285 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %286 = or i32 %285, %284
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %286, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %287
	jmp	tinfl_decompress287
	.text
tinfl_decompress287:
	# %288 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %289 = icmp ne i32 %288, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %289, label %290, label %299
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress299
	jmp	tinfl_decompress290
	.text
tinfl_decompress290:
	# br label %291
	jmp	tinfl_decompress291
	.text
tinfl_decompress291:
	# br label %292
	jmp	tinfl_decompress292
	.text
tinfl_decompress292:
	# br label %293
	jmp	tinfl_decompress293
	.text
tinfl_decompress293:
	# store i32 -1, i32* %18
	movq	$-1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %294 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %295 = getelementptr %struct.tinfl_decompressor_tag, i8* %294, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 36, i32* %295
	movq	$36, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress296:
	# br label %297
	jmp	tinfl_decompress297
	.text
tinfl_decompress297:
	# br label %292
	jmp	tinfl_decompress292
	.text
tinfl_decompress298:
	# br label %299
	jmp	tinfl_decompress299
	.text
tinfl_decompress299:
	# br label %300
	jmp	tinfl_decompress300
	.text
tinfl_decompress300:
	# br label %301
	jmp	tinfl_decompress301
	.text
tinfl_decompress301:
	# br label %302
	jmp	tinfl_decompress302
	.text
tinfl_decompress302:
	# %303 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %304 = icmp ult i32 %303, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %304, label %305, label %342
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress342
	jmp	tinfl_decompress305
	.text
tinfl_decompress305:
	# br label %306
	jmp	tinfl_decompress306
	.text
tinfl_decompress306:
	# br label %307
	jmp	tinfl_decompress307
	.text
tinfl_decompress307:
	# br label %308
	jmp	tinfl_decompress308
	.text
tinfl_decompress308:
	# %309 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %310 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %311 = icmp uge i8* %309, %310
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %311, label %312, label %323
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress323
	jmp	tinfl_decompress312
	.text
tinfl_decompress312:
	# br label %313
	jmp	tinfl_decompress313
	.text
tinfl_decompress313:
	# %314 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %315 = and i32 %314, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %316 = icmp ne i32 %315, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %317 = zext i1 %316 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %318 = select i1 %316, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %318, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %319 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %320 = getelementptr %struct.tinfl_decompressor_tag, i8* %319, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 3, i32* %320
	movq	$3, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress321:
	# br label %322
	jmp	tinfl_decompress322
	.text
tinfl_decompress322:
	# br label %308
	jmp	tinfl_decompress308
	.text
tinfl_decompress323:
	# %324 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %325 = getelementptr i8, i8* %324, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %325, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %326 = load i8, i8* %324
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %327 = zext i8 %326 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %327, i32* %30
	movq	%rdx, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %328
	jmp	tinfl_decompress328
	.text
tinfl_decompress328:
	# %329 = load i32, i32* %30
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %330 = zext i32 %329 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %331 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %332 = zext i32 %331 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %333 = shl i64 %330, %332
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %334 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %335 = or i64 %334, %333
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %335, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %336 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %337 = add i32 %336, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %337, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %338
	jmp	tinfl_decompress338
	.text
tinfl_decompress338:
	# %339 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %340 = icmp ult i32 %339, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %340, label %306, label %341
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress341
	jmp	tinfl_decompress306
	.text
tinfl_decompress341:
	# br label %342
	jmp	tinfl_decompress342
	.text
tinfl_decompress342:
	# %343 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %344 = and i64 %343, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %345 = trunc i64 %344 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %346 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %347 = getelementptr %struct.tinfl_decompressor_tag, i8* %346, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %345, i32* %347
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %348 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %349 = lshr i64 %348, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %349, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %350 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %351 = sub i32 %350, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %351, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %352
	jmp	tinfl_decompress352
	.text
tinfl_decompress352:
	# %353 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %354 = getelementptr %struct.tinfl_decompressor_tag, i8* %353, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %355 = load i32, i32* %354
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %356 = lshr i32 %355, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# %357 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %358 = getelementptr %struct.tinfl_decompressor_tag, i8* %357, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %356, i32* %358
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %359 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %360 = getelementptr %struct.tinfl_decompressor_tag, i8* %359, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %361 = load i32, i32* %360
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %362 = icmp eq i32 %361, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %362, label %363, label %731
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress731
	jmp	tinfl_decompress363
	.text
tinfl_decompress363:
	# br label %364
	jmp	tinfl_decompress364
	.text
tinfl_decompress364:
	# %365 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %366 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %367 = and i32 %366, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %368 = icmp ult i32 %365, %367
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %368, label %369, label %408
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress408
	jmp	tinfl_decompress369
	.text
tinfl_decompress369:
	# br label %370
	jmp	tinfl_decompress370
	.text
tinfl_decompress370:
	# br label %371
	jmp	tinfl_decompress371
	.text
tinfl_decompress371:
	# br label %372
	jmp	tinfl_decompress372
	.text
tinfl_decompress372:
	# %373 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %374 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %375 = icmp uge i8* %373, %374
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %375, label %376, label %387
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress387
	jmp	tinfl_decompress376
	.text
tinfl_decompress376:
	# br label %377
	jmp	tinfl_decompress377
	.text
tinfl_decompress377:
	# %378 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %379 = and i32 %378, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %380 = icmp ne i32 %379, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %381 = zext i1 %380 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %382 = select i1 %380, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %382, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %383 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %384 = getelementptr %struct.tinfl_decompressor_tag, i8* %383, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 5, i32* %384
	movq	$5, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress385:
	# br label %386
	jmp	tinfl_decompress386
	.text
tinfl_decompress386:
	# br label %372
	jmp	tinfl_decompress372
	.text
tinfl_decompress387:
	# %388 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %389 = getelementptr i8, i8* %388, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %389, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %390 = load i8, i8* %388
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %391 = zext i8 %390 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %391, i32* %31
	movq	%rdx, %rax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %392
	jmp	tinfl_decompress392
	.text
tinfl_decompress392:
	# %393 = load i32, i32* %31
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %394 = zext i32 %393 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %395 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %396 = zext i32 %395 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %397 = shl i64 %394, %396
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %398 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %399 = or i64 %398, %397
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %399, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %400 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %401 = add i32 %400, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %401, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %402
	jmp	tinfl_decompress402
	.text
tinfl_decompress402:
	# %403 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %404 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %405 = and i32 %404, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %406 = icmp ult i32 %403, %405
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %406, label %370, label %407
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress407
	jmp	tinfl_decompress370
	.text
tinfl_decompress407:
	# br label %408
	jmp	tinfl_decompress408
	.text
tinfl_decompress408:
	# %409 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %410 = and i32 %409, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %411 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %412 = zext i32 %410 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %413 = lshr i64 %411, %412
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %413, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %414 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %415 = and i32 %414, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %416 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %417 = sub i32 %416, %415
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %417, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %418
	jmp	tinfl_decompress418
	.text
tinfl_decompress418:
	# store i32 0, i32* %21
	movq	$0, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %419
	jmp	tinfl_decompress419
	.text
tinfl_decompress419:
	# %420 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %421 = icmp ult i32 %420, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %421, label %422, label %511
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress511
	jmp	tinfl_decompress422
	.text
tinfl_decompress422:
	# %423 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %424 = icmp ne i32 %423, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %424, label %425, label %480
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress480
	jmp	tinfl_decompress425
	.text
tinfl_decompress425:
	# br label %426
	jmp	tinfl_decompress426
	.text
tinfl_decompress426:
	# %427 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %428 = icmp ult i32 %427, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %428, label %429, label %466
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress466
	jmp	tinfl_decompress429
	.text
tinfl_decompress429:
	# br label %430
	jmp	tinfl_decompress430
	.text
tinfl_decompress430:
	# br label %431
	jmp	tinfl_decompress431
	.text
tinfl_decompress431:
	# br label %432
	jmp	tinfl_decompress432
	.text
tinfl_decompress432:
	# %433 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %434 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %435 = icmp uge i8* %433, %434
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %435, label %436, label %447
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress447
	jmp	tinfl_decompress436
	.text
tinfl_decompress436:
	# br label %437
	jmp	tinfl_decompress437
	.text
tinfl_decompress437:
	# %438 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %439 = and i32 %438, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %440 = icmp ne i32 %439, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %441 = zext i1 %440 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %442 = select i1 %440, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %442, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %443 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %444 = getelementptr %struct.tinfl_decompressor_tag, i8* %443, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 6, i32* %444
	movq	$6, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress445:
	# br label %446
	jmp	tinfl_decompress446
	.text
tinfl_decompress446:
	# br label %432
	jmp	tinfl_decompress432
	.text
tinfl_decompress447:
	# %448 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %449 = getelementptr i8, i8* %448, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %449, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %450 = load i8, i8* %448
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %451 = zext i8 %450 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %451, i32* %32
	movq	%rdx, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %452
	jmp	tinfl_decompress452
	.text
tinfl_decompress452:
	# %453 = load i32, i32* %32
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %454 = zext i32 %453 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %455 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %456 = zext i32 %455 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %457 = shl i64 %454, %456
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %458 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %459 = or i64 %458, %457
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %459, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %460 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %461 = add i32 %460, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %461, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %462
	jmp	tinfl_decompress462
	.text
tinfl_decompress462:
	# %463 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %464 = icmp ult i32 %463, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %464, label %430, label %465
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress465
	jmp	tinfl_decompress430
	.text
tinfl_decompress465:
	# br label %466
	jmp	tinfl_decompress466
	.text
tinfl_decompress466:
	# %467 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %468 = and i64 %467, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %469 = trunc i64 %468 to i8
	movq	%rdx, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %470 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %471 = getelementptr %struct.tinfl_decompressor_tag, i8* %470, i32 0, i32 21
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %472 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %473 = zext i32 %472 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %474 = getelementptr [4 x i8], i8* %471, i64 0, i64 %473
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %469, i8* %474
	movq	%r8, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %475 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %476 = lshr i64 %475, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %476, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %477 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %478 = sub i32 %477, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %478, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %479
	jmp	tinfl_decompress479
	.text
tinfl_decompress479:
	# br label %507
	jmp	tinfl_decompress507
	.text
tinfl_decompress480:
	# br label %481
	jmp	tinfl_decompress481
	.text
tinfl_decompress481:
	# br label %482
	jmp	tinfl_decompress482
	.text
tinfl_decompress482:
	# %483 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %484 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %485 = icmp uge i8* %483, %484
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %485, label %486, label %497
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress497
	jmp	tinfl_decompress486
	.text
tinfl_decompress486:
	# br label %487
	jmp	tinfl_decompress487
	.text
tinfl_decompress487:
	# %488 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %489 = and i32 %488, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %490 = icmp ne i32 %489, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %491 = zext i1 %490 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %492 = select i1 %490, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %492, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %493 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %494 = getelementptr %struct.tinfl_decompressor_tag, i8* %493, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 7, i32* %494
	movq	$7, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress495:
	# br label %496
	jmp	tinfl_decompress496
	.text
tinfl_decompress496:
	# br label %482
	jmp	tinfl_decompress482
	.text
tinfl_decompress497:
	# %498 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %499 = getelementptr i8, i8* %498, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %499, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %500 = load i8, i8* %498
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %501 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %502 = getelementptr %struct.tinfl_decompressor_tag, i8* %501, i32 0, i32 21
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %503 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %504 = zext i32 %503 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %505 = getelementptr [4 x i8], i8* %502, i64 0, i64 %504
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %500, i8* %505
	movq	%r8, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %506
	jmp	tinfl_decompress506
	.text
tinfl_decompress506:
	# br label %507
	jmp	tinfl_decompress507
	.text
tinfl_decompress507:
	# br label %508
	jmp	tinfl_decompress508
	.text
tinfl_decompress508:
	# %509 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %510 = add i32 %509, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %510, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %419
	jmp	tinfl_decompress419
	.text
tinfl_decompress511:
	# %512 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %513 = getelementptr %struct.tinfl_decompressor_tag, i8* %512, i32 0, i32 21
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %514 = getelementptr [4 x i8], i8* %513, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %515 = load i8, i8* %514
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %516 = zext i8 %515 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %517 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %518 = getelementptr %struct.tinfl_decompressor_tag, i8* %517, i32 0, i32 21
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %519 = getelementptr [4 x i8], i8* %518, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %520 = load i8, i8* %519
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %521 = zext i8 %520 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %522 = shl i32 %521, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %523 = or i32 %516, %522
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# store i32 %523, i32* %21
	movq	%r8, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %524 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %525 = getelementptr %struct.tinfl_decompressor_tag, i8* %524, i32 0, i32 21
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %526 = getelementptr [4 x i8], i8* %525, i64 0, i64 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %527 = load i8, i8* %526
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %528 = zext i8 %527 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %529 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %530 = getelementptr %struct.tinfl_decompressor_tag, i8* %529, i32 0, i32 21
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %531 = getelementptr [4 x i8], i8* %530, i64 0, i64 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %532 = load i8, i8* %531
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %533 = zext i8 %532 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %534 = shl i32 %533, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %535 = or i32 %528, %534
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %536 = xor i32 65535, %535
	movq	$65535, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %537 = icmp ne i32 %523, %536
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %537, label %538, label %547
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress547
	jmp	tinfl_decompress538
	.text
tinfl_decompress538:
	# br label %539
	jmp	tinfl_decompress539
	.text
tinfl_decompress539:
	# br label %540
	jmp	tinfl_decompress540
	.text
tinfl_decompress540:
	# br label %541
	jmp	tinfl_decompress541
	.text
tinfl_decompress541:
	# store i32 -1, i32* %18
	movq	$-1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %542 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %543 = getelementptr %struct.tinfl_decompressor_tag, i8* %542, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 39, i32* %543
	movq	$39, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress544:
	# br label %545
	jmp	tinfl_decompress545
	.text
tinfl_decompress545:
	# br label %540
	jmp	tinfl_decompress540
	.text
tinfl_decompress546:
	# br label %547
	jmp	tinfl_decompress547
	.text
tinfl_decompress547:
	# br label %548
	jmp	tinfl_decompress548
	.text
tinfl_decompress548:
	# %549 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %550 = icmp ne i32 %549, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %550, label %551, label %554
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tinfl_decompress554
	jmp	tinfl_decompress551
	.text
tinfl_decompress551:
	# %552 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %553 = icmp ne i32 %552, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, -624(%rbp)
	setne	-624(%rbp)
	# br label %554
	movq	-624(%rbp), %rdx
	jmp	tinfl_decompress554
	.text
tinfl_decompress554:
	# %555 = phi i1 [0, %548], [%553, %551]
	# br i1 %555, label %556, label %623
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress623
	jmp	tinfl_decompress556
	.text
tinfl_decompress556:
	# br label %557
	jmp	tinfl_decompress557
	.text
tinfl_decompress557:
	# %558 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %559 = icmp ult i32 %558, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %559, label %560, label %597
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress597
	jmp	tinfl_decompress560
	.text
tinfl_decompress560:
	# br label %561
	jmp	tinfl_decompress561
	.text
tinfl_decompress561:
	# br label %562
	jmp	tinfl_decompress562
	.text
tinfl_decompress562:
	# br label %563
	jmp	tinfl_decompress563
	.text
tinfl_decompress563:
	# %564 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %565 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %566 = icmp uge i8* %564, %565
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %566, label %567, label %578
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress578
	jmp	tinfl_decompress567
	.text
tinfl_decompress567:
	# br label %568
	jmp	tinfl_decompress568
	.text
tinfl_decompress568:
	# %569 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %570 = and i32 %569, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %571 = icmp ne i32 %570, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %572 = zext i1 %571 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %573 = select i1 %571, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %573, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %574 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %575 = getelementptr %struct.tinfl_decompressor_tag, i8* %574, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 51, i32* %575
	movq	$51, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress576:
	# br label %577
	jmp	tinfl_decompress577
	.text
tinfl_decompress577:
	# br label %563
	jmp	tinfl_decompress563
	.text
tinfl_decompress578:
	# %579 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %580 = getelementptr i8, i8* %579, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %580, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %581 = load i8, i8* %579
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %582 = zext i8 %581 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %582, i32* %33
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %583
	jmp	tinfl_decompress583
	.text
tinfl_decompress583:
	# %584 = load i32, i32* %33
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %585 = zext i32 %584 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %586 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %587 = zext i32 %586 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %588 = shl i64 %585, %587
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %589 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %590 = or i64 %589, %588
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %590, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %591 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %592 = add i32 %591, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %592, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %593
	jmp	tinfl_decompress593
	.text
tinfl_decompress593:
	# %594 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %595 = icmp ult i32 %594, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %595, label %561, label %596
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress596
	jmp	tinfl_decompress561
	.text
tinfl_decompress596:
	# br label %597
	jmp	tinfl_decompress597
	.text
tinfl_decompress597:
	# %598 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %599 = and i64 %598, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %600 = trunc i64 %599 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %600, i32* %20
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %601 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %602 = lshr i64 %601, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %602, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %603 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %604 = sub i32 %603, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %604, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %605
	jmp	tinfl_decompress605
	.text
tinfl_decompress605:
	# br label %606
	jmp	tinfl_decompress606
	.text
tinfl_decompress606:
	# %607 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %608 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %609 = icmp uge i8* %607, %608
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %609, label %610, label %616
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress616
	jmp	tinfl_decompress610
	.text
tinfl_decompress610:
	# br label %611
	jmp	tinfl_decompress611
	.text
tinfl_decompress611:
	# store i32 2, i32* %18
	movq	$2, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %612 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %613 = getelementptr %struct.tinfl_decompressor_tag, i8* %612, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 52, i32* %613
	movq	$52, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress614:
	# br label %615
	jmp	tinfl_decompress615
	.text
tinfl_decompress615:
	# br label %606
	jmp	tinfl_decompress606
	.text
tinfl_decompress616:
	# %617 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %618 = trunc i32 %617 to i8
	movq	%rdx, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %619 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %620 = getelementptr i8, i8* %619, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %620, i8** %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 %618, i8* %619
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %621 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %622 = add i32 %621, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %622, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %548
	jmp	tinfl_decompress548
	.text
tinfl_decompress623:
	# br label %624
	jmp	tinfl_decompress624
	.text
tinfl_decompress624:
	# %625 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %626 = icmp ne i32 %625, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %626, label %627, label %730
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress730
	jmp	tinfl_decompress627
	.text
tinfl_decompress627:
	# br label %628
	jmp	tinfl_decompress628
	.text
tinfl_decompress628:
	# %629 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %630 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %631 = icmp uge i8* %629, %630
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %631, label %632, label %638
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress638
	jmp	tinfl_decompress632
	.text
tinfl_decompress632:
	# br label %633
	jmp	tinfl_decompress633
	.text
tinfl_decompress633:
	# store i32 2, i32* %18
	movq	$2, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %634 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %635 = getelementptr %struct.tinfl_decompressor_tag, i8* %634, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 9, i32* %635
	movq	$9, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress636:
	# br label %637
	jmp	tinfl_decompress637
	.text
tinfl_decompress637:
	# br label %628
	jmp	tinfl_decompress628
	.text
tinfl_decompress638:
	# br label %639
	jmp	tinfl_decompress639
	.text
tinfl_decompress639:
	# %640 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %641 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %642 = icmp uge i8* %640, %641
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %642, label %643, label %654
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress654
	jmp	tinfl_decompress643
	.text
tinfl_decompress643:
	# br label %644
	jmp	tinfl_decompress644
	.text
tinfl_decompress644:
	# %645 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %646 = and i32 %645, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %647 = icmp ne i32 %646, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %648 = zext i1 %647 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %649 = select i1 %647, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %649, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %650 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %651 = getelementptr %struct.tinfl_decompressor_tag, i8* %650, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 38, i32* %651
	movq	$38, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress652:
	# br label %653
	jmp	tinfl_decompress653
	.text
tinfl_decompress653:
	# br label %639
	jmp	tinfl_decompress639
	.text
tinfl_decompress654:
	# %655 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %656 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %657 = ptrtoint i8** %655 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %658 = ptrtoint i8** %656 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %659 = sub i64 %657, %658
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %r8
	# %660 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %661 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %662 = ptrtoint i8** %660 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %663 = ptrtoint i8** %661 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %664 = sub i64 %662, %663
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %665 = icmp ult i64 %659, %664
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %665, label %666, label %672
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress672
	jmp	tinfl_decompress666
	.text
tinfl_decompress666:
	# %667 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %668 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %669 = ptrtoint i8** %667 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %670 = ptrtoint i8** %668 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %671 = sub i64 %669, %670
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, -632(%rbp)
	# br label %678
	movq	-632(%rbp), %rdi
	jmp	tinfl_decompress678
	.text
tinfl_decompress672:
	# %673 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %674 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %675 = ptrtoint i8** %673 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %676 = ptrtoint i8** %674 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %677 = sub i64 %675, %676
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, -640(%rbp)
	# br label %678
	movq	-640(%rbp), %rdi
	jmp	tinfl_decompress678
	.text
tinfl_decompress678:
	# %679 = phi i64 [%671, %666], [%677, %672]
	# %680 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %681 = zext i32 %680 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %682 = icmp ult i64 %679, %681
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %682, label %683, label %709
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress709
	jmp	tinfl_decompress683
	.text
tinfl_decompress683:
	# %684 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %685 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %686 = ptrtoint i8** %684 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %687 = ptrtoint i8** %685 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %688 = sub i64 %686, %687
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %r8
	# %689 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %690 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %691 = ptrtoint i8** %689 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %692 = ptrtoint i8** %690 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %693 = sub i64 %691, %692
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %694 = icmp ult i64 %688, %693
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %694, label %695, label %701
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress701
	jmp	tinfl_decompress695
	.text
tinfl_decompress695:
	# %696 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %697 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %698 = ptrtoint i8** %696 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %699 = ptrtoint i8** %697 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %700 = sub i64 %698, %699
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, -648(%rbp)
	# br label %707
	movq	-648(%rbp), %rcx
	movq	%rcx, -664(%rbp)
	jmp	tinfl_decompress707
	.text
tinfl_decompress701:
	# %702 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %703 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %704 = ptrtoint i8** %702 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %705 = ptrtoint i8** %703 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %706 = sub i64 %704, %705
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, -656(%rbp)
	# br label %707
	movq	-656(%rbp), %rcx
	movq	%rcx, -664(%rbp)
	jmp	tinfl_decompress707
	.text
tinfl_decompress707:
	# %708 = phi i64 [%700, %695], [%706, %701]
	# br label %712
	movq	-664(%rbp), %rdx
	jmp	tinfl_decompress712
	.text
tinfl_decompress709:
	# %710 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %711 = zext i32 %710 to i64
	movq	%rdx, %rax
	movq	$0, -672(%rbp)
	movl	%eax, -672(%rbp)
	# br label %712
	movq	-672(%rbp), %rdx
	jmp	tinfl_decompress712
	.text
tinfl_decompress712:
	# %713 = phi i64 [%708, %707], [%711, %709]
	# store i64 %713, i64* %34
	movq	%rdx, %rax
	movq	-216(%rbp), %rcx
	movq	%rax, (%rcx)
	# %714 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %715 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %716 = load i64, i64* %34
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %717 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %718 = call i64 @llvm.objectsize.i64.p0 (i8* %717, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %719 = call i8* @__memcpy_chk (i8* %714, i8* %715, i64 %716, i64 %718)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %720 = load i64, i64* %34
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %721 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %722 = getelementptr i8, i8* %721, i64 %720
	movq	%rdx, %rcx
	movq	%rdi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %722, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %723 = load i64, i64* %34
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %724 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %725 = getelementptr i8, i8* %724, i64 %723
	movq	%rdx, %rcx
	movq	%rdi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %725, i8** %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %726 = load i64, i64* %34
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %727 = trunc i64 %726 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %728 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %729 = sub i32 %728, %727
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %729, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %624
	jmp	tinfl_decompress624
	.text
tinfl_decompress730:
	# br label %2454
	jmp	tinfl_decompress2454
	.text
tinfl_decompress731:
	# %732 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %733 = getelementptr %struct.tinfl_decompressor_tag, i8* %732, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %734 = load i32, i32* %733
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %735 = icmp eq i32 %734, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %735, label %736, label %745
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress745
	jmp	tinfl_decompress736
	.text
tinfl_decompress736:
	# br label %737
	jmp	tinfl_decompress737
	.text
tinfl_decompress737:
	# br label %738
	jmp	tinfl_decompress738
	.text
tinfl_decompress738:
	# br label %739
	jmp	tinfl_decompress739
	.text
tinfl_decompress739:
	# store i32 -1, i32* %18
	movq	$-1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %740 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %741 = getelementptr %struct.tinfl_decompressor_tag, i8* %740, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 10, i32* %741
	movq	$10, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress742:
	# br label %743
	jmp	tinfl_decompress743
	.text
tinfl_decompress743:
	# br label %738
	jmp	tinfl_decompress738
	.text
tinfl_decompress744:
	# br label %2453
	jmp	tinfl_decompress2453
	.text
tinfl_decompress745:
	# %746 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %747 = getelementptr %struct.tinfl_decompressor_tag, i8* %746, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %748 = load i32, i32* %747
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %749 = icmp eq i32 %748, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %749, label %750, label %808
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress808
	jmp	tinfl_decompress750
	.text
tinfl_decompress750:
	# %751 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %752 = getelementptr %struct.tinfl_decompressor_tag, i8* %751, i32 0, i32 18
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %753 = getelementptr [288 x i8], i8* %752, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %753, i8** %35
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# %754 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %755 = getelementptr %struct.tinfl_decompressor_tag, i8* %754, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %756 = getelementptr [3 x i32], i8* %755, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 288, i32* %756
	movq	$288, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %757 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %758 = getelementptr %struct.tinfl_decompressor_tag, i8* %757, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %759 = getelementptr [3 x i32], i8* %758, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 32, i32* %759
	movq	$32, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %760 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %761 = getelementptr %struct.tinfl_decompressor_tag, i8* %760, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %762 = getelementptr [32 x i8], i8* %761, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %763 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %764 = getelementptr %struct.tinfl_decompressor_tag, i8* %763, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %765 = getelementptr [32 x i8], i8* %764, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %766 = call i64 @llvm.objectsize.i64.p0 (i8* %765, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %767 = call i8* @__memset_chk (i8* %762, i32 5, i64 32, i64 %766)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$5, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %36
	movq	$0, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %768
	jmp	tinfl_decompress768
	.text
tinfl_decompress768:
	# %769 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %770 = icmp ule i32 %769, 143
	movq	%rdx, %rax
	movq	$143, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %770, label %771, label %777
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress777
	jmp	tinfl_decompress771
	.text
tinfl_decompress771:
	# %772 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %773 = getelementptr i8, i8* %772, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %773, i8** %35
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 8, i8* %772
	movq	$8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %774
	jmp	tinfl_decompress774
	.text
tinfl_decompress774:
	# %775 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %776 = add i32 %775, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %776, i32* %36
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %768
	jmp	tinfl_decompress768
	.text
tinfl_decompress777:
	# br label %778
	jmp	tinfl_decompress778
	.text
tinfl_decompress778:
	# %779 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %780 = icmp ule i32 %779, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %780, label %781, label %787
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress787
	jmp	tinfl_decompress781
	.text
tinfl_decompress781:
	# %782 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %783 = getelementptr i8, i8* %782, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %783, i8** %35
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 9, i8* %782
	movq	$9, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %784
	jmp	tinfl_decompress784
	.text
tinfl_decompress784:
	# %785 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %786 = add i32 %785, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %786, i32* %36
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %778
	jmp	tinfl_decompress778
	.text
tinfl_decompress787:
	# br label %788
	jmp	tinfl_decompress788
	.text
tinfl_decompress788:
	# %789 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %790 = icmp ule i32 %789, 279
	movq	%rdx, %rax
	movq	$279, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %790, label %791, label %797
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress797
	jmp	tinfl_decompress791
	.text
tinfl_decompress791:
	# %792 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %793 = getelementptr i8, i8* %792, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %793, i8** %35
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 7, i8* %792
	movq	$7, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %794
	jmp	tinfl_decompress794
	.text
tinfl_decompress794:
	# %795 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %796 = add i32 %795, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %796, i32* %36
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %788
	jmp	tinfl_decompress788
	.text
tinfl_decompress797:
	# br label %798
	jmp	tinfl_decompress798
	.text
tinfl_decompress798:
	# %799 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %800 = icmp ule i32 %799, 287
	movq	%rdx, %rax
	movq	$287, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %800, label %801, label %807
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress807
	jmp	tinfl_decompress801
	.text
tinfl_decompress801:
	# %802 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %803 = getelementptr i8, i8* %802, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %803, i8** %35
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 8, i8* %802
	movq	$8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %804
	jmp	tinfl_decompress804
	.text
tinfl_decompress804:
	# %805 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %806 = add i32 %805, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %806, i32* %36
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %798
	jmp	tinfl_decompress798
	.text
tinfl_decompress807:
	# br label %994
	jmp	tinfl_decompress994
	.text
tinfl_decompress808:
	# store i32 0, i32* %21
	movq	$0, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %809
	jmp	tinfl_decompress809
	.text
tinfl_decompress809:
	# %810 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %811 = icmp ult i32 %810, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %811, label %812, label %911
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress911
	jmp	tinfl_decompress812
	.text
tinfl_decompress812:
	# br label %813
	jmp	tinfl_decompress813
	.text
tinfl_decompress813:
	# %814 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %815 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %816 = zext i32 %815 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %817 = getelementptr [4 x i8], i8* @.str.14, i64 0, i64 %816
	leaq	_.str.14(%rip), %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %818 = load i8, i8* %817
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %819 = sext i8 %818 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %820 = icmp ult i32 %814, %819
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %820, label %821, label %863
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress863
	jmp	tinfl_decompress821
	.text
tinfl_decompress821:
	# br label %822
	jmp	tinfl_decompress822
	.text
tinfl_decompress822:
	# br label %823
	jmp	tinfl_decompress823
	.text
tinfl_decompress823:
	# br label %824
	jmp	tinfl_decompress824
	.text
tinfl_decompress824:
	# %825 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %826 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %827 = icmp uge i8* %825, %826
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %827, label %828, label %839
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress839
	jmp	tinfl_decompress828
	.text
tinfl_decompress828:
	# br label %829
	jmp	tinfl_decompress829
	.text
tinfl_decompress829:
	# %830 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %831 = and i32 %830, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %832 = icmp ne i32 %831, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %833 = zext i1 %832 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %834 = select i1 %832, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %834, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %835 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %836 = getelementptr %struct.tinfl_decompressor_tag, i8* %835, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 11, i32* %836
	movq	$11, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress837:
	# br label %838
	jmp	tinfl_decompress838
	.text
tinfl_decompress838:
	# br label %824
	jmp	tinfl_decompress824
	.text
tinfl_decompress839:
	# %840 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %841 = getelementptr i8, i8* %840, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %841, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %842 = load i8, i8* %840
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %843 = zext i8 %842 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %843, i32* %37
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %844
	jmp	tinfl_decompress844
	.text
tinfl_decompress844:
	# %845 = load i32, i32* %37
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %846 = zext i32 %845 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %847 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %848 = zext i32 %847 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %849 = shl i64 %846, %848
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %850 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %851 = or i64 %850, %849
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %851, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %852 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %853 = add i32 %852, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %853, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %854
	jmp	tinfl_decompress854
	.text
tinfl_decompress854:
	# %855 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %856 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %857 = zext i32 %856 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %858 = getelementptr [4 x i8], i8* @.str.14, i64 0, i64 %857
	leaq	_.str.14(%rip), %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %859 = load i8, i8* %858
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %860 = sext i8 %859 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %861 = icmp ult i32 %855, %860
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %861, label %822, label %862
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress862
	jmp	tinfl_decompress822
	.text
tinfl_decompress862:
	# br label %863
	jmp	tinfl_decompress863
	.text
tinfl_decompress863:
	# %864 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %865 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %866 = zext i32 %865 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %867 = getelementptr [4 x i8], i8* @.str.14, i64 0, i64 %866
	leaq	_.str.14(%rip), %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %868 = load i8, i8* %867
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %869 = sext i8 %868 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %870 = shl i32 1, %869
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %871 = sub i32 %870, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %872 = sext i32 %871 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %873 = and i64 %864, %872
	movq	%rdi, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %874 = trunc i64 %873 to i32
	movq	%rdx, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %875 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %876 = getelementptr %struct.tinfl_decompressor_tag, i8* %875, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %877 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %878 = zext i32 %877 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %879 = getelementptr [3 x i32], i8* %876, i64 0, i64 %878
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %874, i32* %879
	movq	%r8, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %880 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %881 = zext i32 %880 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %882 = getelementptr [4 x i8], i8* @.str.14, i64 0, i64 %881
	leaq	_.str.14(%rip), %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %883 = load i8, i8* %882
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %884 = sext i8 %883 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %885 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %886 = zext i32 %884 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %887 = lshr i64 %885, %886
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %887, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %888 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %889 = zext i32 %888 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %890 = getelementptr [4 x i8], i8* @.str.14, i64 0, i64 %889
	leaq	_.str.14(%rip), %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %891 = load i8, i8* %890
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %892 = sext i8 %891 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %893 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %894 = sub i32 %893, %892
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %894, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %895
	jmp	tinfl_decompress895
	.text
tinfl_decompress895:
	# %896 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %897 = zext i32 %896 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %898 = getelementptr [3 x i16], i8* @tinfl_decompress.s_min_table_sizes, i64 0, i64 %897
	leaq	_tinfl_decompress.s_min_table_sizes(%rip), %rcx
	movq	$0, %rax
	imulq	$6, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %899 = load i16, i16* %898
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %900 = zext i16 %899 to i32
	movq	%rdx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %901 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %902 = getelementptr %struct.tinfl_decompressor_tag, i8* %901, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %903 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %904 = zext i32 %903 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %905 = getelementptr [3 x i32], i8* %902, i64 0, i64 %904
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %906 = load i32, i32* %905
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %907 = add i32 %906, %900
	movq	%rdx, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %907, i32* %905
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %908
	jmp	tinfl_decompress908
	.text
tinfl_decompress908:
	# %909 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %910 = add i32 %909, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %910, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %809
	jmp	tinfl_decompress809
	.text
tinfl_decompress911:
	# %912 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %913 = getelementptr %struct.tinfl_decompressor_tag, i8* %912, i32 0, i32 20
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$20, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %914 = getelementptr [19 x i8], i8* %913, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$19, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %915 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %916 = getelementptr %struct.tinfl_decompressor_tag, i8* %915, i32 0, i32 20
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$20, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %917 = getelementptr [19 x i8], i8* %916, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$19, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %918 = call i64 @llvm.objectsize.i64.p0 (i8* %917, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %919 = call i8* @__memset_chk (i8* %914, i32 0, i64 19, i64 %918)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$19, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %21
	movq	$0, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %920
	jmp	tinfl_decompress920
	.text
tinfl_decompress920:
	# %921 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %922 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %923 = getelementptr %struct.tinfl_decompressor_tag, i8* %922, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %924 = getelementptr [3 x i32], i8* %923, i64 0, i64 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %925 = load i32, i32* %924
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %926 = icmp ult i32 %921, %925
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %926, label %927, label %990
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress990
	jmp	tinfl_decompress927
	.text
tinfl_decompress927:
	# br label %928
	jmp	tinfl_decompress928
	.text
tinfl_decompress928:
	# %929 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %930 = icmp ult i32 %929, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %930, label %931, label %968
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress968
	jmp	tinfl_decompress931
	.text
tinfl_decompress931:
	# br label %932
	jmp	tinfl_decompress932
	.text
tinfl_decompress932:
	# br label %933
	jmp	tinfl_decompress933
	.text
tinfl_decompress933:
	# br label %934
	jmp	tinfl_decompress934
	.text
tinfl_decompress934:
	# %935 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %936 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %937 = icmp uge i8* %935, %936
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %937, label %938, label %949
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress949
	jmp	tinfl_decompress938
	.text
tinfl_decompress938:
	# br label %939
	jmp	tinfl_decompress939
	.text
tinfl_decompress939:
	# %940 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %941 = and i32 %940, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %942 = icmp ne i32 %941, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %943 = zext i1 %942 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %944 = select i1 %942, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %944, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %945 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %946 = getelementptr %struct.tinfl_decompressor_tag, i8* %945, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 14, i32* %946
	movq	$14, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress947:
	# br label %948
	jmp	tinfl_decompress948
	.text
tinfl_decompress948:
	# br label %934
	jmp	tinfl_decompress934
	.text
tinfl_decompress949:
	# %950 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %951 = getelementptr i8, i8* %950, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %951, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %952 = load i8, i8* %950
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %953 = zext i8 %952 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %953, i32* %39
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %954
	jmp	tinfl_decompress954
	.text
tinfl_decompress954:
	# %955 = load i32, i32* %39
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %956 = zext i32 %955 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %957 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %958 = zext i32 %957 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %959 = shl i64 %956, %958
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %960 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %961 = or i64 %960, %959
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %961, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %962 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %963 = add i32 %962, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %963, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %964
	jmp	tinfl_decompress964
	.text
tinfl_decompress964:
	# %965 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %966 = icmp ult i32 %965, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %966, label %932, label %967
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress967
	jmp	tinfl_decompress932
	.text
tinfl_decompress967:
	# br label %968
	jmp	tinfl_decompress968
	.text
tinfl_decompress968:
	# %969 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %970 = and i64 %969, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %971 = trunc i64 %970 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %971, i32* %38
	movq	%rdx, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %972 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %973 = lshr i64 %972, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %973, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %974 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %975 = sub i32 %974, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %975, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %976
	jmp	tinfl_decompress976
	.text
tinfl_decompress976:
	# %977 = load i32, i32* %38
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %978 = trunc i32 %977 to i8
	movq	%rdx, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %979 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %980 = getelementptr %struct.tinfl_decompressor_tag, i8* %979, i32 0, i32 20
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$20, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %981 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %982 = zext i32 %981 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %983 = getelementptr [19 x i8], i8* @tinfl_decompress.s_length_dezigzag, i64 0, i64 %982
	leaq	_tinfl_decompress.s_length_dezigzag(%rip), %rcx
	movq	$0, %rax
	imulq	$19, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %984 = load i8, i8* %983
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %985 = zext i8 %984 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %986 = getelementptr [19 x i8], i8* %980, i64 0, i64 %985
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$19, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %978, i8* %986
	movq	%r8, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %987
	jmp	tinfl_decompress987
	.text
tinfl_decompress987:
	# %988 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %989 = add i32 %988, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %989, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %920
	jmp	tinfl_decompress920
	.text
tinfl_decompress990:
	# %991 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %992 = getelementptr %struct.tinfl_decompressor_tag, i8* %991, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %993 = getelementptr [3 x i32], i8* %992, i64 0, i64 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 19, i32* %993
	movq	$19, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %994
	jmp	tinfl_decompress994
	.text
tinfl_decompress994:
	# br label %995
	jmp	tinfl_decompress995
	.text
tinfl_decompress995:
	# %996 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %997 = getelementptr %struct.tinfl_decompressor_tag, i8* %996, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %998 = load i32, i32* %997
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %999 = icmp sge i32 %998, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %999, label %1000, label %1634
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1634
	jmp	tinfl_decompress1000
	.text
tinfl_decompress1000:
	# %1001 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1002 = getelementptr %struct.tinfl_decompressor_tag, i8* %1001, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1003 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1004 = getelementptr %struct.tinfl_decompressor_tag, i8* %1003, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1005 = load i32, i32* %1004
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1006 = zext i32 %1005 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1007 = getelementptr [3 x [1024 x i16]], i8* %1002, i64 0, i64 %1006
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1008 = getelementptr [1024 x i16], i8* %1007, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1008, i8** %42
	movq	%rdx, %rax
	movq	-280(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1009 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1010 = getelementptr %struct.tinfl_decompressor_tag, i8* %1009, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1011 = load i32, i32* %1010
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1012 = zext i32 %1011 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1013 = getelementptr [3 x i8*], i8* %16, i64 0, i64 %1012
	movq	-72(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1014 = load i8*, i8** %1013
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1014, i8** %43
	movq	%rdx, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1015 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1016 = getelementptr %struct.tinfl_decompressor_tag, i8* %1015, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1017 = load i32, i32* %1016
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1018 = zext i32 %1017 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1019 = getelementptr [3 x i8*], i8* %17, i64 0, i64 %1018
	movq	-80(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1020 = load i8*, i8** %1019
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1020, i8** %44
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1021 = getelementptr [16 x i32], i8* %51, i64 0, i64 0
	movq	-352(%rbp), %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# call void @memset (i8* %1021, i8 0, i64 64, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$64, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1022 = load i8*, i8** %42
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1023 = load i8*, i8** %42
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1024 = call i64 @llvm.objectsize.i64.p0 (i8* %1023, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1025 = call i8* @__memset_chk (i8* %1022, i32 0, i64 2048, i64 %1024)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$2048, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1026 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @tinfl_clear_tree (i8* %1026)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_clear_tree
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 0, i32* %45
	movq	$0, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1027
	jmp	tinfl_decompress1027
	.text
tinfl_decompress1027:
	# %1028 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1029 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1030 = getelementptr %struct.tinfl_decompressor_tag, i8* %1029, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1031 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1032 = getelementptr %struct.tinfl_decompressor_tag, i8* %1031, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1033 = load i32, i32* %1032
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1034 = zext i32 %1033 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1035 = getelementptr [3 x i32], i8* %1030, i64 0, i64 %1034
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1036 = load i32, i32* %1035
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1037 = icmp ult i32 %1028, %1036
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1037, label %1038, label %1051
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1051
	jmp	tinfl_decompress1038
	.text
tinfl_decompress1038:
	# %1039 = load i8*, i8** %44
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1040 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1041 = zext i32 %1040 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1042 = getelementptr i8, i8* %1039, i64 %1041
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1043 = load i8, i8* %1042
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1044 = zext i8 %1043 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1045 = getelementptr [16 x i32], i8* %51, i64 0, i64 %1044
	movq	-352(%rbp), %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1046 = load i32, i32* %1045
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1047 = add i32 %1046, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1047, i32* %1045
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %1048
	jmp	tinfl_decompress1048
	.text
tinfl_decompress1048:
	# %1049 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1050 = add i32 %1049, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1050, i32* %45
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1027
	jmp	tinfl_decompress1027
	.text
tinfl_decompress1051:
	# store i32 0, i32* %47
	movq	$0, %rax
	movq	-320(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %48
	movq	$0, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1052 = getelementptr [17 x i32], i8* %50, i64 0, i64 1
	movq	-344(%rbp), %rcx
	movq	$0, %rax
	imulq	$68, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %1052
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1053 = getelementptr [17 x i32], i8* %50, i64 0, i64 0
	movq	-344(%rbp), %rcx
	movq	$0, %rax
	imulq	$68, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %1053
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %45
	movq	$1, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1054
	jmp	tinfl_decompress1054
	.text
tinfl_decompress1054:
	# %1055 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1056 = icmp ule i32 %1055, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %1056, label %1057, label %1078
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1078
	jmp	tinfl_decompress1057
	.text
tinfl_decompress1057:
	# %1058 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1059 = zext i32 %1058 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1060 = getelementptr [16 x i32], i8* %51, i64 0, i64 %1059
	movq	-352(%rbp), %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1061 = load i32, i32* %1060
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1062 = load i32, i32* %47
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1063 = add i32 %1062, %1061
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1063, i32* %47
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1064 = load i32, i32* %48
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1065 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1066 = zext i32 %1065 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1067 = getelementptr [16 x i32], i8* %51, i64 0, i64 %1066
	movq	-352(%rbp), %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1068 = load i32, i32* %1067
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1069 = add i32 %1064, %1068
	movq	%rdi, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1070 = shl i32 %1069, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# store i32 %1070, i32* %48
	movq	%rdi, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1071 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1072 = add i32 %1071, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1073 = zext i32 %1072 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1074 = getelementptr [17 x i32], i8* %50, i64 0, i64 %1073
	movq	-344(%rbp), %rcx
	movq	$0, %rax
	imulq	$68, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1070, i32* %1074
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1075
	jmp	tinfl_decompress1075
	.text
tinfl_decompress1075:
	# %1076 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1077 = add i32 %1076, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1077, i32* %45
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1054
	jmp	tinfl_decompress1054
	.text
tinfl_decompress1078:
	# %1079 = load i32, i32* %48
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1080 = icmp ne i32 65536, %1079
	movq	$65536, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1080, label %1081, label %1093
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1093
	jmp	tinfl_decompress1081
	.text
tinfl_decompress1081:
	# %1082 = load i32, i32* %47
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1083 = icmp ugt i32 %1082, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1083, label %1084, label %1093
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1093
	jmp	tinfl_decompress1084
	.text
tinfl_decompress1084:
	# br label %1085
	jmp	tinfl_decompress1085
	.text
tinfl_decompress1085:
	# br label %1086
	jmp	tinfl_decompress1086
	.text
tinfl_decompress1086:
	# br label %1087
	jmp	tinfl_decompress1087
	.text
tinfl_decompress1087:
	# store i32 -1, i32* %18
	movq	$-1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1088 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1089 = getelementptr %struct.tinfl_decompressor_tag, i8* %1088, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 35, i32* %1089
	movq	$35, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress1090:
	# br label %1091
	jmp	tinfl_decompress1091
	.text
tinfl_decompress1091:
	# br label %1086
	jmp	tinfl_decompress1086
	.text
tinfl_decompress1092:
	# br label %1093
	jmp	tinfl_decompress1093
	.text
tinfl_decompress1093:
	# store i32 -1, i32* %40
	movq	$-1, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %49
	movq	$0, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1094
	jmp	tinfl_decompress1094
	.text
tinfl_decompress1094:
	# %1095 = load i32, i32* %49
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1096 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1097 = getelementptr %struct.tinfl_decompressor_tag, i8* %1096, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1098 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1099 = getelementptr %struct.tinfl_decompressor_tag, i8* %1098, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1100 = load i32, i32* %1099
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1101 = zext i32 %1100 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1102 = getelementptr [3 x i32], i8* %1097, i64 0, i64 %1101
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1103 = load i32, i32* %1102
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1104 = icmp ult i32 %1095, %1103
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1104, label %1105, label %1242
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1242
	jmp	tinfl_decompress1105
	.text
tinfl_decompress1105:
	# store i32 0, i32* %52
	movq	$0, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1106 = load i8*, i8** %44
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1107 = load i32, i32* %49
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1108 = zext i32 %1107 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1109 = getelementptr i8, i8* %1106, i64 %1108
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1110 = load i8, i8* %1109
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1111 = zext i8 %1110 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1111, i32* %55
	movq	%rdx, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1112 = load i32, i32* %55
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1113 = icmp ne i32 %1112, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1113, label %1115, label %1114
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1114
	jmp	tinfl_decompress1115
	.text
tinfl_decompress1114:
	# br label %1239
	jmp	tinfl_decompress1239
	.text
tinfl_decompress1115:
	# %1116 = load i32, i32* %55
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1117 = zext i32 %1116 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1118 = getelementptr [17 x i32], i8* %50, i64 0, i64 %1117
	movq	-344(%rbp), %rcx
	movq	$0, %rax
	imulq	$68, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %1119 = load i32, i32* %1118
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1120 = add i32 %1119, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1120, i32* %1118
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# store i32 %1119, i32* %54
	movq	%rdi, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1121 = load i32, i32* %55
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1121, i32* %53
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1122
	jmp	tinfl_decompress1122
	.text
tinfl_decompress1122:
	# %1123 = load i32, i32* %53
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1124 = icmp ugt i32 %1123, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1124, label %1125, label %1136
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1136
	jmp	tinfl_decompress1125
	.text
tinfl_decompress1125:
	# %1126 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1127 = shl i32 %1126, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %1128 = load i32, i32* %54
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1129 = and i32 %1128, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1130 = or i32 %1127, %1129
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1130, i32* %52
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1131
	jmp	tinfl_decompress1131
	.text
tinfl_decompress1131:
	# %1132 = load i32, i32* %53
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1133 = add i32 %1132, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1133, i32* %53
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1134 = load i32, i32* %54
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1135 = lshr i32 %1134, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %1135, i32* %54
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1122
	jmp	tinfl_decompress1122
	.text
tinfl_decompress1136:
	# %1137 = load i32, i32* %55
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1138 = icmp ule i32 %1137, 10
	movq	%rdx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %1138, label %1139, label %1159
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1159
	jmp	tinfl_decompress1139
	.text
tinfl_decompress1139:
	# %1140 = load i32, i32* %55
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1141 = shl i32 %1140, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %1142 = load i32, i32* %49
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1143 = or i32 %1141, %1142
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1144 = trunc i32 %1143 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i16 %1144, i16* %56
	movq	%rdx, %rax
	movq	-392(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1145
	jmp	tinfl_decompress1145
	.text
tinfl_decompress1145:
	# %1146 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1147 = icmp ult i32 %1146, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1147, label %1148, label %1158
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1158
	jmp	tinfl_decompress1148
	.text
tinfl_decompress1148:
	# %1149 = load i16, i16* %56
	movq	-392(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %1150 = load i8*, i8** %42
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1151 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1152 = zext i32 %1151 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1153 = getelementptr i16, i8* %1150, i64 %1152
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %1149, i16* %1153
	movq	%r8, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %1154 = load i32, i32* %55
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1155 = shl i32 1, %1154
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %1156 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1157 = add i32 %1156, %1155
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1157, i32* %52
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1145
	jmp	tinfl_decompress1145
	.text
tinfl_decompress1158:
	# br label %1239
	jmp	tinfl_decompress1239
	.text
tinfl_decompress1159:
	# %1160 = load i8*, i8** %42
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1161 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1162 = and i32 %1161, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1163 = zext i32 %1162 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1164 = getelementptr i16, i8* %1160, i64 %1163
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1165 = load i16, i16* %1164
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1166 = sext i16 %1165 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1166, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1167 = icmp eq i32 0, %1166
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1167, label %1168, label %1179
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1179
	jmp	tinfl_decompress1168
	.text
tinfl_decompress1168:
	# %1169 = load i32, i32* %40
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1170 = trunc i32 %1169 to i16
	movq	%rdx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %1171 = load i8*, i8** %42
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1172 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1173 = and i32 %1172, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1174 = zext i32 %1173 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1175 = getelementptr i16, i8* %1171, i64 %1174
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %1170, i16* %1175
	movq	%r8, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %1176 = load i32, i32* %40
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1176, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1177 = load i32, i32* %40
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1178 = sub i32 %1177, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1178, i32* %40
	movq	%rdx, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1179
	jmp	tinfl_decompress1179
	.text
tinfl_decompress1179:
	# %1180 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1181 = lshr i32 %1180, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %1181, i32* %52
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1182 = load i32, i32* %55
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1182, i32* %46
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1183
	jmp	tinfl_decompress1183
	.text
tinfl_decompress1183:
	# %1184 = load i32, i32* %46
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1185 = icmp ugt i32 %1184, 11
	movq	%rdx, %rax
	movq	$11, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1185, label %1186, label %1225
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1225
	jmp	tinfl_decompress1186
	.text
tinfl_decompress1186:
	# %1187 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1188 = lshr i32 %1187, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %1188, i32* %52
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1189 = and i32 %1188, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %1190 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1191 = sub i32 %1190, %1189
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1191, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1192 = load i8*, i8** %43
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1193 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1194 = sub i32 0, %1193
	movq	$0, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1195 = sub i32 %1194, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1196 = sext i32 %1195 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1197 = getelementptr i16, i8* %1192, i64 %1196
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1198 = load i16, i16* %1197
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1199 = icmp ne i16 %1198, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1199, label %1212, label %1200
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1200
	jmp	tinfl_decompress1212
	.text
tinfl_decompress1200:
	# %1201 = load i32, i32* %40
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1202 = trunc i32 %1201 to i16
	movq	%rdx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %1203 = load i8*, i8** %43
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1204 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1205 = sub i32 0, %1204
	movq	$0, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1206 = sub i32 %1205, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1207 = sext i32 %1206 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1208 = getelementptr i16, i8* %1203, i64 %1207
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %1202, i16* %1208
	movq	%r8, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %1209 = load i32, i32* %40
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1209, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1210 = load i32, i32* %40
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1211 = sub i32 %1210, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1211, i32* %40
	movq	%rdx, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1221
	jmp	tinfl_decompress1221
	.text
tinfl_decompress1212:
	# %1213 = load i8*, i8** %43
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1214 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1215 = sub i32 0, %1214
	movq	$0, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1216 = sub i32 %1215, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1217 = sext i32 %1216 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1218 = getelementptr i16, i8* %1213, i64 %1217
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1219 = load i16, i16* %1218
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1220 = sext i16 %1219 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1220, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1221
	jmp	tinfl_decompress1221
	.text
tinfl_decompress1221:
	# br label %1222
	jmp	tinfl_decompress1222
	.text
tinfl_decompress1222:
	# %1223 = load i32, i32* %46
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1224 = add i32 %1223, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1224, i32* %46
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1183
	jmp	tinfl_decompress1183
	.text
tinfl_decompress1225:
	# %1226 = load i32, i32* %52
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1227 = lshr i32 %1226, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %1227, i32* %52
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1228 = and i32 %1227, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %1229 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1230 = sub i32 %1229, %1228
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1230, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1231 = load i32, i32* %49
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1232 = trunc i32 %1231 to i16
	movq	%rdx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %1233 = load i8*, i8** %43
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1234 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1235 = sub i32 0, %1234
	movq	$0, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1236 = sub i32 %1235, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1237 = sext i32 %1236 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1238 = getelementptr i16, i8* %1233, i64 %1237
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %1232, i16* %1238
	movq	%r8, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %1239
	jmp	tinfl_decompress1239
	.text
tinfl_decompress1239:
	# %1240 = load i32, i32* %49
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1241 = add i32 %1240, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1241, i32* %49
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1094
	jmp	tinfl_decompress1094
	.text
tinfl_decompress1242:
	# %1243 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1244 = getelementptr %struct.tinfl_decompressor_tag, i8* %1243, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1245 = load i32, i32* %1244
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1246 = icmp eq i32 %1245, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1246, label %1247, label %1628
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1628
	jmp	tinfl_decompress1247
	.text
tinfl_decompress1247:
	# store i32 0, i32* %21
	movq	$0, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1248
	jmp	tinfl_decompress1248
	.text
tinfl_decompress1248:
	# %1249 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1250 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1251 = getelementptr %struct.tinfl_decompressor_tag, i8* %1250, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1252 = getelementptr [3 x i32], i8* %1251, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1253 = load i32, i32* %1252
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1254 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1255 = getelementptr %struct.tinfl_decompressor_tag, i8* %1254, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1256 = getelementptr [3 x i32], i8* %1255, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1257 = load i32, i32* %1256
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1258 = add i32 %1253, %1257
	movq	%rdi, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1259 = icmp ult i32 %1249, %1258
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1259, label %1260, label %1568
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1568
	jmp	tinfl_decompress1260
	.text
tinfl_decompress1260:
	# br label %1261
	jmp	tinfl_decompress1261
	.text
tinfl_decompress1261:
	# %1262 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1263 = icmp ult i32 %1262, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1263, label %1264, label %1390
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1390
	jmp	tinfl_decompress1264
	.text
tinfl_decompress1264:
	# %1265 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1266 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1267 = ptrtoint i8** %1265 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %1268 = ptrtoint i8** %1266 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1269 = sub i64 %1267, %1268
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1270 = icmp slt i64 %1269, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1270, label %1271, label %1366
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1366
	jmp	tinfl_decompress1271
	.text
tinfl_decompress1271:
	# br label %1272
	jmp	tinfl_decompress1272
	.text
tinfl_decompress1272:
	# %1273 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1274 = getelementptr %struct.tinfl_decompressor_tag, i8* %1273, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1275 = getelementptr [3 x [1024 x i16]], i8* %1274, i64 0, i64 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1276 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1277 = and i64 %1276, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1278 = getelementptr [1024 x i16], i8* %1275, i64 0, i64 %1277
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1279 = load i16, i16* %1278
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1280 = sext i16 %1279 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1280, i32* %58
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1281 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1282 = icmp sge i32 %1281, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %1282, label %1283, label %1294
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1294
	jmp	tinfl_decompress1283
	.text
tinfl_decompress1283:
	# %1284 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1285 = ashr i32 %1284, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %1285, i32* %59
	movq	%rdx, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1286 = load i32, i32* %59
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1287 = icmp ne i32 %1286, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1287, label %1288, label %1293
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1293
	jmp	tinfl_decompress1288
	.text
tinfl_decompress1288:
	# %1289 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1290 = load i32, i32* %59
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1291 = icmp uge i32 %1289, %1290
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1291, label %1292, label %1293
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1293
	jmp	tinfl_decompress1292
	.text
tinfl_decompress1292:
	# br label %1365
	jmp	tinfl_decompress1365
	.text
tinfl_decompress1293:
	# br label %1330
	jmp	tinfl_decompress1330
	.text
tinfl_decompress1294:
	# %1295 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1296 = icmp ugt i32 %1295, 10
	movq	%rdx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1296, label %1297, label %1329
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1329
	jmp	tinfl_decompress1297
	.text
tinfl_decompress1297:
	# store i32 10, i32* %59
	movq	$10, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1298
	jmp	tinfl_decompress1298
	.text
tinfl_decompress1298:
	# %1299 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1300 = getelementptr %struct.tinfl_decompressor_tag, i8* %1299, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %1301 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1302 = xor i32 %1301, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1303 = sext i32 %1302 to i64
	movq	%rdx, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %1304 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1305 = load i32, i32* %59
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1306 = add i32 %1305, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1306, i32* %59
	movq	%rdx, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1307 = zext i32 %1305 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1308 = lshr i64 %1304, %1307
	movq	%r8, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1309 = and i64 %1308, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1310 = add i64 %1303, %1309
	movq	%r11, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1311 = getelementptr [38 x i16], i8* %1300, i64 0, i64 %1310
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$76, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1312 = load i16, i16* %1311
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1313 = sext i16 %1312 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1313, i32* %58
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1314
	jmp	tinfl_decompress1314
	.text
tinfl_decompress1314:
	# %1315 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1316 = icmp slt i32 %1315, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1316, label %1317, label %1322
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tinfl_decompress1322
	jmp	tinfl_decompress1317
	.text
tinfl_decompress1317:
	# %1318 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1319 = load i32, i32* %59
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1320 = add i32 %1319, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1321 = icmp uge i32 %1318, %1320
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, -680(%rbp)
	setnb	-680(%rbp)
	# br label %1322
	movq	-680(%rbp), %rdx
	jmp	tinfl_decompress1322
	.text
tinfl_decompress1322:
	# %1323 = phi i1 [0, %1314], [%1321, %1317]
	# br i1 %1323, label %1298, label %1324
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1324
	jmp	tinfl_decompress1298
	.text
tinfl_decompress1324:
	# %1325 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1326 = icmp sge i32 %1325, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %1326, label %1327, label %1328
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1328
	jmp	tinfl_decompress1327
	.text
tinfl_decompress1327:
	# br label %1365
	jmp	tinfl_decompress1365
	.text
tinfl_decompress1328:
	# br label %1329
	jmp	tinfl_decompress1329
	.text
tinfl_decompress1329:
	# br label %1330
	jmp	tinfl_decompress1330
	.text
tinfl_decompress1330:
	# br label %1331
	jmp	tinfl_decompress1331
	.text
tinfl_decompress1331:
	# br label %1332
	jmp	tinfl_decompress1332
	.text
tinfl_decompress1332:
	# %1333 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1334 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1335 = icmp uge i8* %1333, %1334
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1335, label %1336, label %1347
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1347
	jmp	tinfl_decompress1336
	.text
tinfl_decompress1336:
	# br label %1337
	jmp	tinfl_decompress1337
	.text
tinfl_decompress1337:
	# %1338 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1339 = and i32 %1338, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1340 = icmp ne i32 %1339, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %1341 = zext i1 %1340 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %1342 = select i1 %1340, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %1342, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1343 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1344 = getelementptr %struct.tinfl_decompressor_tag, i8* %1343, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 16, i32* %1344
	movq	$16, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress1345:
	# br label %1346
	jmp	tinfl_decompress1346
	.text
tinfl_decompress1346:
	# br label %1332
	jmp	tinfl_decompress1332
	.text
tinfl_decompress1347:
	# %1348 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1349 = getelementptr i8, i8* %1348, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1349, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1350 = load i8, i8* %1348
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1351 = zext i8 %1350 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1351, i32* %60
	movq	%rdx, %rax
	movq	-424(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1352
	jmp	tinfl_decompress1352
	.text
tinfl_decompress1352:
	# %1353 = load i32, i32* %60
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1354 = zext i32 %1353 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1355 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1356 = zext i32 %1355 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1357 = shl i64 %1354, %1356
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %1358 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1359 = or i64 %1358, %1357
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1359, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1360 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1361 = add i32 %1360, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1361, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1362
	jmp	tinfl_decompress1362
	.text
tinfl_decompress1362:
	# %1363 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1364 = icmp ult i32 %1363, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1364, label %1272, label %1365
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1365
	jmp	tinfl_decompress1272
	.text
tinfl_decompress1365:
	# br label %1389
	jmp	tinfl_decompress1389
	.text
tinfl_decompress1366:
	# %1367 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1368 = getelementptr i8, i8* %1367, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1369 = load i8, i8* %1368
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1370 = zext i8 %1369 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1371 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1372 = zext i32 %1371 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1373 = shl i64 %1370, %1372
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %1374 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1375 = getelementptr i8, i8* %1374, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1376 = load i8, i8* %1375
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1377 = zext i8 %1376 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1378 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1379 = add i32 %1378, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1380 = zext i32 %1379 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1381 = shl i64 %1377, %1380
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1382 = or i64 %1373, %1381
	movq	%r8, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %1383 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1384 = or i64 %1383, %1382
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1384, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1385 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1386 = getelementptr i8, i8* %1385, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1386, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1387 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1388 = add i32 %1387, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1388, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1389
	jmp	tinfl_decompress1389
	.text
tinfl_decompress1389:
	# br label %1390
	jmp	tinfl_decompress1390
	.text
tinfl_decompress1390:
	# %1391 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1392 = getelementptr %struct.tinfl_decompressor_tag, i8* %1391, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1393 = getelementptr [3 x [1024 x i16]], i8* %1392, i64 0, i64 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1394 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1395 = and i64 %1394, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1396 = getelementptr [1024 x i16], i8* %1393, i64 0, i64 %1395
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1397 = load i16, i16* %1396
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1398 = sext i16 %1397 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1398, i32* %58
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1399 = icmp sge i32 %1398, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %1399, label %1400, label %1405
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1405
	jmp	tinfl_decompress1400
	.text
tinfl_decompress1400:
	# %1401 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1402 = ashr i32 %1401, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %1402, i32* %59
	movq	%rdx, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1403 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1404 = and i32 %1403, 511
	movq	%rdx, %rax
	movq	$511, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1404, i32* %58
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1426
	jmp	tinfl_decompress1426
	.text
tinfl_decompress1405:
	# store i32 10, i32* %59
	movq	$10, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1406
	jmp	tinfl_decompress1406
	.text
tinfl_decompress1406:
	# %1407 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1408 = getelementptr %struct.tinfl_decompressor_tag, i8* %1407, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %1409 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1410 = xor i32 %1409, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1411 = sext i32 %1410 to i64
	movq	%rdx, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %1412 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1413 = load i32, i32* %59
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1414 = add i32 %1413, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1414, i32* %59
	movq	%rdx, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1415 = zext i32 %1413 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1416 = lshr i64 %1412, %1415
	movq	%r8, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1417 = and i64 %1416, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1418 = add i64 %1411, %1417
	movq	%r11, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1419 = getelementptr [38 x i16], i8* %1408, i64 0, i64 %1418
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$76, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1420 = load i16, i16* %1419
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1421 = sext i16 %1420 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1421, i32* %58
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1422
	jmp	tinfl_decompress1422
	.text
tinfl_decompress1422:
	# %1423 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1424 = icmp slt i32 %1423, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1424, label %1406, label %1425
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1425
	jmp	tinfl_decompress1406
	.text
tinfl_decompress1425:
	# br label %1426
	jmp	tinfl_decompress1426
	.text
tinfl_decompress1426:
	# %1427 = load i32, i32* %58
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1427, i32* %20
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1428 = load i32, i32* %59
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1429 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1430 = zext i32 %1428 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1431 = lshr i64 %1429, %1430
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %1431, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1432 = load i32, i32* %59
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1433 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1434 = sub i32 %1433, %1432
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1434, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1435
	jmp	tinfl_decompress1435
	.text
tinfl_decompress1435:
	# %1436 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1437 = icmp ult i32 %1436, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1437, label %1438, label %1447
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1447
	jmp	tinfl_decompress1438
	.text
tinfl_decompress1438:
	# %1439 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1440 = trunc i32 %1439 to i8
	movq	%rdx, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %1441 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1442 = getelementptr %struct.tinfl_decompressor_tag, i8* %1441, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %1443 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1444 = add i32 %1443, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1444, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1445 = zext i32 %1443 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1446 = getelementptr [457 x i8], i8* %1442, i64 0, i64 %1445
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$457, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1440, i8* %1446
	movq	%r11, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %1248
	jmp	tinfl_decompress1248
	.text
tinfl_decompress1447:
	# %1448 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1449 = icmp eq i32 %1448, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1449, label %1450, label %1462
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1462
	jmp	tinfl_decompress1450
	.text
tinfl_decompress1450:
	# %1451 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1452 = icmp ne i32 %1451, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1452, label %1462, label %1453
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1453
	jmp	tinfl_decompress1462
	.text
tinfl_decompress1453:
	# br label %1454
	jmp	tinfl_decompress1454
	.text
tinfl_decompress1454:
	# br label %1455
	jmp	tinfl_decompress1455
	.text
tinfl_decompress1455:
	# br label %1456
	jmp	tinfl_decompress1456
	.text
tinfl_decompress1456:
	# store i32 -1, i32* %18
	movq	$-1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1457 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1458 = getelementptr %struct.tinfl_decompressor_tag, i8* %1457, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 17, i32* %1458
	movq	$17, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress1459:
	# br label %1460
	jmp	tinfl_decompress1460
	.text
tinfl_decompress1460:
	# br label %1455
	jmp	tinfl_decompress1455
	.text
tinfl_decompress1461:
	# br label %1462
	jmp	tinfl_decompress1462
	.text
tinfl_decompress1462:
	# %1463 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1464 = sub i32 %1463, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1465 = zext i32 %1464 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1466 = getelementptr [4 x i8], i8* @.str.15, i64 0, i64 %1465
	leaq	_.str.15(%rip), %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1467 = load i8, i8* %1466
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1468 = sext i8 %1467 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1468, i32* %22
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1469
	jmp	tinfl_decompress1469
	.text
tinfl_decompress1469:
	# %1470 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1471 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1472 = icmp ult i32 %1470, %1471
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1472, label %1473, label %1511
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1511
	jmp	tinfl_decompress1473
	.text
tinfl_decompress1473:
	# br label %1474
	jmp	tinfl_decompress1474
	.text
tinfl_decompress1474:
	# br label %1475
	jmp	tinfl_decompress1475
	.text
tinfl_decompress1475:
	# br label %1476
	jmp	tinfl_decompress1476
	.text
tinfl_decompress1476:
	# %1477 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1478 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1479 = icmp uge i8* %1477, %1478
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1479, label %1480, label %1491
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1491
	jmp	tinfl_decompress1480
	.text
tinfl_decompress1480:
	# br label %1481
	jmp	tinfl_decompress1481
	.text
tinfl_decompress1481:
	# %1482 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1483 = and i32 %1482, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1484 = icmp ne i32 %1483, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %1485 = zext i1 %1484 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %1486 = select i1 %1484, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %1486, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1487 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1488 = getelementptr %struct.tinfl_decompressor_tag, i8* %1487, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 18, i32* %1488
	movq	$18, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress1489:
	# br label %1490
	jmp	tinfl_decompress1490
	.text
tinfl_decompress1490:
	# br label %1476
	jmp	tinfl_decompress1476
	.text
tinfl_decompress1491:
	# %1492 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1493 = getelementptr i8, i8* %1492, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1493, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1494 = load i8, i8* %1492
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1495 = zext i8 %1494 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1495, i32* %61
	movq	%rdx, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1496
	jmp	tinfl_decompress1496
	.text
tinfl_decompress1496:
	# %1497 = load i32, i32* %61
	movq	-432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1498 = zext i32 %1497 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1499 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1500 = zext i32 %1499 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1501 = shl i64 %1498, %1500
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %1502 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1503 = or i64 %1502, %1501
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1503, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1504 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1505 = add i32 %1504, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1505, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1506
	jmp	tinfl_decompress1506
	.text
tinfl_decompress1506:
	# %1507 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1508 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1509 = icmp ult i32 %1507, %1508
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1509, label %1474, label %1510
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1510
	jmp	tinfl_decompress1474
	.text
tinfl_decompress1510:
	# br label %1511
	jmp	tinfl_decompress1511
	.text
tinfl_decompress1511:
	# %1512 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1513 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1514 = shl i32 1, %1513
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1515 = sub i32 %1514, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1516 = sext i32 %1515 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1517 = and i64 %1512, %1516
	movq	%rdi, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1518 = trunc i64 %1517 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1518, i32* %57
	movq	%rdx, %rax
	movq	-400(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1519 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1520 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1521 = zext i32 %1519 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1522 = lshr i64 %1520, %1521
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %1522, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1523 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1524 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1525 = sub i32 %1524, %1523
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1525, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1526
	jmp	tinfl_decompress1526
	.text
tinfl_decompress1526:
	# %1527 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1528 = sub i32 %1527, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1529 = zext i32 %1528 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1530 = getelementptr [4 x i8], i8* @.str.16, i64 0, i64 %1529
	leaq	_.str.16(%rip), %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1531 = load i8, i8* %1530
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1532 = sext i8 %1531 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1533 = load i32, i32* %57
	movq	-400(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1534 = add i32 %1533, %1532
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1534, i32* %57
	movq	%rdx, %rax
	movq	-400(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1535 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1536 = getelementptr %struct.tinfl_decompressor_tag, i8* %1535, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1537 = getelementptr [457 x i8], i8* %1536, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$457, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1538 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1539 = zext i32 %1538 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1540 = getelementptr i8, i8* %1537, i64 %1539
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %1541 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1542 = icmp eq i32 %1541, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1542, label %1543, label %1552
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1552
	jmp	tinfl_decompress1543
	.text
tinfl_decompress1543:
	# %1544 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1545 = getelementptr %struct.tinfl_decompressor_tag, i8* %1544, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1546 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1547 = sub i32 %1546, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1548 = zext i32 %1547 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1549 = getelementptr [457 x i8], i8* %1545, i64 0, i64 %1548
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$457, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1550 = load i8, i8* %1549
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1551 = zext i8 %1550 to i32
	movq	%rdx, %rax
	movq	$0, %r15
	movb	%al, %r15b
	# br label %1553
	movq	%r15, %r11
	jmp	tinfl_decompress1553
	.text
tinfl_decompress1552:
	# br label %1553
	movq	$0, %r11
	jmp	tinfl_decompress1553
	.text
tinfl_decompress1553:
	# %1554 = phi i32 [%1551, %1543], [0, %1552]
	# %1555 = load i32, i32* %57
	movq	-400(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1556 = zext i32 %1555 to i64
	movq	%rdx, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1557 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1558 = getelementptr %struct.tinfl_decompressor_tag, i8* %1557, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1559 = getelementptr [457 x i8], i8* %1558, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$457, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1560 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1561 = zext i32 %1560 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1562 = getelementptr i8, i8* %1559, i64 %1561
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1563 = call i64 @llvm.objectsize.i64.p0 (i8* %1562, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1564 = call i8* @__memset_chk (i8* %1540, i32 %1554, i64 %1556, i64 %1563)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1565 = load i32, i32* %57
	movq	-400(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1566 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1567 = add i32 %1566, %1565
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1567, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1248
	jmp	tinfl_decompress1248
	.text
tinfl_decompress1568:
	# %1569 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1570 = getelementptr %struct.tinfl_decompressor_tag, i8* %1569, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1571 = getelementptr [3 x i32], i8* %1570, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1572 = load i32, i32* %1571
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1573 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1574 = getelementptr %struct.tinfl_decompressor_tag, i8* %1573, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1575 = getelementptr [3 x i32], i8* %1574, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1576 = load i32, i32* %1575
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1577 = add i32 %1572, %1576
	movq	%rdi, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %1578 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1579 = icmp ne i32 %1577, %1578
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1579, label %1580, label %1589
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1589
	jmp	tinfl_decompress1580
	.text
tinfl_decompress1580:
	# br label %1581
	jmp	tinfl_decompress1581
	.text
tinfl_decompress1581:
	# br label %1582
	jmp	tinfl_decompress1582
	.text
tinfl_decompress1582:
	# br label %1583
	jmp	tinfl_decompress1583
	.text
tinfl_decompress1583:
	# store i32 -1, i32* %18
	movq	$-1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1584 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1585 = getelementptr %struct.tinfl_decompressor_tag, i8* %1584, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 21, i32* %1585
	movq	$21, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress1586:
	# br label %1587
	jmp	tinfl_decompress1587
	.text
tinfl_decompress1587:
	# br label %1582
	jmp	tinfl_decompress1582
	.text
tinfl_decompress1588:
	# br label %1589
	jmp	tinfl_decompress1589
	.text
tinfl_decompress1589:
	# %1590 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1591 = getelementptr %struct.tinfl_decompressor_tag, i8* %1590, i32 0, i32 18
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1592 = getelementptr [288 x i8], i8* %1591, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %1593 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1594 = getelementptr %struct.tinfl_decompressor_tag, i8* %1593, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1595 = getelementptr [457 x i8], i8* %1594, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$457, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %1596 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1597 = getelementptr %struct.tinfl_decompressor_tag, i8* %1596, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1598 = getelementptr [3 x i32], i8* %1597, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1599 = load i32, i32* %1598
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1600 = zext i32 %1599 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1601 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1602 = getelementptr %struct.tinfl_decompressor_tag, i8* %1601, i32 0, i32 18
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1603 = getelementptr [288 x i8], i8* %1602, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1604 = call i64 @llvm.objectsize.i64.p0 (i8* %1603, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1605 = call i8* @__memcpy_chk (i8* %1592, i8* %1595, i64 %1600, i64 %1604)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1606 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1607 = getelementptr %struct.tinfl_decompressor_tag, i8* %1606, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1608 = getelementptr [32 x i8], i8* %1607, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %1609 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1610 = getelementptr %struct.tinfl_decompressor_tag, i8* %1609, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1611 = getelementptr [457 x i8], i8* %1610, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$457, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1612 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1613 = getelementptr %struct.tinfl_decompressor_tag, i8* %1612, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1614 = getelementptr [3 x i32], i8* %1613, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1615 = load i32, i32* %1614
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1616 = zext i32 %1615 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1617 = getelementptr i8, i8* %1611, i64 %1616
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %1618 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1619 = getelementptr %struct.tinfl_decompressor_tag, i8* %1618, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1620 = getelementptr [3 x i32], i8* %1619, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1621 = load i32, i32* %1620
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1622 = zext i32 %1621 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1623 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1624 = getelementptr %struct.tinfl_decompressor_tag, i8* %1623, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1625 = getelementptr [32 x i8], i8* %1624, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1626 = call i64 @llvm.objectsize.i64.p0 (i8* %1625, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1627 = call i8* @__memcpy_chk (i8* %1608, i8* %1617, i64 %1622, i64 %1626)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %1628
	jmp	tinfl_decompress1628
	.text
tinfl_decompress1628:
	# br label %1629
	jmp	tinfl_decompress1629
	.text
tinfl_decompress1629:
	# %1630 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1631 = getelementptr %struct.tinfl_decompressor_tag, i8* %1630, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1632 = load i32, i32* %1631
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1633 = add i32 %1632, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1633, i32* %1631
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %995
	jmp	tinfl_decompress995
	.text
tinfl_decompress1634:
	# br label %1635
	jmp	tinfl_decompress1635
	.text
tinfl_decompress1635:
	# br label %1636
	jmp	tinfl_decompress1636
	.text
tinfl_decompress1636:
	# %1637 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1638 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1639 = ptrtoint i8** %1637 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %1640 = ptrtoint i8** %1638 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1641 = sub i64 %1639, %1640
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1642 = icmp slt i64 %1641, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1642, label %1650, label %1643
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1643
	jmp	tinfl_decompress1650
	.text
tinfl_decompress1643:
	# %1644 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1645 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1646 = ptrtoint i8** %1644 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %1647 = ptrtoint i8** %1645 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1648 = sub i64 %1646, %1647
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1649 = icmp slt i64 %1648, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1649, label %1650, label %1845
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1845
	jmp	tinfl_decompress1650
	.text
tinfl_decompress1650:
	# br label %1651
	jmp	tinfl_decompress1651
	.text
tinfl_decompress1651:
	# %1652 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1653 = icmp ult i32 %1652, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1653, label %1654, label %1780
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1780
	jmp	tinfl_decompress1654
	.text
tinfl_decompress1654:
	# %1655 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1656 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1657 = ptrtoint i8** %1655 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %1658 = ptrtoint i8** %1656 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1659 = sub i64 %1657, %1658
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1660 = icmp slt i64 %1659, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1660, label %1661, label %1756
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1756
	jmp	tinfl_decompress1661
	.text
tinfl_decompress1661:
	# br label %1662
	jmp	tinfl_decompress1662
	.text
tinfl_decompress1662:
	# %1663 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1664 = getelementptr %struct.tinfl_decompressor_tag, i8* %1663, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1665 = getelementptr [3 x [1024 x i16]], i8* %1664, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1666 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1667 = and i64 %1666, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1668 = getelementptr [1024 x i16], i8* %1665, i64 0, i64 %1667
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1669 = load i16, i16* %1668
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1670 = sext i16 %1669 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1670, i32* %63
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1671 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1672 = icmp sge i32 %1671, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %1672, label %1673, label %1684
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1684
	jmp	tinfl_decompress1673
	.text
tinfl_decompress1673:
	# %1674 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1675 = ashr i32 %1674, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %1675, i32* %64
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1676 = load i32, i32* %64
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1677 = icmp ne i32 %1676, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1677, label %1678, label %1683
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1683
	jmp	tinfl_decompress1678
	.text
tinfl_decompress1678:
	# %1679 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1680 = load i32, i32* %64
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1681 = icmp uge i32 %1679, %1680
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1681, label %1682, label %1683
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1683
	jmp	tinfl_decompress1682
	.text
tinfl_decompress1682:
	# br label %1755
	jmp	tinfl_decompress1755
	.text
tinfl_decompress1683:
	# br label %1720
	jmp	tinfl_decompress1720
	.text
tinfl_decompress1684:
	# %1685 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1686 = icmp ugt i32 %1685, 10
	movq	%rdx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1686, label %1687, label %1719
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1719
	jmp	tinfl_decompress1687
	.text
tinfl_decompress1687:
	# store i32 10, i32* %64
	movq	$10, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1688
	jmp	tinfl_decompress1688
	.text
tinfl_decompress1688:
	# %1689 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1690 = getelementptr %struct.tinfl_decompressor_tag, i8* %1689, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %1691 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1692 = xor i32 %1691, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1693 = sext i32 %1692 to i64
	movq	%rdx, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %1694 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1695 = load i32, i32* %64
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1696 = add i32 %1695, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1696, i32* %64
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1697 = zext i32 %1695 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1698 = lshr i64 %1694, %1697
	movq	%r8, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1699 = and i64 %1698, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1700 = add i64 %1693, %1699
	movq	%r11, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1701 = getelementptr [576 x i16], i8* %1690, i64 0, i64 %1700
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1702 = load i16, i16* %1701
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1703 = sext i16 %1702 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1703, i32* %63
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1704
	jmp	tinfl_decompress1704
	.text
tinfl_decompress1704:
	# %1705 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1706 = icmp slt i32 %1705, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1706, label %1707, label %1712
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tinfl_decompress1712
	jmp	tinfl_decompress1707
	.text
tinfl_decompress1707:
	# %1708 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1709 = load i32, i32* %64
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1710 = add i32 %1709, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1711 = icmp uge i32 %1708, %1710
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r14
	setnb	%r14b
	# br label %1712
	movq	%r14, %rdx
	jmp	tinfl_decompress1712
	.text
tinfl_decompress1712:
	# %1713 = phi i1 [0, %1704], [%1711, %1707]
	# br i1 %1713, label %1688, label %1714
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1714
	jmp	tinfl_decompress1688
	.text
tinfl_decompress1714:
	# %1715 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1716 = icmp sge i32 %1715, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %1716, label %1717, label %1718
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1718
	jmp	tinfl_decompress1717
	.text
tinfl_decompress1717:
	# br label %1755
	jmp	tinfl_decompress1755
	.text
tinfl_decompress1718:
	# br label %1719
	jmp	tinfl_decompress1719
	.text
tinfl_decompress1719:
	# br label %1720
	jmp	tinfl_decompress1720
	.text
tinfl_decompress1720:
	# br label %1721
	jmp	tinfl_decompress1721
	.text
tinfl_decompress1721:
	# br label %1722
	jmp	tinfl_decompress1722
	.text
tinfl_decompress1722:
	# %1723 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1724 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1725 = icmp uge i8* %1723, %1724
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1725, label %1726, label %1737
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1737
	jmp	tinfl_decompress1726
	.text
tinfl_decompress1726:
	# br label %1727
	jmp	tinfl_decompress1727
	.text
tinfl_decompress1727:
	# %1728 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1729 = and i32 %1728, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1730 = icmp ne i32 %1729, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %1731 = zext i1 %1730 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %1732 = select i1 %1730, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %1732, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1733 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1734 = getelementptr %struct.tinfl_decompressor_tag, i8* %1733, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 23, i32* %1734
	movq	$23, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress1735:
	# br label %1736
	jmp	tinfl_decompress1736
	.text
tinfl_decompress1736:
	# br label %1722
	jmp	tinfl_decompress1722
	.text
tinfl_decompress1737:
	# %1738 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1739 = getelementptr i8, i8* %1738, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1739, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1740 = load i8, i8* %1738
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1741 = zext i8 %1740 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1741, i32* %65
	movq	%rdx, %rax
	movq	-464(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1742
	jmp	tinfl_decompress1742
	.text
tinfl_decompress1742:
	# %1743 = load i32, i32* %65
	movq	-464(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1744 = zext i32 %1743 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1745 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1746 = zext i32 %1745 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1747 = shl i64 %1744, %1746
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %1748 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1749 = or i64 %1748, %1747
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1749, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1750 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1751 = add i32 %1750, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1751, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1752
	jmp	tinfl_decompress1752
	.text
tinfl_decompress1752:
	# %1753 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1754 = icmp ult i32 %1753, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1754, label %1662, label %1755
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1755
	jmp	tinfl_decompress1662
	.text
tinfl_decompress1755:
	# br label %1779
	jmp	tinfl_decompress1779
	.text
tinfl_decompress1756:
	# %1757 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1758 = getelementptr i8, i8* %1757, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1759 = load i8, i8* %1758
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1760 = zext i8 %1759 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1761 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1762 = zext i32 %1761 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1763 = shl i64 %1760, %1762
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %1764 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1765 = getelementptr i8, i8* %1764, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1766 = load i8, i8* %1765
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1767 = zext i8 %1766 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1768 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1769 = add i32 %1768, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1770 = zext i32 %1769 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1771 = shl i64 %1767, %1770
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1772 = or i64 %1763, %1771
	movq	%r8, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %1773 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1774 = or i64 %1773, %1772
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1774, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1775 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1776 = getelementptr i8, i8* %1775, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1776, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1777 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1778 = add i32 %1777, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1778, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1779
	jmp	tinfl_decompress1779
	.text
tinfl_decompress1779:
	# br label %1780
	jmp	tinfl_decompress1780
	.text
tinfl_decompress1780:
	# %1781 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1782 = getelementptr %struct.tinfl_decompressor_tag, i8* %1781, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1783 = getelementptr [3 x [1024 x i16]], i8* %1782, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1784 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1785 = and i64 %1784, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1786 = getelementptr [1024 x i16], i8* %1783, i64 0, i64 %1785
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1787 = load i16, i16* %1786
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1788 = sext i16 %1787 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1788, i32* %63
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1789 = icmp sge i32 %1788, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %1789, label %1790, label %1795
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1795
	jmp	tinfl_decompress1790
	.text
tinfl_decompress1790:
	# %1791 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1792 = ashr i32 %1791, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %1792, i32* %64
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1793 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1794 = and i32 %1793, 511
	movq	%rdx, %rax
	movq	$511, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1794, i32* %63
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1816
	jmp	tinfl_decompress1816
	.text
tinfl_decompress1795:
	# store i32 10, i32* %64
	movq	$10, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1796
	jmp	tinfl_decompress1796
	.text
tinfl_decompress1796:
	# %1797 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1798 = getelementptr %struct.tinfl_decompressor_tag, i8* %1797, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %1799 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1800 = xor i32 %1799, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1801 = sext i32 %1800 to i64
	movq	%rdx, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %1802 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1803 = load i32, i32* %64
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1804 = add i32 %1803, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1804, i32* %64
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1805 = zext i32 %1803 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1806 = lshr i64 %1802, %1805
	movq	%r8, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1807 = and i64 %1806, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1808 = add i64 %1801, %1807
	movq	%r11, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1809 = getelementptr [576 x i16], i8* %1798, i64 0, i64 %1808
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1810 = load i16, i16* %1809
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1811 = sext i16 %1810 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1811, i32* %63
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1812
	jmp	tinfl_decompress1812
	.text
tinfl_decompress1812:
	# %1813 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1814 = icmp slt i32 %1813, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1814, label %1796, label %1815
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1815
	jmp	tinfl_decompress1796
	.text
tinfl_decompress1815:
	# br label %1816
	jmp	tinfl_decompress1816
	.text
tinfl_decompress1816:
	# %1817 = load i32, i32* %63
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1817, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1818 = load i32, i32* %64
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1819 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1820 = zext i32 %1818 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1821 = lshr i64 %1819, %1820
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %1821, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1822 = load i32, i32* %64
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1823 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1824 = sub i32 %1823, %1822
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1824, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1825
	jmp	tinfl_decompress1825
	.text
tinfl_decompress1825:
	# %1826 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1827 = icmp uge i32 %1826, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1827, label %1828, label %1829
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1829
	jmp	tinfl_decompress1828
	.text
tinfl_decompress1828:
	# br label %1989
	jmp	tinfl_decompress1989
	.text
tinfl_decompress1829:
	# br label %1830
	jmp	tinfl_decompress1830
	.text
tinfl_decompress1830:
	# %1831 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1832 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1833 = icmp uge i8* %1831, %1832
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1833, label %1834, label %1840
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1840
	jmp	tinfl_decompress1834
	.text
tinfl_decompress1834:
	# br label %1835
	jmp	tinfl_decompress1835
	.text
tinfl_decompress1835:
	# store i32 2, i32* %18
	movq	$2, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1836 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1837 = getelementptr %struct.tinfl_decompressor_tag, i8* %1836, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 24, i32* %1837
	movq	$24, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress1838:
	# br label %1839
	jmp	tinfl_decompress1839
	.text
tinfl_decompress1839:
	# br label %1830
	jmp	tinfl_decompress1830
	.text
tinfl_decompress1840:
	# %1841 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1842 = trunc i32 %1841 to i8
	movq	%rdx, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %1843 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1844 = getelementptr i8, i8* %1843, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1844, i8** %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 %1842, i8* %1843
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %1988
	jmp	tinfl_decompress1988
	.text
tinfl_decompress1845:
	# %1846 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1847 = icmp ult i32 %1846, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1847, label %1848, label %1881
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1881
	jmp	tinfl_decompress1848
	.text
tinfl_decompress1848:
	# %1849 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1850 = getelementptr i8, i8* %1849, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1851 = load i8, i8* %1850
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1852 = zext i8 %1851 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1853 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1854 = getelementptr i8, i8* %1853, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1855 = load i8, i8* %1854
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1856 = zext i8 %1855 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1857 = shl i32 %1856, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1858 = or i32 %1852, %1857
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %1859 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1860 = getelementptr i8, i8* %1859, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1861 = load i8, i8* %1860
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1862 = zext i8 %1861 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1863 = shl i32 %1862, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1864 = or i32 %1858, %1863
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %1865 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1866 = getelementptr i8, i8* %1865, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1867 = load i8, i8* %1866
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1868 = zext i8 %1867 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1869 = shl i32 %1868, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1870 = or i32 %1864, %1869
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1871 = zext i32 %1870 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1872 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1873 = zext i32 %1872 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1874 = shl i64 %1871, %1873
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %1875 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1876 = or i64 %1875, %1874
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1876, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1877 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1878 = getelementptr i8, i8* %1877, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1878, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1879 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1880 = add i32 %1879, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1880, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1881
	jmp	tinfl_decompress1881
	.text
tinfl_decompress1881:
	# %1882 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1883 = getelementptr %struct.tinfl_decompressor_tag, i8* %1882, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1884 = getelementptr [3 x [1024 x i16]], i8* %1883, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1885 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1886 = and i64 %1885, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1887 = getelementptr [1024 x i16], i8* %1884, i64 0, i64 %1886
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1888 = load i16, i16* %1887
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1889 = sext i16 %1888 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1889, i32* %66
	movq	%rdx, %rax
	movq	-472(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1890 = icmp sge i32 %1889, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %1890, label %1891, label %1894
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1894
	jmp	tinfl_decompress1891
	.text
tinfl_decompress1891:
	# %1892 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1893 = ashr i32 %1892, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %1893, i32* %67
	movq	%rdx, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1915
	jmp	tinfl_decompress1915
	.text
tinfl_decompress1894:
	# store i32 10, i32* %67
	movq	$10, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1895
	jmp	tinfl_decompress1895
	.text
tinfl_decompress1895:
	# %1896 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1897 = getelementptr %struct.tinfl_decompressor_tag, i8* %1896, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %1898 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1899 = xor i32 %1898, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1900 = sext i32 %1899 to i64
	movq	%rdx, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %1901 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1902 = load i32, i32* %67
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1903 = add i32 %1902, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1903, i32* %67
	movq	%rdx, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1904 = zext i32 %1902 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1905 = lshr i64 %1901, %1904
	movq	%r8, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1906 = and i64 %1905, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1907 = add i64 %1900, %1906
	movq	%r11, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1908 = getelementptr [576 x i16], i8* %1897, i64 0, i64 %1907
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1909 = load i16, i16* %1908
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1910 = sext i16 %1909 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1910, i32* %66
	movq	%rdx, %rax
	movq	-472(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1911
	jmp	tinfl_decompress1911
	.text
tinfl_decompress1911:
	# %1912 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1913 = icmp slt i32 %1912, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1913, label %1895, label %1914
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1914
	jmp	tinfl_decompress1895
	.text
tinfl_decompress1914:
	# br label %1915
	jmp	tinfl_decompress1915
	.text
tinfl_decompress1915:
	# %1916 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1916, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1917 = load i32, i32* %67
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1918 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1919 = zext i32 %1917 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1920 = lshr i64 %1918, %1919
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %1920, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1921 = load i32, i32* %67
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1922 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1923 = sub i32 %1922, %1921
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1923, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1924 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1925 = and i32 %1924, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1926 = icmp ne i32 %1925, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1926, label %1927, label %1928
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1928
	jmp	tinfl_decompress1927
	.text
tinfl_decompress1927:
	# br label %1989
	jmp	tinfl_decompress1989
	.text
tinfl_decompress1928:
	# %1929 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1930 = getelementptr %struct.tinfl_decompressor_tag, i8* %1929, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1931 = getelementptr [3 x [1024 x i16]], i8* %1930, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1932 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1933 = and i64 %1932, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1934 = getelementptr [1024 x i16], i8* %1931, i64 0, i64 %1933
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1935 = load i16, i16* %1934
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1936 = sext i16 %1935 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1936, i32* %66
	movq	%rdx, %rax
	movq	-472(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1937 = icmp sge i32 %1936, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %1937, label %1938, label %1941
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1941
	jmp	tinfl_decompress1938
	.text
tinfl_decompress1938:
	# %1939 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1940 = ashr i32 %1939, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %1940, i32* %67
	movq	%rdx, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1962
	jmp	tinfl_decompress1962
	.text
tinfl_decompress1941:
	# store i32 10, i32* %67
	movq	$10, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1942
	jmp	tinfl_decompress1942
	.text
tinfl_decompress1942:
	# %1943 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1944 = getelementptr %struct.tinfl_decompressor_tag, i8* %1943, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %1945 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1946 = xor i32 %1945, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1947 = sext i32 %1946 to i64
	movq	%rdx, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %1948 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1949 = load i32, i32* %67
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1950 = add i32 %1949, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1950, i32* %67
	movq	%rdx, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1951 = zext i32 %1949 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1952 = lshr i64 %1948, %1951
	movq	%r8, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1953 = and i64 %1952, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1954 = add i64 %1947, %1953
	movq	%r11, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1955 = getelementptr [576 x i16], i8* %1944, i64 0, i64 %1954
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1956 = load i16, i16* %1955
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1957 = sext i16 %1956 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1957, i32* %66
	movq	%rdx, %rax
	movq	-472(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1958
	jmp	tinfl_decompress1958
	.text
tinfl_decompress1958:
	# %1959 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1960 = icmp slt i32 %1959, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %1960, label %1942, label %1961
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1961
	jmp	tinfl_decompress1942
	.text
tinfl_decompress1961:
	# br label %1962
	jmp	tinfl_decompress1962
	.text
tinfl_decompress1962:
	# %1963 = load i32, i32* %67
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1964 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1965 = zext i32 %1963 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1966 = lshr i64 %1964, %1965
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %1966, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1967 = load i32, i32* %67
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1968 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1969 = sub i32 %1968, %1967
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1969, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1970 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1971 = trunc i32 %1970 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1972 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1973 = getelementptr i8, i8* %1972, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1971, i8* %1973
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1974 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1975 = and i32 %1974, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1976 = icmp ne i32 %1975, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1976, label %1977, label %1981
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1981
	jmp	tinfl_decompress1977
	.text
tinfl_decompress1977:
	# %1978 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1979 = getelementptr i8, i8* %1978, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1979, i8** %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1980 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1980, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1989
	jmp	tinfl_decompress1989
	.text
tinfl_decompress1981:
	# %1982 = load i32, i32* %66
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1983 = trunc i32 %1982 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1984 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1985 = getelementptr i8, i8* %1984, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1983, i8* %1985
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1986 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1987 = getelementptr i8, i8* %1986, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1987, i8** %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1988
	jmp	tinfl_decompress1988
	.text
tinfl_decompress1988:
	# br label %1636
	jmp	tinfl_decompress1636
	.text
tinfl_decompress1989:
	# %1990 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1991 = and i32 %1990, 511
	movq	%rdx, %rax
	movq	$511, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1991, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1992 = icmp eq i32 %1991, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1992, label %1993, label %1994
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress1994
	jmp	tinfl_decompress1993
	.text
tinfl_decompress1993:
	# br label %2452
	jmp	tinfl_decompress2452
	.text
tinfl_decompress1994:
	# %1995 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1996 = sub i32 %1995, 257
	movq	%rdx, %rax
	movq	$257, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1997 = zext i32 %1996 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1998 = getelementptr [31 x i8], i8* @tinfl_decompress.s_length_extra, i64 0, i64 %1997
	leaq	_tinfl_decompress.s_length_extra(%rip), %rcx
	movq	$0, %rax
	imulq	$31, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1999 = load i8, i8* %1998
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2000 = zext i8 %1999 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %2000, i32* %22
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2001 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2002 = sub i32 %2001, 257
	movq	%rdx, %rax
	movq	$257, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %2003 = zext i32 %2002 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2004 = getelementptr [31 x i16], i8* @tinfl_decompress.s_length_base, i64 0, i64 %2003
	leaq	_tinfl_decompress.s_length_base(%rip), %rcx
	movq	$0, %rax
	imulq	$62, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2005 = load i16, i16* %2004
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %2006 = zext i16 %2005 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %2006, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2007 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2008 = icmp ne i32 %2007, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2008, label %2009, label %2071
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2071
	jmp	tinfl_decompress2009
	.text
tinfl_decompress2009:
	# br label %2010
	jmp	tinfl_decompress2010
	.text
tinfl_decompress2010:
	# %2011 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2012 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2013 = icmp ult i32 %2011, %2012
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2013, label %2014, label %2052
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2052
	jmp	tinfl_decompress2014
	.text
tinfl_decompress2014:
	# br label %2015
	jmp	tinfl_decompress2015
	.text
tinfl_decompress2015:
	# br label %2016
	jmp	tinfl_decompress2016
	.text
tinfl_decompress2016:
	# br label %2017
	jmp	tinfl_decompress2017
	.text
tinfl_decompress2017:
	# %2018 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2019 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2020 = icmp uge i8* %2018, %2019
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2020, label %2021, label %2032
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2032
	jmp	tinfl_decompress2021
	.text
tinfl_decompress2021:
	# br label %2022
	jmp	tinfl_decompress2022
	.text
tinfl_decompress2022:
	# %2023 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2024 = and i32 %2023, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2025 = icmp ne i32 %2024, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %2026 = zext i1 %2025 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %2027 = select i1 %2025, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %2027, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2028 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2029 = getelementptr %struct.tinfl_decompressor_tag, i8* %2028, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 25, i32* %2029
	movq	$25, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2030:
	# br label %2031
	jmp	tinfl_decompress2031
	.text
tinfl_decompress2031:
	# br label %2017
	jmp	tinfl_decompress2017
	.text
tinfl_decompress2032:
	# %2033 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2034 = getelementptr i8, i8* %2033, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2034, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2035 = load i8, i8* %2033
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2036 = zext i8 %2035 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %2036, i32* %69
	movq	%rdx, %rax
	movq	-496(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2037
	jmp	tinfl_decompress2037
	.text
tinfl_decompress2037:
	# %2038 = load i32, i32* %69
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2039 = zext i32 %2038 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2040 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2041 = zext i32 %2040 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2042 = shl i64 %2039, %2041
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %2043 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2044 = or i64 %2043, %2042
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2044, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2045 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2046 = add i32 %2045, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2046, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2047
	jmp	tinfl_decompress2047
	.text
tinfl_decompress2047:
	# %2048 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2049 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2050 = icmp ult i32 %2048, %2049
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2050, label %2015, label %2051
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2051
	jmp	tinfl_decompress2015
	.text
tinfl_decompress2051:
	# br label %2052
	jmp	tinfl_decompress2052
	.text
tinfl_decompress2052:
	# %2053 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2054 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2055 = shl i32 1, %2054
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %2056 = sub i32 %2055, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %2057 = sext i32 %2056 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2058 = and i64 %2053, %2057
	movq	%rdi, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2059 = trunc i64 %2058 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %2059, i32* %68
	movq	%rdx, %rax
	movq	-488(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2060 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2061 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2062 = zext i32 %2060 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2063 = lshr i64 %2061, %2062
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %2063, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2064 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2065 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2066 = sub i32 %2065, %2064
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2066, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2067
	jmp	tinfl_decompress2067
	.text
tinfl_decompress2067:
	# %2068 = load i32, i32* %68
	movq	-488(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2069 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2070 = add i32 %2069, %2068
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2070, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2071
	jmp	tinfl_decompress2071
	.text
tinfl_decompress2071:
	# br label %2072
	jmp	tinfl_decompress2072
	.text
tinfl_decompress2072:
	# %2073 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2074 = icmp ult i32 %2073, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2074, label %2075, label %2201
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2201
	jmp	tinfl_decompress2075
	.text
tinfl_decompress2075:
	# %2076 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2077 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2078 = ptrtoint i8** %2076 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %2079 = ptrtoint i8** %2077 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %2080 = sub i64 %2078, %2079
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %2081 = icmp slt i64 %2080, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setl	%dl
	# br i1 %2081, label %2082, label %2177
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2177
	jmp	tinfl_decompress2082
	.text
tinfl_decompress2082:
	# br label %2083
	jmp	tinfl_decompress2083
	.text
tinfl_decompress2083:
	# %2084 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2085 = getelementptr %struct.tinfl_decompressor_tag, i8* %2084, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2086 = getelementptr [3 x [1024 x i16]], i8* %2085, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %2087 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2088 = and i64 %2087, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2089 = getelementptr [1024 x i16], i8* %2086, i64 0, i64 %2088
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2090 = load i16, i16* %2089
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %2091 = sext i16 %2090 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %2091, i32* %70
	movq	%rdx, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2092 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2093 = icmp sge i32 %2092, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %2093, label %2094, label %2105
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2105
	jmp	tinfl_decompress2094
	.text
tinfl_decompress2094:
	# %2095 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2096 = ashr i32 %2095, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %2096, i32* %71
	movq	%rdx, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2097 = load i32, i32* %71
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2098 = icmp ne i32 %2097, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2098, label %2099, label %2104
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2104
	jmp	tinfl_decompress2099
	.text
tinfl_decompress2099:
	# %2100 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2101 = load i32, i32* %71
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2102 = icmp uge i32 %2100, %2101
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2102, label %2103, label %2104
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2104
	jmp	tinfl_decompress2103
	.text
tinfl_decompress2103:
	# br label %2176
	jmp	tinfl_decompress2176
	.text
tinfl_decompress2104:
	# br label %2141
	jmp	tinfl_decompress2141
	.text
tinfl_decompress2105:
	# %2106 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2107 = icmp ugt i32 %2106, 10
	movq	%rdx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2107, label %2108, label %2140
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2140
	jmp	tinfl_decompress2108
	.text
tinfl_decompress2108:
	# store i32 10, i32* %71
	movq	$10, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2109
	jmp	tinfl_decompress2109
	.text
tinfl_decompress2109:
	# %2110 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2111 = getelementptr %struct.tinfl_decompressor_tag, i8* %2110, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %2112 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2113 = xor i32 %2112, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %2114 = sext i32 %2113 to i64
	movq	%rdx, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %2115 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2116 = load i32, i32* %71
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2117 = add i32 %2116, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2117, i32* %71
	movq	%rdx, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2118 = zext i32 %2116 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2119 = lshr i64 %2115, %2118
	movq	%r8, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %2120 = and i64 %2119, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2121 = add i64 %2114, %2120
	movq	%r11, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %2122 = getelementptr [64 x i16], i8* %2111, i64 0, i64 %2121
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2123 = load i16, i16* %2122
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %2124 = sext i16 %2123 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %2124, i32* %70
	movq	%rdx, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2125
	jmp	tinfl_decompress2125
	.text
tinfl_decompress2125:
	# %2126 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2127 = icmp slt i32 %2126, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %2127, label %2128, label %2133
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tinfl_decompress2133
	jmp	tinfl_decompress2128
	.text
tinfl_decompress2128:
	# %2129 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2130 = load i32, i32* %71
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2131 = add i32 %2130, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %2132 = icmp uge i32 %2129, %2131
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r13
	setnb	%r13b
	# br label %2133
	movq	%r13, %rdx
	jmp	tinfl_decompress2133
	.text
tinfl_decompress2133:
	# %2134 = phi i1 [0, %2125], [%2132, %2128]
	# br i1 %2134, label %2109, label %2135
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2135
	jmp	tinfl_decompress2109
	.text
tinfl_decompress2135:
	# %2136 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2137 = icmp sge i32 %2136, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %2137, label %2138, label %2139
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2139
	jmp	tinfl_decompress2138
	.text
tinfl_decompress2138:
	# br label %2176
	jmp	tinfl_decompress2176
	.text
tinfl_decompress2139:
	# br label %2140
	jmp	tinfl_decompress2140
	.text
tinfl_decompress2140:
	# br label %2141
	jmp	tinfl_decompress2141
	.text
tinfl_decompress2141:
	# br label %2142
	jmp	tinfl_decompress2142
	.text
tinfl_decompress2142:
	# br label %2143
	jmp	tinfl_decompress2143
	.text
tinfl_decompress2143:
	# %2144 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2145 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2146 = icmp uge i8* %2144, %2145
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2146, label %2147, label %2158
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2158
	jmp	tinfl_decompress2147
	.text
tinfl_decompress2147:
	# br label %2148
	jmp	tinfl_decompress2148
	.text
tinfl_decompress2148:
	# %2149 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2150 = and i32 %2149, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2151 = icmp ne i32 %2150, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %2152 = zext i1 %2151 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %2153 = select i1 %2151, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %2153, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2154 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2155 = getelementptr %struct.tinfl_decompressor_tag, i8* %2154, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 26, i32* %2155
	movq	$26, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2156:
	# br label %2157
	jmp	tinfl_decompress2157
	.text
tinfl_decompress2157:
	# br label %2143
	jmp	tinfl_decompress2143
	.text
tinfl_decompress2158:
	# %2159 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2160 = getelementptr i8, i8* %2159, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2160, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2161 = load i8, i8* %2159
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2162 = zext i8 %2161 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %2162, i32* %72
	movq	%rdx, %rax
	movq	-520(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2163
	jmp	tinfl_decompress2163
	.text
tinfl_decompress2163:
	# %2164 = load i32, i32* %72
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2165 = zext i32 %2164 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2166 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2167 = zext i32 %2166 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2168 = shl i64 %2165, %2167
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %2169 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2170 = or i64 %2169, %2168
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2170, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2171 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2172 = add i32 %2171, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2172, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2173
	jmp	tinfl_decompress2173
	.text
tinfl_decompress2173:
	# %2174 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2175 = icmp ult i32 %2174, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2175, label %2083, label %2176
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2176
	jmp	tinfl_decompress2083
	.text
tinfl_decompress2176:
	# br label %2200
	jmp	tinfl_decompress2200
	.text
tinfl_decompress2177:
	# %2178 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2179 = getelementptr i8, i8* %2178, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2180 = load i8, i8* %2179
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2181 = zext i8 %2180 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %2182 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2183 = zext i32 %2182 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2184 = shl i64 %2181, %2183
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %2185 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2186 = getelementptr i8, i8* %2185, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2187 = load i8, i8* %2186
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2188 = zext i8 %2187 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %2189 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2190 = add i32 %2189, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %2191 = zext i32 %2190 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2192 = shl i64 %2188, %2191
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %2193 = or i64 %2184, %2192
	movq	%r8, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %2194 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2195 = or i64 %2194, %2193
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2195, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2196 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2197 = getelementptr i8, i8* %2196, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2197, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2198 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2199 = add i32 %2198, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2199, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2200
	jmp	tinfl_decompress2200
	.text
tinfl_decompress2200:
	# br label %2201
	jmp	tinfl_decompress2201
	.text
tinfl_decompress2201:
	# %2202 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2203 = getelementptr %struct.tinfl_decompressor_tag, i8* %2202, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2204 = getelementptr [3 x [1024 x i16]], i8* %2203, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$6144, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %2205 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2206 = and i64 %2205, 1023
	movq	%rdx, %rax
	movq	$1023, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2207 = getelementptr [1024 x i16], i8* %2204, i64 0, i64 %2206
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2208 = load i16, i16* %2207
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %2209 = sext i16 %2208 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %2209, i32* %70
	movq	%rdx, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2210 = icmp sge i32 %2209, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %2210, label %2211, label %2216
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2216
	jmp	tinfl_decompress2211
	.text
tinfl_decompress2211:
	# %2212 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2213 = ashr i32 %2212, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %2213, i32* %71
	movq	%rdx, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2214 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2215 = and i32 %2214, 511
	movq	%rdx, %rax
	movq	$511, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2215, i32* %70
	movq	%rdx, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2237
	jmp	tinfl_decompress2237
	.text
tinfl_decompress2216:
	# store i32 10, i32* %71
	movq	$10, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2217
	jmp	tinfl_decompress2217
	.text
tinfl_decompress2217:
	# %2218 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2219 = getelementptr %struct.tinfl_decompressor_tag, i8* %2218, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %2220 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2221 = xor i32 %2220, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %2222 = sext i32 %2221 to i64
	movq	%rdx, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %2223 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2224 = load i32, i32* %71
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2225 = add i32 %2224, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2225, i32* %71
	movq	%rdx, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2226 = zext i32 %2224 to i64
	movq	%rdi, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2227 = lshr i64 %2223, %2226
	movq	%r8, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %2228 = and i64 %2227, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2229 = add i64 %2222, %2228
	movq	%r11, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %2230 = getelementptr [64 x i16], i8* %2219, i64 0, i64 %2229
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2231 = load i16, i16* %2230
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %2232 = sext i16 %2231 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %2232, i32* %70
	movq	%rdx, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2233
	jmp	tinfl_decompress2233
	.text
tinfl_decompress2233:
	# %2234 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2235 = icmp slt i32 %2234, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %2235, label %2217, label %2236
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2236
	jmp	tinfl_decompress2217
	.text
tinfl_decompress2236:
	# br label %2237
	jmp	tinfl_decompress2237
	.text
tinfl_decompress2237:
	# %2238 = load i32, i32* %70
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %2238, i32* %20
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2239 = load i32, i32* %71
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2240 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2241 = zext i32 %2239 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2242 = lshr i64 %2240, %2241
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %2242, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2243 = load i32, i32* %71
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2244 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2245 = sub i32 %2244, %2243
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2245, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2246
	jmp	tinfl_decompress2246
	.text
tinfl_decompress2246:
	# %2247 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2248 = zext i32 %2247 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2249 = getelementptr [32 x i8], i8* @tinfl_decompress.s_dist_extra, i64 0, i64 %2248
	leaq	_tinfl_decompress.s_dist_extra(%rip), %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2250 = load i8, i8* %2249
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2251 = zext i8 %2250 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %2251, i32* %22
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2252 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2253 = zext i32 %2252 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2254 = getelementptr [32 x i16], i8* @tinfl_decompress.s_dist_base, i64 0, i64 %2253
	leaq	_tinfl_decompress.s_dist_base(%rip), %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2255 = load i16, i16* %2254
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %2256 = zext i16 %2255 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %2256, i32* %20
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2257 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2258 = icmp ne i32 %2257, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2258, label %2259, label %2321
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2321
	jmp	tinfl_decompress2259
	.text
tinfl_decompress2259:
	# br label %2260
	jmp	tinfl_decompress2260
	.text
tinfl_decompress2260:
	# %2261 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2262 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2263 = icmp ult i32 %2261, %2262
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2263, label %2264, label %2302
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2302
	jmp	tinfl_decompress2264
	.text
tinfl_decompress2264:
	# br label %2265
	jmp	tinfl_decompress2265
	.text
tinfl_decompress2265:
	# br label %2266
	jmp	tinfl_decompress2266
	.text
tinfl_decompress2266:
	# br label %2267
	jmp	tinfl_decompress2267
	.text
tinfl_decompress2267:
	# %2268 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2269 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2270 = icmp uge i8* %2268, %2269
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2270, label %2271, label %2282
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2282
	jmp	tinfl_decompress2271
	.text
tinfl_decompress2271:
	# br label %2272
	jmp	tinfl_decompress2272
	.text
tinfl_decompress2272:
	# %2273 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2274 = and i32 %2273, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2275 = icmp ne i32 %2274, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %2276 = zext i1 %2275 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %2277 = select i1 %2275, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %2277, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2278 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2279 = getelementptr %struct.tinfl_decompressor_tag, i8* %2278, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 27, i32* %2279
	movq	$27, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2280:
	# br label %2281
	jmp	tinfl_decompress2281
	.text
tinfl_decompress2281:
	# br label %2267
	jmp	tinfl_decompress2267
	.text
tinfl_decompress2282:
	# %2283 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2284 = getelementptr i8, i8* %2283, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2284, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2285 = load i8, i8* %2283
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2286 = zext i8 %2285 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %2286, i32* %74
	movq	%rdx, %rax
	movq	-536(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2287
	jmp	tinfl_decompress2287
	.text
tinfl_decompress2287:
	# %2288 = load i32, i32* %74
	movq	-536(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2289 = zext i32 %2288 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2290 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2291 = zext i32 %2290 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2292 = shl i64 %2289, %2291
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %2293 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2294 = or i64 %2293, %2292
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2294, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2295 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2296 = add i32 %2295, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2296, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2297
	jmp	tinfl_decompress2297
	.text
tinfl_decompress2297:
	# %2298 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2299 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2300 = icmp ult i32 %2298, %2299
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2300, label %2265, label %2301
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2301
	jmp	tinfl_decompress2265
	.text
tinfl_decompress2301:
	# br label %2302
	jmp	tinfl_decompress2302
	.text
tinfl_decompress2302:
	# %2303 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2304 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2305 = shl i32 1, %2304
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %2306 = sub i32 %2305, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %2307 = sext i32 %2306 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2308 = and i64 %2303, %2307
	movq	%rdi, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2309 = trunc i64 %2308 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %2309, i32* %73
	movq	%rdx, %rax
	movq	-528(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2310 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2311 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2312 = zext i32 %2310 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2313 = lshr i64 %2311, %2312
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %2313, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2314 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2315 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2316 = sub i32 %2315, %2314
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2316, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2317
	jmp	tinfl_decompress2317
	.text
tinfl_decompress2317:
	# %2318 = load i32, i32* %73
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2319 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2320 = add i32 %2319, %2318
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2320, i32* %20
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2321
	jmp	tinfl_decompress2321
	.text
tinfl_decompress2321:
	# %2322 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2323 = load i8*, i8** %12
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2324 = ptrtoint i8** %2322 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %2325 = ptrtoint i8** %2323 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %2326 = sub i64 %2324, %2325
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2326, i64* %29
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2327 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2328 = icmp eq i32 %2327, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %2328, label %2337, label %2329
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2329
	jmp	tinfl_decompress2337
	.text
tinfl_decompress2329:
	# %2330 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2331 = zext i32 %2330 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2332 = load i64, i64* %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2333 = icmp ugt i64 %2331, %2332
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2333, label %2337, label %2334
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2334
	jmp	tinfl_decompress2337
	.text
tinfl_decompress2334:
	# %2335 = load i64, i64* %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2336 = icmp eq i64 %2335, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %2336, label %2337, label %2350
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2350
	jmp	tinfl_decompress2337
	.text
tinfl_decompress2337:
	# %2338 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2339 = and i32 %2338, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2340 = icmp ne i32 %2339, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2340, label %2341, label %2350
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2350
	jmp	tinfl_decompress2341
	.text
tinfl_decompress2341:
	# br label %2342
	jmp	tinfl_decompress2342
	.text
tinfl_decompress2342:
	# br label %2343
	jmp	tinfl_decompress2343
	.text
tinfl_decompress2343:
	# br label %2344
	jmp	tinfl_decompress2344
	.text
tinfl_decompress2344:
	# store i32 -1, i32* %18
	movq	$-1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2345 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2346 = getelementptr %struct.tinfl_decompressor_tag, i8* %2345, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 37, i32* %2346
	movq	$37, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2347:
	# br label %2348
	jmp	tinfl_decompress2348
	.text
tinfl_decompress2348:
	# br label %2343
	jmp	tinfl_decompress2343
	.text
tinfl_decompress2349:
	# br label %2350
	jmp	tinfl_decompress2350
	.text
tinfl_decompress2350:
	# %2351 = load i8*, i8** %12
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2352 = load i64, i64* %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2353 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2354 = zext i32 %2353 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2355 = sub i64 %2352, %2354
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# %2356 = load i64, i64* %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2357 = and i64 %2355, %2356
	movq	%rdi, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2358 = getelementptr i8, i8* %2351, i64 %2357
	movq	%r8, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2358, i8** %62
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2359 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2360 = load i8*, i8** %62
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2361 = icmp ugt i8* %2359, %2360
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2361, label %2362, label %2364
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2364
	jmp	tinfl_decompress2362
	.text
tinfl_decompress2362:
	# %2363 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# br label %2366
	movq	%r10, %rdi
	jmp	tinfl_decompress2366
	.text
tinfl_decompress2364:
	# %2365 = load i8*, i8** %62
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# br label %2366
	movq	%r9, %rdi
	jmp	tinfl_decompress2366
	.text
tinfl_decompress2366:
	# %2367 = phi i8* [%2363, %2362], [%2365, %2364]
	# %2368 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2369 = zext i32 %2368 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2370 = getelementptr i8, i8* %2367, i64 %2369
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %2371 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2372 = icmp ugt i8* %2370, %2371
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2372, label %2373, label %2403
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2403
	jmp	tinfl_decompress2373
	.text
tinfl_decompress2373:
	# br label %2374
	jmp	tinfl_decompress2374
	.text
tinfl_decompress2374:
	# %2375 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2376 = add i32 %2375, -1
	movq	%rdi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2376, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2377 = icmp ne i32 %2375, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2377, label %2378, label %2402
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2402
	jmp	tinfl_decompress2378
	.text
tinfl_decompress2378:
	# br label %2379
	jmp	tinfl_decompress2379
	.text
tinfl_decompress2379:
	# %2380 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2381 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2382 = icmp uge i8* %2380, %2381
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2382, label %2383, label %2389
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2389
	jmp	tinfl_decompress2383
	.text
tinfl_decompress2383:
	# br label %2384
	jmp	tinfl_decompress2384
	.text
tinfl_decompress2384:
	# store i32 2, i32* %18
	movq	$2, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2385 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2386 = getelementptr %struct.tinfl_decompressor_tag, i8* %2385, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 53, i32* %2386
	movq	$53, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2387:
	# br label %2388
	jmp	tinfl_decompress2388
	.text
tinfl_decompress2388:
	# br label %2379
	jmp	tinfl_decompress2379
	.text
tinfl_decompress2389:
	# %2390 = load i8*, i8** %12
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2391 = load i64, i64* %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2392 = add i64 %2391, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2392, i64* %29
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2393 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2394 = zext i32 %2393 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2395 = sub i64 %2391, %2394
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# %2396 = load i64, i64* %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2397 = and i64 %2395, %2396
	movq	%rdi, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2398 = getelementptr i8, i8* %2390, i64 %2397
	movq	%r8, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2399 = load i8, i8* %2398
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %2400 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2401 = getelementptr i8, i8* %2400, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2401, i8** %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 %2399, i8* %2400
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %2374
	jmp	tinfl_decompress2374
	.text
tinfl_decompress2402:
	# br label %1635
	jmp	tinfl_decompress1635
	.text
tinfl_decompress2403:
	# br label %2404
	jmp	tinfl_decompress2404
	.text
tinfl_decompress2404:
	# %2405 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2406 = icmp ugt i32 %2405, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2406, label %2407, label %2429
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2429
	jmp	tinfl_decompress2407
	.text
tinfl_decompress2407:
	# %2408 = load i8*, i8** %62
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2409 = getelementptr i8, i8* %2408, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2410 = load i8, i8* %2409
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %2411 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2412 = getelementptr i8, i8* %2411, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %2410, i8* %2412
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %2413 = load i8*, i8** %62
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2414 = getelementptr i8, i8* %2413, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2415 = load i8, i8* %2414
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %2416 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2417 = getelementptr i8, i8* %2416, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %2415, i8* %2417
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %2418 = load i8*, i8** %62
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2419 = getelementptr i8, i8* %2418, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2420 = load i8, i8* %2419
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %2421 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2422 = getelementptr i8, i8* %2421, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %2420, i8* %2422
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %2423 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2424 = getelementptr i8, i8* %2423, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2424, i8** %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2425 = load i8*, i8** %62
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2426 = getelementptr i8, i8* %2425, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2426, i8** %62
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2427 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2428 = sub i32 %2427, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2428, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2404
	jmp	tinfl_decompress2404
	.text
tinfl_decompress2429:
	# %2430 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2431 = icmp ugt i32 %2430, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2431, label %2432, label %2451
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2451
	jmp	tinfl_decompress2432
	.text
tinfl_decompress2432:
	# %2433 = load i8*, i8** %62
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2434 = getelementptr i8, i8* %2433, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2435 = load i8, i8* %2434
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %2436 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2437 = getelementptr i8, i8* %2436, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %2435, i8* %2437
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %2438 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2439 = icmp ugt i32 %2438, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2439, label %2440, label %2446
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2446
	jmp	tinfl_decompress2440
	.text
tinfl_decompress2440:
	# %2441 = load i8*, i8** %62
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2442 = getelementptr i8, i8* %2441, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2443 = load i8, i8* %2442
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %2444 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2445 = getelementptr i8, i8* %2444, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %2443, i8* %2445
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %2446
	jmp	tinfl_decompress2446
	.text
tinfl_decompress2446:
	# %2447 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2448 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2449 = zext i32 %2447 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2450 = getelementptr i8, i8* %2448, i64 %2449
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2450, i8** %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %2451
	jmp	tinfl_decompress2451
	.text
tinfl_decompress2451:
	# br label %1635
	jmp	tinfl_decompress1635
	.text
tinfl_decompress2452:
	# br label %2453
	jmp	tinfl_decompress2453
	.text
tinfl_decompress2453:
	# br label %2454
	jmp	tinfl_decompress2454
	.text
tinfl_decompress2454:
	# br label %2455
	jmp	tinfl_decompress2455
	.text
tinfl_decompress2455:
	# %2456 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2457 = getelementptr %struct.tinfl_decompressor_tag, i8* %2456, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2458 = load i32, i32* %2457
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2459 = and i32 %2458, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2460 = icmp ne i32 %2459, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %2461 = xor i1 %2460, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# br i1 %2461, label %301, label %2462
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2462
	jmp	tinfl_decompress301
	.text
tinfl_decompress2462:
	# br label %2463
	jmp	tinfl_decompress2463
	.text
tinfl_decompress2463:
	# %2464 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2465 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2466 = and i32 %2465, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2467 = icmp ult i32 %2464, %2466
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2467, label %2468, label %2507
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2507
	jmp	tinfl_decompress2468
	.text
tinfl_decompress2468:
	# br label %2469
	jmp	tinfl_decompress2469
	.text
tinfl_decompress2469:
	# br label %2470
	jmp	tinfl_decompress2470
	.text
tinfl_decompress2470:
	# br label %2471
	jmp	tinfl_decompress2471
	.text
tinfl_decompress2471:
	# %2472 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2473 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2474 = icmp uge i8* %2472, %2473
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2474, label %2475, label %2486
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2486
	jmp	tinfl_decompress2475
	.text
tinfl_decompress2475:
	# br label %2476
	jmp	tinfl_decompress2476
	.text
tinfl_decompress2476:
	# %2477 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2478 = and i32 %2477, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2479 = icmp ne i32 %2478, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %2480 = zext i1 %2479 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %2481 = select i1 %2479, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %2481, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2482 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2483 = getelementptr %struct.tinfl_decompressor_tag, i8* %2482, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 32, i32* %2483
	movq	$32, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2484:
	# br label %2485
	jmp	tinfl_decompress2485
	.text
tinfl_decompress2485:
	# br label %2471
	jmp	tinfl_decompress2471
	.text
tinfl_decompress2486:
	# %2487 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2488 = getelementptr i8, i8* %2487, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2488, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2489 = load i8, i8* %2487
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2490 = zext i8 %2489 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %2490, i32* %75
	movq	%rdx, %rax
	movq	-544(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2491
	jmp	tinfl_decompress2491
	.text
tinfl_decompress2491:
	# %2492 = load i32, i32* %75
	movq	-544(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2493 = zext i32 %2492 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2494 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2495 = zext i32 %2494 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2496 = shl i64 %2493, %2495
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %2497 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2498 = or i64 %2497, %2496
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2498, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2499 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2500 = add i32 %2499, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2500, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2501
	jmp	tinfl_decompress2501
	.text
tinfl_decompress2501:
	# %2502 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2503 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2504 = and i32 %2503, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2505 = icmp ult i32 %2502, %2504
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2505, label %2469, label %2506
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2506
	jmp	tinfl_decompress2469
	.text
tinfl_decompress2506:
	# br label %2507
	jmp	tinfl_decompress2507
	.text
tinfl_decompress2507:
	# %2508 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2509 = and i32 %2508, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2510 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2511 = zext i32 %2509 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2512 = lshr i64 %2510, %2511
	movq	%rdi, %rax
	movq	%rdx, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %2512, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2513 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2514 = and i32 %2513, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %2515 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2516 = sub i32 %2515, %2514
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2516, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2517
	jmp	tinfl_decompress2517
	.text
tinfl_decompress2517:
	# br label %2518
	jmp	tinfl_decompress2518
	.text
tinfl_decompress2518:
	# %2519 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2520 = load i8*, i8** %10
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2521 = icmp ugt i8* %2519, %2520
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2521, label %2522, label %2525
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tinfl_decompress2525
	jmp	tinfl_decompress2522
	.text
tinfl_decompress2522:
	# %2523 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2524 = icmp uge i32 %2523, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br label %2525
	movq	%rsi, %rdx
	jmp	tinfl_decompress2525
	.text
tinfl_decompress2525:
	# %2526 = phi i1 [0, %2518], [%2524, %2522]
	# br i1 %2526, label %2527, label %2532
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2532
	jmp	tinfl_decompress2527
	.text
tinfl_decompress2527:
	# %2528 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2529 = getelementptr i8, i8* %2528, i32 -1
	movq	%rdx, %rcx
	movq	$-1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2529, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2530 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2531 = sub i32 %2530, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2531, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2518
	jmp	tinfl_decompress2518
	.text
tinfl_decompress2532:
	# %2533 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2534 = zext i32 %2533 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2535 = shl i64 -1, %2534
	movq	$-1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %2536 = xor i64 %2535, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %2537 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2538 = and i64 %2537, %2536
	movq	%rdx, %rax
	movq	%rsi, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2538, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2539 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2540 = icmp ne i32 %2539, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %2541 = xor i1 %2540, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %2542 = xor i1 %2541, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %2543 = zext i1 %2542 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %2544 = sext i32 %2543 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2545 = icmp ne i64 %2544, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2545, label %2546, label %2548
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2548
	jmp	tinfl_decompress2546
	.text
tinfl_decompress2546:
	# call void @__assert_rtn (i8* @__func__.tinfl_decompress, i8* @.str.11, i32 4278, i8* @.str.17)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tinfl_decompress(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$4278, %rax
	pushq	%rax
	leaq	_.str.17(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tinfl_decompress2547:
	# br label %2549
	jmp	tinfl_decompress2549
	.text
tinfl_decompress2548:
	# br label %2549
	jmp	tinfl_decompress2549
	.text
tinfl_decompress2549:
	# %2550 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2551 = and i32 %2550, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2552 = icmp ne i32 %2551, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2552, label %2553, label %2646
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2646
	jmp	tinfl_decompress2553
	.text
tinfl_decompress2553:
	# store i32 0, i32* %21
	movq	$0, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2554
	jmp	tinfl_decompress2554
	.text
tinfl_decompress2554:
	# %2555 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2556 = icmp ult i32 %2555, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2556, label %2557, label %2645
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2645
	jmp	tinfl_decompress2557
	.text
tinfl_decompress2557:
	# %2558 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2559 = icmp ne i32 %2558, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2559, label %2560, label %2610
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2610
	jmp	tinfl_decompress2560
	.text
tinfl_decompress2560:
	# br label %2561
	jmp	tinfl_decompress2561
	.text
tinfl_decompress2561:
	# %2562 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2563 = icmp ult i32 %2562, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2563, label %2564, label %2601
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2601
	jmp	tinfl_decompress2564
	.text
tinfl_decompress2564:
	# br label %2565
	jmp	tinfl_decompress2565
	.text
tinfl_decompress2565:
	# br label %2566
	jmp	tinfl_decompress2566
	.text
tinfl_decompress2566:
	# br label %2567
	jmp	tinfl_decompress2567
	.text
tinfl_decompress2567:
	# %2568 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2569 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2570 = icmp uge i8* %2568, %2569
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2570, label %2571, label %2582
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2582
	jmp	tinfl_decompress2571
	.text
tinfl_decompress2571:
	# br label %2572
	jmp	tinfl_decompress2572
	.text
tinfl_decompress2572:
	# %2573 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2574 = and i32 %2573, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2575 = icmp ne i32 %2574, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %2576 = zext i1 %2575 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %2577 = select i1 %2575, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %2577, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2578 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2579 = getelementptr %struct.tinfl_decompressor_tag, i8* %2578, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 41, i32* %2579
	movq	$41, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2580:
	# br label %2581
	jmp	tinfl_decompress2581
	.text
tinfl_decompress2581:
	# br label %2567
	jmp	tinfl_decompress2567
	.text
tinfl_decompress2582:
	# %2583 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2584 = getelementptr i8, i8* %2583, i32 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2584, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2585 = load i8, i8* %2583
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2586 = zext i8 %2585 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %2586, i32* %77
	movq	%rdx, %rax
	movq	-560(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2587
	jmp	tinfl_decompress2587
	.text
tinfl_decompress2587:
	# %2588 = load i32, i32* %77
	movq	-560(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2589 = zext i32 %2588 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %2590 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2591 = zext i32 %2590 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2592 = shl i64 %2589, %2591
	movq	%rsi, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %2593 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2594 = or i64 %2593, %2592
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2594, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2595 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2596 = add i32 %2595, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2596, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2597
	jmp	tinfl_decompress2597
	.text
tinfl_decompress2597:
	# %2598 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2599 = icmp ult i32 %2598, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2599, label %2565, label %2600
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2600
	jmp	tinfl_decompress2565
	.text
tinfl_decompress2600:
	# br label %2601
	jmp	tinfl_decompress2601
	.text
tinfl_decompress2601:
	# %2602 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2603 = and i64 %2602, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2604 = trunc i64 %2603 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %2604, i32* %76
	movq	%rdx, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2605 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2606 = lshr i64 %2605, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# store i64 %2606, i64* %23
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2607 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2608 = sub i32 %2607, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2608, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2609
	jmp	tinfl_decompress2609
	.text
tinfl_decompress2609:
	# br label %2633
	jmp	tinfl_decompress2633
	.text
tinfl_decompress2610:
	# br label %2611
	jmp	tinfl_decompress2611
	.text
tinfl_decompress2611:
	# br label %2612
	jmp	tinfl_decompress2612
	.text
tinfl_decompress2612:
	# %2613 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2614 = load i8*, i8** %25
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2615 = icmp uge i8* %2613, %2614
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2615, label %2616, label %2627
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2627
	jmp	tinfl_decompress2616
	.text
tinfl_decompress2616:
	# br label %2617
	jmp	tinfl_decompress2617
	.text
tinfl_decompress2617:
	# %2618 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2619 = and i32 %2618, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2620 = icmp ne i32 %2619, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %2621 = zext i1 %2620 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %2622 = select i1 %2620, i32 1, i32 -4
	movq	%rsi, %rcx
	movq	$1, %rax
	movq	$-4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %2622, i32* %18
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2623 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2624 = getelementptr %struct.tinfl_decompressor_tag, i8* %2623, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 42, i32* %2624
	movq	$42, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2625:
	# br label %2626
	jmp	tinfl_decompress2626
	.text
tinfl_decompress2626:
	# br label %2612
	jmp	tinfl_decompress2612
	.text
tinfl_decompress2627:
	# %2628 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2629 = getelementptr i8, i8* %2628, i32 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2629, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2630 = load i8, i8* %2628
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2631 = zext i8 %2630 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %2631, i32* %76
	movq	%rdx, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2632
	jmp	tinfl_decompress2632
	.text
tinfl_decompress2632:
	# br label %2633
	jmp	tinfl_decompress2633
	.text
tinfl_decompress2633:
	# %2634 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2635 = getelementptr %struct.tinfl_decompressor_tag, i8* %2634, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2636 = load i32, i32* %2635
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2637 = shl i32 %2636, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %2638 = load i32, i32* %76
	movq	-552(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2639 = or i32 %2637, %2638
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %2640 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2641 = getelementptr %struct.tinfl_decompressor_tag, i8* %2640, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2639, i32* %2641
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2642
	jmp	tinfl_decompress2642
	.text
tinfl_decompress2642:
	# %2643 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2644 = add i32 %2643, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2644, i32* %21
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2554
	jmp	tinfl_decompress2554
	.text
tinfl_decompress2645:
	# br label %2646
	jmp	tinfl_decompress2646
	.text
tinfl_decompress2646:
	# br label %2647
	jmp	tinfl_decompress2647
	.text
tinfl_decompress2647:
	# br label %2648
	jmp	tinfl_decompress2648
	.text
tinfl_decompress2648:
	# br label %2649
	jmp	tinfl_decompress2649
	.text
tinfl_decompress2649:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2650 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2651 = getelementptr %struct.tinfl_decompressor_tag, i8* %2650, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 34, i32* %2651
	movq	$34, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2652:
	# br label %2653
	jmp	tinfl_decompress2653
	.text
tinfl_decompress2653:
	# br label %2648
	jmp	tinfl_decompress2648
	.text
tinfl_decompress2654:
	# br label %2655
	jmp	tinfl_decompress2655
	.text
tinfl_decompress2655:
	# br label %2656
	jmp	tinfl_decompress2656
	.text
tinfl_decompress2656:
	# %2657 = load i32, i32* %18
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2658 = icmp ne i32 %2657, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2658, label %2659, label %2678
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2678
	jmp	tinfl_decompress2659
	.text
tinfl_decompress2659:
	# %2660 = load i32, i32* %18
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2661 = icmp ne i32 %2660, -4
	movq	%rdx, %rax
	movq	$-4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2661, label %2662, label %2678
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2678
	jmp	tinfl_decompress2662
	.text
tinfl_decompress2662:
	# br label %2663
	jmp	tinfl_decompress2663
	.text
tinfl_decompress2663:
	# %2664 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2665 = load i8*, i8** %10
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2666 = icmp ugt i8* %2664, %2665
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2666, label %2667, label %2670
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tinfl_decompress2670
	jmp	tinfl_decompress2667
	.text
tinfl_decompress2667:
	# %2668 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2669 = icmp uge i32 %2668, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setnb	%bl
	# br label %2670
	movq	%rbx, %rdx
	jmp	tinfl_decompress2670
	.text
tinfl_decompress2670:
	# %2671 = phi i1 [0, %2663], [%2669, %2667]
	# br i1 %2671, label %2672, label %2677
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2677
	jmp	tinfl_decompress2672
	.text
tinfl_decompress2672:
	# %2673 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2674 = getelementptr i8, i8* %2673, i32 -1
	movq	%rdx, %rcx
	movq	$-1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2674, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2675 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2676 = sub i32 %2675, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2676, i32* %19
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2663
	jmp	tinfl_decompress2663
	.text
tinfl_decompress2677:
	# br label %2678
	jmp	tinfl_decompress2678
	.text
tinfl_decompress2678:
	# %2679 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2680 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2681 = getelementptr %struct.tinfl_decompressor_tag, i8* %2680, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2679, i32* %2681
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %2682 = load i64, i64* %23
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2683 = load i32, i32* %19
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2684 = zext i32 %2683 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2685 = shl i64 -1, %2684
	movq	$-1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %2686 = xor i64 %2685, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %2687 = and i64 %2682, %2686
	movq	%rbx, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %2688 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2689 = getelementptr %struct.tinfl_decompressor_tag, i8* %2688, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2687, i64* %2689
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %2690 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2691 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2692 = getelementptr %struct.tinfl_decompressor_tag, i8* %2691, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2690, i32* %2692
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %2693 = load i32, i32* %21
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2694 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2695 = getelementptr %struct.tinfl_decompressor_tag, i8* %2694, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2693, i32* %2695
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %2696 = load i32, i32* %22
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2697 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2698 = getelementptr %struct.tinfl_decompressor_tag, i8* %2697, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2696, i32* %2698
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %2699 = load i64, i64* %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2700 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2701 = getelementptr %struct.tinfl_decompressor_tag, i8* %2700, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2699, i64* %2701
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %2702 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2703 = load i8*, i8** %10
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2704 = ptrtoint i8** %2702 to i64
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %2705 = ptrtoint i8** %2703 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %2706 = sub i64 %2704, %2705
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %2707 = load i8*, i8** %11
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %2706, i64* %2707
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %2708 = load i8*, i8** %26
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2709 = load i8*, i8** %13
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2710 = ptrtoint i8** %2708 to i64
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %2711 = ptrtoint i8** %2709 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %2712 = sub i64 %2710, %2711
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %2713 = load i8*, i8** %14
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %2712, i64* %2713
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %2714 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2715 = and i32 %2714, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2716 = icmp ne i32 %2715, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2716, label %2717, label %2872
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2872
	jmp	tinfl_decompress2717
	.text
tinfl_decompress2717:
	# %2718 = load i32, i32* %18
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2719 = icmp sge i32 %2718, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %2719, label %2720, label %2872
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2872
	jmp	tinfl_decompress2720
	.text
tinfl_decompress2720:
	# %2721 = load i8*, i8** %13
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2721, i8** %78
	movq	%rdx, %rax
	movq	-568(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2722 = load i8*, i8** %14
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2723 = load i64, i64* %2722
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %2723, i64* %79
	movq	%rdx, %rax
	movq	-576(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2724 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2725 = getelementptr %struct.tinfl_decompressor_tag, i8* %2724, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2726 = load i32, i32* %2725
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2727 = and i32 %2726, 65535
	movq	%rdx, %rax
	movq	$65535, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2727, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2728 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2729 = getelementptr %struct.tinfl_decompressor_tag, i8* %2728, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2730 = load i32, i32* %2729
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2731 = lshr i32 %2730, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %2731, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2732 = load i64, i64* %79
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2733 = urem i64 %2732, 5552
	movq	%rdx, %rax
	movq	$5552, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %rdx
	# store i64 %2733, i64* %83
	movq	%rdx, %rax
	movq	-608(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %2734
	jmp	tinfl_decompress2734
	.text
tinfl_decompress2734:
	# %2735 = load i64, i64* %79
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2736 = icmp ne i64 %2735, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2736, label %2737, label %2849
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2849
	jmp	tinfl_decompress2737
	.text
tinfl_decompress2737:
	# store i32 0, i32* %80
	movq	$0, %rax
	movq	-584(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2738
	jmp	tinfl_decompress2738
	.text
tinfl_decompress2738:
	# %2739 = load i32, i32* %80
	movq	-584(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2740 = add i32 %2739, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %2741 = zext i32 %2740 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2742 = load i64, i64* %83
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2743 = icmp ult i64 %2741, %2742
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2743, label %2744, label %2822
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2822
	jmp	tinfl_decompress2744
	.text
tinfl_decompress2744:
	# %2745 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2746 = getelementptr i8, i8* %2745, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2747 = load i8, i8* %2746
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2748 = zext i8 %2747 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2749 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2750 = add i32 %2749, %2748
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2750, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2751 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2752 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2753 = add i32 %2752, %2751
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2753, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2754 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2755 = getelementptr i8, i8* %2754, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2756 = load i8, i8* %2755
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2757 = zext i8 %2756 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2758 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2759 = add i32 %2758, %2757
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2759, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2760 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2761 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2762 = add i32 %2761, %2760
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2762, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2763 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2764 = getelementptr i8, i8* %2763, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2765 = load i8, i8* %2764
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2766 = zext i8 %2765 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2767 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2768 = add i32 %2767, %2766
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2768, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2769 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2770 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2771 = add i32 %2770, %2769
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2771, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2772 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2773 = getelementptr i8, i8* %2772, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2774 = load i8, i8* %2773
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2775 = zext i8 %2774 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2776 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2777 = add i32 %2776, %2775
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2777, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2778 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2779 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2780 = add i32 %2779, %2778
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2780, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2781 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2782 = getelementptr i8, i8* %2781, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2783 = load i8, i8* %2782
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2784 = zext i8 %2783 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2785 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2786 = add i32 %2785, %2784
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2786, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2787 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2788 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2789 = add i32 %2788, %2787
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2789, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2790 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2791 = getelementptr i8, i8* %2790, i64 5
	movq	%rdx, %rcx
	movq	$5, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2792 = load i8, i8* %2791
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2793 = zext i8 %2792 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2794 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2795 = add i32 %2794, %2793
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2795, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2796 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2797 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2798 = add i32 %2797, %2796
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2798, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2799 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2800 = getelementptr i8, i8* %2799, i64 6
	movq	%rdx, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2801 = load i8, i8* %2800
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2802 = zext i8 %2801 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2803 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2804 = add i32 %2803, %2802
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2804, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2805 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2806 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2807 = add i32 %2806, %2805
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2807, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2808 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2809 = getelementptr i8, i8* %2808, i64 7
	movq	%rdx, %rcx
	movq	$7, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2810 = load i8, i8* %2809
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2811 = zext i8 %2810 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2812 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2813 = add i32 %2812, %2811
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2813, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2814 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2815 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2816 = add i32 %2815, %2814
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2816, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2817
	jmp	tinfl_decompress2817
	.text
tinfl_decompress2817:
	# %2818 = load i32, i32* %80
	movq	-584(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2819 = add i32 %2818, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2819, i32* %80
	movq	%rdx, %rax
	movq	-584(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2820 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2821 = getelementptr i8, i8* %2820, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2821, i8** %78
	movq	%rdx, %rax
	movq	-568(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %2738
	jmp	tinfl_decompress2738
	.text
tinfl_decompress2822:
	# br label %2823
	jmp	tinfl_decompress2823
	.text
tinfl_decompress2823:
	# %2824 = load i32, i32* %80
	movq	-584(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2825 = zext i32 %2824 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2826 = load i64, i64* %83
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2827 = icmp ult i64 %2825, %2826
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %2827, label %2828, label %2841
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2841
	jmp	tinfl_decompress2828
	.text
tinfl_decompress2828:
	# %2829 = load i8*, i8** %78
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2830 = getelementptr i8, i8* %2829, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2830, i8** %78
	movq	%rdx, %rax
	movq	-568(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2831 = load i8, i8* %2829
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %2832 = zext i8 %2831 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2833 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2834 = add i32 %2833, %2832
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2834, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2835 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2836 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2837 = add i32 %2836, %2835
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2837, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2838
	jmp	tinfl_decompress2838
	.text
tinfl_decompress2838:
	# %2839 = load i32, i32* %80
	movq	-584(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2840 = add i32 %2839, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2840, i32* %80
	movq	%rdx, %rax
	movq	-584(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2823
	jmp	tinfl_decompress2823
	.text
tinfl_decompress2841:
	# %2842 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2843 = urem i32 %2842, 65521
	movq	%rdx, %rax
	movq	$65521, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %rdx
	# store i32 %2843, i32* %81
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2844 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2845 = urem i32 %2844, 65521
	movq	%rdx, %rax
	movq	$65521, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %rdx
	# store i32 %2845, i32* %82
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2846 = load i64, i64* %83
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2847 = load i64, i64* %79
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2848 = sub i64 %2847, %2846
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %2848, i64* %79
	movq	%rdx, %rax
	movq	-576(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 5552, i64* %83
	movq	$5552, %rax
	movq	-608(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %2734
	jmp	tinfl_decompress2734
	.text
tinfl_decompress2849:
	# %2850 = load i32, i32* %82
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2851 = shl i32 %2850, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %2852 = load i32, i32* %81
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2853 = add i32 %2851, %2852
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %2854 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2855 = getelementptr %struct.tinfl_decompressor_tag, i8* %2854, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2853, i32* %2855
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %2856 = load i32, i32* %18
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2857 = icmp eq i32 %2856, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %2857, label %2858, label %2871
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2871
	jmp	tinfl_decompress2858
	.text
tinfl_decompress2858:
	# %2859 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2860 = and i32 %2859, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %2861 = icmp ne i32 %2860, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2861, label %2862, label %2871
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2871
	jmp	tinfl_decompress2862
	.text
tinfl_decompress2862:
	# %2863 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2864 = getelementptr %struct.tinfl_decompressor_tag, i8* %2863, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2865 = load i32, i32* %2864
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2866 = load i8*, i8** %9
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2867 = getelementptr %struct.tinfl_decompressor_tag, i8* %2866, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2868 = load i32, i32* %2867
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2869 = icmp ne i32 %2865, %2868
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2869, label %2870, label %2871
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress2871
	jmp	tinfl_decompress2870
	.text
tinfl_decompress2870:
	# store i32 -2, i32* %18
	movq	$-2, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2871
	jmp	tinfl_decompress2871
	.text
tinfl_decompress2871:
	# br label %2872
	jmp	tinfl_decompress2872
	.text
tinfl_decompress2872:
	# %2873 = load i32, i32* %18
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %2873, i32* %8
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2874
	jmp	tinfl_decompress2874
	.text
tinfl_decompress2874:
	# %2875 = load i32, i32* %8
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %2875
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_inflateEnd
_mz_inflateEnd:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %7, label %6
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateEnd6
	jmp	mz_inflateEnd7
	.text
mz_inflateEnd6:
	# store i32 -2, i32* %2
	movq	$-2, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %25
	jmp	mz_inflateEnd25
	.text
mz_inflateEnd7:
	# %8 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %9 = getelementptr %struct.mz_stream_s, i8* %8, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %10 = load i8*, i8** %9
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %11 = icmp ne i8* %10, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %11, label %12, label %24
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_inflateEnd24
	jmp	mz_inflateEnd12
	.text
mz_inflateEnd12:
	# %13 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %14 = getelementptr %struct.mz_stream_s, i8* %13, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %15 = load i8*, i8** %14
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %16 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %17 = getelementptr %struct.mz_stream_s, i8* %16, i32 0, i32 10
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %18 = load i8*, i8** %17
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %19 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = getelementptr %struct.mz_stream_s, i8* %19, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %21 = load i8*, i8** %20
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void %15 (i8* %18, i8* %21)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %22 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = getelementptr %struct.mz_stream_s, i8* %22, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %23
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %24
	jmp	mz_inflateEnd24
	.text
mz_inflateEnd24:
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %25
	jmp	mz_inflateEnd25
	.text
mz_inflateEnd25:
	# %26 = load i32, i32* %2
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %26
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_uncompress2
_mz_uncompress2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	%r13
	popq	%r14
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %10 = alloca %struct.mz_stream_s
	subq	$100, %rsp
	movq	%rsp, %r8
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %6
	movq	%r14, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %7
	movq	%r13, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%rbx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %9
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# call void @memset (i8* %10, i8 0, i64 112, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$112, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %12 = load i8*, i8** %9
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %13 = load i64, i64* %12
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %14 = load i8*, i8** %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = load i64, i64* %14
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %16 = or i64 %13, %15
	movq	%r13, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %17 = icmp ugt i64 %16, 4294967295
	movq	%rbx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	seta	%bl
	# br i1 %17, label %18, label %19
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_uncompress219
	jmp	mz_uncompress218
	.text
mz_uncompress218:
	# store i32 -10000, i32* %5
	movq	$-10000, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %66
	jmp	mz_uncompress266
	.text
mz_uncompress219:
	# %20 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %21 = getelementptr %struct.mz_stream_s, i8* %10, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %20, i8** %21
	movq	%r9, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %22 = load i8*, i8** %9
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %23 = load i64, i64* %22
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %24 = trunc i64 %23 to i32
	movq	%rbx, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %25 = getelementptr %struct.mz_stream_s, i8* %10, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %24, i32* %25
	movq	%r9, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %26 = load i8*, i8** %6
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %27 = getelementptr %struct.mz_stream_s, i8* %10, i32 0, i32 3
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %26, i8** %27
	movq	%r9, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %28 = load i8*, i8** %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %29 = load i64, i64* %28
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %30 = trunc i64 %29 to i32
	movq	%rbx, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %31 = getelementptr %struct.mz_stream_s, i8* %10, i32 0, i32 4
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %30, i32* %31
	movq	%r9, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %32 = call i32 @mz_inflateInit (i8* %10)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_inflateInit
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 %32, i32* %11
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %33 = load i32, i32* %11
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %34 = icmp ne i32 %33, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %34, label %35, label %37
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_uncompress237
	jmp	mz_uncompress235
	.text
mz_uncompress235:
	# %36 = load i32, i32* %11
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %36, i32* %5
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %66
	jmp	mz_uncompress266
	.text
mz_uncompress237:
	# %38 = call i32 @mz_inflate (i8* %10, i32 4)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$4, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_inflate
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 %38, i32* %11
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %39 = load i8*, i8** %9
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = load i64, i64* %39
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %41 = getelementptr %struct.mz_stream_s, i8* %10, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %42 = load i32, i32* %41
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %43 = zext i32 %42 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %44 = sub i64 %40, %43
	movq	%r9, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %r9
	# %45 = load i8*, i8** %9
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i64 %44, i64* %45
	movq	%r9, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %46 = load i32, i32* %11
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %47 = icmp ne i32 %46, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %47, label %48, label %61
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_uncompress261
	jmp	mz_uncompress248
	.text
mz_uncompress248:
	# %49 = call i32 @mz_inflateEnd (i8* %10)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_inflateEnd
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %50 = load i32, i32* %11
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %51 = icmp eq i32 %50, -5
	movq	%rbx, %rax
	movq	$-5, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %51, label %52, label %57
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_uncompress257
	jmp	mz_uncompress252
	.text
mz_uncompress252:
	# %53 = getelementptr %struct.mz_stream_s, i8* %10, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %54 = load i32, i32* %53
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %55 = icmp ne i32 %54, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %55, label %57, label %56
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_uncompress256
	jmp	mz_uncompress257
	.text
mz_uncompress256:
	# br label %59
	movq	$-3, %rdx
	jmp	mz_uncompress259
	.text
mz_uncompress257:
	# %58 = load i32, i32* %11
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# br label %59
	jmp	mz_uncompress259
	.text
mz_uncompress259:
	# %60 = phi i32 [-3, %56], [%58, %57]
	# store i32 %60, i32* %5
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %66
	jmp	mz_uncompress266
	.text
mz_uncompress261:
	# %62 = getelementptr %struct.mz_stream_s, i8* %10, i32 0, i32 5
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$100, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %63 = load i64, i64* %62
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %64 = load i8*, i8** %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %63, i64* %64
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %65 = call i32 @mz_inflateEnd (i8* %10)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_inflateEnd
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %65, i32* %5
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %66
	jmp	mz_uncompress266
	.text
mz_uncompress266:
	# %67 = load i32, i32* %5
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %67
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_uncompress
_mz_uncompress:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r9
	popq	%r10
	popq	%r11
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%r10, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %7
	movq	%r9, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %8
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %9 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %10 = load i8*, i8** %6
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %11 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %12 = call i32 @mz_uncompress2 (i8* %9, i8* %10, i8* %11, i8* %8)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_uncompress2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %12
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_error
_mz_error:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# store i32 %0, i32* %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %4
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %5
	jmp	mz_error5
	.text
mz_error5:
	# %6 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %7 = zext i32 %6 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %8 = icmp ult i64 %7, 10
	movq	%rbx, %rax
	movq	$10, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %8, label %9, label %27
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_error27
	jmp	mz_error9
	.text
mz_error9:
	# %10 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %11 = zext i32 %10 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %12 = getelementptr [10 x %struct.anon], i8* @mz_error.s_error_descs, i64 0, i64 %11
	leaq	_mz_error.s_error_descs(%rip), %rcx
	movq	$0, %rax
	imulq	$120, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %13 = getelementptr %struct.anon, i8* %12, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %14 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %15 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %16 = icmp eq i32 %14, %15
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %16, label %17, label %23
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_error23
	jmp	mz_error17
	.text
mz_error17:
	# %18 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %19 = zext i32 %18 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %20 = getelementptr [10 x %struct.anon], i8* @mz_error.s_error_descs, i64 0, i64 %19
	leaq	_mz_error.s_error_descs(%rip), %rcx
	movq	$0, %rax
	imulq	$120, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %21 = getelementptr %struct.anon, i8* %20, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$12, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %22 = load i8*, i8** %21
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %22, i8** %2
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %28
	jmp	mz_error28
	.text
mz_error23:
	# br label %24
	jmp	mz_error24
	.text
mz_error24:
	# %25 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %26 = add i32 %25, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %26, i32* %4
	movq	%rbx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %5
	jmp	mz_error5
	.text
mz_error27:
	# store i8* null, i8** %2
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %28
	jmp	mz_error28
	.text
mz_error28:
	# %29 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %29
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_flush_output_buffer
_tdefl_flush_output_buffer:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %3 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %5 = getelementptr %struct.tdefl_compressor, i8* %4, i32 0, i32 29
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$29, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %6 = load i8*, i8** %5
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %7 = icmp ne i8* %6, null
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setne	%r9b
	# br i1 %7, label %8, label %21
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_output_buffer21
	jmp	tdefl_flush_output_buffer8
	.text
tdefl_flush_output_buffer8:
	# %9 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %10 = getelementptr %struct.tdefl_compressor, i8* %9, i32 0, i32 32
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$32, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %11 = load i8*, i8** %10
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %12 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %13 = getelementptr %struct.tdefl_compressor, i8* %12, i32 0, i32 27
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$27, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %14 = load i8*, i8** %13
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %15 = ptrtoint i8** %11 to i64
	movq	%r10, %rax
	movq	%rax, %r10
	# %16 = ptrtoint i8** %14 to i64
	movq	%r9, %rax
	movq	%rax, %r9
	# %17 = sub i64 %15, %16
	movq	%r10, %rax
	movq	%r9, %rcx
	subq	%rcx, %rax
	movq	%rax, %r10
	# %18 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %19 = getelementptr %struct.tdefl_compressor, i8* %18, i32 0, i32 29
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$29, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %20 = load i8*, i8** %19
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# store i64 %17, i64* %20
	movq	%r10, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %21
	jmp	tdefl_flush_output_buffer21
	.text
tdefl_flush_output_buffer21:
	# %22 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %23 = getelementptr %struct.tdefl_compressor, i8* %22, i32 0, i32 30
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %24 = load i8*, i8** %23
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %25 = icmp ne i8* %24, null
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setne	%r9b
	# br i1 %25, label %26, label %104
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_output_buffer104
	jmp	tdefl_flush_output_buffer26
	.text
tdefl_flush_output_buffer26:
	# %27 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %28 = getelementptr %struct.tdefl_compressor, i8* %27, i32 0, i32 30
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %29 = load i8*, i8** %28
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %30 = load i64, i64* %29
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %31 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %32 = getelementptr %struct.tdefl_compressor, i8* %31, i32 0, i32 34
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %33 = load i64, i64* %32
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %34 = sub i64 %30, %33
	movq	%r10, %rax
	movq	%r9, %rcx
	subq	%rcx, %rax
	movq	%rax, %r10
	# %35 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %36 = getelementptr %struct.tdefl_compressor, i8* %35, i32 0, i32 22
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %37 = load i32, i32* %36
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %38 = zext i32 %37 to i64
	movq	%r9, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %39 = icmp ult i64 %34, %38
	movq	%r10, %rax
	movq	%r9, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setb	%r9b
	# br i1 %39, label %40, label %49
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_output_buffer49
	jmp	tdefl_flush_output_buffer40
	.text
tdefl_flush_output_buffer40:
	# %41 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %42 = getelementptr %struct.tdefl_compressor, i8* %41, i32 0, i32 30
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %43 = load i8*, i8** %42
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %44 = load i64, i64* %43
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %45 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %46 = getelementptr %struct.tdefl_compressor, i8* %45, i32 0, i32 34
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %47 = load i64, i64* %46
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %48 = sub i64 %44, %47
	movq	%r9, %rax
	movq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, %r8
	# br label %54
	movq	%r8, %rsi
	jmp	tdefl_flush_output_buffer54
	.text
tdefl_flush_output_buffer49:
	# %50 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %51 = getelementptr %struct.tdefl_compressor, i8* %50, i32 0, i32 22
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %52 = load i32, i32* %51
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %53 = zext i32 %52 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# br label %54
	jmp	tdefl_flush_output_buffer54
	.text
tdefl_flush_output_buffer54:
	# %55 = phi i64 [%48, %40], [%53, %49]
	# store i64 %55, i64* %3
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %56 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %57 = getelementptr %struct.tdefl_compressor, i8* %56, i32 0, i32 28
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$28, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %58 = load i8*, i8** %57
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %59 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %60 = getelementptr %struct.tdefl_compressor, i8* %59, i32 0, i32 34
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %61 = load i64, i64* %60
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %62 = getelementptr i8, i8* %58, i64 %61
	movq	%r8, %rcx
	movq	%rsi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %63 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %64 = getelementptr %struct.tdefl_compressor, i8* %63, i32 0, i32 42
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$42, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %65 = getelementptr [85196 x i8], i8* %64, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$85196, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %66 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %67 = getelementptr %struct.tdefl_compressor, i8* %66, i32 0, i32 21
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %68 = load i32, i32* %67
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %69 = zext i32 %68 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %70 = getelementptr i8, i8* %65, i64 %69
	movq	%r8, %rcx
	movq	%rsi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %71 = load i64, i64* %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %72 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %73 = getelementptr %struct.tdefl_compressor, i8* %72, i32 0, i32 28
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$28, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %74 = load i8*, i8** %73
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %75 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %76 = getelementptr %struct.tdefl_compressor, i8* %75, i32 0, i32 34
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %77 = load i64, i64* %76
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %78 = getelementptr i8, i8* %74, i64 %77
	movq	%r8, %rcx
	movq	%rsi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %79 = call i64 @llvm.objectsize.i64.p0 (i8* %78, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %80 = call i8* @__memcpy_chk (i8* %62, i8* %70, i64 %71, i64 %79)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %81 = load i64, i64* %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %82 = trunc i64 %81 to i32
	movq	%rsi, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %83 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %84 = getelementptr %struct.tdefl_compressor, i8* %83, i32 0, i32 21
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %85 = load i32, i32* %84
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %86 = add i32 %85, %82
	movq	%rsi, %rax
	movq	%r9, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %86, i32* %84
	movq	%rsi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %87 = load i64, i64* %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %88 = trunc i64 %87 to i32
	movq	%rsi, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %89 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %90 = getelementptr %struct.tdefl_compressor, i8* %89, i32 0, i32 22
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %91 = load i32, i32* %90
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %92 = sub i32 %91, %88
	movq	%rsi, %rax
	movq	%r9, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %92, i32* %90
	movq	%rsi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %93 = load i64, i64* %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %94 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %95 = getelementptr %struct.tdefl_compressor, i8* %94, i32 0, i32 34
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %96 = load i64, i64* %95
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %97 = add i64 %96, %93
	movq	%rdx, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %97, i64* %95
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %98 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = getelementptr %struct.tdefl_compressor, i8* %98, i32 0, i32 34
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %100 = load i64, i64* %99
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %101 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %102 = getelementptr %struct.tdefl_compressor, i8* %101, i32 0, i32 30
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %103 = load i8*, i8** %102
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %100, i64* %103
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %104
	jmp	tdefl_flush_output_buffer104
	.text
tdefl_flush_output_buffer104:
	# %105 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %106 = getelementptr %struct.tdefl_compressor, i8* %105, i32 0, i32 23
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$23, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %107 = load i32, i32* %106
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %108 = icmp ne i32 %107, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %108, label %109, label %115
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rbx
	je	tdefl_flush_output_buffer115
	jmp	tdefl_flush_output_buffer109
	.text
tdefl_flush_output_buffer109:
	# %110 = load i8*, i8** %2
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr %struct.tdefl_compressor, i8* %110, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %112 = load i32, i32* %111
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %113 = icmp ne i32 %112, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %114 = xor i1 %113, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# br label %115
	jmp	tdefl_flush_output_buffer115
	.text
tdefl_flush_output_buffer115:
	# %116 = phi i1 [0, %104], [%114, %109]
	# %117 = zext i1 %116 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %118 = select i1 %116, i32 1, i32 0
	movq	%rbx, %rcx
	movq	$1, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# ret i32 %118
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compress_normal
_tdefl_compress_normal:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$568, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -496(%rbp)
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %18 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -128(%rbp)
	# %19 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %20 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -144(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -160(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -184(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %28 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -208(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -224(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %32 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -240(%rbp)
	# %33 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %34 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %35 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -264(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %37 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -280(%rbp)
	# %38 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -288(%rbp)
	# %39 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -296(%rbp)
	# %40 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %41 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -312(%rbp)
	# %42 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %44 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -336(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -344(%rbp)
	# %46 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -352(%rbp)
	# %47 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -360(%rbp)
	# %48 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -368(%rbp)
	# %49 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -376(%rbp)
	# %50 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -384(%rbp)
	# %51 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -392(%rbp)
	# %52 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -400(%rbp)
	# %53 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -408(%rbp)
	# %54 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -416(%rbp)
	# %55 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -424(%rbp)
	# %56 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -432(%rbp)
	# %57 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -440(%rbp)
	# %58 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -448(%rbp)
	# %59 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -456(%rbp)
	# store i8* %0, i8** %40
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# %60 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %61 = getelementptr %struct.tdefl_compressor, i8* %60, i32 0, i32 32
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$32, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %62 = load i8*, i8** %61
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %62, i8** %41
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %63 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = getelementptr %struct.tdefl_compressor, i8* %63, i32 0, i32 33
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$33, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %65 = load i64, i64* %64
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %65, i64* %42
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# %66 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = getelementptr %struct.tdefl_compressor, i8* %66, i32 0, i32 31
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$31, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %68 = load i32, i32* %67
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %68, i32* %43
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %69
	jmp	tdefl_compress_normal69
	.text
tdefl_compress_normal69:
	# %70 = load i64, i64* %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = icmp ne i64 %70, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %71, label %82, label %72
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rdx
	je	tdefl_compress_normal72
	jmp	tdefl_compress_normal82
	.text
tdefl_compress_normal72:
	# %73 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %74 = icmp ne i32 %73, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %74, label %75, label %80
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, -472(%rbp)
	je	tdefl_compress_normal80
	jmp	tdefl_compress_normal75
	.text
tdefl_compress_normal75:
	# %76 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = getelementptr %struct.tdefl_compressor, i8* %76, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %78 = load i32, i32* %77
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %79 = icmp ne i32 %78, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, -464(%rbp)
	setne	-464(%rbp)
	# br label %80
	movq	-464(%rbp), %rcx
	movq	%rcx, -472(%rbp)
	jmp	tdefl_compress_normal80
	.text
tdefl_compress_normal80:
	# %81 = phi i1 [0, %72], [%79, %75]
	# br label %82
	movq	-472(%rbp), %rdx
	jmp	tdefl_compress_normal82
	.text
tdefl_compress_normal82:
	# %83 = phi i1 [1, %69], [%81, %80]
	# br i1 %83, label %84, label %1350
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1350
	jmp	tdefl_compress_normal84
	.text
tdefl_compress_normal84:
	# %85 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = getelementptr %struct.tdefl_compressor, i8* %85, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %87 = load i32, i32* %86
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %88 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %89 = getelementptr %struct.tdefl_compressor, i8* %88, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %90 = load i32, i32* %89
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %91 = add i32 %87, %90
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %92 = icmp uge i32 %91, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %92, label %93, label %222
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal222
	jmp	tdefl_compress_normal93
	.text
tdefl_compress_normal93:
	# %94 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %95 = getelementptr %struct.tdefl_compressor, i8* %94, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %96 = load i32, i32* %95
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %97 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %98 = getelementptr %struct.tdefl_compressor, i8* %97, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %99 = load i32, i32* %98
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %100 = add i32 %96, %99
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %101 = and i32 %100, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %101, i32* %48
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movl	%eax, (%rcx)
	# %102 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %103 = getelementptr %struct.tdefl_compressor, i8* %102, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %104 = load i32, i32* %103
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %105 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %106 = getelementptr %struct.tdefl_compressor, i8* %105, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %107 = load i32, i32* %106
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %108 = add i32 %104, %107
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %109 = sub i32 %108, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %109, i32* %49
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# %110 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr %struct.tdefl_compressor, i8* %110, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %112 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %113 = and i32 %112, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %114 = zext i32 %113 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %115 = getelementptr [33025 x i8], i8* %111, i64 0, i64 %114
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %116 = load i8, i8* %115
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %117 = zext i8 %116 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %118 = shl i32 %117, 5
	movq	%rdx, %rax
	movq	$5, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %119 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %120 = getelementptr %struct.tdefl_compressor, i8* %119, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %121 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %122 = add i32 %121, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %123 = and i32 %122, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %124 = zext i32 %123 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %125 = getelementptr [33025 x i8], i8* %120, i64 0, i64 %124
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %126 = load i8, i8* %125
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %127 = zext i8 %126 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %128 = xor i32 %118, %127
	movq	%rdi, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %128, i32* %50
	movq	%rdx, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# %129 = load i64, i64* %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %130 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %131 = getelementptr %struct.tdefl_compressor, i8* %130, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %132 = load i32, i32* %131
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %133 = sub i32 258, %132
	movq	$258, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %134 = zext i32 %133 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %135 = icmp ult i64 %129, %134
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %135, label %136, label %138
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal138
	jmp	tdefl_compress_normal136
	.text
tdefl_compress_normal136:
	# %137 = load i64, i64* %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -480(%rbp)
	# br label %144
	movq	-480(%rbp), %rdx
	jmp	tdefl_compress_normal144
	.text
tdefl_compress_normal138:
	# %139 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %140 = getelementptr %struct.tdefl_compressor, i8* %139, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %141 = load i32, i32* %140
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %142 = sub i32 258, %141
	movq	$258, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %143 = zext i32 %142 to i64
	movq	%rdx, %rax
	movq	$0, -488(%rbp)
	movl	%eax, -488(%rbp)
	# br label %144
	movq	-488(%rbp), %rdx
	jmp	tdefl_compress_normal144
	.text
tdefl_compress_normal144:
	# %145 = phi i64 [%137, %136], [%143, %138]
	# %146 = trunc i64 %145 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %146, i32* %51
	movq	%rdx, %rax
	movq	-392(%rbp), %rcx
	movl	%eax, (%rcx)
	# %147 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %148 = icmp ne i8* %147, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %148, label %149, label %154
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal154
	jmp	tdefl_compress_normal149
	.text
tdefl_compress_normal149:
	# %150 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %151 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %152 = zext i32 %151 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %153 = getelementptr i8, i8* %150, i64 %152
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, -504(%rbp)
	# br label %155
	movq	-504(%rbp), %rdx
	jmp	tdefl_compress_normal155
	.text
tdefl_compress_normal154:
	# br label %155
	movq	$0, %rdx
	jmp	tdefl_compress_normal155
	.text
tdefl_compress_normal155:
	# %156 = phi i8* [%153, %149], [null, %154]
	# store i8* %156, i8** %52
	movq	%rdx, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# %157 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %158 = zext i32 %157 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %159 = load i64, i64* %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %160 = sub i64 %159, %158
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %160, i64* %42
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# %161 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %162 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %163 = getelementptr %struct.tdefl_compressor, i8* %162, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %164 = load i32, i32* %163
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %165 = add i32 %164, %161
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %165, i32* %163
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %166
	jmp	tdefl_compress_normal166
	.text
tdefl_compress_normal166:
	# %167 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %168 = load i8*, i8** %52
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %169 = icmp ne i8* %167, %168
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %169, label %170, label %221
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal221
	jmp	tdefl_compress_normal170
	.text
tdefl_compress_normal170:
	# %171 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %172 = getelementptr i8, i8* %171, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %172, i8** %41
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %173 = load i8, i8* %171
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %173, i8* %53
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movb	%al, (%rcx)
	# %174 = load i8, i8* %53
	movq	-408(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %175 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %176 = getelementptr %struct.tdefl_compressor, i8* %175, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %177 = load i32, i32* %48
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %178 = zext i32 %177 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %179 = getelementptr [33025 x i8], i8* %176, i64 0, i64 %178
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %174, i8* %179
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %180 = load i32, i32* %48
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %181 = icmp ult i32 %180, 257
	movq	%rdx, %rax
	movq	$257, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %181, label %182, label %190
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal190
	jmp	tdefl_compress_normal182
	.text
tdefl_compress_normal182:
	# %183 = load i8, i8* %53
	movq	-408(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %184 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %185 = getelementptr %struct.tdefl_compressor, i8* %184, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %186 = load i32, i32* %48
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %187 = add i32 32768, %186
	movq	$32768, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %188 = zext i32 %187 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %189 = getelementptr [33025 x i8], i8* %185, i64 0, i64 %188
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %183, i8* %189
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %190
	jmp	tdefl_compress_normal190
	.text
tdefl_compress_normal190:
	# %191 = load i32, i32* %50
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %192 = shl i32 %191, 5
	movq	%rdx, %rax
	movq	$5, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %193 = load i8, i8* %53
	movq	-408(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %194 = zext i8 %193 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %195 = xor i32 %192, %194
	movq	%rbx, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %196 = and i32 %195, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %196, i32* %50
	movq	%rdx, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# %197 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %198 = getelementptr %struct.tdefl_compressor, i8* %197, i32 0, i32 41
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$41, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %199 = load i32, i32* %50
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %200 = zext i32 %199 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %201 = getelementptr [32768 x i16], i8* %198, i64 0, i64 %200
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %202 = load i16, i16* %201
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %203 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %204 = getelementptr %struct.tdefl_compressor, i8* %203, i32 0, i32 40
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$40, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %205 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %206 = and i32 %205, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %207 = zext i32 %206 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %208 = getelementptr [32768 x i16], i8* %204, i64 0, i64 %207
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %202, i16* %208
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %209 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %210 = trunc i32 %209 to i16
	movq	%rdx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %211 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %212 = getelementptr %struct.tdefl_compressor, i8* %211, i32 0, i32 41
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$41, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %213 = load i32, i32* %50
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %214 = zext i32 %213 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %215 = getelementptr [32768 x i16], i8* %212, i64 0, i64 %214
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %210, i16* %215
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %216 = load i32, i32* %48
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %217 = add i32 %216, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %218 = and i32 %217, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %218, i32* %48
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movl	%eax, (%rcx)
	# %219 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %220 = add i32 %219, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %220, i32* %49
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %166
	jmp	tdefl_compress_normal166
	.text
tdefl_compress_normal221:
	# br label %328
	jmp	tdefl_compress_normal328
	.text
tdefl_compress_normal222:
	# br label %223
	jmp	tdefl_compress_normal223
	.text
tdefl_compress_normal223:
	# %224 = load i64, i64* %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = icmp ne i64 %224, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %225, label %226, label %231
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tdefl_compress_normal231
	jmp	tdefl_compress_normal226
	.text
tdefl_compress_normal226:
	# %227 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %228 = getelementptr %struct.tdefl_compressor, i8* %227, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %229 = load i32, i32* %228
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %230 = icmp ult i32 %229, 258
	movq	%rdx, %rax
	movq	$258, %rcx
	cmpl	%ecx, %eax
	movq	$0, -512(%rbp)
	setb	-512(%rbp)
	# br label %231
	movq	-512(%rbp), %rdx
	jmp	tdefl_compress_normal231
	.text
tdefl_compress_normal231:
	# %232 = phi i1 [0, %223], [%230, %226]
	# br i1 %232, label %233, label %327
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal327
	jmp	tdefl_compress_normal233
	.text
tdefl_compress_normal233:
	# %234 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %235 = getelementptr i8, i8* %234, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %235, i8** %41
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %236 = load i8, i8* %234
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %236, i8* %54
	movq	%rdx, %rax
	movq	-416(%rbp), %rcx
	movb	%al, (%rcx)
	# %237 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %238 = getelementptr %struct.tdefl_compressor, i8* %237, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %239 = load i32, i32* %238
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %240 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %241 = getelementptr %struct.tdefl_compressor, i8* %240, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %242 = load i32, i32* %241
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %243 = add i32 %239, %242
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %244 = and i32 %243, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %244, i32* %55
	movq	%rdx, %rax
	movq	-424(%rbp), %rcx
	movl	%eax, (%rcx)
	# %245 = load i64, i64* %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %246 = add i64 %245, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %246, i64* %42
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# %247 = load i8, i8* %54
	movq	-416(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %248 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %249 = getelementptr %struct.tdefl_compressor, i8* %248, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %250 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %251 = zext i32 %250 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %252 = getelementptr [33025 x i8], i8* %249, i64 0, i64 %251
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %247, i8* %252
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %253 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %254 = icmp ult i32 %253, 257
	movq	%rdx, %rax
	movq	$257, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %254, label %255, label %263
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal263
	jmp	tdefl_compress_normal255
	.text
tdefl_compress_normal255:
	# %256 = load i8, i8* %54
	movq	-416(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %257 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %258 = getelementptr %struct.tdefl_compressor, i8* %257, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %259 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %260 = add i32 32768, %259
	movq	$32768, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %261 = zext i32 %260 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %262 = getelementptr [33025 x i8], i8* %258, i64 0, i64 %261
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %256, i8* %262
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %263
	jmp	tdefl_compress_normal263
	.text
tdefl_compress_normal263:
	# %264 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %265 = getelementptr %struct.tdefl_compressor, i8* %264, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %266 = load i32, i32* %265
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %267 = add i32 %266, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %267, i32* %265
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %268 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %269 = getelementptr %struct.tdefl_compressor, i8* %268, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %270 = load i32, i32* %269
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %271 = add i32 %267, %270
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %272 = icmp uge i32 %271, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %272, label %273, label %326
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal326
	jmp	tdefl_compress_normal273
	.text
tdefl_compress_normal273:
	# %274 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %275 = getelementptr %struct.tdefl_compressor, i8* %274, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %276 = load i32, i32* %275
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %277 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %278 = getelementptr %struct.tdefl_compressor, i8* %277, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %279 = load i32, i32* %278
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %280 = sub i32 %279, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %281 = add i32 %276, %280
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %282 = sub i32 %281, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %282, i32* %56
	movq	%rdx, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# %283 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %284 = getelementptr %struct.tdefl_compressor, i8* %283, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %285 = load i32, i32* %56
	movq	-432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %286 = and i32 %285, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %287 = zext i32 %286 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %288 = getelementptr [33025 x i8], i8* %284, i64 0, i64 %287
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %289 = load i8, i8* %288
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %290 = zext i8 %289 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %291 = shl i32 %290, 10
	movq	%rdx, %rax
	movq	$10, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %292 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %293 = getelementptr %struct.tdefl_compressor, i8* %292, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %294 = load i32, i32* %56
	movq	-432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %295 = add i32 %294, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %296 = and i32 %295, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %297 = zext i32 %296 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %298 = getelementptr [33025 x i8], i8* %293, i64 0, i64 %297
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %299 = load i8, i8* %298
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %300 = zext i8 %299 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %301 = shl i32 %300, 5
	movq	%rdx, %rax
	movq	$5, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %302 = xor i32 %291, %301
	movq	%rdi, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %303 = load i8, i8* %54
	movq	-416(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %304 = zext i8 %303 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %305 = xor i32 %302, %304
	movq	%rbx, %rax
	movq	%rdx, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %306 = and i32 %305, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %306, i32* %57
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movl	%eax, (%rcx)
	# %307 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %308 = getelementptr %struct.tdefl_compressor, i8* %307, i32 0, i32 41
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$41, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %309 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %310 = zext i32 %309 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %311 = getelementptr [32768 x i16], i8* %308, i64 0, i64 %310
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %312 = load i16, i16* %311
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %313 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %314 = getelementptr %struct.tdefl_compressor, i8* %313, i32 0, i32 40
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$40, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %315 = load i32, i32* %56
	movq	-432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %316 = and i32 %315, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %317 = zext i32 %316 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %318 = getelementptr [32768 x i16], i8* %314, i64 0, i64 %317
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %312, i16* %318
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %319 = load i32, i32* %56
	movq	-432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %320 = trunc i32 %319 to i16
	movq	%rdx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %321 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %322 = getelementptr %struct.tdefl_compressor, i8* %321, i32 0, i32 41
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$41, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %323 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %324 = zext i32 %323 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %325 = getelementptr [32768 x i16], i8* %322, i64 0, i64 %324
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %320, i16* %325
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %326
	jmp	tdefl_compress_normal326
	.text
tdefl_compress_normal326:
	# br label %223
	jmp	tdefl_compress_normal223
	.text
tdefl_compress_normal327:
	# br label %328
	jmp	tdefl_compress_normal328
	.text
tdefl_compress_normal328:
	# %329 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %330 = getelementptr %struct.tdefl_compressor, i8* %329, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %331 = load i32, i32* %330
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %332 = sub i32 32768, %331
	movq	$32768, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %333 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %334 = getelementptr %struct.tdefl_compressor, i8* %333, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %335 = load i32, i32* %334
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %336 = icmp ult i32 %332, %335
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %336, label %337, label %342
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal342
	jmp	tdefl_compress_normal337
	.text
tdefl_compress_normal337:
	# %338 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %339 = getelementptr %struct.tdefl_compressor, i8* %338, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %340 = load i32, i32* %339
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %341 = sub i32 32768, %340
	movq	$32768, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, -520(%rbp)
	# br label %346
	movq	-520(%rbp), %rbx
	jmp	tdefl_compress_normal346
	.text
tdefl_compress_normal342:
	# %343 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %344 = getelementptr %struct.tdefl_compressor, i8* %343, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %345 = load i32, i32* %344
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, -528(%rbp)
	movl	%eax, -528(%rbp)
	# br label %346
	movq	-528(%rbp), %rbx
	jmp	tdefl_compress_normal346
	.text
tdefl_compress_normal346:
	# %347 = phi i32 [%341, %337], [%345, %342]
	# %348 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %349 = getelementptr %struct.tdefl_compressor, i8* %348, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %347, i32* %349
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %350 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %351 = icmp ne i32 %350, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %351, label %358, label %352
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal352
	jmp	tdefl_compress_normal358
	.text
tdefl_compress_normal352:
	# %353 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %354 = getelementptr %struct.tdefl_compressor, i8* %353, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %355 = load i32, i32* %354
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %356 = icmp ult i32 %355, 258
	movq	%rdx, %rax
	movq	$258, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %356, label %357, label %358
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal358
	jmp	tdefl_compress_normal357
	.text
tdefl_compress_normal357:
	# br label %1350
	jmp	tdefl_compress_normal1350
	.text
tdefl_compress_normal358:
	# store i32 1, i32* %44
	movq	$1, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %45
	movq	$0, %rax
	movq	-344(%rbp), %rcx
	movl	%eax, (%rcx)
	# %359 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %360 = getelementptr %struct.tdefl_compressor, i8* %359, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %361 = load i32, i32* %360
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %362 = icmp ne i32 %361, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %362, label %363, label %367
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal367
	jmp	tdefl_compress_normal363
	.text
tdefl_compress_normal363:
	# %364 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %365 = getelementptr %struct.tdefl_compressor, i8* %364, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %366 = load i32, i32* %365
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, -536(%rbp)
	movl	%eax, -536(%rbp)
	# br label %368
	movq	-536(%rbp), %rdx
	jmp	tdefl_compress_normal368
	.text
tdefl_compress_normal367:
	# br label %368
	movq	$2, %rdx
	jmp	tdefl_compress_normal368
	.text
tdefl_compress_normal368:
	# %369 = phi i32 [%366, %363], [2, %367]
	# store i32 %369, i32* %46
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movl	%eax, (%rcx)
	# %370 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %371 = getelementptr %struct.tdefl_compressor, i8* %370, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %372 = load i32, i32* %371
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %373 = and i32 %372, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %373, i32* %47
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %374 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %375 = getelementptr %struct.tdefl_compressor, i8* %374, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %376 = load i32, i32* %375
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %377 = and i32 %376, 589824
	movq	%rdx, %rax
	movq	$589824, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %378 = icmp ne i32 %377, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %378, label %379, label %429
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal429
	jmp	tdefl_compress_normal379
	.text
tdefl_compress_normal379:
	# %380 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %381 = getelementptr %struct.tdefl_compressor, i8* %380, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %382 = load i32, i32* %381
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %383 = icmp ne i32 %382, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %383, label %384, label %428
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal428
	jmp	tdefl_compress_normal384
	.text
tdefl_compress_normal384:
	# %385 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %386 = getelementptr %struct.tdefl_compressor, i8* %385, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %387 = load i32, i32* %386
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %388 = and i32 %387, 524288
	movq	%rdx, %rax
	movq	$524288, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %389 = icmp ne i32 %388, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %389, label %428, label %390
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal390
	jmp	tdefl_compress_normal428
	.text
tdefl_compress_normal390:
	# %391 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %392 = getelementptr %struct.tdefl_compressor, i8* %391, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %393 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %394 = sub i32 %393, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %395 = and i32 %394, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %396 = zext i32 %395 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %397 = getelementptr [33025 x i8], i8* %392, i64 0, i64 %396
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %398 = load i8, i8* %397
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %398, i8* %58
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movb	%al, (%rcx)
	# store i32 0, i32* %46
	movq	$0, %rax
	movq	-352(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %399
	jmp	tdefl_compress_normal399
	.text
tdefl_compress_normal399:
	# %400 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %401 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %402 = getelementptr %struct.tdefl_compressor, i8* %401, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %403 = load i32, i32* %402
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %404 = icmp ult i32 %400, %403
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %404, label %405, label %422
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal422
	jmp	tdefl_compress_normal405
	.text
tdefl_compress_normal405:
	# %406 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %407 = getelementptr %struct.tdefl_compressor, i8* %406, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %408 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %409 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %410 = add i32 %408, %409
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %411 = zext i32 %410 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %412 = getelementptr [33025 x i8], i8* %407, i64 0, i64 %411
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %413 = load i8, i8* %412
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %414 = zext i8 %413 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %415 = load i8, i8* %58
	movq	-448(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %416 = zext i8 %415 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %417 = icmp ne i32 %414, %416
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %417, label %418, label %419
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal419
	jmp	tdefl_compress_normal418
	.text
tdefl_compress_normal418:
	# br label %422
	jmp	tdefl_compress_normal422
	.text
tdefl_compress_normal419:
	# %420 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %421 = add i32 %420, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %421, i32* %46
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %399
	jmp	tdefl_compress_normal399
	.text
tdefl_compress_normal422:
	# %423 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %424 = icmp ult i32 %423, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %424, label %425, label %426
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal426
	jmp	tdefl_compress_normal425
	.text
tdefl_compress_normal425:
	# store i32 0, i32* %46
	movq	$0, %rax
	movq	-352(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %427
	jmp	tdefl_compress_normal427
	.text
tdefl_compress_normal426:
	# store i32 1, i32* %45
	movq	$1, %rax
	movq	-344(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %427
	jmp	tdefl_compress_normal427
	.text
tdefl_compress_normal427:
	# br label %428
	jmp	tdefl_compress_normal428
	.text
tdefl_compress_normal428:
	# br label %702
	jmp	tdefl_compress_normal702
	.text
tdefl_compress_normal429:
	# %430 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %431 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %432 = getelementptr %struct.tdefl_compressor, i8* %431, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %433 = load i32, i32* %432
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %434 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %435 = getelementptr %struct.tdefl_compressor, i8* %434, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %436 = load i32, i32* %435
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %437 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %438 = getelementptr %struct.tdefl_compressor, i8* %437, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %439 = load i32, i32* %438
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %430, i8** %21
	movq	%r12, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %433, i32* %22
	movq	%rdi, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %436, i32* %23
	movq	%rbx, %rax
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %439, i32* %24
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %45, i8** %25
	movq	-344(%rbp), %rax
	movq	-184(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %46, i8** %26
	movq	-352(%rbp), %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# %440 = load i32, i32* %22
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %441 = and i32 %440, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %441, i32* %28
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	# %442 = load i8*, i8** %26
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %443 = load i32, i32* %442
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %443, i32* %29
	movq	%rdx, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %444 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %444, i32* %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	# %445 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %446 = getelementptr %struct.tdefl_compressor, i8* %445, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %447 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %448 = icmp uge i32 %447, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# %449 = zext i1 %448 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %450 = sext i32 %449 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %451 = getelementptr [2 x i32], i8* %446, i64 0, i64 %450
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %452 = load i32, i32* %451
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %452, i32* %33
	movq	%rdx, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %453 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %454 = getelementptr %struct.tdefl_compressor, i8* %453, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %455 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %456 = zext i32 %455 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %457 = getelementptr i8, i8* %454, i64 %456
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %457, i8** %34
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# %458 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %459 = getelementptr %struct.tdefl_compressor, i8* %458, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %460 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %461 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %462 = add i32 %460, %461
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %463 = zext i32 %462 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %464 = getelementptr [33025 x i8], i8* %459, i64 0, i64 %463
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %465 = load i8, i8* %464
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %465, i8* %37
	movq	%rdx, %rax
	movq	-280(%rbp), %rcx
	movb	%al, (%rcx)
	# %466 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %467 = getelementptr %struct.tdefl_compressor, i8* %466, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %468 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %469 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %470 = add i32 %468, %469
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %471 = sub i32 %470, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %472 = zext i32 %471 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %473 = getelementptr [33025 x i8], i8* %467, i64 0, i64 %472
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %474 = load i8, i8* %473
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %474, i8* %38
	movq	%rdx, %rax
	movq	-288(%rbp), %rcx
	movb	%al, (%rcx)
	# %475 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %476 = icmp ule i32 %475, 258
	movq	%rdx, %rax
	movq	$258, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %477 = xor i1 %476, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %478 = zext i1 %477 to i32
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %479 = sext i32 %478 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# br i1 %477, label %480, label %481
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal481
	jmp	tdefl_compress_normal480
	.text
tdefl_compress_normal480:
	# call void @__assert_rtn (i8* @__func__.tdefl_find_match, i8* @.str.11, i32 2912, i8* @.str.69)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_find_match(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2912, %rax
	pushq	%rax
	leaq	_.str.69(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_normal481:
	# %482 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %483 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %484 = icmp ule i32 %482, %483
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %484, label %485, label %486
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal486
	jmp	tdefl_compress_normal485
	.text
tdefl_compress_normal485:
	# br label %701
	jmp	tdefl_compress_normal701
	.text
tdefl_compress_normal486:
	# br label %487
	jmp	tdefl_compress_normal487
	.text
tdefl_compress_normal487:
	# br label %488
	jmp	tdefl_compress_normal488
	.text
tdefl_compress_normal488:
	# %489 = load i32, i32* %33
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %490 = add i32 %489, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %490, i32* %33
	movq	%rdx, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %491 = icmp eq i32 %490, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %491, label %492, label %493
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal493
	jmp	tdefl_compress_normal492
	.text
tdefl_compress_normal492:
	# br label %701
	jmp	tdefl_compress_normal701
	.text
tdefl_compress_normal493:
	# %494 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %495 = getelementptr %struct.tdefl_compressor, i8* %494, i32 0, i32 40
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$40, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %496 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %497 = zext i32 %496 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %498 = getelementptr [32768 x i16], i8* %495, i64 0, i64 %497
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %499 = load i16, i16* %498
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %500 = zext i16 %499 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %500, i32* %31
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %501 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %502 = icmp ne i32 %501, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %502, label %503, label %511
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal511
	jmp	tdefl_compress_normal503
	.text
tdefl_compress_normal503:
	# %504 = load i32, i32* %22
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %505 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %506 = sub i32 %504, %505
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %507 = trunc i32 %506 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %508 = zext i16 %507 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# store i32 %508, i32* %27
	movq	%rbx, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %509 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %510 = icmp ugt i32 %508, %509
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %510, label %511, label %512
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal512
	jmp	tdefl_compress_normal511
	.text
tdefl_compress_normal511:
	# br label %701
	jmp	tdefl_compress_normal701
	.text
tdefl_compress_normal512:
	# %513 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %514 = and i32 %513, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %514, i32* %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	# %515 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %516 = getelementptr %struct.tdefl_compressor, i8* %515, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %517 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %518 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %519 = add i32 %517, %518
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %520 = zext i32 %519 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %521 = getelementptr [33025 x i8], i8* %516, i64 0, i64 %520
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %522 = load i8, i8* %521
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %523 = zext i8 %522 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %524 = load i8, i8* %37
	movq	-280(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %525 = zext i8 %524 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %526 = icmp eq i32 %523, %525
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %526, label %527, label %542
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal542
	jmp	tdefl_compress_normal527
	.text
tdefl_compress_normal527:
	# %528 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %529 = getelementptr %struct.tdefl_compressor, i8* %528, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %530 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %531 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %532 = add i32 %530, %531
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %533 = sub i32 %532, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %534 = zext i32 %533 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %535 = getelementptr [33025 x i8], i8* %529, i64 0, i64 %534
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %536 = load i8, i8* %535
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %537 = zext i8 %536 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %538 = load i8, i8* %38
	movq	-288(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %539 = zext i8 %538 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %540 = icmp eq i32 %537, %539
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %540, label %541, label %542
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal542
	jmp	tdefl_compress_normal541
	.text
tdefl_compress_normal541:
	# br label %641
	jmp	tdefl_compress_normal641
	.text
tdefl_compress_normal542:
	# %543 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %544 = getelementptr %struct.tdefl_compressor, i8* %543, i32 0, i32 40
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$40, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %545 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %546 = zext i32 %545 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %547 = getelementptr [32768 x i16], i8* %544, i64 0, i64 %546
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %548 = load i16, i16* %547
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %549 = zext i16 %548 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %549, i32* %31
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %550 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %551 = icmp ne i32 %550, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %551, label %552, label %560
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal560
	jmp	tdefl_compress_normal552
	.text
tdefl_compress_normal552:
	# %553 = load i32, i32* %22
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %554 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %555 = sub i32 %553, %554
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %556 = trunc i32 %555 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %557 = zext i16 %556 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# store i32 %557, i32* %27
	movq	%rbx, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %558 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %559 = icmp ugt i32 %557, %558
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %559, label %560, label %561
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal561
	jmp	tdefl_compress_normal560
	.text
tdefl_compress_normal560:
	# br label %701
	jmp	tdefl_compress_normal701
	.text
tdefl_compress_normal561:
	# %562 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %563 = and i32 %562, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %563, i32* %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	# %564 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %565 = getelementptr %struct.tdefl_compressor, i8* %564, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %566 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %567 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %568 = add i32 %566, %567
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %569 = zext i32 %568 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %570 = getelementptr [33025 x i8], i8* %565, i64 0, i64 %569
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %571 = load i8, i8* %570
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %572 = zext i8 %571 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %573 = load i8, i8* %37
	movq	-280(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %574 = zext i8 %573 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %575 = icmp eq i32 %572, %574
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %575, label %576, label %591
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal591
	jmp	tdefl_compress_normal576
	.text
tdefl_compress_normal576:
	# %577 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %578 = getelementptr %struct.tdefl_compressor, i8* %577, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %579 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %580 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %581 = add i32 %579, %580
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %582 = sub i32 %581, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %583 = zext i32 %582 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %584 = getelementptr [33025 x i8], i8* %578, i64 0, i64 %583
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %585 = load i8, i8* %584
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %586 = zext i8 %585 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %587 = load i8, i8* %38
	movq	-288(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %588 = zext i8 %587 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %589 = icmp eq i32 %586, %588
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %589, label %590, label %591
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal591
	jmp	tdefl_compress_normal590
	.text
tdefl_compress_normal590:
	# br label %641
	jmp	tdefl_compress_normal641
	.text
tdefl_compress_normal591:
	# %592 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %593 = getelementptr %struct.tdefl_compressor, i8* %592, i32 0, i32 40
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$40, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %594 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %595 = zext i32 %594 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %596 = getelementptr [32768 x i16], i8* %593, i64 0, i64 %595
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %597 = load i16, i16* %596
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %598 = zext i16 %597 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %598, i32* %31
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %599 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %600 = icmp ne i32 %599, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %600, label %601, label %609
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal609
	jmp	tdefl_compress_normal601
	.text
tdefl_compress_normal601:
	# %602 = load i32, i32* %22
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %603 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %604 = sub i32 %602, %603
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %605 = trunc i32 %604 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %606 = zext i16 %605 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# store i32 %606, i32* %27
	movq	%rbx, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %607 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %608 = icmp ugt i32 %606, %607
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %608, label %609, label %610
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal610
	jmp	tdefl_compress_normal609
	.text
tdefl_compress_normal609:
	# br label %701
	jmp	tdefl_compress_normal701
	.text
tdefl_compress_normal610:
	# %611 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %612 = and i32 %611, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %612, i32* %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	# %613 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %614 = getelementptr %struct.tdefl_compressor, i8* %613, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %615 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %616 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %617 = add i32 %615, %616
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %618 = zext i32 %617 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %619 = getelementptr [33025 x i8], i8* %614, i64 0, i64 %618
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %620 = load i8, i8* %619
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %621 = zext i8 %620 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %622 = load i8, i8* %37
	movq	-280(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %623 = zext i8 %622 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %624 = icmp eq i32 %621, %623
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %624, label %625, label %640
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal640
	jmp	tdefl_compress_normal625
	.text
tdefl_compress_normal625:
	# %626 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %627 = getelementptr %struct.tdefl_compressor, i8* %626, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %628 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %629 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %630 = add i32 %628, %629
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %631 = sub i32 %630, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %632 = zext i32 %631 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %633 = getelementptr [33025 x i8], i8* %627, i64 0, i64 %632
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %634 = load i8, i8* %633
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %635 = zext i8 %634 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %636 = load i8, i8* %38
	movq	-288(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %637 = zext i8 %636 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %638 = icmp eq i32 %635, %637
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %638, label %639, label %640
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal640
	jmp	tdefl_compress_normal639
	.text
tdefl_compress_normal639:
	# br label %641
	jmp	tdefl_compress_normal641
	.text
tdefl_compress_normal640:
	# br label %488
	jmp	tdefl_compress_normal488
	.text
tdefl_compress_normal641:
	# %642 = load i32, i32* %27
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %643 = icmp ne i32 %642, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %643, label %645, label %644
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal644
	jmp	tdefl_compress_normal645
	.text
tdefl_compress_normal644:
	# br label %701
	jmp	tdefl_compress_normal701
	.text
tdefl_compress_normal645:
	# %646 = load i8*, i8** %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %646, i8** %35
	movq	%rdx, %rax
	movq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
	# %647 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %648 = getelementptr %struct.tdefl_compressor, i8* %647, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %649 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %650 = zext i32 %649 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %651 = getelementptr i8, i8* %648, i64 %650
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %651, i8** %36
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %32
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %652
	jmp	tdefl_compress_normal652
	.text
tdefl_compress_normal652:
	# %653 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %654 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %655 = icmp ult i32 %653, %654
	movq	%rdx, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %655, label %656, label %670
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal670
	jmp	tdefl_compress_normal656
	.text
tdefl_compress_normal656:
	# %657 = load i8*, i8** %35
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %658 = getelementptr i8, i8* %657, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %658, i8** %35
	movq	%rdx, %rax
	movq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
	# %659 = load i8, i8* %657
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %660 = zext i8 %659 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %661 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %662 = getelementptr i8, i8* %661, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %662, i8** %36
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# %663 = load i8, i8* %661
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %664 = zext i8 %663 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %665 = icmp ne i32 %660, %664
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %665, label %666, label %667
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal667
	jmp	tdefl_compress_normal666
	.text
tdefl_compress_normal666:
	# br label %670
	jmp	tdefl_compress_normal670
	.text
tdefl_compress_normal667:
	# %668 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %669 = add i32 %668, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %669, i32* %32
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %652
	jmp	tdefl_compress_normal652
	.text
tdefl_compress_normal670:
	# %671 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %672 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %673 = icmp ugt i32 %671, %672
	movq	%rdx, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %673, label %674, label %700
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal700
	jmp	tdefl_compress_normal674
	.text
tdefl_compress_normal674:
	# %675 = load i32, i32* %27
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %676 = load i8*, i8** %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %675, i32* %676
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %677 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i32 %677, i32* %29
	movq	%rbx, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %678 = load i8*, i8** %26
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %677, i32* %678
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %679 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %680 = icmp eq i32 %677, %679
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %680, label %681, label %682
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal682
	jmp	tdefl_compress_normal681
	.text
tdefl_compress_normal681:
	# br label %701
	jmp	tdefl_compress_normal701
	.text
tdefl_compress_normal682:
	# %683 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %684 = getelementptr %struct.tdefl_compressor, i8* %683, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %685 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %686 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %687 = add i32 %685, %686
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %688 = zext i32 %687 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %689 = getelementptr [33025 x i8], i8* %684, i64 0, i64 %688
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %690 = load i8, i8* %689
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %690, i8* %37
	movq	%rdx, %rax
	movq	-280(%rbp), %rcx
	movb	%al, (%rcx)
	# %691 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %692 = getelementptr %struct.tdefl_compressor, i8* %691, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %693 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %694 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %695 = add i32 %693, %694
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %696 = sub i32 %695, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %697 = zext i32 %696 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %698 = getelementptr [33025 x i8], i8* %692, i64 0, i64 %697
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %699 = load i8, i8* %698
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %699, i8* %38
	movq	%rdx, %rax
	movq	-288(%rbp), %rcx
	movb	%al, (%rcx)
	# br label %700
	jmp	tdefl_compress_normal700
	.text
tdefl_compress_normal700:
	# br label %487
	jmp	tdefl_compress_normal487
	.text
tdefl_compress_normal701:
	# br label %702
	jmp	tdefl_compress_normal702
	.text
tdefl_compress_normal702:
	# %703 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %704 = icmp eq i32 %703, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %704, label %705, label %708
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal708
	jmp	tdefl_compress_normal705
	.text
tdefl_compress_normal705:
	# %706 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %707 = icmp uge i32 %706, 8192
	movq	%rdx, %rax
	movq	$8192, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %707, label %721, label %708
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal708
	jmp	tdefl_compress_normal721
	.text
tdefl_compress_normal708:
	# %709 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %710 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %711 = icmp eq i32 %709, %710
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %711, label %721, label %712
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal712
	jmp	tdefl_compress_normal721
	.text
tdefl_compress_normal712:
	# %713 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %714 = getelementptr %struct.tdefl_compressor, i8* %713, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %715 = load i32, i32* %714
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %716 = and i32 %715, 131072
	movq	%rdx, %rax
	movq	$131072, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %717 = icmp ne i32 %716, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %717, label %718, label %722
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal722
	jmp	tdefl_compress_normal718
	.text
tdefl_compress_normal718:
	# %719 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %720 = icmp ule i32 %719, 5
	movq	%rdx, %rax
	movq	$5, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %720, label %721, label %722
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal722
	jmp	tdefl_compress_normal721
	.text
tdefl_compress_normal721:
	# store i32 0, i32* %46
	movq	$0, %rax
	movq	-352(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %45
	movq	$0, %rax
	movq	-344(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %722
	jmp	tdefl_compress_normal722
	.text
tdefl_compress_normal722:
	# %723 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %724 = getelementptr %struct.tdefl_compressor, i8* %723, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %725 = load i32, i32* %724
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %726 = icmp ne i32 %725, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %726, label %727, label %1043
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1043
	jmp	tdefl_compress_normal727
	.text
tdefl_compress_normal727:
	# %728 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %729 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %730 = getelementptr %struct.tdefl_compressor, i8* %729, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %731 = load i32, i32* %730
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %732 = icmp ugt i32 %728, %731
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %732, label %733, label %917
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal917
	jmp	tdefl_compress_normal733
	.text
tdefl_compress_normal733:
	# %734 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %735 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %736 = getelementptr %struct.tdefl_compressor, i8* %735, i32 0, i32 20
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$20, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %737 = load i32, i32* %736
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %738 = trunc i32 %737 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8* %734, i8** %17
	movq	%rbx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 %738, i8* %18
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movb	%al, (%rcx)
	# %739 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %740 = getelementptr %struct.tdefl_compressor, i8* %739, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %741 = load i32, i32* %740
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %742 = add i32 %741, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %742, i32* %740
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %743 = load i8, i8* %18
	movq	-128(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %744 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %745 = getelementptr %struct.tdefl_compressor, i8* %744, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %746 = load i8*, i8** %745
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %747 = getelementptr i8, i8* %746, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %747, i8** %745
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i8 %743, i8* %746
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %748 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %749 = getelementptr %struct.tdefl_compressor, i8* %748, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %750 = load i8*, i8** %749
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %751 = load i8, i8* %750
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %752 = zext i8 %751 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %753 = ashr i32 %752, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %754 = trunc i32 %753 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %755 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %756 = getelementptr %struct.tdefl_compressor, i8* %755, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %757 = load i8*, i8** %756
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %754, i8* %757
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %758 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %759 = getelementptr %struct.tdefl_compressor, i8* %758, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %760 = load i32, i32* %759
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %761 = add i32 %760, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %761, i32* %759
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %762 = icmp eq i32 %761, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %762, label %763, label %772
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal772
	jmp	tdefl_compress_normal763
	.text
tdefl_compress_normal763:
	# %764 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %765 = getelementptr %struct.tdefl_compressor, i8* %764, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 8, i32* %765
	movq	$8, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %766 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %767 = getelementptr %struct.tdefl_compressor, i8* %766, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %768 = load i8*, i8** %767
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %769 = getelementptr i8, i8* %768, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %769, i8** %767
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %770 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %771 = getelementptr %struct.tdefl_compressor, i8* %770, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %768, i8** %771
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %772
	jmp	tdefl_compress_normal772
	.text
tdefl_compress_normal772:
	# %773 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %774 = getelementptr %struct.tdefl_compressor, i8* %773, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %775 = load i8, i8* %18
	movq	-128(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %776 = zext i8 %775 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %777 = getelementptr [288 x i16], i8* %774, i64 0, i64 %776
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %778 = load i16, i16* %777
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %779 = add i16 %778, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i16 %779, i16* %777
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %780 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %781 = icmp uge i32 %780, 128
	movq	%rdx, %rax
	movq	$128, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %781, label %782, label %900
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal900
	jmp	tdefl_compress_normal782
	.text
tdefl_compress_normal782:
	# %783 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %784 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %785 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %783, i8** %2
	movq	%rdi, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %784, i32* %3
	movq	%rbx, %rax
	movq	-496(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %785, i32* %4
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %786 = load i32, i32* %3
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %787 = icmp uge i32 %786, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %787, label %788, label %794
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tdefl_compress_normal794
	jmp	tdefl_compress_normal788
	.text
tdefl_compress_normal788:
	# %789 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %790 = icmp uge i32 %789, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %790, label %791, label %794
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tdefl_compress_normal794
	jmp	tdefl_compress_normal791
	.text
tdefl_compress_normal791:
	# %792 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %793 = icmp ule i32 %792, 32768
	movq	%rdx, %rax
	movq	$32768, %rcx
	cmpl	%ecx, %eax
	movq	$0, -544(%rbp)
	setbe	-544(%rbp)
	# br label %794
	movq	-544(%rbp), %rdx
	jmp	tdefl_compress_normal794
	.text
tdefl_compress_normal794:
	# %795 = phi i1 [0, %788], [0, %782], [%793, %791]
	# %796 = xor i1 %795, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %797 = zext i1 %796 to i32
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %798 = sext i32 %797 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# br i1 %796, label %799, label %800
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal800
	jmp	tdefl_compress_normal799
	.text
tdefl_compress_normal799:
	# call void @__assert_rtn (i8* @__func__.tdefl_record_match, i8* @.str.11, i32 3153, i8* @.str.70)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_record_match(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$3153, %rax
	pushq	%rax
	leaq	_.str.70(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_normal800:
	# %801 = load i32, i32* %3
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %802 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %803 = getelementptr %struct.tdefl_compressor, i8* %802, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %804 = load i32, i32* %803
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %805 = add i32 %804, %801
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %805, i32* %803
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %806 = load i32, i32* %3
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %807 = sub i32 %806, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %808 = trunc i32 %807 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %809 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %810 = getelementptr %struct.tdefl_compressor, i8* %809, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %811 = load i8*, i8** %810
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %808, i8* %811
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %812 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %813 = sub i32 %812, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %813, i32* %4
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %814 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %815 = and i32 %814, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %816 = trunc i32 %815 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %817 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %818 = getelementptr %struct.tdefl_compressor, i8* %817, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %819 = load i8*, i8** %818
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %820 = getelementptr i8, i8* %819, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %816, i8* %820
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %821 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %822 = lshr i32 %821, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %823 = trunc i32 %822 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %824 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %825 = getelementptr %struct.tdefl_compressor, i8* %824, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %826 = load i8*, i8** %825
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %827 = getelementptr i8, i8* %826, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %823, i8* %827
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %828 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %829 = getelementptr %struct.tdefl_compressor, i8* %828, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %830 = load i8*, i8** %829
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %831 = getelementptr i8, i8* %830, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %831, i8** %829
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %832 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %833 = getelementptr %struct.tdefl_compressor, i8* %832, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %834 = load i8*, i8** %833
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %835 = load i8, i8* %834
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %836 = zext i8 %835 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %837 = ashr i32 %836, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %838 = or i32 %837, 128
	movq	%rdx, %rax
	movq	$128, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %839 = trunc i32 %838 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %840 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %841 = getelementptr %struct.tdefl_compressor, i8* %840, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %842 = load i8*, i8** %841
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %839, i8* %842
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %843 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %844 = getelementptr %struct.tdefl_compressor, i8* %843, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %845 = load i32, i32* %844
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %846 = add i32 %845, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %846, i32* %844
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %847 = icmp eq i32 %846, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %847, label %848, label %857
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal857
	jmp	tdefl_compress_normal848
	.text
tdefl_compress_normal848:
	# %849 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %850 = getelementptr %struct.tdefl_compressor, i8* %849, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 8, i32* %850
	movq	$8, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %851 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %852 = getelementptr %struct.tdefl_compressor, i8* %851, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %853 = load i8*, i8** %852
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %854 = getelementptr i8, i8* %853, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %854, i8** %852
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %855 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %856 = getelementptr %struct.tdefl_compressor, i8* %855, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %853, i8** %856
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %857
	jmp	tdefl_compress_normal857
	.text
tdefl_compress_normal857:
	# %858 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %859 = and i32 %858, 511
	movq	%rdx, %rax
	movq	$511, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %860 = zext i32 %859 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %861 = getelementptr [512 x i8], i8* @s_tdefl_small_dist_sym, i64 0, i64 %860
	leaq	_s_tdefl_small_dist_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %862 = load i8, i8* %861
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %863 = zext i8 %862 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %863, i32* %5
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %864 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %865 = lshr i32 %864, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %866 = and i32 %865, 127
	movq	%rdx, %rax
	movq	$127, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %867 = zext i32 %866 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %868 = getelementptr [128 x i8], i8* @s_tdefl_large_dist_sym, i64 0, i64 %867
	leaq	_s_tdefl_large_dist_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %869 = load i8, i8* %868
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %870 = zext i8 %869 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %870, i32* %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %871 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %872 = getelementptr %struct.tdefl_compressor, i8* %871, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %873 = getelementptr [3 x [288 x i16]], i8* %872, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %874 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %875 = icmp ult i32 %874, 512
	movq	%rdx, %rax
	movq	$512, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %875, label %876, label %878
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal878
	jmp	tdefl_compress_normal876
	.text
tdefl_compress_normal876:
	# %877 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -552(%rbp)
	movl	%eax, -552(%rbp)
	# br label %880
	movq	-552(%rbp), %rdx
	jmp	tdefl_compress_normal880
	.text
tdefl_compress_normal878:
	# %879 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -560(%rbp)
	movl	%eax, -560(%rbp)
	# br label %880
	movq	-560(%rbp), %rdx
	jmp	tdefl_compress_normal880
	.text
tdefl_compress_normal880:
	# %881 = phi i32 [%877, %876], [%879, %878]
	# %882 = zext i32 %881 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %883 = getelementptr [288 x i16], i8* %873, i64 0, i64 %882
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %884 = load i16, i16* %883
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %885 = add i16 %884, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i16 %885, i16* %883
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %886 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %887 = getelementptr %struct.tdefl_compressor, i8* %886, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %888 = load i32, i32* %3
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %889 = sub i32 %888, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %890 = zext i32 %889 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %891 = getelementptr [256 x i16], i8* @s_tdefl_len_sym, i64 0, i64 %890
	leaq	_s_tdefl_len_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %892 = load i16, i16* %891
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %893 = zext i16 %892 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %894 = getelementptr [288 x i16], i8* %887, i64 0, i64 %893
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %895 = load i16, i16* %894
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %896 = add i16 %895, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i16 %896, i16* %894
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %897 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %898 = getelementptr %struct.tdefl_compressor, i8* %897, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %898
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %899 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %899, i32* %44
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %916
	jmp	tdefl_compress_normal916
	.text
tdefl_compress_normal900:
	# %901 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %902 = getelementptr %struct.tdefl_compressor, i8* %901, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %903 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %904 = zext i32 %903 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %905 = getelementptr [33025 x i8], i8* %902, i64 0, i64 %904
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %906 = load i8, i8* %905
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %907 = zext i8 %906 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %908 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %909 = getelementptr %struct.tdefl_compressor, i8* %908, i32 0, i32 20
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$20, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %907, i32* %909
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %910 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %911 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %912 = getelementptr %struct.tdefl_compressor, i8* %911, i32 0, i32 18
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %910, i32* %912
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %913 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %914 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %915 = getelementptr %struct.tdefl_compressor, i8* %914, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %913, i32* %915
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %916
	jmp	tdefl_compress_normal916
	.text
tdefl_compress_normal916:
	# br label %1042
	jmp	tdefl_compress_normal1042
	.text
tdefl_compress_normal917:
	# %918 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %919 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %920 = getelementptr %struct.tdefl_compressor, i8* %919, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %921 = load i32, i32* %920
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %922 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %923 = getelementptr %struct.tdefl_compressor, i8* %922, i32 0, i32 18
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %924 = load i32, i32* %923
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %918, i8** %7
	movq	%rdi, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %921, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %924, i32* %9
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %925 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %926 = icmp uge i32 %925, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %926, label %927, label %933
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tdefl_compress_normal933
	jmp	tdefl_compress_normal927
	.text
tdefl_compress_normal927:
	# %928 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %929 = icmp uge i32 %928, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %929, label %930, label %933
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tdefl_compress_normal933
	jmp	tdefl_compress_normal930
	.text
tdefl_compress_normal930:
	# %931 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %932 = icmp ule i32 %931, 32768
	movq	%rdx, %rax
	movq	$32768, %rcx
	cmpl	%ecx, %eax
	movq	$0, -568(%rbp)
	setbe	-568(%rbp)
	# br label %933
	movq	-568(%rbp), %rdx
	jmp	tdefl_compress_normal933
	.text
tdefl_compress_normal933:
	# %934 = phi i1 [0, %927], [0, %917], [%932, %930]
	# %935 = xor i1 %934, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %936 = zext i1 %935 to i32
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %937 = sext i32 %936 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# br i1 %935, label %938, label %939
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal939
	jmp	tdefl_compress_normal938
	.text
tdefl_compress_normal938:
	# call void @__assert_rtn (i8* @__func__.tdefl_record_match, i8* @.str.11, i32 3153, i8* @.str.70)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_record_match(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$3153, %rax
	pushq	%rax
	leaq	_.str.70(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_normal939:
	# %940 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %941 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %942 = getelementptr %struct.tdefl_compressor, i8* %941, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %943 = load i32, i32* %942
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %944 = add i32 %943, %940
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %944, i32* %942
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %945 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %946 = sub i32 %945, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %947 = trunc i32 %946 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %948 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %949 = getelementptr %struct.tdefl_compressor, i8* %948, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %950 = load i8*, i8** %949
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %947, i8* %950
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %951 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %952 = sub i32 %951, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %952, i32* %9
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %953 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %954 = and i32 %953, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %955 = trunc i32 %954 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %956 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %957 = getelementptr %struct.tdefl_compressor, i8* %956, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %958 = load i8*, i8** %957
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %959 = getelementptr i8, i8* %958, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %955, i8* %959
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %960 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %961 = lshr i32 %960, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %962 = trunc i32 %961 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %963 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %964 = getelementptr %struct.tdefl_compressor, i8* %963, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %965 = load i8*, i8** %964
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %966 = getelementptr i8, i8* %965, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %962, i8* %966
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %967 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %968 = getelementptr %struct.tdefl_compressor, i8* %967, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %969 = load i8*, i8** %968
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %970 = getelementptr i8, i8* %969, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %970, i8** %968
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %971 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %972 = getelementptr %struct.tdefl_compressor, i8* %971, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %973 = load i8*, i8** %972
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %974 = load i8, i8* %973
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %975 = zext i8 %974 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %976 = ashr i32 %975, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %977 = or i32 %976, 128
	movq	%rdx, %rax
	movq	$128, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %978 = trunc i32 %977 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %979 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %980 = getelementptr %struct.tdefl_compressor, i8* %979, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %981 = load i8*, i8** %980
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %978, i8* %981
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %982 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %983 = getelementptr %struct.tdefl_compressor, i8* %982, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %984 = load i32, i32* %983
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %985 = add i32 %984, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %985, i32* %983
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %986 = icmp eq i32 %985, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %986, label %987, label %996
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal996
	jmp	tdefl_compress_normal987
	.text
tdefl_compress_normal987:
	# %988 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %989 = getelementptr %struct.tdefl_compressor, i8* %988, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 8, i32* %989
	movq	$8, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %990 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %991 = getelementptr %struct.tdefl_compressor, i8* %990, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %992 = load i8*, i8** %991
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %993 = getelementptr i8, i8* %992, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %993, i8** %991
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %994 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %995 = getelementptr %struct.tdefl_compressor, i8* %994, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %992, i8** %995
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %996
	jmp	tdefl_compress_normal996
	.text
tdefl_compress_normal996:
	# %997 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %998 = and i32 %997, 511
	movq	%rdx, %rax
	movq	$511, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %999 = zext i32 %998 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1000 = getelementptr [512 x i8], i8* @s_tdefl_small_dist_sym, i64 0, i64 %999
	leaq	_s_tdefl_small_dist_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1001 = load i8, i8* %1000
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1002 = zext i8 %1001 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1002, i32* %10
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1003 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1004 = lshr i32 %1003, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1005 = and i32 %1004, 127
	movq	%rdx, %rax
	movq	$127, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1006 = zext i32 %1005 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1007 = getelementptr [128 x i8], i8* @s_tdefl_large_dist_sym, i64 0, i64 %1006
	leaq	_s_tdefl_large_dist_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1008 = load i8, i8* %1007
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1009 = zext i8 %1008 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1009, i32* %11
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1010 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1011 = getelementptr %struct.tdefl_compressor, i8* %1010, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1012 = getelementptr [3 x [288 x i16]], i8* %1011, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1013 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1014 = icmp ult i32 %1013, 512
	movq	%rdx, %rax
	movq	$512, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1014, label %1015, label %1017
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1017
	jmp	tdefl_compress_normal1015
	.text
tdefl_compress_normal1015:
	# %1016 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r15
	movl	%eax, %r15d
	# br label %1019
	movq	%r15, %rdx
	jmp	tdefl_compress_normal1019
	.text
tdefl_compress_normal1017:
	# %1018 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r14
	movl	%eax, %r14d
	# br label %1019
	movq	%r14, %rdx
	jmp	tdefl_compress_normal1019
	.text
tdefl_compress_normal1019:
	# %1020 = phi i32 [%1016, %1015], [%1018, %1017]
	# %1021 = zext i32 %1020 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1022 = getelementptr [288 x i16], i8* %1012, i64 0, i64 %1021
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1023 = load i16, i16* %1022
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1024 = add i16 %1023, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i16 %1024, i16* %1022
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %1025 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1026 = getelementptr %struct.tdefl_compressor, i8* %1025, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1027 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1028 = sub i32 %1027, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1029 = zext i32 %1028 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1030 = getelementptr [256 x i16], i8* @s_tdefl_len_sym, i64 0, i64 %1029
	leaq	_s_tdefl_len_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1031 = load i16, i16* %1030
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1032 = zext i16 %1031 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1033 = getelementptr [288 x i16], i8* %1026, i64 0, i64 %1032
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1034 = load i16, i16* %1033
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1035 = add i16 %1034, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i16 %1035, i16* %1033
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %1036 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1037 = getelementptr %struct.tdefl_compressor, i8* %1036, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1038 = load i32, i32* %1037
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1039 = sub i32 %1038, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1039, i32* %44
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1040 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1041 = getelementptr %struct.tdefl_compressor, i8* %1040, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %1041
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1042
	jmp	tdefl_compress_normal1042
	.text
tdefl_compress_normal1042:
	# br label %1257
	jmp	tdefl_compress_normal1257
	.text
tdefl_compress_normal1043:
	# %1044 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1045 = icmp ne i32 %1044, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1045, label %1102, label %1046
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1046
	jmp	tdefl_compress_normal1102
	.text
tdefl_compress_normal1046:
	# %1047 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1048 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1049 = getelementptr %struct.tdefl_compressor, i8* %1048, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1050 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1051 = zext i32 %1050 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1052 = icmp ult i64 %1051, 33024
	movq	%rdx, %rax
	movq	$33024, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1052, label %1053, label %1056
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1056
	jmp	tdefl_compress_normal1053
	.text
tdefl_compress_normal1053:
	# %1054 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1055 = zext i32 %1054 to i64
	movq	%rdx, %rax
	movq	$0, %r13
	movl	%eax, %r13d
	# br label %1057
	movq	%r13, %rdx
	jmp	tdefl_compress_normal1057
	.text
tdefl_compress_normal1056:
	# br label %1057
	movq	$33024, %rdx
	jmp	tdefl_compress_normal1057
	.text
tdefl_compress_normal1057:
	# %1058 = phi i64 [%1055, %1053], [33024, %1056]
	# %1059 = getelementptr [33025 x i8], i8* %1049, i64 0, i64 %1058
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1060 = load i8, i8* %1059
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# store i8* %1047, i8** %19
	movq	%rdi, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 %1060, i8* %20
	movq	%rdx, %rax
	movq	-144(%rbp), %rcx
	movb	%al, (%rcx)
	# %1061 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1062 = getelementptr %struct.tdefl_compressor, i8* %1061, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1063 = load i32, i32* %1062
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1064 = add i32 %1063, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1064, i32* %1062
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1065 = load i8, i8* %20
	movq	-144(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %r12
	movb	%al, %r12b
	# %1066 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1067 = getelementptr %struct.tdefl_compressor, i8* %1066, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1068 = load i8*, i8** %1067
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1069 = getelementptr i8, i8* %1068, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1069, i8** %1067
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8 %1065, i8* %1068
	movq	%r12, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %1070 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1071 = getelementptr %struct.tdefl_compressor, i8* %1070, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1072 = load i8*, i8** %1071
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1073 = load i8, i8* %1072
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1074 = zext i8 %1073 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1075 = ashr i32 %1074, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %1076 = trunc i32 %1075 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1077 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1078 = getelementptr %struct.tdefl_compressor, i8* %1077, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1079 = load i8*, i8** %1078
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1076, i8* %1079
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1080 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1081 = getelementptr %struct.tdefl_compressor, i8* %1080, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1082 = load i32, i32* %1081
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1083 = add i32 %1082, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1083, i32* %1081
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1084 = icmp eq i32 %1083, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1084, label %1085, label %1094
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1094
	jmp	tdefl_compress_normal1085
	.text
tdefl_compress_normal1085:
	# %1086 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1087 = getelementptr %struct.tdefl_compressor, i8* %1086, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 8, i32* %1087
	movq	$8, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1088 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1089 = getelementptr %struct.tdefl_compressor, i8* %1088, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1090 = load i8*, i8** %1089
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1091 = getelementptr i8, i8* %1090, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1091, i8** %1089
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %1092 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1093 = getelementptr %struct.tdefl_compressor, i8* %1092, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1090, i8** %1093
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %1094
	jmp	tdefl_compress_normal1094
	.text
tdefl_compress_normal1094:
	# %1095 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1096 = getelementptr %struct.tdefl_compressor, i8* %1095, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1097 = load i8, i8* %20
	movq	-144(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1098 = zext i8 %1097 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1099 = getelementptr [288 x i16], i8* %1096, i64 0, i64 %1098
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1100 = load i16, i16* %1099
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1101 = add i16 %1100, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i16 %1101, i16* %1099
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %1256
	jmp	tdefl_compress_normal1256
	.text
tdefl_compress_normal1102:
	# %1103 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1104 = getelementptr %struct.tdefl_compressor, i8* %1103, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1105 = load i32, i32* %1104
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1106 = icmp ne i32 %1105, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1106, label %1116, label %1107
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1107
	jmp	tdefl_compress_normal1116
	.text
tdefl_compress_normal1107:
	# %1108 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1109 = getelementptr %struct.tdefl_compressor, i8* %1108, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1110 = load i32, i32* %1109
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1111 = and i32 %1110, 65536
	movq	%rdx, %rax
	movq	$65536, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1112 = icmp ne i32 %1111, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1112, label %1116, label %1113
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1113
	jmp	tdefl_compress_normal1116
	.text
tdefl_compress_normal1113:
	# %1114 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1115 = icmp uge i32 %1114, 128
	movq	%rdx, %rax
	movq	$128, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1115, label %1116, label %1232
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1232
	jmp	tdefl_compress_normal1116
	.text
tdefl_compress_normal1116:
	# %1117 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1118 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1119 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1117, i8** %12
	movq	%rdi, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1118, i32* %13
	movq	%rbx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %1119, i32* %14
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1120 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1121 = icmp uge i32 %1120, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1121, label %1122, label %1128
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tdefl_compress_normal1128
	jmp	tdefl_compress_normal1122
	.text
tdefl_compress_normal1122:
	# %1123 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1124 = icmp uge i32 %1123, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1124, label %1125, label %1128
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tdefl_compress_normal1128
	jmp	tdefl_compress_normal1125
	.text
tdefl_compress_normal1125:
	# %1126 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1127 = icmp ule i32 %1126, 32768
	movq	%rdx, %rax
	movq	$32768, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r11
	setbe	%r11b
	# br label %1128
	movq	%r11, %rdx
	jmp	tdefl_compress_normal1128
	.text
tdefl_compress_normal1128:
	# %1129 = phi i1 [0, %1122], [0, %1116], [%1127, %1125]
	# %1130 = xor i1 %1129, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %1131 = zext i1 %1130 to i32
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %1132 = sext i32 %1131 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# br i1 %1130, label %1133, label %1134
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1134
	jmp	tdefl_compress_normal1133
	.text
tdefl_compress_normal1133:
	# call void @__assert_rtn (i8* @__func__.tdefl_record_match, i8* @.str.11, i32 3153, i8* @.str.70)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_record_match(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$3153, %rax
	pushq	%rax
	leaq	_.str.70(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_normal1134:
	# %1135 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1136 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1137 = getelementptr %struct.tdefl_compressor, i8* %1136, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1138 = load i32, i32* %1137
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1139 = add i32 %1138, %1135
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1139, i32* %1137
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1140 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1141 = sub i32 %1140, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1142 = trunc i32 %1141 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1143 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1144 = getelementptr %struct.tdefl_compressor, i8* %1143, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1145 = load i8*, i8** %1144
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1142, i8* %1145
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1146 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1147 = sub i32 %1146, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1147, i32* %14
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1148 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1149 = and i32 %1148, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1150 = trunc i32 %1149 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1151 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1152 = getelementptr %struct.tdefl_compressor, i8* %1151, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1153 = load i8*, i8** %1152
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1154 = getelementptr i8, i8* %1153, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1150, i8* %1154
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1155 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1156 = lshr i32 %1155, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1157 = trunc i32 %1156 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1158 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1159 = getelementptr %struct.tdefl_compressor, i8* %1158, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1160 = load i8*, i8** %1159
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1161 = getelementptr i8, i8* %1160, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1157, i8* %1161
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1162 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1163 = getelementptr %struct.tdefl_compressor, i8* %1162, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1164 = load i8*, i8** %1163
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1165 = getelementptr i8, i8* %1164, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1165, i8** %1163
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %1166 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1167 = getelementptr %struct.tdefl_compressor, i8* %1166, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1168 = load i8*, i8** %1167
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1169 = load i8, i8* %1168
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1170 = zext i8 %1169 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1171 = ashr i32 %1170, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %1172 = or i32 %1171, 128
	movq	%rdx, %rax
	movq	$128, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1173 = trunc i32 %1172 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1174 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1175 = getelementptr %struct.tdefl_compressor, i8* %1174, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1176 = load i8*, i8** %1175
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1173, i8* %1176
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1177 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1178 = getelementptr %struct.tdefl_compressor, i8* %1177, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1179 = load i32, i32* %1178
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1180 = add i32 %1179, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1180, i32* %1178
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1181 = icmp eq i32 %1180, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1181, label %1182, label %1191
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1191
	jmp	tdefl_compress_normal1182
	.text
tdefl_compress_normal1182:
	# %1183 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1184 = getelementptr %struct.tdefl_compressor, i8* %1183, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 8, i32* %1184
	movq	$8, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1185 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1186 = getelementptr %struct.tdefl_compressor, i8* %1185, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1187 = load i8*, i8** %1186
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1188 = getelementptr i8, i8* %1187, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1188, i8** %1186
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %1189 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1190 = getelementptr %struct.tdefl_compressor, i8* %1189, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1187, i8** %1190
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %1191
	jmp	tdefl_compress_normal1191
	.text
tdefl_compress_normal1191:
	# %1192 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1193 = and i32 %1192, 511
	movq	%rdx, %rax
	movq	$511, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1194 = zext i32 %1193 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1195 = getelementptr [512 x i8], i8* @s_tdefl_small_dist_sym, i64 0, i64 %1194
	leaq	_s_tdefl_small_dist_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1196 = load i8, i8* %1195
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1197 = zext i8 %1196 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1197, i32* %15
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1198 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1199 = lshr i32 %1198, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1200 = and i32 %1199, 127
	movq	%rdx, %rax
	movq	$127, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1201 = zext i32 %1200 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1202 = getelementptr [128 x i8], i8* @s_tdefl_large_dist_sym, i64 0, i64 %1201
	leaq	_s_tdefl_large_dist_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1203 = load i8, i8* %1202
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1204 = zext i8 %1203 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1204, i32* %16
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1205 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1206 = getelementptr %struct.tdefl_compressor, i8* %1205, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1207 = getelementptr [3 x [288 x i16]], i8* %1206, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1208 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1209 = icmp ult i32 %1208, 512
	movq	%rdx, %rax
	movq	$512, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1209, label %1210, label %1212
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1212
	jmp	tdefl_compress_normal1210
	.text
tdefl_compress_normal1210:
	# %1211 = load i32, i32* %15
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# br label %1214
	movq	%r10, %rdx
	jmp	tdefl_compress_normal1214
	.text
tdefl_compress_normal1212:
	# %1213 = load i32, i32* %16
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# br label %1214
	movq	%r9, %rdx
	jmp	tdefl_compress_normal1214
	.text
tdefl_compress_normal1214:
	# %1215 = phi i32 [%1211, %1210], [%1213, %1212]
	# %1216 = zext i32 %1215 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1217 = getelementptr [288 x i16], i8* %1207, i64 0, i64 %1216
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1218 = load i16, i16* %1217
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1219 = add i16 %1218, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i16 %1219, i16* %1217
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %1220 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1221 = getelementptr %struct.tdefl_compressor, i8* %1220, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1222 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1223 = sub i32 %1222, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1224 = zext i32 %1223 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1225 = getelementptr [256 x i16], i8* @s_tdefl_len_sym, i64 0, i64 %1224
	leaq	_s_tdefl_len_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1226 = load i16, i16* %1225
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1227 = zext i16 %1226 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1228 = getelementptr [288 x i16], i8* %1221, i64 0, i64 %1227
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1229 = load i16, i16* %1228
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1230 = add i16 %1229, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i16 %1230, i16* %1228
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %1231 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1231, i32* %44
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1255
	jmp	tdefl_compress_normal1255
	.text
tdefl_compress_normal1232:
	# %1233 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1234 = getelementptr %struct.tdefl_compressor, i8* %1233, i32 0, i32 35
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1235 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1236 = zext i32 %1235 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1237 = icmp ult i64 %1236, 33024
	movq	%rdx, %rax
	movq	$33024, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1237, label %1238, label %1241
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1241
	jmp	tdefl_compress_normal1238
	.text
tdefl_compress_normal1238:
	# %1239 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1240 = zext i32 %1239 to i64
	movq	%rdx, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# br label %1242
	movq	%r8, %rdx
	jmp	tdefl_compress_normal1242
	.text
tdefl_compress_normal1241:
	# br label %1242
	movq	$33024, %rdx
	jmp	tdefl_compress_normal1242
	.text
tdefl_compress_normal1242:
	# %1243 = phi i64 [%1240, %1238], [33024, %1241]
	# %1244 = getelementptr [33025 x i8], i8* %1234, i64 0, i64 %1243
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1245 = load i8, i8* %1244
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1246 = zext i8 %1245 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1247 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1248 = getelementptr %struct.tdefl_compressor, i8* %1247, i32 0, i32 20
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$20, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1246, i32* %1248
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1249 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1250 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1251 = getelementptr %struct.tdefl_compressor, i8* %1250, i32 0, i32 18
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1249, i32* %1251
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1252 = load i32, i32* %46
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1253 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1254 = getelementptr %struct.tdefl_compressor, i8* %1253, i32 0, i32 19
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1252, i32* %1254
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1255
	jmp	tdefl_compress_normal1255
	.text
tdefl_compress_normal1255:
	# br label %1256
	jmp	tdefl_compress_normal1256
	.text
tdefl_compress_normal1256:
	# br label %1257
	jmp	tdefl_compress_normal1257
	.text
tdefl_compress_normal1257:
	# %1258 = load i32, i32* %44
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1259 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1260 = getelementptr %struct.tdefl_compressor, i8* %1259, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1261 = load i32, i32* %1260
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1262 = add i32 %1261, %1258
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1262, i32* %1260
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1263 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1264 = getelementptr %struct.tdefl_compressor, i8* %1263, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1265 = load i32, i32* %1264
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1266 = load i32, i32* %44
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1267 = icmp uge i32 %1265, %1266
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# %1268 = xor i1 %1267, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1269 = zext i1 %1268 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1270 = sext i32 %1269 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1271 = icmp ne i64 %1270, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1271, label %1272, label %1274
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1274
	jmp	tdefl_compress_normal1272
	.text
tdefl_compress_normal1272:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_normal, i8* @.str.11, i32 3302, i8* @.str.68)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_normal(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$3302, %rax
	pushq	%rax
	leaq	_.str.68(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_normal1273:
	# br label %1275
	jmp	tdefl_compress_normal1275
	.text
tdefl_compress_normal1274:
	# br label %1275
	jmp	tdefl_compress_normal1275
	.text
tdefl_compress_normal1275:
	# %1276 = load i32, i32* %44
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1277 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1278 = getelementptr %struct.tdefl_compressor, i8* %1277, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1279 = load i32, i32* %1278
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1280 = sub i32 %1279, %1276
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1280, i32* %1278
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1281 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1282 = getelementptr %struct.tdefl_compressor, i8* %1281, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1283 = load i32, i32* %1282
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1284 = load i32, i32* %44
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1285 = add i32 %1283, %1284
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %1286 = icmp ult i32 %1285, 32768
	movq	%rdx, %rax
	movq	$32768, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1286, label %1287, label %1293
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1293
	jmp	tdefl_compress_normal1287
	.text
tdefl_compress_normal1287:
	# %1288 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1289 = getelementptr %struct.tdefl_compressor, i8* %1288, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1290 = load i32, i32* %1289
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1291 = load i32, i32* %44
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1292 = add i32 %1290, %1291
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# br label %1294
	movq	%rsi, %rbx
	jmp	tdefl_compress_normal1294
	.text
tdefl_compress_normal1293:
	# br label %1294
	movq	$32768, %rbx
	jmp	tdefl_compress_normal1294
	.text
tdefl_compress_normal1294:
	# %1295 = phi i32 [%1292, %1287], [32768, %1293]
	# %1296 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1297 = getelementptr %struct.tdefl_compressor, i8* %1296, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1295, i32* %1297
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1298 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1299 = getelementptr %struct.tdefl_compressor, i8* %1298, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1300 = load i8*, i8** %1299
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1301 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1302 = getelementptr %struct.tdefl_compressor, i8* %1301, i32 0, i32 39
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$39, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1303 = getelementptr [65536 x i8], i8* %1302, i64 0, i64 65528
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$65528, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1304 = icmp ugt i8* %1300, %1303
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1304, label %1333, label %1305
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1305
	jmp	tdefl_compress_normal1333
	.text
tdefl_compress_normal1305:
	# %1306 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1307 = getelementptr %struct.tdefl_compressor, i8* %1306, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1308 = load i32, i32* %1307
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1309 = icmp ugt i32 %1308, 31744
	movq	%rdx, %rax
	movq	$31744, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1309, label %1310, label %1349
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1349
	jmp	tdefl_compress_normal1310
	.text
tdefl_compress_normal1310:
	# %1311 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1312 = getelementptr %struct.tdefl_compressor, i8* %1311, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1313 = load i8*, i8** %1312
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1314 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1315 = getelementptr %struct.tdefl_compressor, i8* %1314, i32 0, i32 39
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$39, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1316 = getelementptr [65536 x i8], i8* %1315, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1317 = ptrtoint i8** %1313 to i64
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %1318 = ptrtoint i8** %1316 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1319 = sub i64 %1317, %1318
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1320 = trunc i64 %1319 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1321 = mul i32 %1320, 115
	movq	%rdx, %rax
	movq	$115, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %1322 = lshr i32 %1321, 7
	movq	%rdx, %rax
	movq	$7, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %1323 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1324 = getelementptr %struct.tdefl_compressor, i8* %1323, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1325 = load i32, i32* %1324
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1326 = icmp uge i32 %1322, %1325
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1326, label %1333, label %1327
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1327
	jmp	tdefl_compress_normal1333
	.text
tdefl_compress_normal1327:
	# %1328 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1329 = getelementptr %struct.tdefl_compressor, i8* %1328, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1330 = load i32, i32* %1329
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1331 = and i32 %1330, 524288
	movq	%rdx, %rax
	movq	$524288, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1332 = icmp ne i32 %1331, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1332, label %1333, label %1349
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1349
	jmp	tdefl_compress_normal1333
	.text
tdefl_compress_normal1333:
	# %1334 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1335 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1336 = getelementptr %struct.tdefl_compressor, i8* %1335, i32 0, i32 32
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$32, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1334, i8** %1336
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %1337 = load i64, i64* %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1338 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1339 = getelementptr %struct.tdefl_compressor, i8* %1338, i32 0, i32 33
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$33, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1337, i64* %1339
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %1340 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1341 = call i32 @tdefl_flush_block (i8* %1340, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_flush_block
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %1341, i32* %59
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1342 = icmp ne i32 %1341, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1342, label %1343, label %1348
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_normal1348
	jmp	tdefl_compress_normal1343
	.text
tdefl_compress_normal1343:
	# %1344 = load i32, i32* %59
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1345 = icmp slt i32 %1344, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setl	%bl
	# %1346 = zext i1 %1345 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %1347 = select i1 %1345, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	movq	$1, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %1347, i32* %39
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1357
	jmp	tdefl_compress_normal1357
	.text
tdefl_compress_normal1348:
	# br label %1349
	jmp	tdefl_compress_normal1349
	.text
tdefl_compress_normal1349:
	# br label %69
	jmp	tdefl_compress_normal69
	.text
tdefl_compress_normal1350:
	# %1351 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1352 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1353 = getelementptr %struct.tdefl_compressor, i8* %1352, i32 0, i32 32
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$32, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1351, i8** %1353
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %1354 = load i64, i64* %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1355 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1356 = getelementptr %struct.tdefl_compressor, i8* %1355, i32 0, i32 33
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$33, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1354, i64* %1356
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %39
	movq	$1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1357
	jmp	tdefl_compress_normal1357
	.text
tdefl_compress_normal1357:
	# %1358 = load i32, i32* %39
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %1358
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_flush_block
_tdefl_flush_block:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$328, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rdx
	popq	%rbx
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %13 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -80(%rbp)
	# %14 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -88(%rbp)
	# %15 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -96(%rbp)
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -120(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -136(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -160(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -152(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -176(%rbp)
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -192(%rbp)
	# %28 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -208(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -224(%rbp)
	# %32 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %33 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -240(%rbp)
	# %34 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %35 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -256(%rbp)
	# %36 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -264(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -272(%rbp)
	# %38 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -280(%rbp)
	# %39 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -288(%rbp)
	# %40 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -296(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -304(%rbp)
	# %42 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -312(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -320(%rbp)
	# %44 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %46 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %47 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %48 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# store i8* %0, i8** %4
	movq	%rbx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %5
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %49 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %50 = getelementptr %struct.tdefl_compressor, i8* %49, i32 0, i32 2
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %51 = load i32, i32* %50
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %52 = and i32 %51, 524288
	movq	%r10, %rax
	movq	$524288, %rcx
	andq	%rcx, %rax
	movq	%rax, %r10
	# %53 = icmp ne i32 %52, 0
	movq	%r10, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r10
	setne	%r10b
	# br i1 %53, label %54, label %66
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block66
	jmp	tdefl_flush_block54
	.text
tdefl_flush_block54:
	# %55 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %56 = getelementptr %struct.tdefl_compressor, i8* %55, i32 0, i32 6
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %57 = load i32, i32* %56
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %58 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %59 = getelementptr %struct.tdefl_compressor, i8* %58, i32 0, i32 15
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %60 = load i32, i32* %59
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %61 = sub i32 %57, %60
	movq	%r10, %rax
	movq	%r9, %rcx
	subq	%rcx, %rax
	movq	%rax, %r10
	# %62 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %63 = getelementptr %struct.tdefl_compressor, i8* %62, i32 0, i32 8
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %64 = load i32, i32* %63
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %65 = icmp ule i32 %61, %64
	movq	%r10, %rax
	movq	%r9, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r9
	setbe	%r9b
	# br label %66
	jmp	tdefl_flush_block66
	.text
tdefl_flush_block66:
	# %67 = phi i1 [0, %2], [%65, %54]
	# %68 = zext i1 %67 to i32
	movq	%r9, %rax
	movq	%rax, %r9
	# store i32 %68, i32* %11
	movq	%r9, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %69 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %70 = getelementptr %struct.tdefl_compressor, i8* %69, i32 0, i32 0
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %71 = load i8*, i8** %70
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %72 = icmp eq i8* %71, null
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	sete	%r9b
	# br i1 %72, label %73, label %91
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block91
	jmp	tdefl_flush_block73
	.text
tdefl_flush_block73:
	# %74 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %75 = getelementptr %struct.tdefl_compressor, i8* %74, i32 0, i32 30
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %76 = load i8*, i8** %75
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %77 = load i64, i64* %76
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %78 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %79 = getelementptr %struct.tdefl_compressor, i8* %78, i32 0, i32 34
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %80 = load i64, i64* %79
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %81 = sub i64 %77, %80
	movq	%r10, %rax
	movq	%r9, %rcx
	subq	%rcx, %rax
	movq	%rax, %r9
	# %82 = icmp uge i64 %81, 85196
	movq	%r9, %rax
	movq	$85196, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setnb	%r9b
	# br i1 %82, label %83, label %91
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block91
	jmp	tdefl_flush_block83
	.text
tdefl_flush_block83:
	# %84 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %85 = getelementptr %struct.tdefl_compressor, i8* %84, i32 0, i32 28
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$28, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %86 = load i8*, i8** %85
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %87 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %88 = getelementptr %struct.tdefl_compressor, i8* %87, i32 0, i32 34
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %89 = load i64, i64* %88
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %90 = getelementptr i8, i8* %86, i64 %89
	movq	%r9, %rcx
	movq	%r8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# br label %95
	movq	%r8, %rdi
	jmp	tdefl_flush_block95
	.text
tdefl_flush_block91:
	# %92 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %93 = getelementptr %struct.tdefl_compressor, i8* %92, i32 0, i32 42
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$42, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %94 = getelementptr [85196 x i8], i8* %93, i64 0, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$85196, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# br label %95
	jmp	tdefl_flush_block95
	.text
tdefl_flush_block95:
	# %96 = phi i8* [%90, %83], [%94, %91]
	# store i8* %96, i8** %12
	movq	%rdi, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# %97 = load i8*, i8** %12
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %98 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %99 = getelementptr %struct.tdefl_compressor, i8* %98, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %97, i8** %99
	movq	%r8, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %100 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %101 = getelementptr %struct.tdefl_compressor, i8* %100, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %102 = load i8*, i8** %101
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %103 = getelementptr i8, i8* %102, i64 85196
	movq	%rdi, %rcx
	movq	$85196, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %104 = getelementptr i8, i8* %103, i64 -16
	movq	%rdi, %rcx
	movq	$-16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %105 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %106 = getelementptr %struct.tdefl_compressor, i8* %105, i32 0, i32 12
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %104, i8** %106
	movq	%r8, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %107 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %108 = getelementptr %struct.tdefl_compressor, i8* %107, i32 0, i32 22
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %109 = load i32, i32* %108
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %110 = icmp ne i32 %109, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# %111 = xor i1 %110, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdi
	# %112 = xor i1 %111, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdi
	# %113 = zext i1 %112 to i32
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %114 = sext i32 %113 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %115 = icmp ne i64 %114, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %115, label %116, label %118
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block118
	jmp	tdefl_flush_block116
	.text
tdefl_flush_block116:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2692, i8* @.str.71)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2692, %rax
	pushq	%rax
	leaq	_.str.71(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block117:
	# br label %119
	jmp	tdefl_flush_block119
	.text
tdefl_flush_block118:
	# br label %119
	jmp	tdefl_flush_block119
	.text
tdefl_flush_block119:
	# %120 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %121 = getelementptr %struct.tdefl_compressor, i8* %120, i32 0, i32 21
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i32 0, i32* %121
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %122 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %123 = getelementptr %struct.tdefl_compressor, i8* %122, i32 0, i32 22
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i32 0, i32* %123
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %124 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %125 = getelementptr %struct.tdefl_compressor, i8* %124, i32 0, i32 10
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %126 = load i8*, i8** %125
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %127 = load i8, i8* %126
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %128 = zext i8 %127 to i32
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %129 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %130 = getelementptr %struct.tdefl_compressor, i8* %129, i32 0, i32 13
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %131 = load i32, i32* %130
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %132 = ashr i32 %128, %131
	movq	%r8, %rax
	movq	%rdi, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdi
	# %133 = trunc i32 %132 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %134 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %135 = getelementptr %struct.tdefl_compressor, i8* %134, i32 0, i32 10
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %136 = load i8*, i8** %135
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %133, i8* %136
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %137 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %138 = getelementptr %struct.tdefl_compressor, i8* %137, i32 0, i32 13
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %139 = load i32, i32* %138
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %140 = icmp eq i32 %139, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# %141 = zext i1 %140 to i32
	movq	%rdi, %rax
	movq	%rax, %r10
	# %142 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %143 = getelementptr %struct.tdefl_compressor, i8* %142, i32 0, i32 9
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %144 = load i8*, i8** %143
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %145 = sext i32 %141 to i64
	movq	%r10, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %146 = sub i64 0, %145
	movq	$0, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# %147 = getelementptr i8, i8* %144, i64 %146
	movq	%r8, %rcx
	movq	%rdi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %147, i8** %143
	movq	%rdi, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %148 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %149 = getelementptr %struct.tdefl_compressor, i8* %148, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %150 = load i32, i32* %149
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %151 = and i32 %150, 4096
	movq	%rdi, %rax
	movq	$4096, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %152 = icmp ne i32 %151, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %152, label %153, label %329
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block329
	jmp	tdefl_flush_block153
	.text
tdefl_flush_block153:
	# %154 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %155 = getelementptr %struct.tdefl_compressor, i8* %154, i32 0, i32 24
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$24, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %156 = load i32, i32* %155
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %157 = icmp ne i32 %156, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %157, label %329, label %158
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block158
	jmp	tdefl_flush_block329
	.text
tdefl_flush_block158:
	# store i8 120, i8* %13
	movq	$120, %rax
	movq	-80(%rbp), %rcx
	movb	%al, (%rcx)
	# store i8 3, i8* %15
	movq	$3, %rax
	movq	-96(%rbp), %rcx
	movb	%al, (%rcx)
	# store i32 11, i32* %18
	movq	$11, %rax
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %17
	movq	$0, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %159
	jmp	tdefl_flush_block159
	.text
tdefl_flush_block159:
	# %160 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %161 = load i32, i32* %18
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %162 = icmp ult i32 %160, %161
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setb	%dil
	# br i1 %162, label %163, label %178
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block178
	jmp	tdefl_flush_block163
	.text
tdefl_flush_block163:
	# %164 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %165 = zext i32 %164 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %166 = getelementptr [11 x i32], i8* @s_tdefl_num_probes, i64 0, i64 %165
	leaq	_s_tdefl_num_probes(%rip), %rcx
	movq	$0, %rax
	imulq	$44, %rax
	addq	%rax, %rcx
	movq	%rdi, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %167 = load i32, i32* %166
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %168 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %169 = getelementptr %struct.tdefl_compressor, i8* %168, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %170 = load i32, i32* %169
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %171 = and i32 %170, 4095
	movq	%rdi, %rax
	movq	$4095, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %172 = icmp eq i32 %167, %171
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# br i1 %172, label %173, label %174
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block174
	jmp	tdefl_flush_block173
	.text
tdefl_flush_block173:
	# br label %178
	jmp	tdefl_flush_block178
	.text
tdefl_flush_block174:
	# br label %175
	jmp	tdefl_flush_block175
	.text
tdefl_flush_block175:
	# %176 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %177 = add i32 %176, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %177, i32* %17
	movq	%rdi, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %159
	jmp	tdefl_flush_block159
	.text
tdefl_flush_block178:
	# %179 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %180 = icmp ult i32 %179, 2
	movq	%rdi, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setb	%dil
	# br i1 %180, label %181, label %182
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block182
	jmp	tdefl_flush_block181
	.text
tdefl_flush_block181:
	# store i8 0, i8* %15
	movq	$0, %rax
	movq	-96(%rbp), %rcx
	movb	%al, (%rcx)
	# br label %192
	jmp	tdefl_flush_block192
	.text
tdefl_flush_block182:
	# %183 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %184 = icmp ult i32 %183, 6
	movq	%rdi, %rax
	movq	$6, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setb	%dil
	# br i1 %184, label %185, label %186
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block186
	jmp	tdefl_flush_block185
	.text
tdefl_flush_block185:
	# store i8 1, i8* %15
	movq	$1, %rax
	movq	-96(%rbp), %rcx
	movb	%al, (%rcx)
	# br label %191
	jmp	tdefl_flush_block191
	.text
tdefl_flush_block186:
	# %187 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %188 = icmp eq i32 %187, 6
	movq	%rdi, %rax
	movq	$6, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# br i1 %188, label %189, label %190
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block190
	jmp	tdefl_flush_block189
	.text
tdefl_flush_block189:
	# store i8 2, i8* %15
	movq	$2, %rax
	movq	-96(%rbp), %rcx
	movb	%al, (%rcx)
	# br label %190
	jmp	tdefl_flush_block190
	.text
tdefl_flush_block190:
	# br label %191
	jmp	tdefl_flush_block191
	.text
tdefl_flush_block191:
	# br label %192
	jmp	tdefl_flush_block192
	.text
tdefl_flush_block192:
	# %193 = load i8, i8* %15
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %194 = zext i8 %193 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %195 = shl i32 %194, 6
	movq	%rdi, %rax
	movq	$6, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %196 = or i32 30720, %195
	movq	$30720, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %196, i32* %16
	movq	%rdi, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %197 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %198 = urem i32 %197, 31
	pushq	%rdx
	movq	%rdi, %rax
	movq	$31, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %rdi
	popq	%rdx
	# %199 = sub i32 31, %198
	movq	$31, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %r8
	# %200 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %201 = add i32 %200, %199
	movq	%rdi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %201, i32* %16
	movq	%rdi, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %202 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %203 = and i32 %202, 255
	movq	%rdi, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %204 = trunc i32 %203 to i8
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# store i8 %204, i8* %14
	movq	%rdi, %rax
	movq	-88(%rbp), %rcx
	movb	%al, (%rcx)
	# br label %205
	jmp	tdefl_flush_block205
	.text
tdefl_flush_block205:
	# store i32 120, i32* %19
	movq	$120, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 8, i32* %20
	movq	$8, %rax
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	# %206 = load i32, i32* %19
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %207 = load i32, i32* %20
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %208 = shl i32 1, %207
	movq	$1, %rax
	movq	%rdi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %209 = sub i32 %208, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# %210 = icmp ule i32 %206, %209
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setbe	%dil
	# %211 = xor i1 %210, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdi
	# %212 = zext i1 %211 to i32
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %213 = sext i32 %212 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %214 = icmp ne i64 %213, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %214, label %215, label %217
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block217
	jmp	tdefl_flush_block215
	.text
tdefl_flush_block215:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2720, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2720, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block216:
	# br label %218
	jmp	tdefl_flush_block218
	.text
tdefl_flush_block217:
	# br label %218
	jmp	tdefl_flush_block218
	.text
tdefl_flush_block218:
	# %219 = load i32, i32* %19
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %220 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %221 = getelementptr %struct.tdefl_compressor, i8* %220, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %222 = load i32, i32* %221
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %223 = shl i32 %219, %222
	movq	%r8, %rax
	movq	%rdi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r9
	# %224 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %225 = getelementptr %struct.tdefl_compressor, i8* %224, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %226 = load i32, i32* %225
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %227 = or i32 %226, %223
	movq	%rdi, %rax
	movq	%r9, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %227, i32* %225
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %228 = load i32, i32* %20
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %229 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %230 = getelementptr %struct.tdefl_compressor, i8* %229, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %231 = load i32, i32* %230
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %232 = add i32 %231, %228
	movq	%rdi, %rax
	movq	%r9, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %232, i32* %230
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %233
	jmp	tdefl_flush_block233
	.text
tdefl_flush_block233:
	# %234 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %235 = getelementptr %struct.tdefl_compressor, i8* %234, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %236 = load i32, i32* %235
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %237 = icmp uge i32 %236, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setnb	%dil
	# br i1 %237, label %238, label %264
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block264
	jmp	tdefl_flush_block238
	.text
tdefl_flush_block238:
	# %239 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %240 = getelementptr %struct.tdefl_compressor, i8* %239, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %241 = load i8*, i8** %240
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %242 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %243 = getelementptr %struct.tdefl_compressor, i8* %242, i32 0, i32 12
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %244 = load i8*, i8** %243
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %245 = icmp ult i8* %241, %244
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setb	%dil
	# br i1 %245, label %246, label %255
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block255
	jmp	tdefl_flush_block246
	.text
tdefl_flush_block246:
	# %247 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %248 = getelementptr %struct.tdefl_compressor, i8* %247, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %249 = load i32, i32* %248
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %250 = trunc i32 %249 to i8
	movq	%rdi, %rax
	movq	$0, %r10
	movb	%al, %r10b
	# %251 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %252 = getelementptr %struct.tdefl_compressor, i8* %251, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %253 = load i8*, i8** %252
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %254 = getelementptr i8, i8* %253, i32 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %254, i8** %252
	movq	%rdi, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8 %250, i8* %253
	movq	%r10, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# br label %255
	jmp	tdefl_flush_block255
	.text
tdefl_flush_block255:
	# %256 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %257 = getelementptr %struct.tdefl_compressor, i8* %256, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %258 = load i32, i32* %257
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %259 = lshr i32 %258, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# store i32 %259, i32* %257
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %260 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %261 = getelementptr %struct.tdefl_compressor, i8* %260, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %262 = load i32, i32* %261
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %263 = sub i32 %262, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %263, i32* %261
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %233
	jmp	tdefl_flush_block233
	.text
tdefl_flush_block264:
	# br label %265
	jmp	tdefl_flush_block265
	.text
tdefl_flush_block265:
	# br label %266
	jmp	tdefl_flush_block266
	.text
tdefl_flush_block266:
	# %267 = load i8, i8* %14
	movq	-88(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %268 = zext i8 %267 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# store i32 %268, i32* %21
	movq	%rdi, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 8, i32* %22
	movq	$8, %rax
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	# %269 = load i32, i32* %21
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %270 = load i32, i32* %22
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %271 = shl i32 1, %270
	movq	$1, %rax
	movq	%rdi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %272 = sub i32 %271, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# %273 = icmp ule i32 %269, %272
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setbe	%dil
	# %274 = xor i1 %273, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdi
	# %275 = zext i1 %274 to i32
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %276 = sext i32 %275 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %277 = icmp ne i64 %276, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %277, label %278, label %280
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block280
	jmp	tdefl_flush_block278
	.text
tdefl_flush_block278:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2721, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2721, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block279:
	# br label %281
	jmp	tdefl_flush_block281
	.text
tdefl_flush_block280:
	# br label %281
	jmp	tdefl_flush_block281
	.text
tdefl_flush_block281:
	# %282 = load i32, i32* %21
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %283 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %284 = getelementptr %struct.tdefl_compressor, i8* %283, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %285 = load i32, i32* %284
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %286 = shl i32 %282, %285
	movq	%r8, %rax
	movq	%rdi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r9
	# %287 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %288 = getelementptr %struct.tdefl_compressor, i8* %287, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %289 = load i32, i32* %288
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %290 = or i32 %289, %286
	movq	%rdi, %rax
	movq	%r9, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %290, i32* %288
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %291 = load i32, i32* %22
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %292 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %293 = getelementptr %struct.tdefl_compressor, i8* %292, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %294 = load i32, i32* %293
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %295 = add i32 %294, %291
	movq	%rdi, %rax
	movq	%r9, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %295, i32* %293
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %296
	jmp	tdefl_flush_block296
	.text
tdefl_flush_block296:
	# %297 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %298 = getelementptr %struct.tdefl_compressor, i8* %297, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %299 = load i32, i32* %298
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %300 = icmp uge i32 %299, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setnb	%dil
	# br i1 %300, label %301, label %327
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block327
	jmp	tdefl_flush_block301
	.text
tdefl_flush_block301:
	# %302 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %303 = getelementptr %struct.tdefl_compressor, i8* %302, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %304 = load i8*, i8** %303
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %305 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %306 = getelementptr %struct.tdefl_compressor, i8* %305, i32 0, i32 12
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %307 = load i8*, i8** %306
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %308 = icmp ult i8* %304, %307
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setb	%dil
	# br i1 %308, label %309, label %318
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block318
	jmp	tdefl_flush_block309
	.text
tdefl_flush_block309:
	# %310 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %311 = getelementptr %struct.tdefl_compressor, i8* %310, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %312 = load i32, i32* %311
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %313 = trunc i32 %312 to i8
	movq	%rdi, %rax
	movq	$0, %r10
	movb	%al, %r10b
	# %314 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %315 = getelementptr %struct.tdefl_compressor, i8* %314, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %316 = load i8*, i8** %315
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %317 = getelementptr i8, i8* %316, i32 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %317, i8** %315
	movq	%rdi, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8 %313, i8* %316
	movq	%r10, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# br label %318
	jmp	tdefl_flush_block318
	.text
tdefl_flush_block318:
	# %319 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %320 = getelementptr %struct.tdefl_compressor, i8* %319, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %321 = load i32, i32* %320
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %322 = lshr i32 %321, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# store i32 %322, i32* %320
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %323 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %324 = getelementptr %struct.tdefl_compressor, i8* %323, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %325 = load i32, i32* %324
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %326 = sub i32 %325, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %326, i32* %324
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %296
	jmp	tdefl_flush_block296
	.text
tdefl_flush_block327:
	# br label %328
	jmp	tdefl_flush_block328
	.text
tdefl_flush_block328:
	# br label %329
	jmp	tdefl_flush_block329
	.text
tdefl_flush_block329:
	# br label %330
	jmp	tdefl_flush_block330
	.text
tdefl_flush_block330:
	# %331 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %332 = icmp eq i32 %331, 4
	movq	%rdi, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# %333 = zext i1 %332 to i32
	movq	%rdi, %rax
	movq	%rax, %rdi
	# store i32 %333, i32* %23
	movq	%rdi, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %24
	movq	$1, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# %334 = load i32, i32* %23
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %335 = load i32, i32* %24
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %336 = shl i32 1, %335
	movq	$1, %rax
	movq	%rdi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %337 = sub i32 %336, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# %338 = icmp ule i32 %334, %337
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setbe	%dil
	# %339 = xor i1 %338, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdi
	# %340 = zext i1 %339 to i32
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %341 = sext i32 %340 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %342 = icmp ne i64 %341, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %342, label %343, label %345
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block345
	jmp	tdefl_flush_block343
	.text
tdefl_flush_block343:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2724, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2724, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block344:
	# br label %346
	jmp	tdefl_flush_block346
	.text
tdefl_flush_block345:
	# br label %346
	jmp	tdefl_flush_block346
	.text
tdefl_flush_block346:
	# %347 = load i32, i32* %23
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %348 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %349 = getelementptr %struct.tdefl_compressor, i8* %348, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %350 = load i32, i32* %349
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %351 = shl i32 %347, %350
	movq	%r8, %rax
	movq	%rdi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r9
	# %352 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %353 = getelementptr %struct.tdefl_compressor, i8* %352, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %354 = load i32, i32* %353
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %355 = or i32 %354, %351
	movq	%rdi, %rax
	movq	%r9, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %355, i32* %353
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %356 = load i32, i32* %24
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %357 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %358 = getelementptr %struct.tdefl_compressor, i8* %357, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %359 = load i32, i32* %358
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %360 = add i32 %359, %356
	movq	%rdi, %rax
	movq	%r9, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %360, i32* %358
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %361
	jmp	tdefl_flush_block361
	.text
tdefl_flush_block361:
	# %362 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %363 = getelementptr %struct.tdefl_compressor, i8* %362, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %364 = load i32, i32* %363
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %365 = icmp uge i32 %364, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setnb	%dil
	# br i1 %365, label %366, label %392
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block392
	jmp	tdefl_flush_block366
	.text
tdefl_flush_block366:
	# %367 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %368 = getelementptr %struct.tdefl_compressor, i8* %367, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %369 = load i8*, i8** %368
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %370 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %371 = getelementptr %struct.tdefl_compressor, i8* %370, i32 0, i32 12
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %372 = load i8*, i8** %371
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %373 = icmp ult i8* %369, %372
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setb	%dil
	# br i1 %373, label %374, label %383
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block383
	jmp	tdefl_flush_block374
	.text
tdefl_flush_block374:
	# %375 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %376 = getelementptr %struct.tdefl_compressor, i8* %375, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %377 = load i32, i32* %376
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %378 = trunc i32 %377 to i8
	movq	%rdi, %rax
	movq	$0, %r10
	movb	%al, %r10b
	# %379 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %380 = getelementptr %struct.tdefl_compressor, i8* %379, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %381 = load i8*, i8** %380
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %382 = getelementptr i8, i8* %381, i32 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %382, i8** %380
	movq	%rdi, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8 %378, i8* %381
	movq	%r10, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# br label %383
	jmp	tdefl_flush_block383
	.text
tdefl_flush_block383:
	# %384 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %385 = getelementptr %struct.tdefl_compressor, i8* %384, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %386 = load i32, i32* %385
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %387 = lshr i32 %386, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# store i32 %387, i32* %385
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %388 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %389 = getelementptr %struct.tdefl_compressor, i8* %388, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %390 = load i32, i32* %389
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %391 = sub i32 %390, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %391, i32* %389
	movq	%rdi, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %361
	jmp	tdefl_flush_block361
	.text
tdefl_flush_block392:
	# br label %393
	jmp	tdefl_flush_block393
	.text
tdefl_flush_block393:
	# %394 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %395 = getelementptr %struct.tdefl_compressor, i8* %394, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %396 = load i8*, i8** %395
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8* %396, i8** %8
	movq	%rdi, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# %397 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %398 = getelementptr %struct.tdefl_compressor, i8* %397, i32 0, i32 17
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %399 = load i32, i32* %398
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# store i32 %399, i32* %6
	movq	%rdi, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %400 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %401 = getelementptr %struct.tdefl_compressor, i8* %400, i32 0, i32 16
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %402 = load i32, i32* %401
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# store i32 %402, i32* %7
	movq	%rdi, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %403 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %404 = icmp ne i32 %403, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %404, label %421, label %405
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block405
	jmp	tdefl_flush_block421
	.text
tdefl_flush_block405:
	# %406 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %407 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %408 = getelementptr %struct.tdefl_compressor, i8* %407, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %409 = load i32, i32* %408
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %410 = and i32 %409, 262144
	movq	%rdi, %rax
	movq	$262144, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %411 = icmp ne i32 %410, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %411, label %417, label %412
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rsi
	je	tdefl_flush_block412
	jmp	tdefl_flush_block417
	.text
tdefl_flush_block412:
	# %413 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %414 = getelementptr %struct.tdefl_compressor, i8* %413, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %415 = load i32, i32* %414
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %416 = icmp ult i32 %415, 48
	movq	%rsi, %rax
	movq	$48, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setb	%sil
	# br label %417
	jmp	tdefl_flush_block417
	.text
tdefl_flush_block417:
	# %418 = phi i1 [1, %405], [%416, %412]
	# %419 = zext i1 %418 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %420 = call i32 @tdefl_compress_block (i8* %406, i32 %419)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_block
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i32 %420, i32* %9
	movq	%rsi, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %421
	jmp	tdefl_flush_block421
	.text
tdefl_flush_block421:
	# %422 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %423 = icmp ne i32 %422, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %423, label %443, label %424
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block424
	jmp	tdefl_flush_block443
	.text
tdefl_flush_block424:
	# %425 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %426 = getelementptr %struct.tdefl_compressor, i8* %425, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %427 = load i32, i32* %426
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %428 = icmp ne i32 %427, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %428, label %429, label %758
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block758
	jmp	tdefl_flush_block429
	.text
tdefl_flush_block429:
	# %430 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %431 = getelementptr %struct.tdefl_compressor, i8* %430, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %432 = load i8*, i8** %431
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %433 = load i8*, i8** %8
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %434 = ptrtoint i8** %432 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %435 = ptrtoint i8** %433 to i64
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %436 = sub i64 %434, %435
	movq	%rdi, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %437 = add i64 %436, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %438 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %439 = getelementptr %struct.tdefl_compressor, i8* %438, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %440 = load i32, i32* %439
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %441 = zext i32 %440 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %442 = icmp sge i64 %437, %441
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setge	%sil
	# br i1 %442, label %443, label %758
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block758
	jmp	tdefl_flush_block443
	.text
tdefl_flush_block443:
	# %444 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %445 = getelementptr %struct.tdefl_compressor, i8* %444, i32 0, i32 6
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %446 = load i32, i32* %445
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %447 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %448 = getelementptr %struct.tdefl_compressor, i8* %447, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %449 = load i32, i32* %448
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %450 = sub i32 %446, %449
	movq	%rdi, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# %451 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %452 = getelementptr %struct.tdefl_compressor, i8* %451, i32 0, i32 8
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %453 = load i32, i32* %452
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %454 = icmp ule i32 %450, %453
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# br i1 %454, label %455, label %758
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block758
	jmp	tdefl_flush_block455
	.text
tdefl_flush_block455:
	# %456 = load i8*, i8** %8
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %457 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %458 = getelementptr %struct.tdefl_compressor, i8* %457, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %456, i8** %458
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %459 = load i32, i32* %6
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %460 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %461 = getelementptr %struct.tdefl_compressor, i8* %460, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 %459, i32* %461
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %462 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %463 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %464 = getelementptr %struct.tdefl_compressor, i8* %463, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 %462, i32* %464
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %465
	jmp	tdefl_flush_block465
	.text
tdefl_flush_block465:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 2, i32* %27
	movq	$2, %rax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	# %466 = load i32, i32* %26
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %467 = load i32, i32* %27
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %468 = shl i32 1, %467
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %469 = sub i32 %468, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %470 = icmp ule i32 %466, %469
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %471 = xor i1 %470, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %472 = zext i1 %471 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %473 = sext i32 %472 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %474 = icmp ne i64 %473, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %474, label %475, label %477
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block477
	jmp	tdefl_flush_block475
	.text
tdefl_flush_block475:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2740, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2740, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block476:
	# br label %478
	jmp	tdefl_flush_block478
	.text
tdefl_flush_block477:
	# br label %478
	jmp	tdefl_flush_block478
	.text
tdefl_flush_block478:
	# %479 = load i32, i32* %26
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %480 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %481 = getelementptr %struct.tdefl_compressor, i8* %480, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %482 = load i32, i32* %481
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %483 = shl i32 %479, %482
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %484 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %485 = getelementptr %struct.tdefl_compressor, i8* %484, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %486 = load i32, i32* %485
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %487 = or i32 %486, %483
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %487, i32* %485
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %488 = load i32, i32* %27
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %489 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %490 = getelementptr %struct.tdefl_compressor, i8* %489, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %491 = load i32, i32* %490
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %492 = add i32 %491, %488
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %492, i32* %490
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %493
	jmp	tdefl_flush_block493
	.text
tdefl_flush_block493:
	# %494 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %495 = getelementptr %struct.tdefl_compressor, i8* %494, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %496 = load i32, i32* %495
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %497 = icmp uge i32 %496, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %497, label %498, label %524
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block524
	jmp	tdefl_flush_block498
	.text
tdefl_flush_block498:
	# %499 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %500 = getelementptr %struct.tdefl_compressor, i8* %499, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %501 = load i8*, i8** %500
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %502 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %503 = getelementptr %struct.tdefl_compressor, i8* %502, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %504 = load i8*, i8** %503
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %505 = icmp ult i8* %501, %504
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %505, label %506, label %515
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block515
	jmp	tdefl_flush_block506
	.text
tdefl_flush_block506:
	# %507 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %508 = getelementptr %struct.tdefl_compressor, i8* %507, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %509 = load i32, i32* %508
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %510 = trunc i32 %509 to i8
	movq	%rsi, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %511 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %512 = getelementptr %struct.tdefl_compressor, i8* %511, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %513 = load i8*, i8** %512
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %514 = getelementptr i8, i8* %513, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %514, i8** %512
	movq	%rsi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8 %510, i8* %513
	movq	%r9, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %515
	jmp	tdefl_flush_block515
	.text
tdefl_flush_block515:
	# %516 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %517 = getelementptr %struct.tdefl_compressor, i8* %516, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %518 = load i32, i32* %517
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %519 = lshr i32 %518, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %519, i32* %517
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %520 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %521 = getelementptr %struct.tdefl_compressor, i8* %520, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %522 = load i32, i32* %521
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %523 = sub i32 %522, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %523, i32* %521
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %493
	jmp	tdefl_flush_block493
	.text
tdefl_flush_block524:
	# br label %525
	jmp	tdefl_flush_block525
	.text
tdefl_flush_block525:
	# %526 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %527 = getelementptr %struct.tdefl_compressor, i8* %526, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %528 = load i32, i32* %527
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %529 = icmp ne i32 %528, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %529, label %530, label %596
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block596
	jmp	tdefl_flush_block530
	.text
tdefl_flush_block530:
	# br label %531
	jmp	tdefl_flush_block531
	.text
tdefl_flush_block531:
	# store i32 0, i32* %28
	movq	$0, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %532 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %533 = getelementptr %struct.tdefl_compressor, i8* %532, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %534 = load i32, i32* %533
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %535 = sub i32 8, %534
	movq	$8, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %535, i32* %29
	movq	%rsi, %rax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	# %536 = load i32, i32* %28
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %537 = load i32, i32* %29
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %538 = shl i32 1, %537
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %539 = sub i32 %538, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %540 = icmp ule i32 %536, %539
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %541 = xor i1 %540, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %542 = zext i1 %541 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %543 = sext i32 %542 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %544 = icmp ne i64 %543, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %544, label %545, label %547
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block547
	jmp	tdefl_flush_block545
	.text
tdefl_flush_block545:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2743, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2743, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block546:
	# br label %548
	jmp	tdefl_flush_block548
	.text
tdefl_flush_block547:
	# br label %548
	jmp	tdefl_flush_block548
	.text
tdefl_flush_block548:
	# %549 = load i32, i32* %28
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %550 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %551 = getelementptr %struct.tdefl_compressor, i8* %550, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %552 = load i32, i32* %551
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %553 = shl i32 %549, %552
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %554 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %555 = getelementptr %struct.tdefl_compressor, i8* %554, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %556 = load i32, i32* %555
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %557 = or i32 %556, %553
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %557, i32* %555
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %558 = load i32, i32* %29
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %559 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %560 = getelementptr %struct.tdefl_compressor, i8* %559, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %561 = load i32, i32* %560
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %562 = add i32 %561, %558
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %562, i32* %560
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %563
	jmp	tdefl_flush_block563
	.text
tdefl_flush_block563:
	# %564 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %565 = getelementptr %struct.tdefl_compressor, i8* %564, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %566 = load i32, i32* %565
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %567 = icmp uge i32 %566, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %567, label %568, label %594
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block594
	jmp	tdefl_flush_block568
	.text
tdefl_flush_block568:
	# %569 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %570 = getelementptr %struct.tdefl_compressor, i8* %569, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %571 = load i8*, i8** %570
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %572 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %573 = getelementptr %struct.tdefl_compressor, i8* %572, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %574 = load i8*, i8** %573
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %575 = icmp ult i8* %571, %574
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %575, label %576, label %585
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block585
	jmp	tdefl_flush_block576
	.text
tdefl_flush_block576:
	# %577 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %578 = getelementptr %struct.tdefl_compressor, i8* %577, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %579 = load i32, i32* %578
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %580 = trunc i32 %579 to i8
	movq	%rsi, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %581 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %582 = getelementptr %struct.tdefl_compressor, i8* %581, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %583 = load i8*, i8** %582
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %584 = getelementptr i8, i8* %583, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %584, i8** %582
	movq	%rsi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8 %580, i8* %583
	movq	%r9, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %585
	jmp	tdefl_flush_block585
	.text
tdefl_flush_block585:
	# %586 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %587 = getelementptr %struct.tdefl_compressor, i8* %586, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %588 = load i32, i32* %587
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %589 = lshr i32 %588, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %589, i32* %587
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %590 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %591 = getelementptr %struct.tdefl_compressor, i8* %590, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %592 = load i32, i32* %591
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %593 = sub i32 %592, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %593, i32* %591
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %563
	jmp	tdefl_flush_block563
	.text
tdefl_flush_block594:
	# br label %595
	jmp	tdefl_flush_block595
	.text
tdefl_flush_block595:
	# br label %596
	jmp	tdefl_flush_block596
	.text
tdefl_flush_block596:
	# store i32 2, i32* %25
	movq	$2, %rax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %597
	jmp	tdefl_flush_block597
	.text
tdefl_flush_block597:
	# %598 = load i32, i32* %25
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %599 = icmp ne i32 %598, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %599, label %600, label %673
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block673
	jmp	tdefl_flush_block600
	.text
tdefl_flush_block600:
	# br label %601
	jmp	tdefl_flush_block601
	.text
tdefl_flush_block601:
	# %602 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %603 = getelementptr %struct.tdefl_compressor, i8* %602, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %604 = load i32, i32* %603
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %605 = and i32 %604, 65535
	movq	%rsi, %rax
	movq	$65535, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %605, i32* %30
	movq	%rsi, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 16, i32* %31
	movq	$16, %rax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	# %606 = load i32, i32* %30
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %607 = load i32, i32* %31
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %608 = shl i32 1, %607
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %609 = sub i32 %608, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %610 = icmp ule i32 %606, %609
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %611 = xor i1 %610, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %612 = zext i1 %611 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %613 = sext i32 %612 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %614 = icmp ne i64 %613, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %614, label %615, label %617
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block617
	jmp	tdefl_flush_block615
	.text
tdefl_flush_block615:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2747, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2747, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block616:
	# br label %618
	jmp	tdefl_flush_block618
	.text
tdefl_flush_block617:
	# br label %618
	jmp	tdefl_flush_block618
	.text
tdefl_flush_block618:
	# %619 = load i32, i32* %30
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %620 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %621 = getelementptr %struct.tdefl_compressor, i8* %620, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %622 = load i32, i32* %621
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %623 = shl i32 %619, %622
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %624 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %625 = getelementptr %struct.tdefl_compressor, i8* %624, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %626 = load i32, i32* %625
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %627 = or i32 %626, %623
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %627, i32* %625
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %628 = load i32, i32* %31
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %629 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %630 = getelementptr %struct.tdefl_compressor, i8* %629, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %631 = load i32, i32* %630
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %632 = add i32 %631, %628
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %632, i32* %630
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %633
	jmp	tdefl_flush_block633
	.text
tdefl_flush_block633:
	# %634 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %635 = getelementptr %struct.tdefl_compressor, i8* %634, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %636 = load i32, i32* %635
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %637 = icmp uge i32 %636, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %637, label %638, label %664
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block664
	jmp	tdefl_flush_block638
	.text
tdefl_flush_block638:
	# %639 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %640 = getelementptr %struct.tdefl_compressor, i8* %639, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %641 = load i8*, i8** %640
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %642 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %643 = getelementptr %struct.tdefl_compressor, i8* %642, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %644 = load i8*, i8** %643
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %645 = icmp ult i8* %641, %644
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %645, label %646, label %655
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block655
	jmp	tdefl_flush_block646
	.text
tdefl_flush_block646:
	# %647 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %648 = getelementptr %struct.tdefl_compressor, i8* %647, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %649 = load i32, i32* %648
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %650 = trunc i32 %649 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %651 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %652 = getelementptr %struct.tdefl_compressor, i8* %651, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %653 = load i8*, i8** %652
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %654 = getelementptr i8, i8* %653, i32 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %654, i8** %652
	movq	%r8, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8 %650, i8* %653
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# br label %655
	jmp	tdefl_flush_block655
	.text
tdefl_flush_block655:
	# %656 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %657 = getelementptr %struct.tdefl_compressor, i8* %656, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %658 = load i32, i32* %657
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %659 = lshr i32 %658, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %659, i32* %657
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %660 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %661 = getelementptr %struct.tdefl_compressor, i8* %660, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %662 = load i32, i32* %661
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %663 = sub i32 %662, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %663, i32* %661
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %633
	jmp	tdefl_flush_block633
	.text
tdefl_flush_block664:
	# br label %665
	jmp	tdefl_flush_block665
	.text
tdefl_flush_block665:
	# br label %666
	jmp	tdefl_flush_block666
	.text
tdefl_flush_block666:
	# %667 = load i32, i32* %25
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %668 = add i32 %667, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %668, i32* %25
	movq	%rsi, %rax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
	# %669 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %670 = getelementptr %struct.tdefl_compressor, i8* %669, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %671 = load i32, i32* %670
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %672 = xor i32 %671, 65535
	movq	%rsi, %rax
	movq	$65535, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %672, i32* %670
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %597
	jmp	tdefl_flush_block597
	.text
tdefl_flush_block673:
	# store i32 0, i32* %25
	movq	$0, %rax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %674
	jmp	tdefl_flush_block674
	.text
tdefl_flush_block674:
	# %675 = load i32, i32* %25
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %676 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %677 = getelementptr %struct.tdefl_compressor, i8* %676, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %678 = load i32, i32* %677
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %679 = icmp ult i32 %675, %678
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setb	%sil
	# br i1 %679, label %680, label %757
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block757
	jmp	tdefl_flush_block680
	.text
tdefl_flush_block680:
	# br label %681
	jmp	tdefl_flush_block681
	.text
tdefl_flush_block681:
	# %682 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %683 = getelementptr %struct.tdefl_compressor, i8* %682, i32 0, i32 35
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %684 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %685 = getelementptr %struct.tdefl_compressor, i8* %684, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %686 = load i32, i32* %685
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %687 = load i32, i32* %25
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %688 = add i32 %686, %687
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %689 = and i32 %688, 32767
	movq	%rsi, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %690 = zext i32 %689 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %691 = getelementptr [33025 x i8], i8* %683, i64 0, i64 %690
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$33025, %rax
	addq	%rax, %rcx
	movq	%rsi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %692 = load i8, i8* %691
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %693 = zext i8 %692 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# store i32 %693, i32* %32
	movq	%rsi, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 8, i32* %33
	movq	$8, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# %694 = load i32, i32* %32
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %695 = load i32, i32* %33
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %696 = shl i32 1, %695
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %697 = sub i32 %696, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %698 = icmp ule i32 %694, %697
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %699 = xor i1 %698, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %700 = zext i1 %699 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %701 = sext i32 %700 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %702 = icmp ne i64 %701, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %702, label %703, label %705
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block705
	jmp	tdefl_flush_block703
	.text
tdefl_flush_block703:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2751, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2751, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block704:
	# br label %706
	jmp	tdefl_flush_block706
	.text
tdefl_flush_block705:
	# br label %706
	jmp	tdefl_flush_block706
	.text
tdefl_flush_block706:
	# %707 = load i32, i32* %32
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %708 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %709 = getelementptr %struct.tdefl_compressor, i8* %708, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %710 = load i32, i32* %709
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %711 = shl i32 %707, %710
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %712 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %713 = getelementptr %struct.tdefl_compressor, i8* %712, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %714 = load i32, i32* %713
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %715 = or i32 %714, %711
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %715, i32* %713
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %716 = load i32, i32* %33
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %717 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %718 = getelementptr %struct.tdefl_compressor, i8* %717, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %719 = load i32, i32* %718
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %720 = add i32 %719, %716
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %720, i32* %718
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %721
	jmp	tdefl_flush_block721
	.text
tdefl_flush_block721:
	# %722 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %723 = getelementptr %struct.tdefl_compressor, i8* %722, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %724 = load i32, i32* %723
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %725 = icmp uge i32 %724, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %725, label %726, label %752
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block752
	jmp	tdefl_flush_block726
	.text
tdefl_flush_block726:
	# %727 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %728 = getelementptr %struct.tdefl_compressor, i8* %727, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %729 = load i8*, i8** %728
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %730 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %731 = getelementptr %struct.tdefl_compressor, i8* %730, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %732 = load i8*, i8** %731
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %733 = icmp ult i8* %729, %732
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %733, label %734, label %743
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block743
	jmp	tdefl_flush_block734
	.text
tdefl_flush_block734:
	# %735 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %736 = getelementptr %struct.tdefl_compressor, i8* %735, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %737 = load i32, i32* %736
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %738 = trunc i32 %737 to i8
	movq	%rsi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %739 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %740 = getelementptr %struct.tdefl_compressor, i8* %739, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %741 = load i8*, i8** %740
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %742 = getelementptr i8, i8* %741, i32 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# store i8* %742, i8** %740
	movq	%r9, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8 %738, i8* %741
	movq	%r8, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# br label %743
	jmp	tdefl_flush_block743
	.text
tdefl_flush_block743:
	# %744 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %745 = getelementptr %struct.tdefl_compressor, i8* %744, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %746 = load i32, i32* %745
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %747 = lshr i32 %746, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %747, i32* %745
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %748 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %749 = getelementptr %struct.tdefl_compressor, i8* %748, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %750 = load i32, i32* %749
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %751 = sub i32 %750, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %751, i32* %749
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %721
	jmp	tdefl_flush_block721
	.text
tdefl_flush_block752:
	# br label %753
	jmp	tdefl_flush_block753
	.text
tdefl_flush_block753:
	# br label %754
	jmp	tdefl_flush_block754
	.text
tdefl_flush_block754:
	# %755 = load i32, i32* %25
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %756 = add i32 %755, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %756, i32* %25
	movq	%rsi, %rax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %674
	jmp	tdefl_flush_block674
	.text
tdefl_flush_block757:
	# br label %774
	jmp	tdefl_flush_block774
	.text
tdefl_flush_block758:
	# %759 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %760 = icmp ne i32 %759, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %760, label %773, label %761
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block761
	jmp	tdefl_flush_block773
	.text
tdefl_flush_block761:
	# %762 = load i8*, i8** %8
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %763 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %764 = getelementptr %struct.tdefl_compressor, i8* %763, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %762, i8** %764
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %765 = load i32, i32* %6
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %766 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %767 = getelementptr %struct.tdefl_compressor, i8* %766, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 %765, i32* %767
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %768 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %769 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %770 = getelementptr %struct.tdefl_compressor, i8* %769, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 %768, i32* %770
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %771 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %772 = call i32 @tdefl_compress_block (i8* %771, i32 1)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_block
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# br label %773
	jmp	tdefl_flush_block773
	.text
tdefl_flush_block773:
	# br label %774
	jmp	tdefl_flush_block774
	.text
tdefl_flush_block774:
	# %775 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %776 = icmp ne i32 %775, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %776, label %777, label %1143
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1143
	jmp	tdefl_flush_block777
	.text
tdefl_flush_block777:
	# %778 = load i32, i32* %5
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %779 = icmp eq i32 %778, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %779, label %780, label %936
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block936
	jmp	tdefl_flush_block780
	.text
tdefl_flush_block780:
	# %781 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %782 = getelementptr %struct.tdefl_compressor, i8* %781, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %783 = load i32, i32* %782
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %784 = icmp ne i32 %783, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %784, label %785, label %851
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block851
	jmp	tdefl_flush_block785
	.text
tdefl_flush_block785:
	# br label %786
	jmp	tdefl_flush_block786
	.text
tdefl_flush_block786:
	# store i32 0, i32* %34
	movq	$0, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %787 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %788 = getelementptr %struct.tdefl_compressor, i8* %787, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %789 = load i32, i32* %788
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %790 = sub i32 8, %789
	movq	$8, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %790, i32* %35
	movq	%rsi, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# %791 = load i32, i32* %34
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %792 = load i32, i32* %35
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %793 = shl i32 1, %792
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %794 = sub i32 %793, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %795 = icmp ule i32 %791, %794
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %796 = xor i1 %795, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %797 = zext i1 %796 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %798 = sext i32 %797 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %799 = icmp ne i64 %798, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %799, label %800, label %802
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block802
	jmp	tdefl_flush_block800
	.text
tdefl_flush_block800:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2768, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2768, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block801:
	# br label %803
	jmp	tdefl_flush_block803
	.text
tdefl_flush_block802:
	# br label %803
	jmp	tdefl_flush_block803
	.text
tdefl_flush_block803:
	# %804 = load i32, i32* %34
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %805 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %806 = getelementptr %struct.tdefl_compressor, i8* %805, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %807 = load i32, i32* %806
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %808 = shl i32 %804, %807
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %809 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %810 = getelementptr %struct.tdefl_compressor, i8* %809, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %811 = load i32, i32* %810
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %812 = or i32 %811, %808
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %812, i32* %810
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %813 = load i32, i32* %35
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %814 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %815 = getelementptr %struct.tdefl_compressor, i8* %814, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %816 = load i32, i32* %815
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %817 = add i32 %816, %813
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %817, i32* %815
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %818
	jmp	tdefl_flush_block818
	.text
tdefl_flush_block818:
	# %819 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %820 = getelementptr %struct.tdefl_compressor, i8* %819, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %821 = load i32, i32* %820
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %822 = icmp uge i32 %821, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %822, label %823, label %849
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block849
	jmp	tdefl_flush_block823
	.text
tdefl_flush_block823:
	# %824 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %825 = getelementptr %struct.tdefl_compressor, i8* %824, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %826 = load i8*, i8** %825
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %827 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %828 = getelementptr %struct.tdefl_compressor, i8* %827, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %829 = load i8*, i8** %828
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %830 = icmp ult i8* %826, %829
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %830, label %831, label %840
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block840
	jmp	tdefl_flush_block831
	.text
tdefl_flush_block831:
	# %832 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %833 = getelementptr %struct.tdefl_compressor, i8* %832, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %834 = load i32, i32* %833
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %835 = trunc i32 %834 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %836 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %837 = getelementptr %struct.tdefl_compressor, i8* %836, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %838 = load i8*, i8** %837
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %839 = getelementptr i8, i8* %838, i32 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %839, i8** %837
	movq	%r8, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8 %835, i8* %838
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# br label %840
	jmp	tdefl_flush_block840
	.text
tdefl_flush_block840:
	# %841 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %842 = getelementptr %struct.tdefl_compressor, i8* %841, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %843 = load i32, i32* %842
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %844 = lshr i32 %843, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %844, i32* %842
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %845 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %846 = getelementptr %struct.tdefl_compressor, i8* %845, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %847 = load i32, i32* %846
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %848 = sub i32 %847, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %848, i32* %846
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %818
	jmp	tdefl_flush_block818
	.text
tdefl_flush_block849:
	# br label %850
	jmp	tdefl_flush_block850
	.text
tdefl_flush_block850:
	# br label %851
	jmp	tdefl_flush_block851
	.text
tdefl_flush_block851:
	# %852 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %853 = getelementptr %struct.tdefl_compressor, i8* %852, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %854 = load i32, i32* %853
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %855 = and i32 %854, 4096
	movq	%rsi, %rax
	movq	$4096, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %856 = icmp ne i32 %855, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %856, label %857, label %935
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block935
	jmp	tdefl_flush_block857
	.text
tdefl_flush_block857:
	# %858 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %859 = getelementptr %struct.tdefl_compressor, i8* %858, i32 0, i32 5
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %860 = load i32, i32* %859
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i32 %860, i32* %37
	movq	%rsi, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %36
	movq	$0, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %861
	jmp	tdefl_flush_block861
	.text
tdefl_flush_block861:
	# %862 = load i32, i32* %36
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %863 = icmp ult i32 %862, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setb	%sil
	# br i1 %863, label %864, label %934
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block934
	jmp	tdefl_flush_block864
	.text
tdefl_flush_block864:
	# br label %865
	jmp	tdefl_flush_block865
	.text
tdefl_flush_block865:
	# %866 = load i32, i32* %37
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %867 = lshr i32 %866, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %868 = and i32 %867, 255
	movq	%rsi, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %868, i32* %38
	movq	%rsi, %rax
	movq	-280(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 8, i32* %39
	movq	$8, %rax
	movq	-288(%rbp), %rcx
	movl	%eax, (%rcx)
	# %869 = load i32, i32* %38
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %870 = load i32, i32* %39
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %871 = shl i32 1, %870
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %872 = sub i32 %871, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %873 = icmp ule i32 %869, %872
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %874 = xor i1 %873, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %875 = zext i1 %874 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %876 = sext i32 %875 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %877 = icmp ne i64 %876, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %877, label %878, label %880
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block880
	jmp	tdefl_flush_block878
	.text
tdefl_flush_block878:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2775, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2775, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block879:
	# br label %881
	jmp	tdefl_flush_block881
	.text
tdefl_flush_block880:
	# br label %881
	jmp	tdefl_flush_block881
	.text
tdefl_flush_block881:
	# %882 = load i32, i32* %38
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %883 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %884 = getelementptr %struct.tdefl_compressor, i8* %883, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %885 = load i32, i32* %884
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %886 = shl i32 %882, %885
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %887 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %888 = getelementptr %struct.tdefl_compressor, i8* %887, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %889 = load i32, i32* %888
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %890 = or i32 %889, %886
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %890, i32* %888
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %891 = load i32, i32* %39
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %892 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %893 = getelementptr %struct.tdefl_compressor, i8* %892, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %894 = load i32, i32* %893
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %895 = add i32 %894, %891
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %895, i32* %893
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %896
	jmp	tdefl_flush_block896
	.text
tdefl_flush_block896:
	# %897 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %898 = getelementptr %struct.tdefl_compressor, i8* %897, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %899 = load i32, i32* %898
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %900 = icmp uge i32 %899, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %900, label %901, label %927
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block927
	jmp	tdefl_flush_block901
	.text
tdefl_flush_block901:
	# %902 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %903 = getelementptr %struct.tdefl_compressor, i8* %902, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %904 = load i8*, i8** %903
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %905 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %906 = getelementptr %struct.tdefl_compressor, i8* %905, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %907 = load i8*, i8** %906
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %908 = icmp ult i8* %904, %907
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %908, label %909, label %918
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block918
	jmp	tdefl_flush_block909
	.text
tdefl_flush_block909:
	# %910 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %911 = getelementptr %struct.tdefl_compressor, i8* %910, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %912 = load i32, i32* %911
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %913 = trunc i32 %912 to i8
	movq	%rsi, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %914 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %915 = getelementptr %struct.tdefl_compressor, i8* %914, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %916 = load i8*, i8** %915
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %917 = getelementptr i8, i8* %916, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %917, i8** %915
	movq	%rsi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8 %913, i8* %916
	movq	%r9, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %918
	jmp	tdefl_flush_block918
	.text
tdefl_flush_block918:
	# %919 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %920 = getelementptr %struct.tdefl_compressor, i8* %919, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %921 = load i32, i32* %920
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %922 = lshr i32 %921, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %922, i32* %920
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %923 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %924 = getelementptr %struct.tdefl_compressor, i8* %923, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %925 = load i32, i32* %924
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %926 = sub i32 %925, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %926, i32* %924
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %896
	jmp	tdefl_flush_block896
	.text
tdefl_flush_block927:
	# br label %928
	jmp	tdefl_flush_block928
	.text
tdefl_flush_block928:
	# %929 = load i32, i32* %37
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %930 = shl i32 %929, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# store i32 %930, i32* %37
	movq	%rsi, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %931
	jmp	tdefl_flush_block931
	.text
tdefl_flush_block931:
	# %932 = load i32, i32* %36
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %933 = add i32 %932, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %933, i32* %36
	movq	%rsi, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %861
	jmp	tdefl_flush_block861
	.text
tdefl_flush_block934:
	# br label %935
	jmp	tdefl_flush_block935
	.text
tdefl_flush_block935:
	# br label %1142
	jmp	tdefl_flush_block1142
	.text
tdefl_flush_block936:
	# store i32 0, i32* %41
	movq	$0, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %937
	jmp	tdefl_flush_block937
	.text
tdefl_flush_block937:
	# store i32 0, i32* %42
	movq	$0, %rax
	movq	-312(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 3, i32* %43
	movq	$3, %rax
	movq	-320(%rbp), %rcx
	movl	%eax, (%rcx)
	# %938 = load i32, i32* %42
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %939 = load i32, i32* %43
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %940 = shl i32 1, %939
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %941 = sub i32 %940, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %942 = icmp ule i32 %938, %941
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %943 = xor i1 %942, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %944 = zext i1 %943 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %945 = sext i32 %944 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %946 = icmp ne i64 %945, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %946, label %947, label %949
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block949
	jmp	tdefl_flush_block947
	.text
tdefl_flush_block947:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2783, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2783, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block948:
	# br label %950
	jmp	tdefl_flush_block950
	.text
tdefl_flush_block949:
	# br label %950
	jmp	tdefl_flush_block950
	.text
tdefl_flush_block950:
	# %951 = load i32, i32* %42
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %952 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %953 = getelementptr %struct.tdefl_compressor, i8* %952, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %954 = load i32, i32* %953
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %955 = shl i32 %951, %954
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %956 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %957 = getelementptr %struct.tdefl_compressor, i8* %956, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %958 = load i32, i32* %957
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %959 = or i32 %958, %955
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %959, i32* %957
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %960 = load i32, i32* %43
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %961 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %962 = getelementptr %struct.tdefl_compressor, i8* %961, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %963 = load i32, i32* %962
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %964 = add i32 %963, %960
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %964, i32* %962
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %965
	jmp	tdefl_flush_block965
	.text
tdefl_flush_block965:
	# %966 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %967 = getelementptr %struct.tdefl_compressor, i8* %966, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %968 = load i32, i32* %967
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %969 = icmp uge i32 %968, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %969, label %970, label %996
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block996
	jmp	tdefl_flush_block970
	.text
tdefl_flush_block970:
	# %971 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %972 = getelementptr %struct.tdefl_compressor, i8* %971, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %973 = load i8*, i8** %972
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %974 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %975 = getelementptr %struct.tdefl_compressor, i8* %974, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %976 = load i8*, i8** %975
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %977 = icmp ult i8* %973, %976
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %977, label %978, label %987
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block987
	jmp	tdefl_flush_block978
	.text
tdefl_flush_block978:
	# %979 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %980 = getelementptr %struct.tdefl_compressor, i8* %979, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %981 = load i32, i32* %980
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %982 = trunc i32 %981 to i8
	movq	%rsi, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %983 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %984 = getelementptr %struct.tdefl_compressor, i8* %983, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %985 = load i8*, i8** %984
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %986 = getelementptr i8, i8* %985, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %986, i8** %984
	movq	%rsi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8 %982, i8* %985
	movq	%r9, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %987
	jmp	tdefl_flush_block987
	.text
tdefl_flush_block987:
	# %988 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %989 = getelementptr %struct.tdefl_compressor, i8* %988, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %990 = load i32, i32* %989
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %991 = lshr i32 %990, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %991, i32* %989
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %992 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %993 = getelementptr %struct.tdefl_compressor, i8* %992, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %994 = load i32, i32* %993
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %995 = sub i32 %994, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %995, i32* %993
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %965
	jmp	tdefl_flush_block965
	.text
tdefl_flush_block996:
	# br label %997
	jmp	tdefl_flush_block997
	.text
tdefl_flush_block997:
	# %998 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %999 = getelementptr %struct.tdefl_compressor, i8* %998, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1000 = load i32, i32* %999
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1001 = icmp ne i32 %1000, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1001, label %1002, label %1068
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1068
	jmp	tdefl_flush_block1002
	.text
tdefl_flush_block1002:
	# br label %1003
	jmp	tdefl_flush_block1003
	.text
tdefl_flush_block1003:
	# store i32 0, i32* %44
	movq	$0, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1004 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1005 = getelementptr %struct.tdefl_compressor, i8* %1004, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1006 = load i32, i32* %1005
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1007 = sub i32 8, %1006
	movq	$8, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1007, i32* %45
	movq	%rsi, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %1008 = load i32, i32* %44
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1009 = load i32, i32* %45
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1010 = shl i32 1, %1009
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %1011 = sub i32 %1010, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %1012 = icmp ule i32 %1008, %1011
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %1013 = xor i1 %1012, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %1014 = zext i1 %1013 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %1015 = sext i32 %1014 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1016 = icmp ne i64 %1015, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1016, label %1017, label %1019
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1019
	jmp	tdefl_flush_block1017
	.text
tdefl_flush_block1017:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2786, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2786, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block1018:
	# br label %1020
	jmp	tdefl_flush_block1020
	.text
tdefl_flush_block1019:
	# br label %1020
	jmp	tdefl_flush_block1020
	.text
tdefl_flush_block1020:
	# %1021 = load i32, i32* %44
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1022 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1023 = getelementptr %struct.tdefl_compressor, i8* %1022, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1024 = load i32, i32* %1023
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1025 = shl i32 %1021, %1024
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %1026 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1027 = getelementptr %struct.tdefl_compressor, i8* %1026, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1028 = load i32, i32* %1027
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1029 = or i32 %1028, %1025
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1029, i32* %1027
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %1030 = load i32, i32* %45
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1031 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1032 = getelementptr %struct.tdefl_compressor, i8* %1031, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1033 = load i32, i32* %1032
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1034 = add i32 %1033, %1030
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1034, i32* %1032
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %1035
	jmp	tdefl_flush_block1035
	.text
tdefl_flush_block1035:
	# %1036 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1037 = getelementptr %struct.tdefl_compressor, i8* %1036, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1038 = load i32, i32* %1037
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1039 = icmp uge i32 %1038, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %1039, label %1040, label %1066
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1066
	jmp	tdefl_flush_block1040
	.text
tdefl_flush_block1040:
	# %1041 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1042 = getelementptr %struct.tdefl_compressor, i8* %1041, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1043 = load i8*, i8** %1042
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1044 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1045 = getelementptr %struct.tdefl_compressor, i8* %1044, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1046 = load i8*, i8** %1045
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1047 = icmp ult i8* %1043, %1046
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %1047, label %1048, label %1057
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1057
	jmp	tdefl_flush_block1048
	.text
tdefl_flush_block1048:
	# %1049 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1050 = getelementptr %struct.tdefl_compressor, i8* %1049, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1051 = load i32, i32* %1050
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1052 = trunc i32 %1051 to i8
	movq	%rsi, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %1053 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1054 = getelementptr %struct.tdefl_compressor, i8* %1053, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %1055 = load i8*, i8** %1054
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1056 = getelementptr i8, i8* %1055, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %1056, i8** %1054
	movq	%rsi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8 %1052, i8* %1055
	movq	%r9, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %1057
	jmp	tdefl_flush_block1057
	.text
tdefl_flush_block1057:
	# %1058 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1059 = getelementptr %struct.tdefl_compressor, i8* %1058, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1060 = load i32, i32* %1059
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1061 = lshr i32 %1060, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %1061, i32* %1059
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %1062 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1063 = getelementptr %struct.tdefl_compressor, i8* %1062, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1064 = load i32, i32* %1063
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1065 = sub i32 %1064, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1065, i32* %1063
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %1035
	jmp	tdefl_flush_block1035
	.text
tdefl_flush_block1066:
	# br label %1067
	jmp	tdefl_flush_block1067
	.text
tdefl_flush_block1067:
	# br label %1068
	jmp	tdefl_flush_block1068
	.text
tdefl_flush_block1068:
	# store i32 2, i32* %40
	movq	$2, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1069
	jmp	tdefl_flush_block1069
	.text
tdefl_flush_block1069:
	# %1070 = load i32, i32* %40
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1071 = icmp ne i32 %1070, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1071, label %1072, label %1141
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1141
	jmp	tdefl_flush_block1072
	.text
tdefl_flush_block1072:
	# br label %1073
	jmp	tdefl_flush_block1073
	.text
tdefl_flush_block1073:
	# %1074 = load i32, i32* %41
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1075 = and i32 %1074, 65535
	movq	%rsi, %rax
	movq	$65535, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1075, i32* %46
	movq	%rsi, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# store i32 16, i32* %47
	movq	$16, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %1076 = load i32, i32* %46
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1077 = load i32, i32* %47
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1078 = shl i32 1, %1077
	movq	$1, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %1079 = sub i32 %1078, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %1080 = icmp ule i32 %1076, %1079
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setbe	%sil
	# %1081 = xor i1 %1080, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %1082 = zext i1 %1081 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %1083 = sext i32 %1082 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1084 = icmp ne i64 %1083, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1084, label %1085, label %1087
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1087
	jmp	tdefl_flush_block1085
	.text
tdefl_flush_block1085:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2790, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2790, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block1086:
	# br label %1088
	jmp	tdefl_flush_block1088
	.text
tdefl_flush_block1087:
	# br label %1088
	jmp	tdefl_flush_block1088
	.text
tdefl_flush_block1088:
	# %1089 = load i32, i32* %46
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1090 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1091 = getelementptr %struct.tdefl_compressor, i8* %1090, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1092 = load i32, i32* %1091
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1093 = shl i32 %1089, %1092
	movq	%rdi, %rax
	movq	%rsi, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %1094 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1095 = getelementptr %struct.tdefl_compressor, i8* %1094, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1096 = load i32, i32* %1095
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1097 = or i32 %1096, %1093
	movq	%rsi, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1097, i32* %1095
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %1098 = load i32, i32* %47
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1099 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1100 = getelementptr %struct.tdefl_compressor, i8* %1099, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1101 = load i32, i32* %1100
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1102 = add i32 %1101, %1098
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1102, i32* %1100
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %1103
	jmp	tdefl_flush_block1103
	.text
tdefl_flush_block1103:
	# %1104 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1105 = getelementptr %struct.tdefl_compressor, i8* %1104, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1106 = load i32, i32* %1105
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1107 = icmp uge i32 %1106, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %1107, label %1108, label %1134
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1134
	jmp	tdefl_flush_block1108
	.text
tdefl_flush_block1108:
	# %1109 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1110 = getelementptr %struct.tdefl_compressor, i8* %1109, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1111 = load i8*, i8** %1110
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1112 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1113 = getelementptr %struct.tdefl_compressor, i8* %1112, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1114 = load i8*, i8** %1113
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1115 = icmp ult i8* %1111, %1114
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %1115, label %1116, label %1125
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1125
	jmp	tdefl_flush_block1116
	.text
tdefl_flush_block1116:
	# %1117 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1118 = getelementptr %struct.tdefl_compressor, i8* %1117, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1119 = load i32, i32* %1118
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1120 = trunc i32 %1119 to i8
	movq	%rsi, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %1121 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1122 = getelementptr %struct.tdefl_compressor, i8* %1121, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %1123 = load i8*, i8** %1122
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1124 = getelementptr i8, i8* %1123, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %1124, i8** %1122
	movq	%rsi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8 %1120, i8* %1123
	movq	%r9, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %1125
	jmp	tdefl_flush_block1125
	.text
tdefl_flush_block1125:
	# %1126 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1127 = getelementptr %struct.tdefl_compressor, i8* %1126, i32 0, i32 17
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1128 = load i32, i32* %1127
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1129 = lshr i32 %1128, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# store i32 %1129, i32* %1127
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %1130 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1131 = getelementptr %struct.tdefl_compressor, i8* %1130, i32 0, i32 16
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1132 = load i32, i32* %1131
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1133 = sub i32 %1132, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1133, i32* %1131
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %1103
	jmp	tdefl_flush_block1103
	.text
tdefl_flush_block1134:
	# br label %1135
	jmp	tdefl_flush_block1135
	.text
tdefl_flush_block1135:
	# br label %1136
	jmp	tdefl_flush_block1136
	.text
tdefl_flush_block1136:
	# %1137 = load i32, i32* %40
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1138 = add i32 %1137, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1138, i32* %40
	movq	%rsi, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1139 = load i32, i32* %41
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1140 = xor i32 %1139, 65535
	movq	%rsi, %rax
	movq	$65535, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1140, i32* %41
	movq	%rsi, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1069
	jmp	tdefl_flush_block1069
	.text
tdefl_flush_block1141:
	# br label %1142
	jmp	tdefl_flush_block1142
	.text
tdefl_flush_block1142:
	# br label %1143
	jmp	tdefl_flush_block1143
	.text
tdefl_flush_block1143:
	# %1144 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1145 = getelementptr %struct.tdefl_compressor, i8* %1144, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1146 = load i8*, i8** %1145
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1147 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1148 = getelementptr %struct.tdefl_compressor, i8* %1147, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1149 = load i8*, i8** %1148
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1150 = icmp ult i8* %1146, %1149
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# %1151 = xor i1 %1150, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %1152 = zext i1 %1151 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %1153 = sext i32 %1152 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1154 = icmp ne i64 %1153, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1154, label %1155, label %1157
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1157
	jmp	tdefl_flush_block1155
	.text
tdefl_flush_block1155:
	# call void @__assert_rtn (i8* @__func__.tdefl_flush_block, i8* @.str.11, i32 2795, i8* @.str.73)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_flush_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2795, %rax
	pushq	%rax
	leaq	_.str.73(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_flush_block1156:
	# br label %1158
	jmp	tdefl_flush_block1158
	.text
tdefl_flush_block1157:
	# br label %1158
	jmp	tdefl_flush_block1158
	.text
tdefl_flush_block1158:
	# %1159 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1160 = getelementptr %struct.tdefl_compressor, i8* %1159, i32 0, i32 36
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1161 = getelementptr [3 x [288 x i16]], i8* %1160, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1162 = getelementptr [288 x i16], i8* %1161, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1163 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1164 = getelementptr %struct.tdefl_compressor, i8* %1163, i32 0, i32 36
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1165 = getelementptr [3 x [288 x i16]], i8* %1164, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1166 = getelementptr [288 x i16], i8* %1165, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1167 = call i64 @llvm.objectsize.i64.p0 (i8* %1166, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %1168 = call i8* @__memset_chk (i8* %1162, i32 0, i64 576, i64 %1167)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$576, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %1169 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1170 = getelementptr %struct.tdefl_compressor, i8* %1169, i32 0, i32 36
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1171 = getelementptr [3 x [288 x i16]], i8* %1170, i64 0, i64 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1172 = getelementptr [288 x i16], i8* %1171, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1173 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1174 = getelementptr %struct.tdefl_compressor, i8* %1173, i32 0, i32 36
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1175 = getelementptr [3 x [288 x i16]], i8* %1174, i64 0, i64 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1176 = getelementptr [288 x i16], i8* %1175, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1177 = call i64 @llvm.objectsize.i64.p0 (i8* %1176, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %1178 = call i8* @__memset_chk (i8* %1172, i32 0, i64 64, i64 %1177)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$64, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %1179 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1180 = getelementptr %struct.tdefl_compressor, i8* %1179, i32 0, i32 39
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$39, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1181 = getelementptr [65536 x i8], i8* %1180, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1182 = getelementptr i8, i8* %1181, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1183 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1184 = getelementptr %struct.tdefl_compressor, i8* %1183, i32 0, i32 9
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %1182, i8** %1184
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %1185 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1186 = getelementptr %struct.tdefl_compressor, i8* %1185, i32 0, i32 39
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$39, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1187 = getelementptr [65536 x i8], i8* %1186, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1188 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1189 = getelementptr %struct.tdefl_compressor, i8* %1188, i32 0, i32 10
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %1187, i8** %1189
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %1190 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1191 = getelementptr %struct.tdefl_compressor, i8* %1190, i32 0, i32 13
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 8, i32* %1191
	movq	$8, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %1192 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1193 = getelementptr %struct.tdefl_compressor, i8* %1192, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1194 = load i32, i32* %1193
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1195 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1196 = getelementptr %struct.tdefl_compressor, i8* %1195, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1197 = load i32, i32* %1196
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1198 = add i32 %1197, %1194
	movq	%rsi, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1198, i32* %1196
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %1199 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1200 = getelementptr %struct.tdefl_compressor, i8* %1199, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 0, i32* %1200
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %1201 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1202 = getelementptr %struct.tdefl_compressor, i8* %1201, i32 0, i32 24
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$24, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1203 = load i32, i32* %1202
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1204 = add i32 %1203, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %1204, i32* %1202
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %1205 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1206 = getelementptr %struct.tdefl_compressor, i8* %1205, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1207 = load i8*, i8** %1206
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1208 = load i8*, i8** %12
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1209 = ptrtoint i8** %1207 to i64
	movq	%rdi, %rax
	movq	%rax, %rdi
	# %1210 = ptrtoint i8** %1208 to i64
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %1211 = sub i64 %1209, %1210
	movq	%rdi, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %1212 = trunc i64 %1211 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i32 %1212, i32* %10
	movq	%rsi, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1213 = icmp ne i32 %1212, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1213, label %1214, label %1329
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1329
	jmp	tdefl_flush_block1214
	.text
tdefl_flush_block1214:
	# %1215 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1216 = getelementptr %struct.tdefl_compressor, i8* %1215, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1217 = load i8*, i8** %1216
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1218 = icmp ne i8* %1217, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1218, label %1219, label %1248
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1248
	jmp	tdefl_flush_block1219
	.text
tdefl_flush_block1219:
	# %1220 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1221 = getelementptr %struct.tdefl_compressor, i8* %1220, i32 0, i32 32
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$32, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1222 = load i8*, i8** %1221
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1223 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1224 = getelementptr %struct.tdefl_compressor, i8* %1223, i32 0, i32 27
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$27, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1225 = load i8*, i8** %1224
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1226 = ptrtoint i8** %1222 to i64
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %1227 = ptrtoint i8** %1225 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1228 = sub i64 %1226, %1227
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %1229 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1230 = getelementptr %struct.tdefl_compressor, i8* %1229, i32 0, i32 29
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$29, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1231 = load i8*, i8** %1230
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %1228, i64* %1231
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %1232 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1233 = getelementptr %struct.tdefl_compressor, i8* %1232, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1234 = load i8*, i8** %1233
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1235 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1236 = getelementptr %struct.tdefl_compressor, i8* %1235, i32 0, i32 42
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$42, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1237 = getelementptr [85196 x i8], i8* %1236, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$85196, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1238 = load i32, i32* %10
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1239 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1240 = getelementptr %struct.tdefl_compressor, i8* %1239, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1241 = load i8*, i8** %1240
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1242 = call i32 %1234 (i8* %1237, i32 %1238, i8* %1241)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1243 = icmp ne i32 %1242, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1243, label %1247, label %1244
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1244
	jmp	tdefl_flush_block1247
	.text
tdefl_flush_block1244:
	# %1245 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1246 = getelementptr %struct.tdefl_compressor, i8* %1245, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 -1, i32* %1246
	movq	$-1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 -1, i32* %3
	movq	$-1, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %1333
	jmp	tdefl_flush_block1333
	.text
tdefl_flush_block1247:
	# br label %1328
	jmp	tdefl_flush_block1328
	.text
tdefl_flush_block1248:
	# %1249 = load i8*, i8** %12
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1250 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1251 = getelementptr %struct.tdefl_compressor, i8* %1250, i32 0, i32 42
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$42, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1252 = getelementptr [85196 x i8], i8* %1251, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$85196, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1253 = icmp eq i8* %1249, %1252
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# br i1 %1253, label %1254, label %1320
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1320
	jmp	tdefl_flush_block1254
	.text
tdefl_flush_block1254:
	# %1255 = load i32, i32* %10
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1256 = sext i32 %1255 to i64
	movq	%rsi, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1257 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1258 = getelementptr %struct.tdefl_compressor, i8* %1257, i32 0, i32 30
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1259 = load i8*, i8** %1258
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1260 = load i64, i64* %1259
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1261 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1262 = getelementptr %struct.tdefl_compressor, i8* %1261, i32 0, i32 34
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1263 = load i64, i64* %1262
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1264 = sub i64 %1260, %1263
	movq	%rdi, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %1265 = icmp ult i64 %1256, %1264
	movq	%r8, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %1265, label %1266, label %1269
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1269
	jmp	tdefl_flush_block1266
	.text
tdefl_flush_block1266:
	# %1267 = load i32, i32* %10
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1268 = sext i32 %1267 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# br label %1278
	movq	%rbx, %rdx
	jmp	tdefl_flush_block1278
	.text
tdefl_flush_block1269:
	# %1270 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1271 = getelementptr %struct.tdefl_compressor, i8* %1270, i32 0, i32 30
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$30, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1272 = load i8*, i8** %1271
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1273 = load i64, i64* %1272
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1274 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1275 = getelementptr %struct.tdefl_compressor, i8* %1274, i32 0, i32 34
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1276 = load i64, i64* %1275
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1277 = sub i64 %1273, %1276
	movq	%rsi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# br label %1278
	jmp	tdefl_flush_block1278
	.text
tdefl_flush_block1278:
	# %1279 = phi i64 [%1268, %1266], [%1277, %1269]
	# %1280 = trunc i64 %1279 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1280, i32* %48
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %1281 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1282 = getelementptr %struct.tdefl_compressor, i8* %1281, i32 0, i32 28
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$28, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1283 = load i8*, i8** %1282
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1284 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1285 = getelementptr %struct.tdefl_compressor, i8* %1284, i32 0, i32 34
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1286 = load i64, i64* %1285
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1287 = getelementptr i8, i8* %1283, i64 %1286
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1288 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1289 = getelementptr %struct.tdefl_compressor, i8* %1288, i32 0, i32 42
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$42, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1290 = getelementptr [85196 x i8], i8* %1289, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$85196, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1291 = load i32, i32* %48
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1292 = sext i32 %1291 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1293 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1294 = getelementptr %struct.tdefl_compressor, i8* %1293, i32 0, i32 28
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$28, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1295 = load i8*, i8** %1294
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1296 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1297 = getelementptr %struct.tdefl_compressor, i8* %1296, i32 0, i32 34
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1298 = load i64, i64* %1297
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1299 = getelementptr i8, i8* %1295, i64 %1298
	movq	%r8, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1300 = call i64 @llvm.objectsize.i64.p0 (i8* %1299, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1301 = call i8* @__memcpy_chk (i8* %1287, i8* %1290, i64 %1292, i64 %1300)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1302 = load i32, i32* %48
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1303 = sext i32 %1302 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1304 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1305 = getelementptr %struct.tdefl_compressor, i8* %1304, i32 0, i32 34
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1306 = load i64, i64* %1305
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1307 = add i64 %1306, %1303
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1307, i64* %1305
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %1308 = load i32, i32* %48
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1309 = load i32, i32* %10
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1310 = sub i32 %1309, %1308
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1310, i32* %10
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1311 = icmp ne i32 %1310, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1311, label %1312, label %1319
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_flush_block1319
	jmp	tdefl_flush_block1312
	.text
tdefl_flush_block1312:
	# %1313 = load i32, i32* %48
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1314 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1315 = getelementptr %struct.tdefl_compressor, i8* %1314, i32 0, i32 21
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$21, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1313, i32* %1315
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1316 = load i32, i32* %10
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1317 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1318 = getelementptr %struct.tdefl_compressor, i8* %1317, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1316, i32* %1318
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1319
	jmp	tdefl_flush_block1319
	.text
tdefl_flush_block1319:
	# br label %1327
	jmp	tdefl_flush_block1327
	.text
tdefl_flush_block1320:
	# %1321 = load i32, i32* %10
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1322 = sext i32 %1321 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1323 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1324 = getelementptr %struct.tdefl_compressor, i8* %1323, i32 0, i32 34
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1325 = load i64, i64* %1324
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1326 = add i64 %1325, %1322
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1326, i64* %1324
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %1327
	jmp	tdefl_flush_block1327
	.text
tdefl_flush_block1327:
	# br label %1328
	jmp	tdefl_flush_block1328
	.text
tdefl_flush_block1328:
	# br label %1329
	jmp	tdefl_flush_block1329
	.text
tdefl_flush_block1329:
	# %1330 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1331 = getelementptr %struct.tdefl_compressor, i8* %1330, i32 0, i32 22
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1332 = load i32, i32* %1331
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1332, i32* %3
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %1333
	jmp	tdefl_flush_block1333
	.text
tdefl_flush_block1333:
	# %1334 = load i32, i32* %3
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %1334
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compress_buffer
_tdefl_compress_buffer:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r9
	popq	%r10
	popq	%r11
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%r10, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %7
	movq	%r9, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %8
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %9 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %10 = getelementptr %struct.tdefl_compressor, i8* %9, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %11 = load i8*, i8** %10
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %12 = icmp ne i8* %11, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# %13 = xor i1 %12, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %14 = zext i1 %13 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %15 = sext i32 %14 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %16 = icmp ne i64 %15, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %16, label %17, label %19
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_buffer19
	jmp	tdefl_compress_buffer17
	.text
tdefl_compress_buffer17:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_buffer, i8* @.str.11, i32 3413, i8* @.str.12)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_buffer(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$3413, %rax
	pushq	%rax
	leaq	_.str.12(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_buffer18:
	# br label %20
	jmp	tdefl_compress_buffer20
	.text
tdefl_compress_buffer19:
	# br label %20
	jmp	tdefl_compress_buffer20
	.text
tdefl_compress_buffer20:
	# %21 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %22 = load i8*, i8** %6
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = load i32, i32* %8
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %24 = call i32 @tdefl_compress (i8* %21, i8* %22, i8* %7, i8* null, i8* null, i32 %23)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %24
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_get_prev_return_status
_tdefl_get_prev_return_status:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = getelementptr %struct.tdefl_compressor, i8* %3, i32 0, i32 26
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$26, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %5 = load i32, i32* %4
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %5
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compress_mem_to_output
_tdefl_compress_mem_to_output:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%r13
	popq	%rdx
	popq	%r14
	popq	%r15
	popq	-8(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %7
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %8
	movq	%r15, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %9
	movq	%r14, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %11
	movq	%r13, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %14 = load i64, i64* %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %15 = icmp ne i64 %14, 0
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %15, label %16, label %19
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_mem_to_output19
	jmp	tdefl_compress_mem_to_output16
	.text
tdefl_compress_mem_to_output16:
	# %17 = load i8*, i8** %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %18 = icmp ne i8* %17, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %18, label %19, label %22
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_mem_to_output22
	jmp	tdefl_compress_mem_to_output19
	.text
tdefl_compress_mem_to_output19:
	# %20 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %21 = icmp ne i8* %20, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %21, label %23, label %22
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_mem_to_output22
	jmp	tdefl_compress_mem_to_output23
	.text
tdefl_compress_mem_to_output22:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %49
	jmp	tdefl_compress_mem_to_output49
	.text
tdefl_compress_mem_to_output23:
	# %24 = call i8* @malloc (i64 319352)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$319352, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r13
	# store i8* %24, i8** %12
	movq	%r13, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %25 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %26 = icmp ne i8* %25, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %26, label %28, label %27
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_mem_to_output27
	jmp	tdefl_compress_mem_to_output28
	.text
tdefl_compress_mem_to_output27:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %49
	jmp	tdefl_compress_mem_to_output49
	.text
tdefl_compress_mem_to_output28:
	# %29 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %30 = load i8*, i8** %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %31 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %32 = load i32, i32* %11
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %33 = call i32 @tdefl_init (i8* %29, i8* %30, i8* %31, i32 %32)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r13, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_init
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %34 = icmp eq i32 %33, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# %35 = zext i1 %34 to i32
	movq	%rdi, %rax
	movq	%rax, %rdi
	# store i32 %35, i32* %13
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %36 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %37 = icmp ne i32 %36, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %37, label %38, label %44
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	tdefl_compress_mem_to_output44
	jmp	tdefl_compress_mem_to_output38
	.text
tdefl_compress_mem_to_output38:
	# %39 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %40 = load i8*, i8** %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %41 = load i64, i64* %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %42 = call i32 @tdefl_compress_buffer (i8* %39, i8* %40, i64 %41, i32 4)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$4, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_buffer
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %43 = icmp eq i32 %42, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br label %44
	jmp	tdefl_compress_mem_to_output44
	.text
tdefl_compress_mem_to_output44:
	# %45 = phi i1 [0, %28], [%43, %38]
	# %46 = zext i1 %45 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %46, i32* %13
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %47 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %47)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %48 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %48, i32* %6
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %49
	jmp	tdefl_compress_mem_to_output49
	.text
tdefl_compress_mem_to_output49:
	# %50 = load i32, i32* %6
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %50
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compress_mem_to_heap
_tdefl_compress_mem_to_heap:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r11
	popq	%r12
	popq	%r13
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %10 = alloca %struct.tdefl_output_buffer
	subq	$28, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %7
	movq	%r12, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%r11, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# call void @memset (i8* %10, i8 0, i64 32, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %11 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %12 = icmp ne i8* %11, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %12, label %14, label %13
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_mem_to_heap13
	jmp	tdefl_compress_mem_to_heap14
	.text
tdefl_compress_mem_to_heap13:
	# store i8* null, i8** %5
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %30
	jmp	tdefl_compress_mem_to_heap30
	.text
tdefl_compress_mem_to_heap14:
	# %15 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %15
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %16
	jmp	tdefl_compress_mem_to_heap16
	.text
tdefl_compress_mem_to_heap16:
	# %17 = getelementptr %struct.tdefl_output_buffer, i8* %10, i32 0, i32 3
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %17
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %18 = load i8*, i8** %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %19 = load i64, i64* %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = load i32, i32* %9
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %21 = call i32 @tdefl_compress_mem_to_output (i8* %18, i64 %19, i8* @tdefl_output_buffer_putter, i8* %10, i32 %20)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	leaq	_tdefl_output_buffer_putter(%rip), %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_mem_to_output
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %22 = icmp ne i32 %21, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %22, label %24, label %23
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_mem_to_heap23
	jmp	tdefl_compress_mem_to_heap24
	.text
tdefl_compress_mem_to_heap23:
	# store i8* null, i8** %5
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %30
	jmp	tdefl_compress_mem_to_heap30
	.text
tdefl_compress_mem_to_heap24:
	# %25 = getelementptr %struct.tdefl_output_buffer, i8* %10, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %26 = load i64, i64* %25
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %27 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %26, i64* %27
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %28 = getelementptr %struct.tdefl_output_buffer, i8* %10, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %29 = load i8*, i8** %28
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %29, i8** %5
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %30
	jmp	tdefl_compress_mem_to_heap30
	.text
tdefl_compress_mem_to_heap30:
	# %31 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %31
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_output_buffer_putter
_tdefl_output_buffer_putter:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rbx
	popq	%r13
	popq	%r14
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# store i8* %0, i8** %5
	movq	%r14, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %6
	movq	%r13, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %7
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %12 = load i8*, i8** %7
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %12, i8** %8
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %13 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.tdefl_output_buffer, i8* %13, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %15 = load i64, i64* %14
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %16 = load i32, i32* %6
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %17 = sext i32 %16 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %18 = add i64 %15, %17
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %18, i64* %9
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %19 = load i64, i64* %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %21 = getelementptr %struct.tdefl_output_buffer, i8* %20, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %22 = load i64, i64* %21
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = icmp ugt i64 %19, %22
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %23, label %24, label %64
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_output_buffer_putter64
	jmp	tdefl_output_buffer_putter24
	.text
tdefl_output_buffer_putter24:
	# %25 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = getelementptr %struct.tdefl_output_buffer, i8* %25, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %27 = load i64, i64* %26
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %27, i64* %10
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %28 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = getelementptr %struct.tdefl_output_buffer, i8* %28, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %30 = load i32, i32* %29
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %31 = icmp ne i32 %30, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %31, label %33, label %32
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_output_buffer_putter32
	jmp	tdefl_output_buffer_putter33
	.text
tdefl_output_buffer_putter32:
	# store i32 0, i32* %4
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %87
	jmp	tdefl_output_buffer_putter87
	.text
tdefl_output_buffer_putter33:
	# br label %34
	jmp	tdefl_output_buffer_putter34
	.text
tdefl_output_buffer_putter34:
	# %35 = load i64, i64* %10
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = shl i64 %35, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %37 = icmp ugt i64 128, %36
	movq	$128, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %37, label %38, label %39
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_output_buffer_putter39
	jmp	tdefl_output_buffer_putter38
	.text
tdefl_output_buffer_putter38:
	# br label %42
	movq	$128, %rdx
	jmp	tdefl_output_buffer_putter42
	.text
tdefl_output_buffer_putter39:
	# %40 = load i64, i64* %10
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = shl i64 %40, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %r13
	# br label %42
	movq	%r13, %rdx
	jmp	tdefl_output_buffer_putter42
	.text
tdefl_output_buffer_putter42:
	# %43 = phi i64 [128, %38], [%41, %39]
	# store i64 %43, i64* %10
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# br label %44
	jmp	tdefl_output_buffer_putter44
	.text
tdefl_output_buffer_putter44:
	# %45 = load i64, i64* %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %46 = load i64, i64* %10
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = icmp ugt i64 %45, %46
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %47, label %34, label %48
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_output_buffer_putter48
	jmp	tdefl_output_buffer_putter34
	.text
tdefl_output_buffer_putter48:
	# %49 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = getelementptr %struct.tdefl_output_buffer, i8* %49, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %51 = load i8*, i8** %50
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %52 = load i64, i64* %10
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = call i8* @realloc (i8* %51, i64 %52)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_realloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %53, i8** %11
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %54 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = icmp ne i8* %54, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %55, label %57, label %56
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_output_buffer_putter56
	jmp	tdefl_output_buffer_putter57
	.text
tdefl_output_buffer_putter56:
	# store i32 0, i32* %4
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %87
	jmp	tdefl_output_buffer_putter87
	.text
tdefl_output_buffer_putter57:
	# %58 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %59 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = getelementptr %struct.tdefl_output_buffer, i8* %59, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %58, i8** %60
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %61 = load i64, i64* %10
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %62 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = getelementptr %struct.tdefl_output_buffer, i8* %62, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %61, i64* %63
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %64
	jmp	tdefl_output_buffer_putter64
	.text
tdefl_output_buffer_putter64:
	# %65 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %66 = getelementptr %struct.tdefl_output_buffer, i8* %65, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %67 = load i8*, i8** %66
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %68 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %69 = getelementptr %struct.tdefl_output_buffer, i8* %68, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %70 = load i64, i64* %69
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = getelementptr i8, i8* %67, i64 %70
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %72 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %73 = load i32, i32* %6
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %74 = sext i32 %73 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %75 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %76 = getelementptr %struct.tdefl_output_buffer, i8* %75, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %77 = load i8*, i8** %76
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %78 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %79 = getelementptr %struct.tdefl_output_buffer, i8* %78, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %80 = load i64, i64* %79
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %81 = getelementptr i8, i8* %77, i64 %80
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %82 = call i64 @llvm.objectsize.i64.p0 (i8* %81, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %83 = call i8* @__memcpy_chk (i8* %71, i8* %72, i64 %74, i64 %82)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %84 = load i64, i64* %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %85 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = getelementptr %struct.tdefl_output_buffer, i8* %85, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %84, i64* %86
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %4
	movq	$1, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %87
	jmp	tdefl_output_buffer_putter87
	.text
tdefl_output_buffer_putter87:
	# %88 = load i32, i32* %4
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %88
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compress_mem_to_mem
_tdefl_compress_mem_to_mem:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%r12
	popq	%rdx
	popq	%r13
	popq	%r14
	popq	%r15
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %12 = alloca %struct.tdefl_output_buffer
	subq	$28, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %7
	movq	%r15, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %8
	movq	%r14, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %9
	movq	%r13, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %10
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %11
	movq	%r12, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# call void @memset (i8* %12, i8 0, i64 32, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %13 = load i8*, i8** %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = icmp ne i8* %13, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %14, label %16, label %15
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_mem_to_mem15
	jmp	tdefl_compress_mem_to_mem16
	.text
tdefl_compress_mem_to_mem15:
	# store i64 0, i64* %6
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %30
	jmp	tdefl_compress_mem_to_mem30
	.text
tdefl_compress_mem_to_mem16:
	# %17 = load i8*, i8** %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %18 = getelementptr %struct.tdefl_output_buffer, i8* %12, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %17, i8** %18
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %19 = load i64, i64* %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = getelementptr %struct.tdefl_output_buffer, i8* %12, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %19, i64* %20
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %21 = load i8*, i8** %9
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %22 = load i64, i64* %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %24 = call i32 @tdefl_compress_mem_to_output (i8* %21, i64 %22, i8* @tdefl_output_buffer_putter, i8* %12, i32 %23)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	leaq	_tdefl_output_buffer_putter(%rip), %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_mem_to_output
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %25 = icmp ne i32 %24, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %25, label %27, label %26
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_mem_to_mem26
	jmp	tdefl_compress_mem_to_mem27
	.text
tdefl_compress_mem_to_mem26:
	# store i64 0, i64* %6
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %30
	jmp	tdefl_compress_mem_to_mem30
	.text
tdefl_compress_mem_to_mem27:
	# %28 = getelementptr %struct.tdefl_output_buffer, i8* %12, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %29 = load i64, i64* %28
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %29, i64* %6
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %30
	jmp	tdefl_compress_mem_to_mem30
	.text
tdefl_compress_mem_to_mem30:
	# %31 = load i64, i64* %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %31
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_write_image_to_png_file_in_memory_ex
_tdefl_write_image_to_png_file_in_memory_ex:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$88, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	popq	%rbx
	popq	%rsi
	popq	%rdi
	popq	%rdx
	popq	%r8
	popq	%r9
	popq	-8(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %17 = alloca %struct.tdefl_output_buffer
	subq	$28, %rsp
	movq	%rsp, -88(%rbp)
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %23 = alloca [41 x i8]
	subq	$41, %rsp
	movq	%rsp, %r11
	# store i8* %0, i8** %9
	movq	-8(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %10
	movq	%r9, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %11
	movq	%r8, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %3, i32* %12
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %4, i8** %13
	movq	%rdi, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %5, i32* %14
	movq	%rsi, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %6, i32* %15
	movq	%rbx, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %24 = call i8* @malloc (i64 319352)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$319352, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# store i8* %24, i8** %16
	movq	%r8, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# %25 = load i32, i32* %10
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %26 = load i32, i32* %12
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %27 = mul i32 %25, %26
	movq	%r9, %rax
	movq	%r8, %rcx
	imulq	%rcx, %rax
	movq	%rax, %r8
	# store i32 %27, i32* %19
	movq	%r8, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %28 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i64 0, i64* %28
	movq	$0, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %29 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %30 = icmp ne i8* %29, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %30, label %32, label %31
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex31
	jmp	tdefl_write_image_to_png_file_in_memory_ex32
	.text
tdefl_write_image_to_png_file_in_memory_ex31:
	# store i8* null, i8** %8
	movq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %235
	jmp	tdefl_write_image_to_png_file_in_memory_ex235
	.text
tdefl_write_image_to_png_file_in_memory_ex32:
	# call void @memset (i8* %17, i8 0, i64 32, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	-88(%rbp), %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %33 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 3
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 1, i32* %33
	movq	$1, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %34 = load i32, i32* %19
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %35 = add i32 1, %34
	movq	$1, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %36 = load i32, i32* %11
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %37 = mul i32 %35, %36
	movq	%r9, %rax
	movq	%r8, %rcx
	imulq	%rcx, %rax
	movq	%rax, %r8
	# %38 = icmp sgt i32 64, %37
	movq	$64, %rax
	movq	%r8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setg	%r8b
	# br i1 %38, label %39, label %40
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex40
	jmp	tdefl_write_image_to_png_file_in_memory_ex39
	.text
tdefl_write_image_to_png_file_in_memory_ex39:
	# br label %45
	movq	$64, %rsi
	jmp	tdefl_write_image_to_png_file_in_memory_ex45
	.text
tdefl_write_image_to_png_file_in_memory_ex40:
	# %41 = load i32, i32* %19
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %42 = add i32 1, %41
	movq	$1, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %43 = load i32, i32* %11
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %44 = mul i32 %42, %43
	movq	%r8, %rax
	movq	%rsi, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rsi
	# br label %45
	jmp	tdefl_write_image_to_png_file_in_memory_ex45
	.text
tdefl_write_image_to_png_file_in_memory_ex45:
	# %46 = phi i32 [64, %39], [%44, %40]
	# %47 = add i32 57, %46
	movq	$57, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %48 = sext i32 %47 to i64
	movq	%rsi, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %49 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 1
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i64 %48, i64* %49
	movq	%r8, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %50 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 1
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %51 = load i64, i64* %50
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %52 = call i8* @malloc (i64 %51)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %53 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 2
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %52, i8** %53
	movq	%r8, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %54 = icmp eq i8* null, %52
	movq	$0, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# br i1 %54, label %55, label %57
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex57
	jmp	tdefl_write_image_to_png_file_in_memory_ex55
	.text
tdefl_write_image_to_png_file_in_memory_ex55:
	# %56 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %56)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %8
	movq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %235
	jmp	tdefl_write_image_to_png_file_in_memory_ex235
	.text
tdefl_write_image_to_png_file_in_memory_ex57:
	# store i32 41, i32* %21
	movq	$41, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %58
	jmp	tdefl_write_image_to_png_file_in_memory_ex58
	.text
tdefl_write_image_to_png_file_in_memory_ex58:
	# %59 = load i32, i32* %21
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %60 = icmp ne i32 %59, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %60, label %61, label %66
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex66
	jmp	tdefl_write_image_to_png_file_in_memory_ex61
	.text
tdefl_write_image_to_png_file_in_memory_ex61:
	# %62 = call i32 @tdefl_output_buffer_putter (i8* %21, i32 1, i8* %17)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r12, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	-88(%rbp), %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_output_buffer_putter
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# br label %63
	jmp	tdefl_write_image_to_png_file_in_memory_ex63
	.text
tdefl_write_image_to_png_file_in_memory_ex63:
	# %64 = load i32, i32* %21
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %65 = add i32 %64, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %65, i32* %21
	movq	%rsi, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %58
	jmp	tdefl_write_image_to_png_file_in_memory_ex58
	.text
tdefl_write_image_to_png_file_in_memory_ex66:
	# %67 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %68 = load i32, i32* %14
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %69 = icmp ult i32 10, %68
	movq	$10, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setb	%sil
	# br i1 %69, label %70, label %71
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex71
	jmp	tdefl_write_image_to_png_file_in_memory_ex70
	.text
tdefl_write_image_to_png_file_in_memory_ex70:
	# br label %73
	movq	$10, %rdx
	jmp	tdefl_write_image_to_png_file_in_memory_ex73
	.text
tdefl_write_image_to_png_file_in_memory_ex71:
	# %72 = load i32, i32* %14
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# br label %73
	jmp	tdefl_write_image_to_png_file_in_memory_ex73
	.text
tdefl_write_image_to_png_file_in_memory_ex73:
	# %74 = phi i32 [10, %70], [%72, %71]
	# %75 = zext i32 %74 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %76 = getelementptr [11 x i32], i8* @tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes, i64 0, i64 %75
	leaq	_tdefl_write_image_to_png_file_in_memory_ex.s_tdefl_png_num_probes(%rip), %rcx
	movq	$0, %rax
	imulq	$44, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %77 = load i32, i32* %76
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %78 = or i32 %77, 4096
	movq	%rdx, %rax
	movq	$4096, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %79 = call i32 @tdefl_init (i8* %67, i8* @tdefl_output_buffer_putter, i8* %17, i32 %78)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	leaq	_tdefl_output_buffer_putter(%rip), %rax
	pushq	%rax
	movq	-88(%rbp), %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_init
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %20
	movq	$0, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %80
	jmp	tdefl_write_image_to_png_file_in_memory_ex80
	.text
tdefl_write_image_to_png_file_in_memory_ex80:
	# %81 = load i32, i32* %20
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %82 = load i32, i32* %11
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %83 = icmp slt i32 %81, %82
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %83, label %84, label %110
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex110
	jmp	tdefl_write_image_to_png_file_in_memory_ex84
	.text
tdefl_write_image_to_png_file_in_memory_ex84:
	# %85 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = call i32 @tdefl_compress_buffer (i8* %85, i8* %21, i64 1, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_buffer
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %87 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %88 = load i8*, i8** %9
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %89 = load i32, i32* %15
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %90 = icmp ne i32 %89, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %90, label %91, label %96
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex96
	jmp	tdefl_write_image_to_png_file_in_memory_ex91
	.text
tdefl_write_image_to_png_file_in_memory_ex91:
	# %92 = load i32, i32* %11
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %93 = sub i32 %92, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %94 = load i32, i32* %20
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %95 = sub i32 %93, %94
	movq	%rsi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# br label %98
	movq	%rdi, %rsi
	jmp	tdefl_write_image_to_png_file_in_memory_ex98
	.text
tdefl_write_image_to_png_file_in_memory_ex96:
	# %97 = load i32, i32* %20
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# br label %98
	movq	%rbx, %rsi
	jmp	tdefl_write_image_to_png_file_in_memory_ex98
	.text
tdefl_write_image_to_png_file_in_memory_ex98:
	# %99 = phi i32 [%95, %91], [%97, %96]
	# %100 = load i32, i32* %19
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %101 = mul i32 %99, %100
	movq	%rsi, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %102 = sext i32 %101 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %103 = getelementptr i8, i8* %88, i64 %102
	movq	%r8, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %104 = load i32, i32* %19
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %105 = sext i32 %104 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %106 = call i32 @tdefl_compress_buffer (i8* %87, i8* %103, i64 %105, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_buffer
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %107
	jmp	tdefl_write_image_to_png_file_in_memory_ex107
	.text
tdefl_write_image_to_png_file_in_memory_ex107:
	# %108 = load i32, i32* %20
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %109 = add i32 %108, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %109, i32* %20
	movq	%rdx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %80
	jmp	tdefl_write_image_to_png_file_in_memory_ex80
	.text
tdefl_write_image_to_png_file_in_memory_ex110:
	# %111 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %112 = call i32 @tdefl_compress_buffer (i8* %111, i8* null, i64 0, i32 4)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$4, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_buffer
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %113 = icmp ne i32 %112, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %113, label %114, label %118
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex118
	jmp	tdefl_write_image_to_png_file_in_memory_ex114
	.text
tdefl_write_image_to_png_file_in_memory_ex114:
	# %115 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %115)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %116 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 2
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %117 = load i8*, i8** %116
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %117)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %8
	movq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %235
	jmp	tdefl_write_image_to_png_file_in_memory_ex235
	.text
tdefl_write_image_to_png_file_in_memory_ex118:
	# %119 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 0
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %120 = load i64, i64* %119
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %121 = sub i64 %120, 41
	movq	%rdx, %rax
	movq	$41, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %122 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %121, i64* %122
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# call void @memcpy (i8* %23, i8* @__const.tdefl_write_image_to_png_file_in_memory_ex.pnghdr, i64 41, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	leaq	___const.tdefl_write_image_to_png_file_in_memory_ex.pnghdr(%rip), %rax
	pushq	%rax
	movq	$41, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memcpy
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %123 = load i32, i32* %10
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %124 = ashr i32 %123, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %125 = trunc i32 %124 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %126 = getelementptr [41 x i8], i8* %23, i64 0, i64 18
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %125, i8* %126
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %127 = load i32, i32* %10
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %128 = trunc i32 %127 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %129 = getelementptr [41 x i8], i8* %23, i64 0, i64 19
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$19, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %128, i8* %129
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %130 = load i32, i32* %11
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %131 = ashr i32 %130, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %132 = trunc i32 %131 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %133 = getelementptr [41 x i8], i8* %23, i64 0, i64 22
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %132, i8* %133
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %134 = load i32, i32* %11
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %135 = trunc i32 %134 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %136 = getelementptr [41 x i8], i8* %23, i64 0, i64 23
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$23, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %135, i8* %136
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %137 = load i32, i32* %12
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %138 = sext i32 %137 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %139 = getelementptr [5 x i8], i8* @tdefl_write_image_to_png_file_in_memory_ex.chans, i64 0, i64 %138
	leaq	_tdefl_write_image_to_png_file_in_memory_ex.chans(%rip), %rcx
	movq	$0, %rax
	imulq	$5, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %140 = load i8, i8* %139
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %141 = getelementptr [41 x i8], i8* %23, i64 0, i64 25
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$25, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %140, i8* %141
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %142 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %143 = load i64, i64* %142
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %144 = lshr i64 %143, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %145 = trunc i64 %144 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %146 = getelementptr [41 x i8], i8* %23, i64 0, i64 33
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$33, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %145, i8* %146
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %147 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %148 = load i64, i64* %147
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %149 = lshr i64 %148, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %150 = trunc i64 %149 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %151 = getelementptr [41 x i8], i8* %23, i64 0, i64 34
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$34, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %150, i8* %151
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %152 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %153 = load i64, i64* %152
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %154 = lshr i64 %153, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %155 = trunc i64 %154 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %156 = getelementptr [41 x i8], i8* %23, i64 0, i64 35
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$35, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %155, i8* %156
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %157 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %158 = load i64, i64* %157
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %159 = trunc i64 %158 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %160 = getelementptr [41 x i8], i8* %23, i64 0, i64 36
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %159, i8* %160
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %161 = getelementptr [41 x i8], i8* %23, i64 0, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %162 = getelementptr i8, i8* %161, i64 12
	movq	%rdx, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %163 = call i64 @mz_crc32 (i64 0, i8* %162, i64 17)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$17, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %164 = trunc i64 %163 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %164, i32* %22
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %165
	jmp	tdefl_write_image_to_png_file_in_memory_ex165
	.text
tdefl_write_image_to_png_file_in_memory_ex165:
	# %166 = load i32, i32* %18
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %167 = icmp slt i32 %166, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %167, label %168, label %182
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex182
	jmp	tdefl_write_image_to_png_file_in_memory_ex168
	.text
tdefl_write_image_to_png_file_in_memory_ex168:
	# %169 = load i32, i32* %22
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %170 = lshr i32 %169, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %171 = trunc i32 %170 to i8
	movq	%rdx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %172 = getelementptr [41 x i8], i8* %23, i64 0, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %173 = getelementptr i8, i8* %172, i64 29
	movq	%rdx, %rcx
	movq	$29, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %174 = load i32, i32* %18
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %175 = sext i32 %174 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %176 = getelementptr i8, i8* %173, i64 %175
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %171, i8* %176
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %177
	jmp	tdefl_write_image_to_png_file_in_memory_ex177
	.text
tdefl_write_image_to_png_file_in_memory_ex177:
	# %178 = load i32, i32* %18
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %179 = add i32 %178, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %179, i32* %18
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %180 = load i32, i32* %22
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %181 = shl i32 %180, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %181, i32* %22
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %165
	jmp	tdefl_write_image_to_png_file_in_memory_ex165
	.text
tdefl_write_image_to_png_file_in_memory_ex182:
	# %183 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 2
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %184 = load i8*, i8** %183
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %185 = getelementptr [41 x i8], i8* %23, i64 0, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$41, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %186 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 2
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %187 = load i8*, i8** %186
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %188 = call i64 @llvm.objectsize.i64.p0 (i8* %187, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %189 = call i8* @__memcpy_chk (i8* %184, i8* %185, i64 41, i64 %188)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$41, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %190 = call i32 @tdefl_output_buffer_putter (i8* @.str.13, i32 16, i8* %17)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.13(%rip), %rax
	pushq	%rax
	movq	$16, %rax
	pushq	%rax
	movq	-88(%rbp), %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_output_buffer_putter
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %191 = icmp ne i32 %190, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %191, label %197, label %192
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex192
	jmp	tdefl_write_image_to_png_file_in_memory_ex197
	.text
tdefl_write_image_to_png_file_in_memory_ex192:
	# %193 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %193
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %194 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %194)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %195 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 2
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %196 = load i8*, i8** %195
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %196)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %8
	movq	$0, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %235
	jmp	tdefl_write_image_to_png_file_in_memory_ex235
	.text
tdefl_write_image_to_png_file_in_memory_ex197:
	# %198 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 2
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %199 = load i8*, i8** %198
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %200 = getelementptr i8, i8* %199, i64 41
	movq	%rdx, %rcx
	movq	$41, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %201 = getelementptr i8, i8* %200, i64 -4
	movq	%rdx, %rcx
	movq	$-4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %202 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %203 = load i64, i64* %202
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %204 = add i64 %203, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %205 = call i64 @mz_crc32 (i64 0, i8* %201, i64 %204)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$0, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %206 = trunc i64 %205 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %206, i32* %22
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %207
	jmp	tdefl_write_image_to_png_file_in_memory_ex207
	.text
tdefl_write_image_to_png_file_in_memory_ex207:
	# %208 = load i32, i32* %18
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %209 = icmp slt i32 %208, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %209, label %210, label %228
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_write_image_to_png_file_in_memory_ex228
	jmp	tdefl_write_image_to_png_file_in_memory_ex210
	.text
tdefl_write_image_to_png_file_in_memory_ex210:
	# %211 = load i32, i32* %22
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %212 = lshr i32 %211, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %213 = trunc i32 %212 to i8
	movq	%rdx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %214 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 2
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %215 = load i8*, i8** %214
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %216 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 0
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %217 = load i64, i64* %216
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %218 = getelementptr i8, i8* %215, i64 %217
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %219 = getelementptr i8, i8* %218, i64 -16
	movq	%rdx, %rcx
	movq	$-16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %220 = load i32, i32* %18
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %221 = sext i32 %220 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %222 = getelementptr i8, i8* %219, i64 %221
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %213, i8* %222
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %223
	jmp	tdefl_write_image_to_png_file_in_memory_ex223
	.text
tdefl_write_image_to_png_file_in_memory_ex223:
	# %224 = load i32, i32* %18
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %225 = add i32 %224, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %225, i32* %18
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %226 = load i32, i32* %22
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %227 = shl i32 %226, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# store i32 %227, i32* %22
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %207
	jmp	tdefl_write_image_to_png_file_in_memory_ex207
	.text
tdefl_write_image_to_png_file_in_memory_ex228:
	# %229 = load i8*, i8** %13
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %230 = load i64, i64* %229
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %231 = add i64 %230, 57
	movq	%rdx, %rax
	movq	$57, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %231, i64* %229
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %232 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %232)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %233 = getelementptr %struct.tdefl_output_buffer, i8* %17, i32 0, i32 2
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %234 = load i8*, i8** %233
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %234, i8** %8
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %235
	jmp	tdefl_write_image_to_png_file_in_memory_ex235
	.text
tdefl_write_image_to_png_file_in_memory_ex235:
	# %236 = load i8*, i8** %8
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %236
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_write_image_to_png_file_in_memory
_tdefl_write_image_to_png_file_in_memory:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%r10
	popq	%rdx
	popq	%r11
	popq	%r12
	popq	%r13
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %7
	movq	%r12, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %8
	movq	%r11, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# store i8* %4, i8** %10
	movq	%r10, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %11 = load i8*, i8** %6
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %12 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %13 = load i32, i32* %8
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %14 = load i32, i32* %9
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %15 = load i8*, i8** %10
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = call i8* @tdefl_write_image_to_png_file_in_memory_ex (i8* %11, i32 %12, i32 %13, i32 %14, i8* %15, i32 6, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$6, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_write_image_to_png_file_in_memory_ex
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i8* %16
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compressor_alloc
_tdefl_compressor_alloc:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	# %1 = call i8* @malloc (i64 319352)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$319352, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i8* %1
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compressor_free
_tdefl_compressor_free:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %3)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tinfl_clear_tree
_tinfl_clear_tree:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = getelementptr %struct.tinfl_decompressor_tag, i8* %3, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %5 = load i32, i32* %4
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %6 = icmp eq i32 %5, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %6, label %7, label %16
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_clear_tree16
	jmp	tinfl_clear_tree7
	.text
tinfl_clear_tree7:
	# %8 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %9 = getelementptr %struct.tinfl_decompressor_tag, i8* %8, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %10 = getelementptr [576 x i16], i8* %9, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %11 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %12 = getelementptr %struct.tinfl_decompressor_tag, i8* %11, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %13 = getelementptr [576 x i16], i8* %12, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %14 = call i64 @llvm.objectsize.i64.p0 (i8* %13, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %15 = call i8* @__memset_chk (i8* %10, i32 0, i64 1152, i64 %14)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1152, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %40
	jmp	tinfl_clear_tree40
	.text
tinfl_clear_tree16:
	# %17 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = getelementptr %struct.tinfl_decompressor_tag, i8* %17, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %19 = load i32, i32* %18
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %20 = icmp eq i32 %19, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %20, label %21, label %30
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_clear_tree30
	jmp	tinfl_clear_tree21
	.text
tinfl_clear_tree21:
	# %22 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = getelementptr %struct.tinfl_decompressor_tag, i8* %22, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %24 = getelementptr [64 x i16], i8* %23, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %25 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = getelementptr %struct.tinfl_decompressor_tag, i8* %25, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %27 = getelementptr [64 x i16], i8* %26, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %28 = call i64 @llvm.objectsize.i64.p0 (i8* %27, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %29 = call i8* @__memset_chk (i8* %24, i32 0, i64 128, i64 %28)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$128, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %39
	jmp	tinfl_clear_tree39
	.text
tinfl_clear_tree30:
	# %31 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = getelementptr %struct.tinfl_decompressor_tag, i8* %31, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %33 = getelementptr [38 x i16], i8* %32, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$76, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %34 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %35 = getelementptr %struct.tinfl_decompressor_tag, i8* %34, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %36 = getelementptr [38 x i16], i8* %35, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$76, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %37 = call i64 @llvm.objectsize.i64.p0 (i8* %36, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %38 = call i8* @__memset_chk (i8* %33, i32 0, i64 76, i64 %37)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$76, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %39
	jmp	tinfl_clear_tree39
	.text
tinfl_clear_tree39:
	# br label %40
	jmp	tinfl_clear_tree40
	.text
tinfl_clear_tree40:
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tinfl_decompress_mem_to_heap
_tinfl_decompress_mem_to_heap:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$56, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	%rsi
	popq	%rdi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %10 = alloca %struct.tinfl_decompressor_tag
	subq	$8372, %rsp
	movq	%rsp, -48(%rbp)
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %13 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %14 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %15 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r12
	# %16 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %17 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %6
	movq	%rdi, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %7
	movq	%rsi, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%rbx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* null, i8** %11
	movq	$0, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %13
	movq	$0, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %14
	movq	$0, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %19 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %19
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %20
	jmp	tinfl_decompress_mem_to_heap20
	.text
tinfl_decompress_mem_to_heap20:
	# %21 = getelementptr %struct.tinfl_decompressor_tag, i8* %10, i32 0, i32 0
	movq	-48(%rbp), %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %21
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %22
	jmp	tinfl_decompress_mem_to_heap22
	.text
tinfl_decompress_mem_to_heap22:
	# br label %23
	jmp	tinfl_decompress_mem_to_heap23
	.text
tinfl_decompress_mem_to_heap23:
	# %24 = load i64, i64* %7
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %25 = load i64, i64* %13
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = sub i64 %24, %25
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %26, i64* %15
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %27 = load i64, i64* %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %28 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = load i64, i64* %28
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %30 = sub i64 %27, %29
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %30, i64* %16
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %31 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %32 = load i64, i64* %13
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %33 = getelementptr i8, i8* %31, i64 %32
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %34 = load i8*, i8** %11
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %35 = load i8*, i8** %11
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = icmp ne i8* %35, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %36, label %37, label %42
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_heap42
	jmp	tinfl_decompress_mem_to_heap37
	.text
tinfl_decompress_mem_to_heap37:
	# %38 = load i8*, i8** %11
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %39 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %40 = load i64, i64* %39
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = getelementptr i8, i8* %38, i64 %40
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# br label %43
	movq	%rsi, %rbx
	jmp	tinfl_decompress_mem_to_heap43
	.text
tinfl_decompress_mem_to_heap42:
	# br label %43
	movq	$0, %rbx
	jmp	tinfl_decompress_mem_to_heap43
	.text
tinfl_decompress_mem_to_heap43:
	# %44 = phi i8* [%41, %37], [null, %42]
	# %45 = load i32, i32* %9
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %46 = and i32 %45, -3
	movq	%rdx, %rax
	movq	$-3, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %47 = or i32 %46, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %48 = call i32 @tinfl_decompress (i8* %10, i8* %33, i8* %15, i8* %34, i8* %44, i8* %16, i32 %47)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	-48(%rbp), %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_decompress
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %48, i32* %18
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %49 = load i32, i32* %18
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %50 = icmp slt i32 %49, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %50, label %54, label %51
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_heap51
	jmp	tinfl_decompress_mem_to_heap54
	.text
tinfl_decompress_mem_to_heap51:
	# %52 = load i32, i32* %18
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %53 = icmp eq i32 %52, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %53, label %54, label %57
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_heap57
	jmp	tinfl_decompress_mem_to_heap54
	.text
tinfl_decompress_mem_to_heap54:
	# %55 = load i8*, i8** %11
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %55)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %56 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %56
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %5
	movq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %88
	jmp	tinfl_decompress_mem_to_heap88
	.text
tinfl_decompress_mem_to_heap57:
	# %58 = load i64, i64* %15
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %59 = load i64, i64* %13
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = add i64 %59, %58
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %60, i64* %13
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %61 = load i64, i64* %16
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %62 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %63 = load i64, i64* %62
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = add i64 %63, %61
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %64, i64* %62
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %65 = load i32, i32* %18
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %66 = icmp eq i32 %65, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %66, label %67, label %68
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_heap68
	jmp	tinfl_decompress_mem_to_heap67
	.text
tinfl_decompress_mem_to_heap67:
	# br label %86
	jmp	tinfl_decompress_mem_to_heap86
	.text
tinfl_decompress_mem_to_heap68:
	# %69 = load i64, i64* %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %70 = mul i64 %69, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %70, i64* %17
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %71 = load i64, i64* %17
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %72 = icmp ult i64 %71, 128
	movq	%rdx, %rax
	movq	$128, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %72, label %73, label %74
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_heap74
	jmp	tinfl_decompress_mem_to_heap73
	.text
tinfl_decompress_mem_to_heap73:
	# store i64 128, i64* %17
	movq	$128, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# br label %74
	jmp	tinfl_decompress_mem_to_heap74
	.text
tinfl_decompress_mem_to_heap74:
	# %75 = load i8*, i8** %11
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %76 = load i64, i64* %17
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = call i8* @realloc (i8* %75, i64 %76)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_realloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %77, i8** %12
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %78 = load i8*, i8** %12
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %79 = icmp ne i8* %78, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %79, label %83, label %80
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_heap80
	jmp	tinfl_decompress_mem_to_heap83
	.text
tinfl_decompress_mem_to_heap80:
	# %81 = load i8*, i8** %11
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %81)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %82 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %82
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %5
	movq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %88
	jmp	tinfl_decompress_mem_to_heap88
	.text
tinfl_decompress_mem_to_heap83:
	# %84 = load i8*, i8** %12
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %84, i8** %11
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# %85 = load i64, i64* %17
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %85, i64* %14
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# br label %23
	jmp	tinfl_decompress_mem_to_heap23
	.text
tinfl_decompress_mem_to_heap86:
	# %87 = load i8*, i8** %11
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %87, i8** %5
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %88
	jmp	tinfl_decompress_mem_to_heap88
	.text
tinfl_decompress_mem_to_heap88:
	# %89 = load i8*, i8** %5
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %89
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tinfl_decompress_mem_to_mem
_tinfl_decompress_mem_to_mem:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%rbx
	popq	%rdx
	popq	%rdi
	popq	%r8
	popq	%r15
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r12
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %11 = alloca %struct.tinfl_decompressor_tag
	subq	$8372, %rsp
	movq	%rsp, %r11
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# store i8* %0, i8** %6
	movq	%r15, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %7
	movq	%r8, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %9
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %10
	movq	%rbx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %13
	jmp	tinfl_decompress_mem_to_mem13
	.text
tinfl_decompress_mem_to_mem13:
	# %14 = getelementptr %struct.tinfl_decompressor_tag, i8* %11, i32 0, i32 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %15
	jmp	tinfl_decompress_mem_to_mem15
	.text
tinfl_decompress_mem_to_mem15:
	# %16 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %17 = load i8*, i8** %6
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %18 = load i8*, i8** %6
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %19 = load i32, i32* %10
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %20 = and i32 %19, -3
	movq	%rbx, %rax
	movq	$-3, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %21 = or i32 %20, 4
	movq	%rbx, %rax
	movq	$4, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %22 = call i32 @tinfl_decompress (i8* %11, i8* %16, i8* %9, i8* %17, i8* %18, i8* %7, i32 %21)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_decompress
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 %22, i32* %12
	movq	%rbx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %23 = load i32, i32* %12
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %24 = icmp ne i32 %23, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %24, label %25, label %26
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_mem26
	jmp	tinfl_decompress_mem_to_mem25
	.text
tinfl_decompress_mem_to_mem25:
	# br label %28
	movq	$-1, %rdx
	jmp	tinfl_decompress_mem_to_mem28
	.text
tinfl_decompress_mem_to_mem26:
	# %27 = load i64, i64* %7
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %28
	jmp	tinfl_decompress_mem_to_mem28
	.text
tinfl_decompress_mem_to_mem28:
	# %29 = phi i64 [-1, %25], [%27, %26]
	# ret i64 %29
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tinfl_decompress_mem_to_callback
_tinfl_decompress_mem_to_callback:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$56, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%rbx
	popq	%rdx
	popq	%rsi
	popq	%r9
	popq	-8(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %13 = alloca %struct.tinfl_decompressor_tag
	subq	$8372, %rsp
	movq	%rsp, %r14
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %15 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r12
	# %16 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %17 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %18 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %7
	movq	-8(%rbp), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %8
	movq	%r9, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %9
	movq	%rsi, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %10
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %11
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %20 = call i8* @malloc (i64 32768)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$32768, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %20, i8** %14
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %15
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %16
	movq	$0, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %21 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %22 = icmp ne i8* %21, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %22, label %24, label %23
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_callback23
	jmp	tinfl_decompress_mem_to_callback24
	.text
tinfl_decompress_mem_to_callback23:
	# store i32 -1, i32* %6
	movq	$-1, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %82
	jmp	tinfl_decompress_mem_to_callback82
	.text
tinfl_decompress_mem_to_callback24:
	# %25 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %26 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %27 = call i64 @llvm.objectsize.i64.p0 (i8* %26, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %28 = call i8* @__memset_chk (i8* %25, i32 0, i64 32768, i64 %27)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32768, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %29
	jmp	tinfl_decompress_mem_to_callback29
	.text
tinfl_decompress_mem_to_callback29:
	# %30 = getelementptr %struct.tinfl_decompressor_tag, i8* %13, i32 0, i32 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %30
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %31
	jmp	tinfl_decompress_mem_to_callback31
	.text
tinfl_decompress_mem_to_callback31:
	# br label %32
	jmp	tinfl_decompress_mem_to_callback32
	.text
tinfl_decompress_mem_to_callback32:
	# %33 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = load i64, i64* %33
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %35 = load i64, i64* %15
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = sub i64 %34, %35
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %36, i64* %17
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %37 = load i64, i64* %16
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = sub i64 32768, %37
	movq	$32768, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %38, i64* %18
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %39 = load i8*, i8** %7
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = load i64, i64* %15
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = getelementptr i8, i8* %39, i64 %40
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %42 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %43 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %44 = load i64, i64* %16
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = getelementptr i8, i8* %43, i64 %44
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %46 = load i32, i32* %11
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %47 = and i32 %46, -7
	movq	%rdx, %rax
	movq	$-7, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %48 = call i32 @tinfl_decompress (i8* %13, i8* %41, i8* %17, i8* %42, i8* %45, i8* %18, i32 %47)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r14, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_decompress
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %48, i32* %19
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %49 = load i64, i64* %17
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %50 = load i64, i64* %15
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %51 = add i64 %50, %49
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %51, i64* %15
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %52 = load i64, i64* %18
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = icmp ne i64 %52, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %53, label %54, label %65
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_callback65
	jmp	tinfl_decompress_mem_to_callback54
	.text
tinfl_decompress_mem_to_callback54:
	# %55 = load i8*, i8** %9
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %56 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %57 = load i64, i64* %16
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = getelementptr i8, i8* %56, i64 %57
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %59 = load i64, i64* %18
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = trunc i64 %59 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %61 = load i8*, i8** %10
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = call i32 %55 (i8* %58, i32 %60, i8* %61)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %63 = icmp ne i32 %62, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %63, label %65, label %64
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_callback64
	jmp	tinfl_decompress_mem_to_callback65
	.text
tinfl_decompress_mem_to_callback64:
	# br label %77
	jmp	tinfl_decompress_mem_to_callback77
	.text
tinfl_decompress_mem_to_callback65:
	# %66 = load i32, i32* %19
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %67 = icmp ne i32 %66, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %67, label %68, label %72
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompress_mem_to_callback72
	jmp	tinfl_decompress_mem_to_callback68
	.text
tinfl_decompress_mem_to_callback68:
	# %69 = load i32, i32* %19
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %70 = icmp eq i32 %69, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %71 = zext i1 %70 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %71, i32* %12
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %77
	jmp	tinfl_decompress_mem_to_callback77
	.text
tinfl_decompress_mem_to_callback72:
	# %73 = load i64, i64* %16
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %74 = load i64, i64* %18
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %75 = add i64 %73, %74
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %76 = and i64 %75, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %76, i64* %16
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# br label %32
	jmp	tinfl_decompress_mem_to_callback32
	.text
tinfl_decompress_mem_to_callback77:
	# %78 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %78)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %79 = load i64, i64* %15
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %80 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %79, i64* %80
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %81 = load i32, i32* %12
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %81, i32* %6
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %82
	jmp	tinfl_decompress_mem_to_callback82
	.text
tinfl_decompress_mem_to_callback82:
	# %83 = load i32, i32* %6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %83
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tinfl_decompressor_alloc
_tinfl_decompressor_alloc:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	# %1 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %2 = call i8* @malloc (i64 8376)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$8376, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %2, i8** %1
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %1
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = icmp ne i8* %3, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %4, label %5, label %10
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tinfl_decompressor_alloc10
	jmp	tinfl_decompressor_alloc5
	.text
tinfl_decompressor_alloc5:
	# br label %6
	jmp	tinfl_decompressor_alloc6
	.text
tinfl_decompressor_alloc6:
	# %7 = load i8*, i8** %1
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %8 = getelementptr %struct.tinfl_decompressor_tag, i8* %7, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %9
	jmp	tinfl_decompressor_alloc9
	.text
tinfl_decompressor_alloc9:
	# br label %10
	jmp	tinfl_decompressor_alloc10
	.text
tinfl_decompressor_alloc10:
	# %11 = load i8*, i8** %1
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %11
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tinfl_decompressor_free
_tinfl_decompressor_free:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %3)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_zero_struct
_mz_zip_zero_struct:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = icmp ne i8* %3, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %4, label %5, label %10
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_zero_struct10
	jmp	mz_zip_zero_struct5
	.text
mz_zip_zero_struct5:
	# %6 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %7 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %8 = call i64 @llvm.objectsize.i64.p0 (i8* %7, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %9 = call i8* @__memset_chk (i8* %6, i32 0, i64 112, i64 %8)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$112, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %10
	jmp	mz_zip_zero_struct10
	.text
mz_zip_zero_struct10:
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_end
_mz_zip_reader_end:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = call i32 @mz_zip_reader_end_internal (i8* %3, i32 1)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %4
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_end_internal
_mz_zip_reader_end_internal:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %10
	movq	%rsi, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %11
	movq	%rbx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %12
	movq	$1, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %14 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = icmp ne i8* %14, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %15, label %17, label %16
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal16
	jmp	mz_zip_reader_end_internal17
	.text
mz_zip_reader_end_internal16:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %138
	jmp	mz_zip_reader_end_internal138
	.text
mz_zip_reader_end_internal17:
	# %18 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %19 = getelementptr %struct.mz_zip_archive, i8* %18, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %20 = load i8*, i8** %19
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %21 = icmp ne i8* %20, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %21, label %22, label %37
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal37
	jmp	mz_zip_reader_end_internal22
	.text
mz_zip_reader_end_internal22:
	# %23 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %24 = getelementptr %struct.mz_zip_archive, i8* %23, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %25 = load i8*, i8** %24
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %26 = icmp ne i8* %25, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %26, label %27, label %37
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal37
	jmp	mz_zip_reader_end_internal27
	.text
mz_zip_reader_end_internal27:
	# %28 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %29 = getelementptr %struct.mz_zip_archive, i8* %28, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %30 = load i8*, i8** %29
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %31 = icmp ne i8* %30, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %31, label %32, label %37
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal37
	jmp	mz_zip_reader_end_internal32
	.text
mz_zip_reader_end_internal32:
	# %33 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %35 = load i32, i32* %34
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %36 = icmp ne i32 %35, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %36, label %37, label %44
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal44
	jmp	mz_zip_reader_end_internal37
	.text
mz_zip_reader_end_internal37:
	# %38 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %39 = icmp ne i32 %38, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %39, label %40, label %43
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal43
	jmp	mz_zip_reader_end_internal40
	.text
mz_zip_reader_end_internal40:
	# %41 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %42 = getelementptr %struct.mz_zip_archive, i8* %41, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 24, i32* %42
	movq	$24, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %43
	jmp	mz_zip_reader_end_internal43
	.text
mz_zip_reader_end_internal43:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %138
	jmp	mz_zip_reader_end_internal138
	.text
mz_zip_reader_end_internal44:
	# %45 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %46 = getelementptr %struct.mz_zip_archive, i8* %45, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %47 = load i8*, i8** %46
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %48 = icmp ne i8* %47, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %48, label %49, label %134
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal134
	jmp	mz_zip_reader_end_internal49
	.text
mz_zip_reader_end_internal49:
	# %50 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %51 = getelementptr %struct.mz_zip_archive, i8* %50, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %52 = load i8*, i8** %51
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %52, i8** %13
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %53 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %54 = getelementptr %struct.mz_zip_archive, i8* %53, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* null, i8** %54
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %55 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %56 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %57 = getelementptr %struct.mz_zip_internal_state_tag, i8* %56, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %55, i8** %3
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i8* %57, i8** %4
	movq	%rbx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# %58 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %59 = getelementptr %struct.mz_zip_archive, i8* %58, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %60 = load i8*, i8** %59
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %61 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = getelementptr %struct.mz_zip_archive, i8* %61, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %63 = load i8*, i8** %62
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %64 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = load i8*, i8** %64
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %60 (i8* %63, i8* %65)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %66 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %67 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = call i64 @llvm.objectsize.i64.p0 (i8* %67, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %69 = call i8* @__memset_chk (i8* %66, i32 0, i64 32, i64 %68)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %70 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %71 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %72 = getelementptr %struct.mz_zip_internal_state_tag, i8* %71, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %70, i8** %5
	movq	%rbx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i8* %72, i8** %6
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %73 = load i8*, i8** %5
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %74 = getelementptr %struct.mz_zip_archive, i8* %73, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %75 = load i8*, i8** %74
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %76 = load i8*, i8** %5
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = getelementptr %struct.mz_zip_archive, i8* %76, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %78 = load i8*, i8** %77
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %79 = load i8*, i8** %6
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %80 = load i8*, i8** %79
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %75 (i8* %78, i8* %80)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %81 = load i8*, i8** %6
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %82 = load i8*, i8** %6
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %83 = call i64 @llvm.objectsize.i64.p0 (i8* %82, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %84 = call i8* @__memset_chk (i8* %81, i32 0, i64 32, i64 %83)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %85 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %86 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %87 = getelementptr %struct.mz_zip_internal_state_tag, i8* %86, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %85, i8** %7
	movq	%rbx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i8* %87, i8** %8
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %88 = load i8*, i8** %7
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %89 = getelementptr %struct.mz_zip_archive, i8* %88, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %90 = load i8*, i8** %89
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %91 = load i8*, i8** %7
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = getelementptr %struct.mz_zip_archive, i8* %91, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %93 = load i8*, i8** %92
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %94 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %95 = load i8*, i8** %94
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %90 (i8* %93, i8* %95)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %96 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %97 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %98 = call i64 @llvm.objectsize.i64.p0 (i8* %97, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %99 = call i8* @__memset_chk (i8* %96, i32 0, i64 32, i64 %98)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %100 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %101 = getelementptr %struct.mz_zip_internal_state_tag, i8* %100, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %102 = load i8*, i8** %101
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %103 = icmp ne i8* %102, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %103, label %104, label %126
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal126
	jmp	mz_zip_reader_end_internal104
	.text
mz_zip_reader_end_internal104:
	# %105 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %106 = getelementptr %struct.mz_zip_archive, i8* %105, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %107 = load i32, i32* %106
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %108 = icmp eq i32 %107, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %108, label %109, label %123
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal123
	jmp	mz_zip_reader_end_internal109
	.text
mz_zip_reader_end_internal109:
	# %110 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr %struct.mz_zip_internal_state_tag, i8* %110, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %112 = load i8*, i8** %111
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %113 = call i32 @fclose (i8* %112)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_fclose
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %114 = icmp eq i32 %113, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %114, label %115, label %122
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal122
	jmp	mz_zip_reader_end_internal115
	.text
mz_zip_reader_end_internal115:
	# %116 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %117 = icmp ne i32 %116, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %117, label %118, label %121
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_end_internal121
	jmp	mz_zip_reader_end_internal118
	.text
mz_zip_reader_end_internal118:
	# %119 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %120 = getelementptr %struct.mz_zip_archive, i8* %119, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 21, i32* %120
	movq	$21, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %121
	jmp	mz_zip_reader_end_internal121
	.text
mz_zip_reader_end_internal121:
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %122
	jmp	mz_zip_reader_end_internal122
	.text
mz_zip_reader_end_internal122:
	# br label %123
	jmp	mz_zip_reader_end_internal123
	.text
mz_zip_reader_end_internal123:
	# %124 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = getelementptr %struct.mz_zip_internal_state_tag, i8* %124, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %125
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %126
	jmp	mz_zip_reader_end_internal126
	.text
mz_zip_reader_end_internal126:
	# %127 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = getelementptr %struct.mz_zip_archive, i8* %127, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %129 = load i8*, i8** %128
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %130 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %131 = getelementptr %struct.mz_zip_archive, i8* %130, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %132 = load i8*, i8** %131
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %133 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %129 (i8* %132, i8* %133)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %134
	jmp	mz_zip_reader_end_internal134
	.text
mz_zip_reader_end_internal134:
	# %135 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %136 = getelementptr %struct.mz_zip_archive, i8* %135, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %136
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %137 = load i32, i32* %12
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %137, i32* %9
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %138
	jmp	mz_zip_reader_end_internal138
	.text
mz_zip_reader_end_internal138:
	# %139 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %139
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_init
_mz_zip_reader_init:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%r11
	popq	%r12
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %7
	movq	%r12, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %8
	movq	%r11, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %9
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %10 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %11 = icmp ne i8* %10, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %11, label %12, label %17
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init17
	jmp	mz_zip_reader_init12
	.text
mz_zip_reader_init12:
	# %13 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.mz_zip_archive, i8* %13, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %15 = load i8*, i8** %14
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = icmp ne i8* %15, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %16, label %26, label %17
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init17
	jmp	mz_zip_reader_init26
	.text
mz_zip_reader_init17:
	# %18 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %18, i8** %4
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %5
	movq	$24, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %19 = load i8*, i8** %4
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %20 = icmp ne i8* %19, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %20, label %21, label %25
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init25
	jmp	mz_zip_reader_init21
	.text
mz_zip_reader_init21:
	# %22 = load i32, i32* %5
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %23 = load i8*, i8** %4
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %24 = getelementptr %struct.mz_zip_archive, i8* %23, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %22, i32* %24
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %25
	jmp	mz_zip_reader_init25
	.text
mz_zip_reader_init25:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	mz_zip_reader_init46
	.text
mz_zip_reader_init26:
	# %27 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %28 = load i32, i32* %9
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %29 = call i32 @mz_zip_reader_init_internal (i8* %27, i32 %28)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %30 = icmp ne i32 %29, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %30, label %32, label %31
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init31
	jmp	mz_zip_reader_init32
	.text
mz_zip_reader_init31:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	mz_zip_reader_init46
	.text
mz_zip_reader_init32:
	# %33 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %34
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %35 = load i64, i64* %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %36 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %37 = getelementptr %struct.mz_zip_archive, i8* %36, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %35, i64* %37
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %38 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %39 = load i32, i32* %9
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = call i32 @mz_zip_reader_read_central_dir (i8* %38, i32 %39)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_read_central_dir
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %41 = icmp ne i32 %40, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %41, label %45, label %42
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init42
	jmp	mz_zip_reader_init45
	.text
mz_zip_reader_init42:
	# %43 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %44 = call i32 @mz_zip_reader_end_internal (i8* %43, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	mz_zip_reader_init46
	.text
mz_zip_reader_init45:
	# store i32 1, i32* %6
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	mz_zip_reader_init46
	.text
mz_zip_reader_init46:
	# %47 = load i32, i32* %6
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %47
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_init_internal
_mz_zip_reader_init_internal:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%r10
	popq	%r12
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %8
	movq	%r12, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %9
	movq	%r10, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %10 = load i32, i32* %9
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %11 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %12 = icmp ne i8* %11, null
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r10
	setne	%r10b
	# br i1 %12, label %13, label %23
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal23
	jmp	mz_zip_reader_init_internal13
	.text
mz_zip_reader_init_internal13:
	# %14 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %15 = getelementptr %struct.mz_zip_archive, i8* %14, i32 0, i32 15
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %16 = load i8*, i8** %15
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %17 = icmp ne i8* %16, null
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r10
	setne	%r10b
	# br i1 %17, label %23, label %18
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal18
	jmp	mz_zip_reader_init_internal23
	.text
mz_zip_reader_init_internal18:
	# %19 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %20 = getelementptr %struct.mz_zip_archive, i8* %19, i32 0, i32 3
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %21 = load i32, i32* %20
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %22 = icmp ne i32 %21, 0
	movq	%r10, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r10
	setne	%r10b
	# br i1 %22, label %23, label %32
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal32
	jmp	mz_zip_reader_init_internal23
	.text
mz_zip_reader_init_internal23:
	# %24 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %24, i8** %3
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %4
	movq	$24, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %25 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %26 = icmp ne i8* %25, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %26, label %27, label %31
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal31
	jmp	mz_zip_reader_init_internal27
	.text
mz_zip_reader_init_internal27:
	# %28 = load i32, i32* %4
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %29 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %30 = getelementptr %struct.mz_zip_archive, i8* %29, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %28, i32* %30
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %31
	jmp	mz_zip_reader_init_internal31
	.text
mz_zip_reader_init_internal31:
	# store i32 0, i32* %7
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %123
	jmp	mz_zip_reader_init_internal123
	.text
mz_zip_reader_init_internal32:
	# %33 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %35 = load i8*, i8** %34
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = icmp ne i8* %35, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %36, label %40, label %37
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal37
	jmp	mz_zip_reader_init_internal40
	.text
mz_zip_reader_init_internal37:
	# %38 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %39 = getelementptr %struct.mz_zip_archive, i8* %38, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @miniz_def_alloc_func, i8** %39
	leaq	_miniz_def_alloc_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_reader_init_internal40
	.text
mz_zip_reader_init_internal40:
	# %41 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %42 = getelementptr %struct.mz_zip_archive, i8* %41, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %43 = load i8*, i8** %42
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %44 = icmp ne i8* %43, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %44, label %48, label %45
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal45
	jmp	mz_zip_reader_init_internal48
	.text
mz_zip_reader_init_internal45:
	# %46 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = getelementptr %struct.mz_zip_archive, i8* %46, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @miniz_def_free_func, i8** %47
	leaq	_miniz_def_free_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %48
	jmp	mz_zip_reader_init_internal48
	.text
mz_zip_reader_init_internal48:
	# %49 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = getelementptr %struct.mz_zip_archive, i8* %49, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %51 = load i8*, i8** %50
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %52 = icmp ne i8* %51, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %52, label %56, label %53
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal53
	jmp	mz_zip_reader_init_internal56
	.text
mz_zip_reader_init_internal53:
	# %54 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = getelementptr %struct.mz_zip_archive, i8* %54, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @miniz_def_realloc_func, i8** %55
	leaq	_miniz_def_realloc_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %56
	jmp	mz_zip_reader_init_internal56
	.text
mz_zip_reader_init_internal56:
	# %57 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = getelementptr %struct.mz_zip_archive, i8* %57, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %58
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %59 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = getelementptr %struct.mz_zip_archive, i8* %59, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %60
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %61 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = getelementptr %struct.mz_zip_archive, i8* %61, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %62
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %63 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = getelementptr %struct.mz_zip_archive, i8* %63, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %64
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %65 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %66 = getelementptr %struct.mz_zip_archive, i8* %65, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %67 = load i8*, i8** %66
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %69 = getelementptr %struct.mz_zip_archive, i8* %68, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %70 = load i8*, i8** %69
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = call i8* %67 (i8* %70, i64 1, i64 152)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$152, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r10
	# %72 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %73 = getelementptr %struct.mz_zip_archive, i8* %72, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %71, i8** %73
	movq	%r10, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %74 = icmp eq i8* null, %71
	movq	$0, %rax
	movq	%r10, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %74, label %75, label %84
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal84
	jmp	mz_zip_reader_init_internal75
	.text
mz_zip_reader_init_internal75:
	# %76 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %76, i8** %5
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %6
	movq	$16, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %77 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %78 = icmp ne i8* %77, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %78, label %79, label %83
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_internal83
	jmp	mz_zip_reader_init_internal79
	.text
mz_zip_reader_init_internal79:
	# %80 = load i32, i32* %6
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %81 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %82 = getelementptr %struct.mz_zip_archive, i8* %81, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %80, i32* %82
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %83
	jmp	mz_zip_reader_init_internal83
	.text
mz_zip_reader_init_internal83:
	# store i32 0, i32* %7
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %123
	jmp	mz_zip_reader_init_internal123
	.text
mz_zip_reader_init_internal84:
	# %85 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = getelementptr %struct.mz_zip_archive, i8* %85, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %87 = load i8*, i8** %86
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %88 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %89 = getelementptr %struct.mz_zip_archive, i8* %88, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %90 = load i8*, i8** %89
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %91 = call i64 @llvm.objectsize.i64.p0 (i8* %90, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %92 = call i8* @__memset_chk (i8* %87, i32 0, i64 152, i64 %91)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$152, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %93 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %94 = getelementptr %struct.mz_zip_archive, i8* %93, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %95 = load i8*, i8** %94
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %96 = getelementptr %struct.mz_zip_internal_state_tag, i8* %95, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %97 = getelementptr %struct.mz_zip_array, i8* %96, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %97
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %98 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = getelementptr %struct.mz_zip_archive, i8* %98, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %100 = load i8*, i8** %99
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %101 = getelementptr %struct.mz_zip_internal_state_tag, i8* %100, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %102 = getelementptr %struct.mz_zip_array, i8* %101, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 4, i32* %102
	movq	$4, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %103 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %104 = getelementptr %struct.mz_zip_archive, i8* %103, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %105 = load i8*, i8** %104
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %106 = getelementptr %struct.mz_zip_internal_state_tag, i8* %105, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %107 = getelementptr %struct.mz_zip_array, i8* %106, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 4, i32* %107
	movq	$4, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %108 = load i32, i32* %9
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %109 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %110 = getelementptr %struct.mz_zip_archive, i8* %109, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %111 = load i8*, i8** %110
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %112 = getelementptr %struct.mz_zip_internal_state_tag, i8* %111, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %108, i32* %112
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %113 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %114 = getelementptr %struct.mz_zip_archive, i8* %113, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %115 = load i8*, i8** %114
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %116 = getelementptr %struct.mz_zip_internal_state_tag, i8* %115, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %116
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %117 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = getelementptr %struct.mz_zip_archive, i8* %117, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %119 = load i8*, i8** %118
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %120 = getelementptr %struct.mz_zip_internal_state_tag, i8* %119, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %120
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %121 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %122 = getelementptr %struct.mz_zip_archive, i8* %121, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %122
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %7
	movq	$1, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %123
	jmp	mz_zip_reader_init_internal123
	.text
mz_zip_reader_init_internal123:
	# %124 = load i32, i32* %7
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %124
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_read_central_dir
_mz_zip_reader_read_central_dir:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$848, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rdx
	popq	%rbx
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -80(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %16 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -152(%rbp)
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %33 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %34 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %35 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -272(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -280(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -288(%rbp)
	# %38 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -296(%rbp)
	# %39 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -304(%rbp)
	# %40 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -312(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -320(%rbp)
	# %42 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -328(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -336(%rbp)
	# %44 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -344(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -352(%rbp)
	# %46 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -360(%rbp)
	# %47 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -368(%rbp)
	# %48 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -376(%rbp)
	# %49 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -384(%rbp)
	# %50 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -392(%rbp)
	# %51 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -400(%rbp)
	# %52 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -408(%rbp)
	# %53 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -416(%rbp)
	# %54 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -424(%rbp)
	# %55 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -432(%rbp)
	# %56 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -440(%rbp)
	# %57 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -448(%rbp)
	# %58 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -456(%rbp)
	# %59 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -464(%rbp)
	# %60 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -472(%rbp)
	# %61 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -480(%rbp)
	# %62 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -488(%rbp)
	# %63 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -496(%rbp)
	# %64 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -504(%rbp)
	# %65 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -512(%rbp)
	# %66 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -520(%rbp)
	# %67 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -528(%rbp)
	# %68 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -536(%rbp)
	# %69 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -544(%rbp)
	# %70 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -552(%rbp)
	# %71 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -560(%rbp)
	# %72 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -568(%rbp)
	# %73 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -576(%rbp)
	# %74 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -584(%rbp)
	# %75 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -592(%rbp)
	# %76 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -600(%rbp)
	# %77 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -608(%rbp)
	# %78 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -616(%rbp)
	# %79 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -624(%rbp)
	# %80 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -632(%rbp)
	# %81 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -640(%rbp)
	# %82 = alloca [1024 x i32]
	subq	$4096, %rsp
	movq	%rsp, -648(%rbp)
	# %83 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -656(%rbp)
	# %84 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -664(%rbp)
	# %85 = alloca [5 x i32]
	subq	$20, %rsp
	movq	%rsp, -672(%rbp)
	# %86 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -680(%rbp)
	# %87 = alloca [14 x i32]
	subq	$56, %rsp
	movq	%rsp, -688(%rbp)
	# %88 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -696(%rbp)
	# %89 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -704(%rbp)
	# %90 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -712(%rbp)
	# %91 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -720(%rbp)
	# %92 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -728(%rbp)
	# %93 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -736(%rbp)
	# %94 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %95 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -744(%rbp)
	# %96 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -752(%rbp)
	# %97 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -760(%rbp)
	# %98 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -768(%rbp)
	# %99 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -776(%rbp)
	# %100 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -784(%rbp)
	# %101 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -792(%rbp)
	# %102 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -800(%rbp)
	# %103 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -808(%rbp)
	# %104 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -816(%rbp)
	# %105 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -824(%rbp)
	# %106 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -832(%rbp)
	# %107 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -840(%rbp)
	# %108 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -848(%rbp)
	# %109 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# store i8* %0, i8** %73
	movq	%rbx, %rax
	movq	-576(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %74
	movq	%rdx, %rax
	movq	-584(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %75
	movq	$0, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %76
	movq	$0, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %77
	movq	$0, %rax
	movq	-608(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %78
	movq	$0, %rax
	movq	-616(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i64 0, i64* %79
	movq	$0, %rax
	movq	-624(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %80
	movq	$0, %rax
	movq	-632(%rbp), %rcx
	movq	%rax, (%rcx)
	# %110 = getelementptr [1024 x i32], i8* %82, i64 0, i64 0
	movq	-648(%rbp), %rcx
	movq	$0, %rax
	imulq	$4096, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %110, i8** %83
	movq	%rdx, %rax
	movq	-656(%rbp), %rcx
	movq	%rax, (%rcx)
	# %111 = load i32, i32* %74
	movq	-584(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %112 = and i32 %111, 2048
	movq	%rdx, %rax
	movq	$2048, %rcx
	andq	%rcx, %rax
	movq	%rax, -264(%rbp)
	# %113 = icmp eq i32 %112, 0
	movq	-264(%rbp), %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %114 = zext i1 %113 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %114, i32* %84
	movq	%rdx, %rax
	movq	-664(%rbp), %rcx
	movl	%eax, (%rcx)
	# %115 = getelementptr [5 x i32], i8* %85, i64 0, i64 0
	movq	-672(%rbp), %rcx
	movq	$0, %rax
	imulq	$20, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %115, i8** %86
	movq	%rdx, %rax
	movq	-680(%rbp), %rcx
	movq	%rax, (%rcx)
	# %116 = getelementptr [14 x i32], i8* %87, i64 0, i64 0
	movq	-688(%rbp), %rcx
	movq	$0, %rax
	imulq	$56, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %116, i8** %88
	movq	%rdx, %rax
	movq	-696(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %89
	movq	$0, %rax
	movq	-704(%rbp), %rcx
	movq	%rax, (%rcx)
	# %117 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = getelementptr %struct.mz_zip_archive, i8* %117, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %119 = load i64, i64* %118
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %120 = icmp ult i64 %119, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %120, label %121, label %130
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir130
	jmp	mz_zip_reader_read_central_dir121
	.text
mz_zip_reader_read_central_dir121:
	# %122 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %122, i8** %18
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 8, i32* %19
	movq	$8, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %123 = load i8*, i8** %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %124 = icmp ne i8* %123, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %124, label %125, label %129
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir129
	jmp	mz_zip_reader_read_central_dir125
	.text
mz_zip_reader_read_central_dir125:
	# %126 = load i32, i32* %19
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %127 = load i8*, i8** %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = getelementptr %struct.mz_zip_archive, i8* %127, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %126, i32* %128
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_read_central_dir129
	.text
mz_zip_reader_read_central_dir129:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir130:
	# %131 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %132 = call i32 @mz_zip_reader_locate_header_sig (i8* %131, i32 101010256, i32 22, i8* %80)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$101010256, %rax
	pushq	%rax
	movq	$22, %rax
	pushq	%rax
	movq	-632(%rbp), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_header_sig
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %133 = icmp ne i32 %132, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %133, label %143, label %134
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir134
	jmp	mz_zip_reader_read_central_dir143
	.text
mz_zip_reader_read_central_dir134:
	# %135 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %135, i8** %20
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 7, i32* %21
	movq	$7, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# %136 = load i8*, i8** %20
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %137 = icmp ne i8* %136, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %137, label %138, label %142
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir142
	jmp	mz_zip_reader_read_central_dir138
	.text
mz_zip_reader_read_central_dir138:
	# %139 = load i32, i32* %21
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %140 = load i8*, i8** %20
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %141 = getelementptr %struct.mz_zip_archive, i8* %140, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %139, i32* %141
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %142
	jmp	mz_zip_reader_read_central_dir142
	.text
mz_zip_reader_read_central_dir142:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir143:
	# %144 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %145 = getelementptr %struct.mz_zip_archive, i8* %144, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, -168(%rbp)
	# %146 = load i8*, i8** %145
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %147 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %148 = getelementptr %struct.mz_zip_archive, i8* %147, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %149 = load i8*, i8** %148
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %150 = load i64, i64* %80
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %151 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %152 = call i64 %146 (i8* %149, i64 %150, i8* %151, i64 22)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$22, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %153 = icmp ne i64 %152, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %153, label %154, label %163
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir163
	jmp	mz_zip_reader_read_central_dir154
	.text
mz_zip_reader_read_central_dir154:
	# %155 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %155, i8** %22
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %23
	movq	$20, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# %156 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %157 = icmp ne i8* %156, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %157, label %158, label %162
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir162
	jmp	mz_zip_reader_read_central_dir158
	.text
mz_zip_reader_read_central_dir158:
	# %159 = load i32, i32* %23
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %160 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %161 = getelementptr %struct.mz_zip_archive, i8* %160, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %159, i32* %161
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %162
	jmp	mz_zip_reader_read_central_dir162
	.text
mz_zip_reader_read_central_dir162:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir163:
	# %164 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %165 = getelementptr i8, i8* %164, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %166 = getelementptr i8, i8* %165, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %167 = load i8, i8* %166
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %168 = zext i8 %167 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %169 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %170 = getelementptr i8, i8* %169, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %171 = getelementptr i8, i8* %170, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %172 = load i8, i8* %171
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %173 = zext i8 %172 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %174 = shl i32 %173, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %175 = or i32 %168, %174
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %176 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %177 = getelementptr i8, i8* %176, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %178 = getelementptr i8, i8* %177, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %179 = load i8, i8* %178
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %180 = zext i8 %179 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %181 = shl i32 %180, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %182 = or i32 %175, %181
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %183 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %184 = getelementptr i8, i8* %183, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %185 = getelementptr i8, i8* %184, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %186 = load i8, i8* %185
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %187 = zext i8 %186 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %188 = shl i32 %187, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %189 = or i32 %182, %188
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %190 = icmp ne i32 %189, 101010256
	movq	%rdx, %rax
	movq	$101010256, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %190, label %191, label %200
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir200
	jmp	mz_zip_reader_read_central_dir191
	.text
mz_zip_reader_read_central_dir191:
	# %192 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %192, i8** %24
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 8, i32* %25
	movq	$8, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# %193 = load i8*, i8** %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %194 = icmp ne i8* %193, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %194, label %195, label %199
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir199
	jmp	mz_zip_reader_read_central_dir195
	.text
mz_zip_reader_read_central_dir195:
	# %196 = load i32, i32* %25
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %197 = load i8*, i8** %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %198 = getelementptr %struct.mz_zip_archive, i8* %197, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %196, i32* %198
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %199
	jmp	mz_zip_reader_read_central_dir199
	.text
mz_zip_reader_read_central_dir199:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir200:
	# %201 = load i64, i64* %80
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %202 = icmp sge i64 %201, 76
	movq	%rdx, %rax
	movq	$76, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setge	%dl
	# br i1 %202, label %203, label %367
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir367
	jmp	mz_zip_reader_read_central_dir203
	.text
mz_zip_reader_read_central_dir203:
	# %204 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %205 = getelementptr %struct.mz_zip_archive, i8* %204, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %206 = load i8*, i8** %205
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %207 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %208 = getelementptr %struct.mz_zip_archive, i8* %207, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %209 = load i8*, i8** %208
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %210 = load i64, i64* %80
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %211 = sub i64 %210, 20
	movq	%rdx, %rax
	movq	$20, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %212 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %213 = call i64 %206 (i8* %209, i64 %211, i8* %212, i64 20)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$20, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %214 = icmp eq i64 %213, 20
	movq	%rdx, %rax
	movq	$20, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %214, label %215, label %366
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir366
	jmp	mz_zip_reader_read_central_dir215
	.text
mz_zip_reader_read_central_dir215:
	# %216 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %217 = getelementptr i8, i8* %216, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %218 = getelementptr i8, i8* %217, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %219 = load i8, i8* %218
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %220 = zext i8 %219 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %221 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %222 = getelementptr i8, i8* %221, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %223 = getelementptr i8, i8* %222, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %224 = load i8, i8* %223
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %225 = zext i8 %224 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %226 = shl i32 %225, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %227 = or i32 %220, %226
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %228 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %229 = getelementptr i8, i8* %228, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %230 = getelementptr i8, i8* %229, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %231 = load i8, i8* %230
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %232 = zext i8 %231 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %233 = shl i32 %232, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %234 = or i32 %227, %233
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %235 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %236 = getelementptr i8, i8* %235, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %237 = getelementptr i8, i8* %236, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %238 = load i8, i8* %237
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %239 = zext i8 %238 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %240 = shl i32 %239, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %241 = or i32 %234, %240
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %242 = icmp eq i32 %241, 117853008
	movq	%rdx, %rax
	movq	$117853008, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %242, label %243, label %365
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir365
	jmp	mz_zip_reader_read_central_dir243
	.text
mz_zip_reader_read_central_dir243:
	# %244 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %245 = getelementptr i8, i8* %244, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %246 = getelementptr i8, i8* %245, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %247 = load i8, i8* %246
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %248 = zext i8 %247 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %249 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %250 = getelementptr i8, i8* %249, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %251 = getelementptr i8, i8* %250, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %252 = load i8, i8* %251
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %253 = zext i8 %252 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %254 = shl i32 %253, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %255 = or i32 %248, %254
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %256 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %257 = getelementptr i8, i8* %256, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %258 = getelementptr i8, i8* %257, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %259 = load i8, i8* %258
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %260 = zext i8 %259 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %261 = shl i32 %260, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %262 = or i32 %255, %261
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %263 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %264 = getelementptr i8, i8* %263, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %265 = getelementptr i8, i8* %264, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %266 = load i8, i8* %265
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %267 = zext i8 %266 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %268 = shl i32 %267, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %269 = or i32 %262, %268
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %270 = zext i32 %269 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %271 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %272 = getelementptr i8, i8* %271, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %273 = getelementptr i8, i8* %272, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %274 = getelementptr i8, i8* %273, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %275 = load i8, i8* %274
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %276 = zext i8 %275 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %277 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %278 = getelementptr i8, i8* %277, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %279 = getelementptr i8, i8* %278, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %280 = getelementptr i8, i8* %279, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %281 = load i8, i8* %280
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %282 = zext i8 %281 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %283 = shl i32 %282, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %284 = or i32 %276, %283
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %285 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %286 = getelementptr i8, i8* %285, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %287 = getelementptr i8, i8* %286, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %288 = getelementptr i8, i8* %287, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %289 = load i8, i8* %288
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %290 = zext i8 %289 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %291 = shl i32 %290, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %292 = or i32 %284, %291
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %293 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %294 = getelementptr i8, i8* %293, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %295 = getelementptr i8, i8* %294, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %296 = getelementptr i8, i8* %295, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %297 = load i8, i8* %296
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %298 = zext i8 %297 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %299 = shl i32 %298, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %300 = or i32 %292, %299
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %301 = zext i32 %300 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %302 = shl i64 %301, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %303 = or i64 %270, %302
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %303, i64* %89
	movq	%rdx, %rax
	movq	-704(%rbp), %rcx
	movq	%rax, (%rcx)
	# %304 = load i64, i64* %89
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %305 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %306 = getelementptr %struct.mz_zip_archive, i8* %305, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %307 = load i64, i64* %306
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %308 = sub i64 %307, 56
	movq	%rdx, %rax
	movq	$56, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %309 = icmp ugt i64 %304, %308
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %309, label %310, label %319
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir319
	jmp	mz_zip_reader_read_central_dir310
	.text
mz_zip_reader_read_central_dir310:
	# %311 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %311, i8** %26
	movq	%rdx, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 8, i32* %27
	movq	$8, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %312 = load i8*, i8** %26
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %313 = icmp ne i8* %312, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %313, label %314, label %318
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir318
	jmp	mz_zip_reader_read_central_dir314
	.text
mz_zip_reader_read_central_dir314:
	# %315 = load i32, i32* %27
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %316 = load i8*, i8** %26
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %317 = getelementptr %struct.mz_zip_archive, i8* %316, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %315, i32* %317
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %318
	jmp	mz_zip_reader_read_central_dir318
	.text
mz_zip_reader_read_central_dir318:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir319:
	# %320 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %321 = getelementptr %struct.mz_zip_archive, i8* %320, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %322 = load i8*, i8** %321
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %323 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %324 = getelementptr %struct.mz_zip_archive, i8* %323, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %325 = load i8*, i8** %324
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %326 = load i64, i64* %89
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %327 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %328 = call i64 %322 (i8* %325, i64 %326, i8* %327, i64 56)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$56, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %329 = icmp eq i64 %328, 56
	movq	%rdx, %rax
	movq	$56, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %329, label %330, label %364
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir364
	jmp	mz_zip_reader_read_central_dir330
	.text
mz_zip_reader_read_central_dir330:
	# %331 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %332 = getelementptr i8, i8* %331, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %333 = getelementptr i8, i8* %332, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %334 = load i8, i8* %333
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %335 = zext i8 %334 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %336 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %337 = getelementptr i8, i8* %336, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %338 = getelementptr i8, i8* %337, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %339 = load i8, i8* %338
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %340 = zext i8 %339 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %341 = shl i32 %340, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %342 = or i32 %335, %341
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %343 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %344 = getelementptr i8, i8* %343, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %345 = getelementptr i8, i8* %344, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %346 = load i8, i8* %345
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %347 = zext i8 %346 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %348 = shl i32 %347, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %349 = or i32 %342, %348
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %350 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %351 = getelementptr i8, i8* %350, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %352 = getelementptr i8, i8* %351, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %353 = load i8, i8* %352
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %354 = zext i8 %353 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %355 = shl i32 %354, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %356 = or i32 %349, %355
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %357 = icmp eq i32 %356, 101075792
	movq	%rdx, %rax
	movq	$101075792, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %357, label %358, label %363
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir363
	jmp	mz_zip_reader_read_central_dir358
	.text
mz_zip_reader_read_central_dir358:
	# %359 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %360 = getelementptr %struct.mz_zip_archive, i8* %359, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %361 = load i8*, i8** %360
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %362 = getelementptr %struct.mz_zip_internal_state_tag, i8* %361, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %362
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %363
	jmp	mz_zip_reader_read_central_dir363
	.text
mz_zip_reader_read_central_dir363:
	# br label %364
	jmp	mz_zip_reader_read_central_dir364
	.text
mz_zip_reader_read_central_dir364:
	# br label %365
	jmp	mz_zip_reader_read_central_dir365
	.text
mz_zip_reader_read_central_dir365:
	# br label %366
	jmp	mz_zip_reader_read_central_dir366
	.text
mz_zip_reader_read_central_dir366:
	# br label %367
	jmp	mz_zip_reader_read_central_dir367
	.text
mz_zip_reader_read_central_dir367:
	# %368 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %369 = getelementptr i8, i8* %368, i64 10
	movq	%rdx, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %370 = getelementptr i8, i8* %369, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %371 = load i8, i8* %370
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %372 = zext i8 %371 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %373 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %374 = getelementptr i8, i8* %373, i64 10
	movq	%rdx, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %375 = getelementptr i8, i8* %374, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %376 = load i8, i8* %375
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %377 = zext i8 %376 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %378 = shl i32 %377, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %379 = or i32 %372, %378
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %380 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %381 = getelementptr %struct.mz_zip_archive, i8* %380, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %379, i32* %381
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %382 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %383 = getelementptr i8, i8* %382, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %384 = getelementptr i8, i8* %383, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %385 = load i8, i8* %384
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %386 = zext i8 %385 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %387 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %388 = getelementptr i8, i8* %387, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %389 = getelementptr i8, i8* %388, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %390 = load i8, i8* %389
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %391 = zext i8 %390 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %392 = shl i32 %391, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %393 = or i32 %386, %392
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %393, i32* %76
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %394 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %395 = getelementptr i8, i8* %394, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %396 = getelementptr i8, i8* %395, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %397 = load i8, i8* %396
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %398 = zext i8 %397 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %399 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %400 = getelementptr i8, i8* %399, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %401 = getelementptr i8, i8* %400, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %402 = load i8, i8* %401
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %403 = zext i8 %402 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %404 = shl i32 %403, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %405 = or i32 %398, %404
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %405, i32* %77
	movq	%rdx, %rax
	movq	-608(%rbp), %rcx
	movl	%eax, (%rcx)
	# %406 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %407 = getelementptr i8, i8* %406, i64 6
	movq	%rdx, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %408 = getelementptr i8, i8* %407, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %409 = load i8, i8* %408
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %410 = zext i8 %409 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %411 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %412 = getelementptr i8, i8* %411, i64 6
	movq	%rdx, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %413 = getelementptr i8, i8* %412, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %414 = load i8, i8* %413
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %415 = zext i8 %414 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %416 = shl i32 %415, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %417 = or i32 %410, %416
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %417, i32* %78
	movq	%rdx, %rax
	movq	-616(%rbp), %rcx
	movl	%eax, (%rcx)
	# %418 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %419 = getelementptr i8, i8* %418, i64 12
	movq	%rdx, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %420 = getelementptr i8, i8* %419, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %421 = load i8, i8* %420
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %422 = zext i8 %421 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %423 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %424 = getelementptr i8, i8* %423, i64 12
	movq	%rdx, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %425 = getelementptr i8, i8* %424, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %426 = load i8, i8* %425
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %427 = zext i8 %426 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %428 = shl i32 %427, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %429 = or i32 %422, %428
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %430 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %431 = getelementptr i8, i8* %430, i64 12
	movq	%rdx, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %432 = getelementptr i8, i8* %431, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %433 = load i8, i8* %432
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %434 = zext i8 %433 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %435 = shl i32 %434, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %436 = or i32 %429, %435
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %437 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %438 = getelementptr i8, i8* %437, i64 12
	movq	%rdx, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %439 = getelementptr i8, i8* %438, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %440 = load i8, i8* %439
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %441 = zext i8 %440 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %442 = shl i32 %441, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %443 = or i32 %436, %442
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %443, i32* %75
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %444 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %445 = getelementptr i8, i8* %444, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %446 = getelementptr i8, i8* %445, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %447 = load i8, i8* %446
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %448 = zext i8 %447 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %449 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %450 = getelementptr i8, i8* %449, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %451 = getelementptr i8, i8* %450, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %452 = load i8, i8* %451
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %453 = zext i8 %452 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %454 = shl i32 %453, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %455 = or i32 %448, %454
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %456 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %457 = getelementptr i8, i8* %456, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %458 = getelementptr i8, i8* %457, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %459 = load i8, i8* %458
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %460 = zext i8 %459 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %461 = shl i32 %460, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %462 = or i32 %455, %461
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %463 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %464 = getelementptr i8, i8* %463, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %465 = getelementptr i8, i8* %464, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %466 = load i8, i8* %465
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %467 = zext i8 %466 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %468 = shl i32 %467, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %469 = or i32 %462, %468
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %470 = zext i32 %469 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %470, i64* %79
	movq	%rdx, %rax
	movq	-624(%rbp), %rcx
	movq	%rax, (%rcx)
	# %471 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %472 = getelementptr %struct.mz_zip_archive, i8* %471, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %473 = load i8*, i8** %472
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %474 = getelementptr %struct.mz_zip_internal_state_tag, i8* %473, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %475 = load i32, i32* %474
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %476 = icmp ne i32 %475, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %476, label %477, label %924
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir924
	jmp	mz_zip_reader_read_central_dir477
	.text
mz_zip_reader_read_central_dir477:
	# %478 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %479 = getelementptr i8, i8* %478, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %480 = getelementptr i8, i8* %479, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %481 = load i8, i8* %480
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %482 = zext i8 %481 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %483 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %484 = getelementptr i8, i8* %483, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %485 = getelementptr i8, i8* %484, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %486 = load i8, i8* %485
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %487 = zext i8 %486 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %488 = shl i32 %487, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %489 = or i32 %482, %488
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %490 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %491 = getelementptr i8, i8* %490, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %492 = getelementptr i8, i8* %491, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %493 = load i8, i8* %492
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %494 = zext i8 %493 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %495 = shl i32 %494, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %496 = or i32 %489, %495
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %497 = load i8*, i8** %86
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %498 = getelementptr i8, i8* %497, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %499 = getelementptr i8, i8* %498, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %500 = load i8, i8* %499
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %501 = zext i8 %500 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %502 = shl i32 %501, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %503 = or i32 %496, %502
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %503, i32* %90
	movq	%rdx, %rax
	movq	-712(%rbp), %rcx
	movl	%eax, (%rcx)
	# %504 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %505 = getelementptr i8, i8* %504, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %506 = getelementptr i8, i8* %505, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %507 = load i8, i8* %506
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %508 = zext i8 %507 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %509 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %510 = getelementptr i8, i8* %509, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %511 = getelementptr i8, i8* %510, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %512 = load i8, i8* %511
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %513 = zext i8 %512 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %514 = shl i32 %513, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %515 = or i32 %508, %514
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %516 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %517 = getelementptr i8, i8* %516, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %518 = getelementptr i8, i8* %517, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %519 = load i8, i8* %518
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %520 = zext i8 %519 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %521 = shl i32 %520, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %522 = or i32 %515, %521
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %523 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %524 = getelementptr i8, i8* %523, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %525 = getelementptr i8, i8* %524, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %526 = load i8, i8* %525
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %527 = zext i8 %526 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %528 = shl i32 %527, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %529 = or i32 %522, %528
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %530 = zext i32 %529 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %531 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %532 = getelementptr i8, i8* %531, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %533 = getelementptr i8, i8* %532, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %534 = getelementptr i8, i8* %533, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %535 = load i8, i8* %534
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %536 = zext i8 %535 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %537 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %538 = getelementptr i8, i8* %537, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %539 = getelementptr i8, i8* %538, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %540 = getelementptr i8, i8* %539, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %541 = load i8, i8* %540
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %542 = zext i8 %541 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %543 = shl i32 %542, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %544 = or i32 %536, %543
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %545 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %546 = getelementptr i8, i8* %545, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %547 = getelementptr i8, i8* %546, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %548 = getelementptr i8, i8* %547, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %549 = load i8, i8* %548
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %550 = zext i8 %549 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %551 = shl i32 %550, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %552 = or i32 %544, %551
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %553 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %554 = getelementptr i8, i8* %553, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %555 = getelementptr i8, i8* %554, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %556 = getelementptr i8, i8* %555, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %557 = load i8, i8* %556
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %558 = zext i8 %557 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %559 = shl i32 %558, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %560 = or i32 %552, %559
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %561 = zext i32 %560 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %562 = shl i64 %561, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %563 = or i64 %530, %562
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %563, i64* %91
	movq	%rdx, %rax
	movq	-720(%rbp), %rcx
	movq	%rax, (%rcx)
	# %564 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %565 = getelementptr i8, i8* %564, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %566 = getelementptr i8, i8* %565, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %567 = load i8, i8* %566
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %568 = zext i8 %567 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %569 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %570 = getelementptr i8, i8* %569, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %571 = getelementptr i8, i8* %570, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %572 = load i8, i8* %571
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %573 = zext i8 %572 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %574 = shl i32 %573, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %575 = or i32 %568, %574
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %576 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %577 = getelementptr i8, i8* %576, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %578 = getelementptr i8, i8* %577, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %579 = load i8, i8* %578
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %580 = zext i8 %579 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %581 = shl i32 %580, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %582 = or i32 %575, %581
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %583 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %584 = getelementptr i8, i8* %583, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %585 = getelementptr i8, i8* %584, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %586 = load i8, i8* %585
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %587 = zext i8 %586 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %588 = shl i32 %587, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %589 = or i32 %582, %588
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %590 = zext i32 %589 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %591 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %592 = getelementptr i8, i8* %591, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %593 = getelementptr i8, i8* %592, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %594 = getelementptr i8, i8* %593, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %595 = load i8, i8* %594
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %596 = zext i8 %595 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %597 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %598 = getelementptr i8, i8* %597, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %599 = getelementptr i8, i8* %598, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %600 = getelementptr i8, i8* %599, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %601 = load i8, i8* %600
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %602 = zext i8 %601 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %603 = shl i32 %602, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %604 = or i32 %596, %603
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %605 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %606 = getelementptr i8, i8* %605, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %607 = getelementptr i8, i8* %606, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %608 = getelementptr i8, i8* %607, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %609 = load i8, i8* %608
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %610 = zext i8 %609 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %611 = shl i32 %610, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %612 = or i32 %604, %611
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %613 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %614 = getelementptr i8, i8* %613, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %615 = getelementptr i8, i8* %614, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %616 = getelementptr i8, i8* %615, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %617 = load i8, i8* %616
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %618 = zext i8 %617 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %619 = shl i32 %618, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %620 = or i32 %612, %619
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %621 = zext i32 %620 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %622 = shl i64 %621, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %623 = or i64 %590, %622
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %623, i64* %92
	movq	%rdx, %rax
	movq	-728(%rbp), %rcx
	movq	%rax, (%rcx)
	# %624 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %625 = getelementptr i8, i8* %624, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %626 = getelementptr i8, i8* %625, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %627 = load i8, i8* %626
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %628 = zext i8 %627 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %629 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %630 = getelementptr i8, i8* %629, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %631 = getelementptr i8, i8* %630, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %632 = load i8, i8* %631
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %633 = zext i8 %632 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %634 = shl i32 %633, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %635 = or i32 %628, %634
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %636 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %637 = getelementptr i8, i8* %636, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %638 = getelementptr i8, i8* %637, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %639 = load i8, i8* %638
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %640 = zext i8 %639 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %641 = shl i32 %640, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %642 = or i32 %635, %641
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %643 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %644 = getelementptr i8, i8* %643, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %645 = getelementptr i8, i8* %644, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %646 = load i8, i8* %645
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %647 = zext i8 %646 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %648 = shl i32 %647, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %649 = or i32 %642, %648
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %650 = zext i32 %649 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %651 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %652 = getelementptr i8, i8* %651, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %653 = getelementptr i8, i8* %652, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %654 = getelementptr i8, i8* %653, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %655 = load i8, i8* %654
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %656 = zext i8 %655 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %657 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %658 = getelementptr i8, i8* %657, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %659 = getelementptr i8, i8* %658, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %660 = getelementptr i8, i8* %659, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %661 = load i8, i8* %660
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %662 = zext i8 %661 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %663 = shl i32 %662, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %664 = or i32 %656, %663
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %665 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %666 = getelementptr i8, i8* %665, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %667 = getelementptr i8, i8* %666, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %668 = getelementptr i8, i8* %667, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %669 = load i8, i8* %668
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %670 = zext i8 %669 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %671 = shl i32 %670, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %672 = or i32 %664, %671
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %673 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %674 = getelementptr i8, i8* %673, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %675 = getelementptr i8, i8* %674, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %676 = getelementptr i8, i8* %675, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %677 = load i8, i8* %676
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %678 = zext i8 %677 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %679 = shl i32 %678, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %680 = or i32 %672, %679
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %681 = zext i32 %680 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %682 = shl i64 %681, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %683 = or i64 %650, %682
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %683, i64* %93
	movq	%rdx, %rax
	movq	-736(%rbp), %rcx
	movq	%rax, (%rcx)
	# %684 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %685 = getelementptr i8, i8* %684, i64 40
	movq	%rdx, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %686 = getelementptr i8, i8* %685, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %687 = load i8, i8* %686
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %688 = zext i8 %687 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %689 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %690 = getelementptr i8, i8* %689, i64 40
	movq	%rdx, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %691 = getelementptr i8, i8* %690, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %692 = load i8, i8* %691
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %693 = zext i8 %692 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %694 = shl i32 %693, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %695 = or i32 %688, %694
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %696 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %697 = getelementptr i8, i8* %696, i64 40
	movq	%rdx, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %698 = getelementptr i8, i8* %697, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %699 = load i8, i8* %698
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %700 = zext i8 %699 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %701 = shl i32 %700, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %702 = or i32 %695, %701
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %703 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %704 = getelementptr i8, i8* %703, i64 40
	movq	%rdx, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %705 = getelementptr i8, i8* %704, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %706 = load i8, i8* %705
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %707 = zext i8 %706 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %708 = shl i32 %707, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %709 = or i32 %702, %708
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %710 = zext i32 %709 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %711 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %712 = getelementptr i8, i8* %711, i64 40
	movq	%rdx, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %713 = getelementptr i8, i8* %712, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %714 = getelementptr i8, i8* %713, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %715 = load i8, i8* %714
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %716 = zext i8 %715 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %717 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %718 = getelementptr i8, i8* %717, i64 40
	movq	%rdx, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %719 = getelementptr i8, i8* %718, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %720 = getelementptr i8, i8* %719, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %721 = load i8, i8* %720
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %722 = zext i8 %721 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %723 = shl i32 %722, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %724 = or i32 %716, %723
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %725 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %726 = getelementptr i8, i8* %725, i64 40
	movq	%rdx, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %727 = getelementptr i8, i8* %726, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %728 = getelementptr i8, i8* %727, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %729 = load i8, i8* %728
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %730 = zext i8 %729 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %731 = shl i32 %730, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %732 = or i32 %724, %731
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %733 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %734 = getelementptr i8, i8* %733, i64 40
	movq	%rdx, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %735 = getelementptr i8, i8* %734, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %736 = getelementptr i8, i8* %735, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %737 = load i8, i8* %736
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %738 = zext i8 %737 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %739 = shl i32 %738, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %740 = or i32 %732, %739
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %741 = zext i32 %740 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %742 = shl i64 %741, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %743 = or i64 %710, %742
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %743, i64* %94
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %744 = load i64, i64* %93
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %745 = icmp ult i64 %744, 44
	movq	%rdx, %rax
	movq	$44, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %745, label %746, label %755
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir755
	jmp	mz_zip_reader_read_central_dir746
	.text
mz_zip_reader_read_central_dir746:
	# %747 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %747, i8** %28
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %29
	movq	$9, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %748 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %749 = icmp ne i8* %748, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %749, label %750, label %754
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir754
	jmp	mz_zip_reader_read_central_dir750
	.text
mz_zip_reader_read_central_dir750:
	# %751 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %752 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %753 = getelementptr %struct.mz_zip_archive, i8* %752, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %751, i32* %753
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %754
	jmp	mz_zip_reader_read_central_dir754
	.text
mz_zip_reader_read_central_dir754:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir755:
	# %756 = load i32, i32* %90
	movq	-712(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %757 = icmp ne i32 %756, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %757, label %758, label %767
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir767
	jmp	mz_zip_reader_read_central_dir758
	.text
mz_zip_reader_read_central_dir758:
	# %759 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %759, i8** %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 10, i32* %31
	movq	$10, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %760 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %761 = icmp ne i8* %760, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %761, label %762, label %766
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir766
	jmp	mz_zip_reader_read_central_dir762
	.text
mz_zip_reader_read_central_dir762:
	# %763 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %764 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %765 = getelementptr %struct.mz_zip_archive, i8* %764, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %763, i32* %765
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %766
	jmp	mz_zip_reader_read_central_dir766
	.text
mz_zip_reader_read_central_dir766:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir767:
	# %768 = load i64, i64* %91
	movq	-720(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %769 = icmp ugt i64 %768, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %769, label %770, label %779
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir779
	jmp	mz_zip_reader_read_central_dir770
	.text
mz_zip_reader_read_central_dir770:
	# %771 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %771, i8** %32
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %33
	movq	$2, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %772 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %773 = icmp ne i8* %772, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %773, label %774, label %778
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir778
	jmp	mz_zip_reader_read_central_dir774
	.text
mz_zip_reader_read_central_dir774:
	# %775 = load i32, i32* %33
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %776 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %777 = getelementptr %struct.mz_zip_archive, i8* %776, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %775, i32* %777
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %778
	jmp	mz_zip_reader_read_central_dir778
	.text
mz_zip_reader_read_central_dir778:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir779:
	# %780 = load i64, i64* %91
	movq	-720(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %781 = trunc i64 %780 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %782 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %783 = getelementptr %struct.mz_zip_archive, i8* %782, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %781, i32* %783
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %784 = load i64, i64* %92
	movq	-728(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %785 = icmp ugt i64 %784, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %785, label %786, label %795
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir795
	jmp	mz_zip_reader_read_central_dir786
	.text
mz_zip_reader_read_central_dir786:
	# %787 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %787, i8** %34
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %35
	movq	$2, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# %788 = load i8*, i8** %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %789 = icmp ne i8* %788, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %789, label %790, label %794
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir794
	jmp	mz_zip_reader_read_central_dir790
	.text
mz_zip_reader_read_central_dir790:
	# %791 = load i32, i32* %35
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %792 = load i8*, i8** %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %793 = getelementptr %struct.mz_zip_archive, i8* %792, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %791, i32* %793
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %794
	jmp	mz_zip_reader_read_central_dir794
	.text
mz_zip_reader_read_central_dir794:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir795:
	# %796 = load i64, i64* %92
	movq	-728(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %797 = trunc i64 %796 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %797, i32* %76
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %798 = load i64, i64* %94
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %799 = icmp ugt i64 %798, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %799, label %800, label %809
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir809
	jmp	mz_zip_reader_read_central_dir800
	.text
mz_zip_reader_read_central_dir800:
	# %801 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %801, i8** %36
	movq	%rdx, %rax
	movq	-280(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 15, i32* %37
	movq	$15, %rax
	movq	-288(%rbp), %rcx
	movl	%eax, (%rcx)
	# %802 = load i8*, i8** %36
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %803 = icmp ne i8* %802, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %803, label %804, label %808
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir808
	jmp	mz_zip_reader_read_central_dir804
	.text
mz_zip_reader_read_central_dir804:
	# %805 = load i32, i32* %37
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %806 = load i8*, i8** %36
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %807 = getelementptr %struct.mz_zip_archive, i8* %806, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %805, i32* %807
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %808
	jmp	mz_zip_reader_read_central_dir808
	.text
mz_zip_reader_read_central_dir808:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir809:
	# %810 = load i64, i64* %94
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %811 = trunc i64 %810 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %811, i32* %75
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %812 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %813 = getelementptr i8, i8* %812, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %814 = getelementptr i8, i8* %813, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %815 = load i8, i8* %814
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %816 = zext i8 %815 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %817 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %818 = getelementptr i8, i8* %817, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %819 = getelementptr i8, i8* %818, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %820 = load i8, i8* %819
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %821 = zext i8 %820 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %822 = shl i32 %821, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %823 = or i32 %816, %822
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %824 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %825 = getelementptr i8, i8* %824, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %826 = getelementptr i8, i8* %825, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %827 = load i8, i8* %826
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %828 = zext i8 %827 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %829 = shl i32 %828, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %830 = or i32 %823, %829
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %831 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %832 = getelementptr i8, i8* %831, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %833 = getelementptr i8, i8* %832, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %834 = load i8, i8* %833
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %835 = zext i8 %834 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %836 = shl i32 %835, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %837 = or i32 %830, %836
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %837, i32* %77
	movq	%rdx, %rax
	movq	-608(%rbp), %rcx
	movl	%eax, (%rcx)
	# %838 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %839 = getelementptr i8, i8* %838, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %840 = getelementptr i8, i8* %839, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %841 = load i8, i8* %840
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %842 = zext i8 %841 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %843 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %844 = getelementptr i8, i8* %843, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %845 = getelementptr i8, i8* %844, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %846 = load i8, i8* %845
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %847 = zext i8 %846 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %848 = shl i32 %847, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %849 = or i32 %842, %848
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %850 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %851 = getelementptr i8, i8* %850, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %852 = getelementptr i8, i8* %851, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %853 = load i8, i8* %852
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %854 = zext i8 %853 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %855 = shl i32 %854, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %856 = or i32 %849, %855
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %857 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %858 = getelementptr i8, i8* %857, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %859 = getelementptr i8, i8* %858, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %860 = load i8, i8* %859
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %861 = zext i8 %860 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %862 = shl i32 %861, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %863 = or i32 %856, %862
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %863, i32* %78
	movq	%rdx, %rax
	movq	-616(%rbp), %rcx
	movl	%eax, (%rcx)
	# %864 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %865 = getelementptr i8, i8* %864, i64 48
	movq	%rdx, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %866 = getelementptr i8, i8* %865, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %867 = load i8, i8* %866
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %868 = zext i8 %867 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %869 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %870 = getelementptr i8, i8* %869, i64 48
	movq	%rdx, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %871 = getelementptr i8, i8* %870, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %872 = load i8, i8* %871
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %873 = zext i8 %872 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %874 = shl i32 %873, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %875 = or i32 %868, %874
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %876 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %877 = getelementptr i8, i8* %876, i64 48
	movq	%rdx, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %878 = getelementptr i8, i8* %877, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %879 = load i8, i8* %878
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %880 = zext i8 %879 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %881 = shl i32 %880, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %882 = or i32 %875, %881
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %883 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %884 = getelementptr i8, i8* %883, i64 48
	movq	%rdx, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %885 = getelementptr i8, i8* %884, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %886 = load i8, i8* %885
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %887 = zext i8 %886 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %888 = shl i32 %887, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %889 = or i32 %882, %888
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %890 = zext i32 %889 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %891 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %892 = getelementptr i8, i8* %891, i64 48
	movq	%rdx, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %893 = getelementptr i8, i8* %892, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %894 = getelementptr i8, i8* %893, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %895 = load i8, i8* %894
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %896 = zext i8 %895 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %897 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %898 = getelementptr i8, i8* %897, i64 48
	movq	%rdx, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %899 = getelementptr i8, i8* %898, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %900 = getelementptr i8, i8* %899, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %901 = load i8, i8* %900
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %902 = zext i8 %901 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %903 = shl i32 %902, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %904 = or i32 %896, %903
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %905 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %906 = getelementptr i8, i8* %905, i64 48
	movq	%rdx, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %907 = getelementptr i8, i8* %906, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %908 = getelementptr i8, i8* %907, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %909 = load i8, i8* %908
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %910 = zext i8 %909 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %911 = shl i32 %910, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %912 = or i32 %904, %911
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %913 = load i8*, i8** %88
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %914 = getelementptr i8, i8* %913, i64 48
	movq	%rdx, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %915 = getelementptr i8, i8* %914, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %916 = getelementptr i8, i8* %915, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %917 = load i8, i8* %916
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %918 = zext i8 %917 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %919 = shl i32 %918, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %920 = or i32 %912, %919
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %921 = zext i32 %920 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %922 = shl i64 %921, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %923 = or i64 %890, %922
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %923, i64* %79
	movq	%rdx, %rax
	movq	-624(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %924
	jmp	mz_zip_reader_read_central_dir924
	.text
mz_zip_reader_read_central_dir924:
	# %925 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %926 = getelementptr %struct.mz_zip_archive, i8* %925, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %927 = load i32, i32* %926
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %928 = load i32, i32* %76
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %929 = icmp ne i32 %927, %928
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %929, label %930, label %939
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir939
	jmp	mz_zip_reader_read_central_dir930
	.text
mz_zip_reader_read_central_dir930:
	# %931 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %931, i8** %38
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 10, i32* %39
	movq	$10, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# %932 = load i8*, i8** %38
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %933 = icmp ne i8* %932, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %933, label %934, label %938
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir938
	jmp	mz_zip_reader_read_central_dir934
	.text
mz_zip_reader_read_central_dir934:
	# %935 = load i32, i32* %39
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %936 = load i8*, i8** %38
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %937 = getelementptr %struct.mz_zip_archive, i8* %936, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %935, i32* %937
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %938
	jmp	mz_zip_reader_read_central_dir938
	.text
mz_zip_reader_read_central_dir938:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir939:
	# %940 = load i32, i32* %77
	movq	-608(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %941 = load i32, i32* %78
	movq	-616(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %942 = or i32 %940, %941
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %943 = icmp ne i32 %942, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %943, label %944, label %959
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir959
	jmp	mz_zip_reader_read_central_dir944
	.text
mz_zip_reader_read_central_dir944:
	# %945 = load i32, i32* %77
	movq	-608(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %946 = icmp ne i32 %945, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %946, label %950, label %947
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir947
	jmp	mz_zip_reader_read_central_dir950
	.text
mz_zip_reader_read_central_dir947:
	# %948 = load i32, i32* %78
	movq	-616(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %949 = icmp ne i32 %948, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %949, label %950, label %959
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir959
	jmp	mz_zip_reader_read_central_dir950
	.text
mz_zip_reader_read_central_dir950:
	# %951 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %951, i8** %40
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 10, i32* %41
	movq	$10, %rax
	movq	-320(%rbp), %rcx
	movl	%eax, (%rcx)
	# %952 = load i8*, i8** %40
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %953 = icmp ne i8* %952, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %953, label %954, label %958
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir958
	jmp	mz_zip_reader_read_central_dir954
	.text
mz_zip_reader_read_central_dir954:
	# %955 = load i32, i32* %41
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %956 = load i8*, i8** %40
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %957 = getelementptr %struct.mz_zip_archive, i8* %956, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %955, i32* %957
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %958
	jmp	mz_zip_reader_read_central_dir958
	.text
mz_zip_reader_read_central_dir958:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir959:
	# %960 = load i32, i32* %75
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %961 = zext i32 %960 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %962 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %963 = getelementptr %struct.mz_zip_archive, i8* %962, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %964 = load i32, i32* %963
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %965 = zext i32 %964 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %966 = mul i64 %965, 46
	movq	%rdx, %rax
	movq	$46, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %967 = icmp ult i64 %961, %966
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %967, label %968, label %977
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir977
	jmp	mz_zip_reader_read_central_dir968
	.text
mz_zip_reader_read_central_dir968:
	# %969 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %969, i8** %42
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %43
	movq	$9, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# %970 = load i8*, i8** %42
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %971 = icmp ne i8* %970, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %971, label %972, label %976
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir976
	jmp	mz_zip_reader_read_central_dir972
	.text
mz_zip_reader_read_central_dir972:
	# %973 = load i32, i32* %43
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %974 = load i8*, i8** %42
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %975 = getelementptr %struct.mz_zip_archive, i8* %974, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %973, i32* %975
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %976
	jmp	mz_zip_reader_read_central_dir976
	.text
mz_zip_reader_read_central_dir976:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir977:
	# %978 = load i64, i64* %79
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %979 = load i32, i32* %75
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %980 = zext i32 %979 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %981 = add i64 %978, %980
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %982 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %983 = getelementptr %struct.mz_zip_archive, i8* %982, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %984 = load i64, i64* %983
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %985 = icmp ugt i64 %981, %984
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %985, label %986, label %995
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir995
	jmp	mz_zip_reader_read_central_dir986
	.text
mz_zip_reader_read_central_dir986:
	# %987 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %987, i8** %44
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %45
	movq	$9, %rax
	movq	-352(%rbp), %rcx
	movl	%eax, (%rcx)
	# %988 = load i8*, i8** %44
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %989 = icmp ne i8* %988, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %989, label %990, label %994
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir994
	jmp	mz_zip_reader_read_central_dir990
	.text
mz_zip_reader_read_central_dir990:
	# %991 = load i32, i32* %45
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %992 = load i8*, i8** %44
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %993 = getelementptr %struct.mz_zip_archive, i8* %992, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %991, i32* %993
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %994
	jmp	mz_zip_reader_read_central_dir994
	.text
mz_zip_reader_read_central_dir994:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir995:
	# %996 = load i64, i64* %79
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %997 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %998 = getelementptr %struct.mz_zip_archive, i8* %997, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %996, i64* %998
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %999 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1000 = getelementptr %struct.mz_zip_archive, i8* %999, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1001 = load i32, i32* %1000
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1002 = icmp ne i32 %1001, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1002, label %1003, label %1740
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1740
	jmp	mz_zip_reader_read_central_dir1003
	.text
mz_zip_reader_read_central_dir1003:
	# %1004 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1005 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1006 = getelementptr %struct.mz_zip_archive, i8* %1005, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1007 = load i8*, i8** %1006
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1008 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1007, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1009 = load i32, i32* %75
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1010 = zext i32 %1009 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1004, i8** %4
	movq	%rsi, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1008, i8** %5
	movq	%rbx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1010, i64* %6
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %7
	movq	$0, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1011 = load i64, i64* %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1012 = load i8*, i8** %5
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1013 = getelementptr %struct.mz_zip_array, i8* %1012, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1014 = load i64, i64* %1013
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1015 = icmp ugt i64 %1011, %1014
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1015, label %1016, label %1025
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1025
	jmp	mz_zip_reader_read_central_dir1016
	.text
mz_zip_reader_read_central_dir1016:
	# %1017 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1018 = load i8*, i8** %5
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1019 = load i64, i64* %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1020 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1021 = call i32 @mz_zip_array_ensure_capacity (i8* %1017, i8* %1018, i64 %1019, i32 %1020)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1022 = icmp ne i32 %1021, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1022, label %1024, label %1023
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1023
	jmp	mz_zip_reader_read_central_dir1024
	.text
mz_zip_reader_read_central_dir1023:
	# store i32 0, i32* %3
	movq	$0, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %1029
	jmp	mz_zip_reader_read_central_dir1029
	.text
mz_zip_reader_read_central_dir1024:
	# br label %1025
	jmp	mz_zip_reader_read_central_dir1025
	.text
mz_zip_reader_read_central_dir1025:
	# %1026 = load i64, i64* %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1027 = load i8*, i8** %5
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1028 = getelementptr %struct.mz_zip_array, i8* %1027, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1026, i64* %1028
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %3
	movq	$1, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %1029
	jmp	mz_zip_reader_read_central_dir1029
	.text
mz_zip_reader_read_central_dir1029:
	# %1030 = load i32, i32* %3
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1031 = icmp ne i32 %1030, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1031, label %1032, label %1063
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1063
	jmp	mz_zip_reader_read_central_dir1032
	.text
mz_zip_reader_read_central_dir1032:
	# %1033 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1034 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1035 = getelementptr %struct.mz_zip_archive, i8* %1034, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1036 = load i8*, i8** %1035
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1037 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1036, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1038 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1039 = getelementptr %struct.mz_zip_archive, i8* %1038, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1040 = load i32, i32* %1039
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1041 = zext i32 %1040 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1033, i8** %9
	movq	%rsi, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1037, i8** %10
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1041, i64* %11
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1042 = load i64, i64* %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1043 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1044 = getelementptr %struct.mz_zip_array, i8* %1043, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1045 = load i64, i64* %1044
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1046 = icmp ugt i64 %1042, %1045
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1046, label %1047, label %1056
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1056
	jmp	mz_zip_reader_read_central_dir1047
	.text
mz_zip_reader_read_central_dir1047:
	# %1048 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1049 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1050 = load i64, i64* %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1051 = load i32, i32* %12
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1052 = call i32 @mz_zip_array_ensure_capacity (i8* %1048, i8* %1049, i64 %1050, i32 %1051)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1053 = icmp ne i32 %1052, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1053, label %1055, label %1054
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1054
	jmp	mz_zip_reader_read_central_dir1055
	.text
mz_zip_reader_read_central_dir1054:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1060
	jmp	mz_zip_reader_read_central_dir1060
	.text
mz_zip_reader_read_central_dir1055:
	# br label %1056
	jmp	mz_zip_reader_read_central_dir1056
	.text
mz_zip_reader_read_central_dir1056:
	# %1057 = load i64, i64* %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1058 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1059 = getelementptr %struct.mz_zip_array, i8* %1058, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1057, i64* %1059
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %8
	movq	$1, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1060
	jmp	mz_zip_reader_read_central_dir1060
	.text
mz_zip_reader_read_central_dir1060:
	# %1061 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1062 = icmp ne i32 %1061, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1062, label %1072, label %1063
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1063
	jmp	mz_zip_reader_read_central_dir1072
	.text
mz_zip_reader_read_central_dir1063:
	# %1064 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1064, i8** %46
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %47
	movq	$16, %rax
	movq	-368(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1065 = load i8*, i8** %46
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1066 = icmp ne i8* %1065, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1066, label %1067, label %1071
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1071
	jmp	mz_zip_reader_read_central_dir1067
	.text
mz_zip_reader_read_central_dir1067:
	# %1068 = load i32, i32* %47
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1069 = load i8*, i8** %46
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1070 = getelementptr %struct.mz_zip_archive, i8* %1069, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1068, i32* %1070
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1071
	jmp	mz_zip_reader_read_central_dir1071
	.text
mz_zip_reader_read_central_dir1071:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1072:
	# %1073 = load i32, i32* %84
	movq	-664(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1074 = icmp ne i32 %1073, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1074, label %1075, label %1116
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1116
	jmp	mz_zip_reader_read_central_dir1075
	.text
mz_zip_reader_read_central_dir1075:
	# %1076 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1077 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1078 = getelementptr %struct.mz_zip_archive, i8* %1077, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1079 = load i8*, i8** %1078
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1080 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1079, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1081 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1082 = getelementptr %struct.mz_zip_archive, i8* %1081, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1083 = load i32, i32* %1082
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1084 = zext i32 %1083 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1076, i8** %14
	movq	%rsi, %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1080, i8** %15
	movq	%rbx, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1084, i64* %16
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %17
	movq	$0, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1085 = load i64, i64* %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1086 = load i8*, i8** %15
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1087 = getelementptr %struct.mz_zip_array, i8* %1086, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1088 = load i64, i64* %1087
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1089 = icmp ugt i64 %1085, %1088
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1089, label %1090, label %1099
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1099
	jmp	mz_zip_reader_read_central_dir1090
	.text
mz_zip_reader_read_central_dir1090:
	# %1091 = load i8*, i8** %14
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1092 = load i8*, i8** %15
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1093 = load i64, i64* %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1094 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1095 = call i32 @mz_zip_array_ensure_capacity (i8* %1091, i8* %1092, i64 %1093, i32 %1094)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1096 = icmp ne i32 %1095, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1096, label %1098, label %1097
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1097
	jmp	mz_zip_reader_read_central_dir1098
	.text
mz_zip_reader_read_central_dir1097:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1103
	jmp	mz_zip_reader_read_central_dir1103
	.text
mz_zip_reader_read_central_dir1098:
	# br label %1099
	jmp	mz_zip_reader_read_central_dir1099
	.text
mz_zip_reader_read_central_dir1099:
	# %1100 = load i64, i64* %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1101 = load i8*, i8** %15
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1102 = getelementptr %struct.mz_zip_array, i8* %1101, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1100, i64* %1102
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %13
	movq	$1, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1103
	jmp	mz_zip_reader_read_central_dir1103
	.text
mz_zip_reader_read_central_dir1103:
	# %1104 = load i32, i32* %13
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1105 = icmp ne i32 %1104, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1105, label %1115, label %1106
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1106
	jmp	mz_zip_reader_read_central_dir1115
	.text
mz_zip_reader_read_central_dir1106:
	# %1107 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1107, i8** %48
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %49
	movq	$16, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1108 = load i8*, i8** %48
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1109 = icmp ne i8* %1108, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1109, label %1110, label %1114
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1114
	jmp	mz_zip_reader_read_central_dir1110
	.text
mz_zip_reader_read_central_dir1110:
	# %1111 = load i32, i32* %49
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1112 = load i8*, i8** %48
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1113 = getelementptr %struct.mz_zip_archive, i8* %1112, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1111, i32* %1113
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1114
	jmp	mz_zip_reader_read_central_dir1114
	.text
mz_zip_reader_read_central_dir1114:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1115:
	# br label %1116
	jmp	mz_zip_reader_read_central_dir1116
	.text
mz_zip_reader_read_central_dir1116:
	# %1117 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1118 = getelementptr %struct.mz_zip_archive, i8* %1117, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1119 = load i8*, i8** %1118
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1120 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1121 = getelementptr %struct.mz_zip_archive, i8* %1120, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1122 = load i8*, i8** %1121
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1123 = load i64, i64* %79
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1124 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1125 = getelementptr %struct.mz_zip_archive, i8* %1124, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1126 = load i8*, i8** %1125
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1127 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1126, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1128 = getelementptr %struct.mz_zip_array, i8* %1127, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1129 = load i8*, i8** %1128
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1130 = load i32, i32* %75
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1131 = zext i32 %1130 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1132 = call i64 %1119 (i8* %1122, i64 %1123, i8* %1129, i64 %1131)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %1133 = load i32, i32* %75
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1134 = zext i32 %1133 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1135 = icmp ne i64 %1132, %1134
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1135, label %1136, label %1145
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1145
	jmp	mz_zip_reader_read_central_dir1136
	.text
mz_zip_reader_read_central_dir1136:
	# %1137 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1137, i8** %50
	movq	%rdx, %rax
	movq	-392(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %51
	movq	$20, %rax
	movq	-400(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1138 = load i8*, i8** %50
	movq	-392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1139 = icmp ne i8* %1138, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1139, label %1140, label %1144
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1144
	jmp	mz_zip_reader_read_central_dir1140
	.text
mz_zip_reader_read_central_dir1140:
	# %1141 = load i32, i32* %51
	movq	-400(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1142 = load i8*, i8** %50
	movq	-392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1143 = getelementptr %struct.mz_zip_archive, i8* %1142, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1141, i32* %1143
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1144
	jmp	mz_zip_reader_read_central_dir1144
	.text
mz_zip_reader_read_central_dir1144:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1145:
	# %1146 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1147 = getelementptr %struct.mz_zip_archive, i8* %1146, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1148 = load i8*, i8** %1147
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1149 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1148, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1150 = getelementptr %struct.mz_zip_array, i8* %1149, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1151 = load i8*, i8** %1150
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1151, i8** %81
	movq	%rdx, %rax
	movq	-640(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1152 = load i32, i32* %75
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1152, i32* %96
	movq	%rdx, %rax
	movq	-752(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %95
	movq	$0, %rax
	movq	-744(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1153
	jmp	mz_zip_reader_read_central_dir1153
	.text
mz_zip_reader_read_central_dir1153:
	# %1154 = load i32, i32* %95
	movq	-744(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1155 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1156 = getelementptr %struct.mz_zip_archive, i8* %1155, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1157 = load i32, i32* %1156
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1158 = icmp ult i32 %1154, %1157
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1158, label %1159, label %1739
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1739
	jmp	mz_zip_reader_read_central_dir1159
	.text
mz_zip_reader_read_central_dir1159:
	# %1160 = load i32, i32* %96
	movq	-752(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1161 = icmp ult i32 %1160, 46
	movq	%rdx, %rax
	movq	$46, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1161, label %1186, label %1162
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1162
	jmp	mz_zip_reader_read_central_dir1186
	.text
mz_zip_reader_read_central_dir1162:
	# %1163 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1164 = getelementptr i8, i8* %1163, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1165 = load i8, i8* %1164
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1166 = zext i8 %1165 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1167 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1168 = getelementptr i8, i8* %1167, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1169 = load i8, i8* %1168
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1170 = zext i8 %1169 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1171 = shl i32 %1170, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1172 = or i32 %1166, %1171
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1173 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1174 = getelementptr i8, i8* %1173, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1175 = load i8, i8* %1174
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1176 = zext i8 %1175 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1177 = shl i32 %1176, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1178 = or i32 %1172, %1177
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1179 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1180 = getelementptr i8, i8* %1179, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1181 = load i8, i8* %1180
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1182 = zext i8 %1181 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1183 = shl i32 %1182, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1184 = or i32 %1178, %1183
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1185 = icmp ne i32 %1184, 33639248
	movq	%rdx, %rax
	movq	$33639248, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1185, label %1186, label %1195
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1195
	jmp	mz_zip_reader_read_central_dir1186
	.text
mz_zip_reader_read_central_dir1186:
	# %1187 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1187, i8** %52
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %53
	movq	$9, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1188 = load i8*, i8** %52
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1189 = icmp ne i8* %1188, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1189, label %1190, label %1194
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1194
	jmp	mz_zip_reader_read_central_dir1190
	.text
mz_zip_reader_read_central_dir1190:
	# %1191 = load i32, i32* %53
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1192 = load i8*, i8** %52
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1193 = getelementptr %struct.mz_zip_archive, i8* %1192, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1191, i32* %1193
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1194
	jmp	mz_zip_reader_read_central_dir1194
	.text
mz_zip_reader_read_central_dir1194:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1195:
	# %1196 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1197 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1198 = getelementptr %struct.mz_zip_archive, i8* %1197, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1199 = load i8*, i8** %1198
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1200 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1199, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1201 = getelementptr %struct.mz_zip_array, i8* %1200, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1202 = load i8*, i8** %1201
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1203 = ptrtoint i8** %1196 to i64
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %1204 = ptrtoint i8** %1202 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1205 = sub i64 %1203, %1204
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1206 = trunc i64 %1205 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1207 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1208 = getelementptr %struct.mz_zip_archive, i8* %1207, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1209 = load i8*, i8** %1208
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1210 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1209, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1211 = getelementptr %struct.mz_zip_array, i8* %1210, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1212 = load i8*, i8** %1211
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1213 = load i32, i32* %95
	movq	-744(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1214 = zext i32 %1213 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1215 = getelementptr i32, i8* %1212, i64 %1214
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1206, i32* %1215
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1216 = load i32, i32* %84
	movq	-664(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1217 = icmp ne i32 %1216, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1217, label %1218, label %1229
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1229
	jmp	mz_zip_reader_read_central_dir1218
	.text
mz_zip_reader_read_central_dir1218:
	# %1219 = load i32, i32* %95
	movq	-744(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1220 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1221 = getelementptr %struct.mz_zip_archive, i8* %1220, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1222 = load i8*, i8** %1221
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1223 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1222, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1224 = getelementptr %struct.mz_zip_array, i8* %1223, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1225 = load i8*, i8** %1224
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1226 = load i32, i32* %95
	movq	-744(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1227 = zext i32 %1226 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1228 = getelementptr i32, i8* %1225, i64 %1227
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1219, i32* %1228
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1229
	jmp	mz_zip_reader_read_central_dir1229
	.text
mz_zip_reader_read_central_dir1229:
	# %1230 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1231 = getelementptr i8, i8* %1230, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1232 = getelementptr i8, i8* %1231, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1233 = load i8, i8* %1232
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1234 = zext i8 %1233 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1235 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1236 = getelementptr i8, i8* %1235, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1237 = getelementptr i8, i8* %1236, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1238 = load i8, i8* %1237
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1239 = zext i8 %1238 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1240 = shl i32 %1239, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1241 = or i32 %1234, %1240
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1242 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1243 = getelementptr i8, i8* %1242, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1244 = getelementptr i8, i8* %1243, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1245 = load i8, i8* %1244
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1246 = zext i8 %1245 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1247 = shl i32 %1246, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1248 = or i32 %1241, %1247
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1249 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1250 = getelementptr i8, i8* %1249, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1251 = getelementptr i8, i8* %1250, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1252 = load i8, i8* %1251
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1253 = zext i8 %1252 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1254 = shl i32 %1253, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1255 = or i32 %1248, %1254
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1256 = zext i32 %1255 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %1256, i64* %102
	movq	%rdx, %rax
	movq	-800(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1257 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1258 = getelementptr i8, i8* %1257, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1259 = getelementptr i8, i8* %1258, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1260 = load i8, i8* %1259
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1261 = zext i8 %1260 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1262 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1263 = getelementptr i8, i8* %1262, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1264 = getelementptr i8, i8* %1263, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1265 = load i8, i8* %1264
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1266 = zext i8 %1265 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1267 = shl i32 %1266, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1268 = or i32 %1261, %1267
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1269 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1270 = getelementptr i8, i8* %1269, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1271 = getelementptr i8, i8* %1270, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1272 = load i8, i8* %1271
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1273 = zext i8 %1272 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1274 = shl i32 %1273, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1275 = or i32 %1268, %1274
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1276 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1277 = getelementptr i8, i8* %1276, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1278 = getelementptr i8, i8* %1277, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1279 = load i8, i8* %1278
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1280 = zext i8 %1279 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1281 = shl i32 %1280, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1282 = or i32 %1275, %1281
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1283 = zext i32 %1282 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %1283, i64* %103
	movq	%rdx, %rax
	movq	-808(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1284 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1285 = getelementptr i8, i8* %1284, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1286 = getelementptr i8, i8* %1285, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1287 = load i8, i8* %1286
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1288 = zext i8 %1287 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1289 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1290 = getelementptr i8, i8* %1289, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1291 = getelementptr i8, i8* %1290, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1292 = load i8, i8* %1291
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1293 = zext i8 %1292 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1294 = shl i32 %1293, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1295 = or i32 %1288, %1294
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1296 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1297 = getelementptr i8, i8* %1296, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1298 = getelementptr i8, i8* %1297, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1299 = load i8, i8* %1298
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1300 = zext i8 %1299 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1301 = shl i32 %1300, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1302 = or i32 %1295, %1301
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1303 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1304 = getelementptr i8, i8* %1303, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1305 = getelementptr i8, i8* %1304, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1306 = load i8, i8* %1305
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1307 = zext i8 %1306 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1308 = shl i32 %1307, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1309 = or i32 %1302, %1308
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1310 = zext i32 %1309 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %1310, i64* %104
	movq	%rdx, %rax
	movq	-816(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1311 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1312 = getelementptr i8, i8* %1311, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1313 = getelementptr i8, i8* %1312, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1314 = load i8, i8* %1313
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1315 = zext i8 %1314 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1316 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1317 = getelementptr i8, i8* %1316, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1318 = getelementptr i8, i8* %1317, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1319 = load i8, i8* %1318
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1320 = zext i8 %1319 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1321 = shl i32 %1320, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1322 = or i32 %1315, %1321
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1322, i32* %100
	movq	%rdx, %rax
	movq	-784(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1323 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1324 = getelementptr i8, i8* %1323, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1325 = getelementptr i8, i8* %1324, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1326 = load i8, i8* %1325
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1327 = zext i8 %1326 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1328 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1329 = getelementptr i8, i8* %1328, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1330 = getelementptr i8, i8* %1329, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1331 = load i8, i8* %1330
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1332 = zext i8 %1331 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1333 = shl i32 %1332, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1334 = or i32 %1327, %1333
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1334, i32* %101
	movq	%rdx, %rax
	movq	-792(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1335 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1336 = getelementptr %struct.mz_zip_archive, i8* %1335, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1337 = load i8*, i8** %1336
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1338 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1337, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1339 = load i32, i32* %1338
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1340 = icmp ne i32 %1339, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1340, label %1519, label %1341
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1341
	jmp	mz_zip_reader_read_central_dir1519
	.text
mz_zip_reader_read_central_dir1341:
	# %1342 = load i32, i32* %101
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1343 = icmp ne i32 %1342, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1343, label %1344, label %1519
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1519
	jmp	mz_zip_reader_read_central_dir1344
	.text
mz_zip_reader_read_central_dir1344:
	# %1345 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1346 = load i64, i64* %103
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1347 = icmp ugt i64 %1345, %1346
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1347, label %1348, label %1350
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1350
	jmp	mz_zip_reader_read_central_dir1348
	.text
mz_zip_reader_read_central_dir1348:
	# %1349 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# br label %1352
	movq	%r12, %rbx
	jmp	mz_zip_reader_read_central_dir1352
	.text
mz_zip_reader_read_central_dir1350:
	# %1351 = load i64, i64* %103
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# br label %1352
	movq	%r11, %rbx
	jmp	mz_zip_reader_read_central_dir1352
	.text
mz_zip_reader_read_central_dir1352:
	# %1353 = phi i64 [%1349, %1348], [%1351, %1350]
	# %1354 = load i64, i64* %104
	movq	-816(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1355 = icmp ugt i64 %1353, %1354
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1355, label %1356, label %1366
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1366
	jmp	mz_zip_reader_read_central_dir1356
	.text
mz_zip_reader_read_central_dir1356:
	# %1357 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1358 = load i64, i64* %103
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1359 = icmp ugt i64 %1357, %1358
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1359, label %1360, label %1362
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1362
	jmp	mz_zip_reader_read_central_dir1360
	.text
mz_zip_reader_read_central_dir1360:
	# %1361 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# br label %1364
	movq	%r10, %r13
	jmp	mz_zip_reader_read_central_dir1364
	.text
mz_zip_reader_read_central_dir1362:
	# %1363 = load i64, i64* %103
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# br label %1364
	movq	%r9, %r13
	jmp	mz_zip_reader_read_central_dir1364
	.text
mz_zip_reader_read_central_dir1364:
	# %1365 = phi i64 [%1361, %1360], [%1363, %1362]
	# br label %1368
	movq	%r13, %rdx
	jmp	mz_zip_reader_read_central_dir1368
	.text
mz_zip_reader_read_central_dir1366:
	# %1367 = load i64, i64* %104
	movq	-816(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# br label %1368
	movq	%r8, %rdx
	jmp	mz_zip_reader_read_central_dir1368
	.text
mz_zip_reader_read_central_dir1368:
	# %1369 = phi i64 [%1365, %1364], [%1367, %1366]
	# %1370 = icmp eq i64 %1369, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1370, label %1371, label %1519
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1519
	jmp	mz_zip_reader_read_central_dir1371
	.text
mz_zip_reader_read_central_dir1371:
	# %1372 = load i32, i32* %101
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1372, i32* %105
	movq	%rdx, %rax
	movq	-824(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1373 = load i32, i32* %105
	movq	-824(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1374 = icmp ne i32 %1373, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1374, label %1375, label %1518
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1518
	jmp	mz_zip_reader_read_central_dir1375
	.text
mz_zip_reader_read_central_dir1375:
	# store i8* null, i8** %107
	movq	$0, %rax
	movq	-840(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1376 = load i32, i32* %100
	movq	-784(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1377 = add i32 46, %1376
	movq	$46, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %1378 = load i32, i32* %101
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1379 = add i32 %1377, %1378
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %1380 = load i32, i32* %96
	movq	-752(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1381 = icmp ugt i32 %1379, %1380
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1381, label %1382, label %1428
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1428
	jmp	mz_zip_reader_read_central_dir1382
	.text
mz_zip_reader_read_central_dir1382:
	# %1383 = load i32, i32* %101
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1384 = zext i32 %1383 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1385 = call i8* @malloc (i64 %1384)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %1385, i8** %107
	movq	%rdx, %rax
	movq	-840(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1386 = load i8*, i8** %107
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1387 = icmp eq i8* %1386, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1387, label %1388, label %1397
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1397
	jmp	mz_zip_reader_read_central_dir1388
	.text
mz_zip_reader_read_central_dir1388:
	# %1389 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1389, i8** %54
	movq	%rdx, %rax
	movq	-424(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %55
	movq	$16, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1390 = load i8*, i8** %54
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1391 = icmp ne i8* %1390, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1391, label %1392, label %1396
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1396
	jmp	mz_zip_reader_read_central_dir1392
	.text
mz_zip_reader_read_central_dir1392:
	# %1393 = load i32, i32* %55
	movq	-432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1394 = load i8*, i8** %54
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1395 = getelementptr %struct.mz_zip_archive, i8* %1394, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1393, i32* %1395
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1396
	jmp	mz_zip_reader_read_central_dir1396
	.text
mz_zip_reader_read_central_dir1396:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1397:
	# %1398 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1399 = getelementptr %struct.mz_zip_archive, i8* %1398, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1400 = load i8*, i8** %1399
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1401 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1402 = getelementptr %struct.mz_zip_archive, i8* %1401, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1403 = load i8*, i8** %1402
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1404 = load i64, i64* %79
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1405 = add i64 %1404, 46
	movq	%rdx, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %1406 = load i32, i32* %100
	movq	-784(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1407 = zext i32 %1406 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1408 = add i64 %1405, %1407
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1409 = load i8*, i8** %107
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1410 = load i32, i32* %101
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1411 = zext i32 %1410 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1412 = call i64 %1400 (i8* %1403, i64 %1408, i8* %1409, i64 %1411)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %1413 = load i32, i32* %101
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1414 = zext i32 %1413 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1415 = icmp ne i64 %1412, %1414
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1415, label %1416, label %1426
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1426
	jmp	mz_zip_reader_read_central_dir1416
	.text
mz_zip_reader_read_central_dir1416:
	# %1417 = load i8*, i8** %107
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %1417)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1418 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1418, i8** %56
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %57
	movq	$20, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1419 = load i8*, i8** %56
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1420 = icmp ne i8* %1419, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1420, label %1421, label %1425
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1425
	jmp	mz_zip_reader_read_central_dir1421
	.text
mz_zip_reader_read_central_dir1421:
	# %1422 = load i32, i32* %57
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1423 = load i8*, i8** %56
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1424 = getelementptr %struct.mz_zip_archive, i8* %1423, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1422, i32* %1424
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1425
	jmp	mz_zip_reader_read_central_dir1425
	.text
mz_zip_reader_read_central_dir1425:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1426:
	# %1427 = load i8*, i8** %107
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1427, i8** %106
	movq	%rdx, %rax
	movq	-832(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1434
	jmp	mz_zip_reader_read_central_dir1434
	.text
mz_zip_reader_read_central_dir1428:
	# %1429 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1430 = getelementptr i8, i8* %1429, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1431 = load i32, i32* %100
	movq	-784(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1432 = zext i32 %1431 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1433 = getelementptr i8, i8* %1430, i64 %1432
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1433, i8** %106
	movq	%rdx, %rax
	movq	-832(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1434
	jmp	mz_zip_reader_read_central_dir1434
	.text
mz_zip_reader_read_central_dir1434:
	# br label %1435
	jmp	mz_zip_reader_read_central_dir1435
	.text
mz_zip_reader_read_central_dir1435:
	# %1436 = load i32, i32* %105
	movq	-824(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1437 = zext i32 %1436 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1438 = icmp ult i64 %1437, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1438, label %1439, label %1449
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1449
	jmp	mz_zip_reader_read_central_dir1439
	.text
mz_zip_reader_read_central_dir1439:
	# %1440 = load i8*, i8** %107
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %1440)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1441 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1441, i8** %58
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %59
	movq	$9, %rax
	movq	-464(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1442 = load i8*, i8** %58
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1443 = icmp ne i8* %1442, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1443, label %1444, label %1448
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1448
	jmp	mz_zip_reader_read_central_dir1444
	.text
mz_zip_reader_read_central_dir1444:
	# %1445 = load i32, i32* %59
	movq	-464(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1446 = load i8*, i8** %58
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1447 = getelementptr %struct.mz_zip_archive, i8* %1446, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1445, i32* %1447
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1448
	jmp	mz_zip_reader_read_central_dir1448
	.text
mz_zip_reader_read_central_dir1448:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1449:
	# %1450 = load i8*, i8** %106
	movq	-832(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1451 = getelementptr i8, i8* %1450, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1452 = load i8, i8* %1451
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1453 = zext i8 %1452 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1454 = load i8*, i8** %106
	movq	-832(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1455 = getelementptr i8, i8* %1454, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1456 = load i8, i8* %1455
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1457 = zext i8 %1456 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1458 = shl i32 %1457, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1459 = or i32 %1453, %1458
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1459, i32* %108
	movq	%rdx, %rax
	movq	-848(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1460 = load i8*, i8** %106
	movq	-832(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1461 = getelementptr i8, i8* %1460, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1462 = getelementptr i8, i8* %1461, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1463 = load i8, i8* %1462
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1464 = zext i8 %1463 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1465 = load i8*, i8** %106
	movq	-832(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1466 = getelementptr i8, i8* %1465, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1467 = getelementptr i8, i8* %1466, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1468 = load i8, i8* %1467
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1469 = zext i8 %1468 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1470 = shl i32 %1469, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1471 = or i32 %1464, %1470
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1471, i32* %109
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %1472 = load i32, i32* %109
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1473 = zext i32 %1472 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1474 = add i64 %1473, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %1475 = load i32, i32* %105
	movq	-824(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1476 = zext i32 %1475 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1477 = icmp ugt i64 %1474, %1476
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1477, label %1478, label %1488
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1488
	jmp	mz_zip_reader_read_central_dir1478
	.text
mz_zip_reader_read_central_dir1478:
	# %1479 = load i8*, i8** %107
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %1479)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1480 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1480, i8** %60
	movq	%rdx, %rax
	movq	-472(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %61
	movq	$9, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1481 = load i8*, i8** %60
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1482 = icmp ne i8* %1481, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1482, label %1483, label %1487
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1487
	jmp	mz_zip_reader_read_central_dir1483
	.text
mz_zip_reader_read_central_dir1483:
	# %1484 = load i32, i32* %61
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1485 = load i8*, i8** %60
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1486 = getelementptr %struct.mz_zip_archive, i8* %1485, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1484, i32* %1486
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1487
	jmp	mz_zip_reader_read_central_dir1487
	.text
mz_zip_reader_read_central_dir1487:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1488:
	# %1489 = load i32, i32* %108
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1490 = icmp eq i32 %1489, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1490, label %1491, label %1500
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1500
	jmp	mz_zip_reader_read_central_dir1491
	.text
mz_zip_reader_read_central_dir1491:
	# %1492 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1493 = getelementptr %struct.mz_zip_archive, i8* %1492, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1494 = load i8*, i8** %1493
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1495 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1494, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %1495
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1496 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1497 = getelementptr %struct.mz_zip_archive, i8* %1496, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1498 = load i8*, i8** %1497
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1499 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1498, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %1499
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1516
	jmp	mz_zip_reader_read_central_dir1516
	.text
mz_zip_reader_read_central_dir1500:
	# %1501 = load i32, i32* %109
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1502 = zext i32 %1501 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1503 = add i64 4, %1502
	movq	$4, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %1504 = load i8*, i8** %106
	movq	-832(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1505 = getelementptr i8, i8* %1504, i64 %1503
	movq	%rdx, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1505, i8** %106
	movq	%rdx, %rax
	movq	-832(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1506 = load i32, i32* %105
	movq	-824(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1507 = zext i32 %1506 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1508 = sub i64 %1507, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %1509 = load i32, i32* %109
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1510 = zext i32 %1509 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1511 = sub i64 %1508, %1510
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1512 = trunc i64 %1511 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1512, i32* %105
	movq	%rdx, %rax
	movq	-824(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1513
	jmp	mz_zip_reader_read_central_dir1513
	.text
mz_zip_reader_read_central_dir1513:
	# %1514 = load i32, i32* %105
	movq	-824(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1515 = icmp ne i32 %1514, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1515, label %1435, label %1516
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1516
	jmp	mz_zip_reader_read_central_dir1435
	.text
mz_zip_reader_read_central_dir1516:
	# %1517 = load i8*, i8** %107
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @free (i8* %1517)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %1518
	jmp	mz_zip_reader_read_central_dir1518
	.text
mz_zip_reader_read_central_dir1518:
	# br label %1519
	jmp	mz_zip_reader_read_central_dir1519
	.text
mz_zip_reader_read_central_dir1519:
	# %1520 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1521 = icmp ne i64 %1520, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1521, label %1522, label %1573
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1573
	jmp	mz_zip_reader_read_central_dir1522
	.text
mz_zip_reader_read_central_dir1522:
	# %1523 = load i64, i64* %103
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1524 = icmp ne i64 %1523, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1524, label %1525, label %1573
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1573
	jmp	mz_zip_reader_read_central_dir1525
	.text
mz_zip_reader_read_central_dir1525:
	# %1526 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1527 = getelementptr i8, i8* %1526, i64 10
	movq	%rdx, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1528 = getelementptr i8, i8* %1527, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1529 = load i8, i8* %1528
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1530 = zext i8 %1529 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1531 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1532 = getelementptr i8, i8* %1531, i64 10
	movq	%rdx, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1533 = getelementptr i8, i8* %1532, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1534 = load i8, i8* %1533
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1535 = zext i8 %1534 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1536 = shl i32 %1535, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1537 = or i32 %1530, %1536
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1538 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1539 = getelementptr i8, i8* %1538, i64 10
	movq	%rdx, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1540 = getelementptr i8, i8* %1539, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1541 = load i8, i8* %1540
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1542 = zext i8 %1541 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1543 = shl i32 %1542, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1544 = or i32 %1537, %1543
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1545 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1546 = getelementptr i8, i8* %1545, i64 10
	movq	%rdx, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1547 = getelementptr i8, i8* %1546, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1548 = load i8, i8* %1547
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1549 = zext i8 %1548 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1550 = shl i32 %1549, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1551 = or i32 %1544, %1550
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1552 = icmp ne i32 %1551, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1552, label %1557, label %1553
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1553
	jmp	mz_zip_reader_read_central_dir1557
	.text
mz_zip_reader_read_central_dir1553:
	# %1554 = load i64, i64* %103
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1555 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1556 = icmp ne i64 %1554, %1555
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1556, label %1563, label %1557
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1557
	jmp	mz_zip_reader_read_central_dir1563
	.text
mz_zip_reader_read_central_dir1557:
	# %1558 = load i64, i64* %103
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1559 = icmp ne i64 %1558, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1559, label %1560, label %1572
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1572
	jmp	mz_zip_reader_read_central_dir1560
	.text
mz_zip_reader_read_central_dir1560:
	# %1561 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1562 = icmp ne i64 %1561, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1562, label %1572, label %1563
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1563
	jmp	mz_zip_reader_read_central_dir1572
	.text
mz_zip_reader_read_central_dir1563:
	# %1564 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1564, i8** %62
	movq	%rdx, %rax
	movq	-488(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %63
	movq	$9, %rax
	movq	-496(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1565 = load i8*, i8** %62
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1566 = icmp ne i8* %1565, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1566, label %1567, label %1571
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1571
	jmp	mz_zip_reader_read_central_dir1567
	.text
mz_zip_reader_read_central_dir1567:
	# %1568 = load i32, i32* %63
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1569 = load i8*, i8** %62
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1570 = getelementptr %struct.mz_zip_archive, i8* %1569, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1568, i32* %1570
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1571
	jmp	mz_zip_reader_read_central_dir1571
	.text
mz_zip_reader_read_central_dir1571:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1572:
	# br label %1573
	jmp	mz_zip_reader_read_central_dir1573
	.text
mz_zip_reader_read_central_dir1573:
	# %1574 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1575 = getelementptr i8, i8* %1574, i64 34
	movq	%rdx, %rcx
	movq	$34, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1576 = getelementptr i8, i8* %1575, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1577 = load i8, i8* %1576
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1578 = zext i8 %1577 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1579 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1580 = getelementptr i8, i8* %1579, i64 34
	movq	%rdx, %rcx
	movq	$34, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1581 = getelementptr i8, i8* %1580, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1582 = load i8, i8* %1581
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1583 = zext i8 %1582 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1584 = shl i32 %1583, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1585 = or i32 %1578, %1584
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1585, i32* %98
	movq	%rdx, %rax
	movq	-768(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1586 = load i32, i32* %98
	movq	-768(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1587 = icmp eq i32 %1586, 65535
	movq	%rdx, %rax
	movq	$65535, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1587, label %1595, label %1588
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1588
	jmp	mz_zip_reader_read_central_dir1595
	.text
mz_zip_reader_read_central_dir1588:
	# %1589 = load i32, i32* %98
	movq	-768(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1590 = load i32, i32* %77
	movq	-608(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1591 = icmp ne i32 %1589, %1590
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1591, label %1592, label %1604
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1604
	jmp	mz_zip_reader_read_central_dir1592
	.text
mz_zip_reader_read_central_dir1592:
	# %1593 = load i32, i32* %98
	movq	-768(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1594 = icmp ne i32 %1593, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1594, label %1595, label %1604
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1604
	jmp	mz_zip_reader_read_central_dir1595
	.text
mz_zip_reader_read_central_dir1595:
	# %1596 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1596, i8** %64
	movq	%rdx, %rax
	movq	-504(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 10, i32* %65
	movq	$10, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1597 = load i8*, i8** %64
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1598 = icmp ne i8* %1597, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1598, label %1599, label %1603
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1603
	jmp	mz_zip_reader_read_central_dir1599
	.text
mz_zip_reader_read_central_dir1599:
	# %1600 = load i32, i32* %65
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1601 = load i8*, i8** %64
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1602 = getelementptr %struct.mz_zip_archive, i8* %1601, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1600, i32* %1602
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1603
	jmp	mz_zip_reader_read_central_dir1603
	.text
mz_zip_reader_read_central_dir1603:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1604:
	# %1605 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1606 = icmp ne i64 %1605, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1606, label %1607, label %1652
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1652
	jmp	mz_zip_reader_read_central_dir1607
	.text
mz_zip_reader_read_central_dir1607:
	# %1608 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1609 = getelementptr i8, i8* %1608, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1610 = getelementptr i8, i8* %1609, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1611 = load i8, i8* %1610
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1612 = zext i8 %1611 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1613 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1614 = getelementptr i8, i8* %1613, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1615 = getelementptr i8, i8* %1614, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1616 = load i8, i8* %1615
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1617 = zext i8 %1616 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1618 = shl i32 %1617, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1619 = or i32 %1612, %1618
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1620 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1621 = getelementptr i8, i8* %1620, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1622 = getelementptr i8, i8* %1621, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1623 = load i8, i8* %1622
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1624 = zext i8 %1623 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1625 = shl i32 %1624, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1626 = or i32 %1619, %1625
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1627 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1628 = getelementptr i8, i8* %1627, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1629 = getelementptr i8, i8* %1628, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1630 = load i8, i8* %1629
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1631 = zext i8 %1630 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1632 = shl i32 %1631, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1633 = or i32 %1626, %1632
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1634 = zext i32 %1633 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1635 = add i64 %1634, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %1636 = load i64, i64* %102
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1637 = add i64 %1635, %1636
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %1638 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1639 = getelementptr %struct.mz_zip_archive, i8* %1638, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1640 = load i64, i64* %1639
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1641 = icmp ugt i64 %1637, %1640
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1641, label %1642, label %1651
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1651
	jmp	mz_zip_reader_read_central_dir1642
	.text
mz_zip_reader_read_central_dir1642:
	# %1643 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1643, i8** %66
	movq	%rdx, %rax
	movq	-520(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %67
	movq	$9, %rax
	movq	-528(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1644 = load i8*, i8** %66
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1645 = icmp ne i8* %1644, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1645, label %1646, label %1650
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1650
	jmp	mz_zip_reader_read_central_dir1646
	.text
mz_zip_reader_read_central_dir1646:
	# %1647 = load i32, i32* %67
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1648 = load i8*, i8** %66
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1649 = getelementptr %struct.mz_zip_archive, i8* %1648, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1647, i32* %1649
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1650
	jmp	mz_zip_reader_read_central_dir1650
	.text
mz_zip_reader_read_central_dir1650:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1651:
	# br label %1652
	jmp	mz_zip_reader_read_central_dir1652
	.text
mz_zip_reader_read_central_dir1652:
	# %1653 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1654 = getelementptr i8, i8* %1653, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1655 = getelementptr i8, i8* %1654, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1656 = load i8, i8* %1655
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1657 = zext i8 %1656 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1658 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1659 = getelementptr i8, i8* %1658, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1660 = getelementptr i8, i8* %1659, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1661 = load i8, i8* %1660
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1662 = zext i8 %1661 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1663 = shl i32 %1662, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1664 = or i32 %1657, %1663
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1664, i32* %99
	movq	%rdx, %rax
	movq	-776(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1665 = load i32, i32* %99
	movq	-776(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1666 = and i32 %1665, 8192
	movq	%rdx, %rax
	movq	$8192, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1667 = icmp ne i32 %1666, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1667, label %1668, label %1677
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1677
	jmp	mz_zip_reader_read_central_dir1668
	.text
mz_zip_reader_read_central_dir1668:
	# %1669 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1669, i8** %68
	movq	%rdx, %rax
	movq	-536(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 5, i32* %69
	movq	$5, %rax
	movq	-544(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1670 = load i8*, i8** %68
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1671 = icmp ne i8* %1670, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1671, label %1672, label %1676
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1676
	jmp	mz_zip_reader_read_central_dir1672
	.text
mz_zip_reader_read_central_dir1672:
	# %1673 = load i32, i32* %69
	movq	-544(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1674 = load i8*, i8** %68
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1675 = getelementptr %struct.mz_zip_archive, i8* %1674, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1673, i32* %1675
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1676
	jmp	mz_zip_reader_read_central_dir1676
	.text
mz_zip_reader_read_central_dir1676:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1677:
	# %1678 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1679 = getelementptr i8, i8* %1678, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1680 = getelementptr i8, i8* %1679, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1681 = load i8, i8* %1680
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1682 = zext i8 %1681 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1683 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1684 = getelementptr i8, i8* %1683, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1685 = getelementptr i8, i8* %1684, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1686 = load i8, i8* %1685
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1687 = zext i8 %1686 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1688 = shl i32 %1687, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1689 = or i32 %1682, %1688
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1690 = add i32 46, %1689
	movq	$46, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1691 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1692 = getelementptr i8, i8* %1691, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1693 = getelementptr i8, i8* %1692, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1694 = load i8, i8* %1693
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1695 = zext i8 %1694 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1696 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1697 = getelementptr i8, i8* %1696, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1698 = getelementptr i8, i8* %1697, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1699 = load i8, i8* %1698
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1700 = zext i8 %1699 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1701 = shl i32 %1700, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1702 = or i32 %1695, %1701
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1703 = add i32 %1690, %1702
	movq	%rsi, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1704 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1705 = getelementptr i8, i8* %1704, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1706 = getelementptr i8, i8* %1705, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1707 = load i8, i8* %1706
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1708 = zext i8 %1707 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1709 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1710 = getelementptr i8, i8* %1709, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1711 = getelementptr i8, i8* %1710, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1712 = load i8, i8* %1711
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1713 = zext i8 %1712 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1714 = shl i32 %1713, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1715 = or i32 %1708, %1714
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1716 = add i32 %1703, %1715
	movq	%rsi, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %1716, i32* %97
	movq	%rbx, %rax
	movq	-760(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1717 = load i32, i32* %96
	movq	-752(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1718 = icmp ugt i32 %1716, %1717
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1718, label %1719, label %1728
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1728
	jmp	mz_zip_reader_read_central_dir1719
	.text
mz_zip_reader_read_central_dir1719:
	# %1720 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1720, i8** %70
	movq	%rdx, %rax
	movq	-552(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %71
	movq	$9, %rax
	movq	-560(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1721 = load i8*, i8** %70
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1722 = icmp ne i8* %1721, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1722, label %1723, label %1727
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1727
	jmp	mz_zip_reader_read_central_dir1723
	.text
mz_zip_reader_read_central_dir1723:
	# %1724 = load i32, i32* %71
	movq	-560(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1725 = load i8*, i8** %70
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1726 = getelementptr %struct.mz_zip_archive, i8* %1725, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1724, i32* %1726
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1727
	jmp	mz_zip_reader_read_central_dir1727
	.text
mz_zip_reader_read_central_dir1727:
	# store i32 0, i32* %72
	movq	$0, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1728:
	# %1729 = load i32, i32* %97
	movq	-760(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1730 = load i32, i32* %96
	movq	-752(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1731 = sub i32 %1730, %1729
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1731, i32* %96
	movq	%rdx, %rax
	movq	-752(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1732 = load i32, i32* %97
	movq	-760(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1733 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1734 = zext i32 %1732 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1735 = getelementptr i8, i8* %1733, i64 %1734
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1735, i8** %81
	movq	%rdx, %rax
	movq	-640(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1736
	jmp	mz_zip_reader_read_central_dir1736
	.text
mz_zip_reader_read_central_dir1736:
	# %1737 = load i32, i32* %95
	movq	-744(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1738 = add i32 %1737, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1738, i32* %95
	movq	%rdx, %rax
	movq	-744(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1153
	jmp	mz_zip_reader_read_central_dir1153
	.text
mz_zip_reader_read_central_dir1739:
	# br label %1740
	jmp	mz_zip_reader_read_central_dir1740
	.text
mz_zip_reader_read_central_dir1740:
	# %1741 = load i32, i32* %84
	movq	-664(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1742 = icmp ne i32 %1741, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1742, label %1743, label %1745
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_read_central_dir1745
	jmp	mz_zip_reader_read_central_dir1743
	.text
mz_zip_reader_read_central_dir1743:
	# %1744 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @mz_zip_reader_sort_central_dir_offsets_by_filename (i8* %1744)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_sort_central_dir_offsets_by_filename
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %1745
	jmp	mz_zip_reader_read_central_dir1745
	.text
mz_zip_reader_read_central_dir1745:
	# store i32 1, i32* %72
	movq	$1, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1746
	jmp	mz_zip_reader_read_central_dir1746
	.text
mz_zip_reader_read_central_dir1746:
	# %1747 = load i32, i32* %72
	movq	-568(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %1747
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_init_mem
_mz_zip_reader_init_mem:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r14
	popq	%r15
	popq	-8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %12 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %10
	movq	-8(%rbp), %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %11
	movq	%r15, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %12
	movq	%r14, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %13
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %14 = load i8*, i8** %11
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %15 = icmp ne i8* %14, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %15, label %25, label %16
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_mem16
	jmp	mz_zip_reader_init_mem25
	.text
mz_zip_reader_init_mem16:
	# %17 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %17, i8** %5
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %6
	movq	$24, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %18 = load i8*, i8** %5
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %19 = icmp ne i8* %18, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %19, label %20, label %24
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_mem24
	jmp	mz_zip_reader_init_mem20
	.text
mz_zip_reader_init_mem20:
	# %21 = load i32, i32* %6
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %22 = load i8*, i8** %5
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = getelementptr %struct.mz_zip_archive, i8* %22, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %21, i32* %23
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %24
	jmp	mz_zip_reader_init_mem24
	.text
mz_zip_reader_init_mem24:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %74
	jmp	mz_zip_reader_init_mem74
	.text
mz_zip_reader_init_mem25:
	# %26 = load i64, i64* %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %27 = icmp ult i64 %26, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %27, label %28, label %37
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_mem37
	jmp	mz_zip_reader_init_mem28
	.text
mz_zip_reader_init_mem28:
	# %29 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %29, i8** %7
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 8, i32* %8
	movq	$8, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %30 = load i8*, i8** %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %31 = icmp ne i8* %30, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %31, label %32, label %36
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_mem36
	jmp	mz_zip_reader_init_mem32
	.text
mz_zip_reader_init_mem32:
	# %33 = load i32, i32* %8
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %34 = load i8*, i8** %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %35 = getelementptr %struct.mz_zip_archive, i8* %34, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %33, i32* %35
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %36
	jmp	mz_zip_reader_init_mem36
	.text
mz_zip_reader_init_mem36:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %74
	jmp	mz_zip_reader_init_mem74
	.text
mz_zip_reader_init_mem37:
	# %38 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %39 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = call i32 @mz_zip_reader_init_internal (i8* %38, i32 %39)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %41 = icmp ne i32 %40, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %41, label %43, label %42
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_mem42
	jmp	mz_zip_reader_init_mem43
	.text
mz_zip_reader_init_mem42:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %74
	jmp	mz_zip_reader_init_mem74
	.text
mz_zip_reader_init_mem43:
	# %44 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = getelementptr %struct.mz_zip_archive, i8* %44, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 2, i32* %45
	movq	$2, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %46 = load i64, i64* %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %47 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %48 = getelementptr %struct.mz_zip_archive, i8* %47, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %46, i64* %48
	movq	%r10, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %49 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = getelementptr %struct.mz_zip_archive, i8* %49, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @mz_zip_mem_read_func, i8** %50
	leaq	_mz_zip_mem_read_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %51 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %52 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = getelementptr %struct.mz_zip_archive, i8* %52, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %51, i8** %53
	movq	%r10, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %54 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = getelementptr %struct.mz_zip_archive, i8* %54, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %55
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %56 = load i8*, i8** %11
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %57 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = getelementptr %struct.mz_zip_archive, i8* %57, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %59 = load i8*, i8** %58
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = getelementptr %struct.mz_zip_internal_state_tag, i8* %59, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %56, i8** %60
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %61 = load i64, i64* %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %62 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = getelementptr %struct.mz_zip_archive, i8* %62, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %64 = load i8*, i8** %63
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = getelementptr %struct.mz_zip_internal_state_tag, i8* %64, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %61, i64* %65
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %66 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %67 = load i32, i32* %13
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %68 = call i32 @mz_zip_reader_read_central_dir (i8* %66, i32 %67)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_read_central_dir
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %69 = icmp ne i32 %68, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %69, label %73, label %70
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_mem70
	jmp	mz_zip_reader_init_mem73
	.text
mz_zip_reader_init_mem70:
	# %71 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %72 = call i32 @mz_zip_reader_end_internal (i8* %71, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %74
	jmp	mz_zip_reader_init_mem74
	.text
mz_zip_reader_init_mem73:
	# store i32 1, i32* %9
	movq	$1, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %74
	jmp	mz_zip_reader_init_mem74
	.text
mz_zip_reader_init_mem74:
	# %75 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %75
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_mem_read_func
_mz_zip_mem_read_func:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	%r12
	popq	%r13
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %5
	movq	%r13, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %6
	movq	%r12, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %7
	movq	%rbx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %8
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %11 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8* %11, i8** %9
	movq	%r8, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %12 = load i64, i64* %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %13 = load i8*, i8** %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %14 = getelementptr %struct.mz_zip_archive, i8* %13, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %15 = load i64, i64* %14
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %16 = icmp uge i64 %12, %15
	movq	%r12, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setnb	%r8b
	# br i1 %16, label %17, label %18
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_mem_read_func18
	jmp	mz_zip_mem_read_func17
	.text
mz_zip_mem_read_func17:
	# br label %36
	movq	$0, %rdx
	jmp	mz_zip_mem_read_func36
	.text
mz_zip_mem_read_func18:
	# %19 = load i8*, i8** %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %20 = getelementptr %struct.mz_zip_archive, i8* %19, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %21 = load i64, i64* %20
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %22 = load i64, i64* %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %23 = sub i64 %21, %22
	movq	%r12, %rax
	movq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, %r12
	# %24 = load i64, i64* %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %25 = icmp ult i64 %23, %24
	movq	%r12, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setb	%r8b
	# br i1 %25, label %26, label %32
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_mem_read_func32
	jmp	mz_zip_mem_read_func26
	.text
mz_zip_mem_read_func26:
	# %27 = load i8*, i8** %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %28 = getelementptr %struct.mz_zip_archive, i8* %27, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %29 = load i64, i64* %28
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %30 = load i64, i64* %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %31 = sub i64 %29, %30
	movq	%r8, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# br label %34
	movq	%rbx, %rdx
	jmp	mz_zip_mem_read_func34
	.text
mz_zip_mem_read_func32:
	# %33 = load i64, i64* %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %34
	jmp	mz_zip_mem_read_func34
	.text
mz_zip_mem_read_func34:
	# %35 = phi i64 [%31, %26], [%33, %32]
	# br label %36
	jmp	mz_zip_mem_read_func36
	.text
mz_zip_mem_read_func36:
	# %37 = phi i64 [0, %17], [%35, %34]
	# store i64 %37, i64* %10
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %38 = load i8*, i8** %7
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %39 = load i8*, i8** %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %40 = getelementptr %struct.mz_zip_archive, i8* %39, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %41 = load i8*, i8** %40
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %42 = getelementptr %struct.mz_zip_internal_state_tag, i8* %41, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %43 = load i8*, i8** %42
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %44 = load i64, i64* %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = getelementptr i8, i8* %43, i64 %44
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %46 = load i64, i64* %10
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %47 = load i8*, i8** %7
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %48 = call i64 @llvm.objectsize.i64.p0 (i8* %47, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %49 = call i8* @__memcpy_chk (i8* %38, i8* %45, i64 %46, i64 %48)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %50 = load i64, i64* %10
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %50
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_init_file
_mz_zip_reader_init_file:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdi
	popq	%r8
	popq	%r9
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %4
	movq	%r9, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %5
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %6
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %7 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %8 = load i8*, i8** %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %9 = load i32, i32* %6
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %10 = call i32 @mz_zip_reader_init_file_v2 (i8* %7, i8* %8, i32 %9, i64 0, i64 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %10
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_init_file_v2
_mz_zip_reader_init_file_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$72, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %18 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# %19 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %20 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %15
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %16
	movq	-16(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %17
	movq	-24(%rbp), %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# store i64 %3, i64* %18
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %4, i64* %19
	movq	-32(%rbp), %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %22 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = icmp ne i8* %22, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %23, label %24, label %33
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v233
	jmp	mz_zip_reader_init_file_v224
	.text
mz_zip_reader_init_file_v224:
	# %25 = load i8*, i8** %16
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = icmp ne i8* %25, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %26, label %27, label %33
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v233
	jmp	mz_zip_reader_init_file_v227
	.text
mz_zip_reader_init_file_v227:
	# %28 = load i64, i64* %19
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = icmp ne i64 %28, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %29, label %30, label %42
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v242
	jmp	mz_zip_reader_init_file_v230
	.text
mz_zip_reader_init_file_v230:
	# %31 = load i64, i64* %19
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = icmp ult i64 %31, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %32, label %33, label %42
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v242
	jmp	mz_zip_reader_init_file_v233
	.text
mz_zip_reader_init_file_v233:
	# %34 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %34, i8** %6
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %35 = load i8*, i8** %6
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = icmp ne i8* %35, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %36, label %37, label %41
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v241
	jmp	mz_zip_reader_init_file_v237
	.text
mz_zip_reader_init_file_v237:
	# %38 = load i32, i32* %7
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %39 = load i8*, i8** %6
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %40 = getelementptr %struct.mz_zip_archive, i8* %39, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %38, i32* %40
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %41
	jmp	mz_zip_reader_init_file_v241
	.text
mz_zip_reader_init_file_v241:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_init_file_v2129
	.text
mz_zip_reader_init_file_v242:
	# %43 = load i8*, i8** %16
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %44 = call i8* @fopen (i8* %43, i8* @.str.18)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	leaq	_.str.18(%rip), %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fopen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %44, i8** %21
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %45 = load i8*, i8** %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %46 = icmp ne i8* %45, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %46, label %56, label %47
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v247
	jmp	mz_zip_reader_init_file_v256
	.text
mz_zip_reader_init_file_v247:
	# %48 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %48, i8** %8
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 17, i32* %9
	movq	$17, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %49 = load i8*, i8** %8
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = icmp ne i8* %49, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %50, label %51, label %55
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v255
	jmp	mz_zip_reader_init_file_v251
	.text
mz_zip_reader_init_file_v251:
	# %52 = load i32, i32* %9
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %53 = load i8*, i8** %8
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %54 = getelementptr %struct.mz_zip_archive, i8* %53, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %52, i32* %54
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %55
	jmp	mz_zip_reader_init_file_v255
	.text
mz_zip_reader_init_file_v255:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_init_file_v2129
	.text
mz_zip_reader_init_file_v256:
	# %57 = load i64, i64* %19
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %57, i64* %20
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %58 = load i64, i64* %20
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = icmp ne i64 %58, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %59, label %78, label %60
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v260
	jmp	mz_zip_reader_init_file_v278
	.text
mz_zip_reader_init_file_v260:
	# %61 = load i8*, i8** %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = call i32 @fseeko (i8* %61, i64 0, i32 2)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$2, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fseeko
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %63 = icmp ne i32 %62, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %63, label %64, label %75
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v275
	jmp	mz_zip_reader_init_file_v264
	.text
mz_zip_reader_init_file_v264:
	# %65 = load i8*, i8** %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %66 = call i32 @fclose (i8* %65)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_fclose
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %67 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %67, i8** %10
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 22, i32* %11
	movq	$22, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %68 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %69 = icmp ne i8* %68, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %69, label %70, label %74
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v274
	jmp	mz_zip_reader_init_file_v270
	.text
mz_zip_reader_init_file_v270:
	# %71 = load i32, i32* %11
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %72 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %73 = getelementptr %struct.mz_zip_archive, i8* %72, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %71, i32* %73
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %74
	jmp	mz_zip_reader_init_file_v274
	.text
mz_zip_reader_init_file_v274:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_init_file_v2129
	.text
mz_zip_reader_init_file_v275:
	# %76 = load i8*, i8** %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = call i64 @ftello (i8* %76)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_ftello
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %77, i64* %20
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %78
	jmp	mz_zip_reader_init_file_v278
	.text
mz_zip_reader_init_file_v278:
	# %79 = load i64, i64* %20
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %80 = icmp ult i64 %79, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %80, label %81, label %92
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v292
	jmp	mz_zip_reader_init_file_v281
	.text
mz_zip_reader_init_file_v281:
	# %82 = load i8*, i8** %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %83 = call i32 @fclose (i8* %82)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_fclose
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %84 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %84, i8** %12
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 8, i32* %13
	movq	$8, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %85 = load i8*, i8** %12
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = icmp ne i8* %85, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %86, label %87, label %91
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v291
	jmp	mz_zip_reader_init_file_v287
	.text
mz_zip_reader_init_file_v287:
	# %88 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %89 = load i8*, i8** %12
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = getelementptr %struct.mz_zip_archive, i8* %89, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %88, i32* %90
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %91
	jmp	mz_zip_reader_init_file_v291
	.text
mz_zip_reader_init_file_v291:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_init_file_v2129
	.text
mz_zip_reader_init_file_v292:
	# %93 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %94 = load i32, i32* %17
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %95 = call i32 @mz_zip_reader_init_internal (i8* %93, i32 %94)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %96 = icmp ne i32 %95, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %96, label %100, label %97
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v297
	jmp	mz_zip_reader_init_file_v2100
	.text
mz_zip_reader_init_file_v297:
	# %98 = load i8*, i8** %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = call i32 @fclose (i8* %98)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_fclose
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_init_file_v2129
	.text
mz_zip_reader_init_file_v2100:
	# %101 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %102 = getelementptr %struct.mz_zip_archive, i8* %101, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 4, i32* %102
	movq	$4, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %103 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %104 = getelementptr %struct.mz_zip_archive, i8* %103, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @mz_zip_file_read_func, i8** %104
	leaq	_mz_zip_file_read_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %105 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %106 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %107 = getelementptr %struct.mz_zip_archive, i8* %106, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %105, i8** %107
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %108 = load i8*, i8** %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %109 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %110 = getelementptr %struct.mz_zip_archive, i8* %109, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %111 = load i8*, i8** %110
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %112 = getelementptr %struct.mz_zip_internal_state_tag, i8* %111, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %108, i8** %112
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %113 = load i64, i64* %20
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %114 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = getelementptr %struct.mz_zip_archive, i8* %114, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %113, i64* %115
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %116 = load i64, i64* %18
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %117 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = getelementptr %struct.mz_zip_archive, i8* %117, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %119 = load i8*, i8** %118
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %120 = getelementptr %struct.mz_zip_internal_state_tag, i8* %119, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %116, i64* %120
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %121 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %122 = load i32, i32* %17
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %123 = call i32 @mz_zip_reader_read_central_dir (i8* %121, i32 %122)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_read_central_dir
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %124 = icmp ne i32 %123, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %124, label %128, label %125
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_file_v2125
	jmp	mz_zip_reader_init_file_v2128
	.text
mz_zip_reader_init_file_v2125:
	# %126 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %127 = call i32 @mz_zip_reader_end_internal (i8* %126, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_init_file_v2129
	.text
mz_zip_reader_init_file_v2128:
	# store i32 1, i32* %14
	movq	$1, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_init_file_v2129
	.text
mz_zip_reader_init_file_v2129:
	# %130 = load i32, i32* %14
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %130
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_file_read_func
_mz_zip_file_read_func:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r12
	popq	%r13
	popq	%r14
	# %5 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %6
	movq	%r14, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %7
	movq	%r13, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%r12, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %12 = load i8*, i8** %6
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %12, i8** %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %13 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.mz_zip_archive, i8* %13, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %15 = load i8*, i8** %14
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = getelementptr %struct.mz_zip_internal_state_tag, i8* %15, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %17 = load i8*, i8** %16
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = call i64 @ftello (i8* %17)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_ftello
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %18, i64* %11
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %19 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %20 = getelementptr %struct.mz_zip_archive, i8* %19, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %21 = load i8*, i8** %20
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %22 = getelementptr %struct.mz_zip_internal_state_tag, i8* %21, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %23 = load i64, i64* %22
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %24 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %25 = add i64 %24, %23
	movq	%rdx, %rax
	movq	%r11, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %25, i64* %7
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %26 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %27 = icmp slt i64 %26, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setl	%dl
	# br i1 %27, label %41, label %28
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_read_func28
	jmp	mz_zip_file_read_func41
	.text
mz_zip_file_read_func28:
	# %29 = load i64, i64* %11
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %30 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %31 = icmp ne i64 %29, %30
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %31, label %32, label %42
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_read_func42
	jmp	mz_zip_file_read_func32
	.text
mz_zip_file_read_func32:
	# %33 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %35 = load i8*, i8** %34
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = getelementptr %struct.mz_zip_internal_state_tag, i8* %35, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %37 = load i8*, i8** %36
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %38 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %39 = call i32 @fseeko (i8* %37, i64 %38, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fseeko
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %40 = icmp ne i32 %39, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %40, label %41, label %42
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_read_func42
	jmp	mz_zip_file_read_func41
	.text
mz_zip_file_read_func41:
	# store i64 0, i64* %5
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %51
	jmp	mz_zip_file_read_func51
	.text
mz_zip_file_read_func42:
	# %43 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %44 = load i64, i64* %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %45 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %46 = getelementptr %struct.mz_zip_archive, i8* %45, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %47 = load i8*, i8** %46
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %48 = getelementptr %struct.mz_zip_internal_state_tag, i8* %47, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %49 = load i8*, i8** %48
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = call i64 @fread (i8* %43, i64 1, i64 %44, i8* %49)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fread
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %50, i64* %5
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %51
	jmp	mz_zip_file_read_func51
	.text
mz_zip_file_read_func51:
	# %52 = load i64, i64* %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %52
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_init_cfile
_mz_zip_reader_init_cfile:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$32, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %14 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %16 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %12
	movq	-8(%rbp), %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %13
	movq	-16(%rbp), %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %14
	movq	-24(%rbp), %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %15
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %17 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = icmp ne i8* %17, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %18, label %19, label %22
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile22
	jmp	mz_zip_reader_init_cfile19
	.text
mz_zip_reader_init_cfile19:
	# %20 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %21 = icmp ne i8* %20, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %21, label %31, label %22
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile22
	jmp	mz_zip_reader_init_cfile31
	.text
mz_zip_reader_init_cfile22:
	# %23 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %23, i8** %5
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 17, i32* %6
	movq	$17, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %24 = load i8*, i8** %5
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %25 = icmp ne i8* %24, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %25, label %26, label %30
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile30
	jmp	mz_zip_reader_init_cfile26
	.text
mz_zip_reader_init_cfile26:
	# %27 = load i32, i32* %6
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %28 = load i8*, i8** %5
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = getelementptr %struct.mz_zip_archive, i8* %28, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %27, i32* %29
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %30
	jmp	mz_zip_reader_init_cfile30
	.text
mz_zip_reader_init_cfile30:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %101
	jmp	mz_zip_reader_init_cfile101
	.text
mz_zip_reader_init_cfile31:
	# %32 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %33 = call i64 @ftello (i8* %32)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_ftello
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %33, i64* %16
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %34 = load i64, i64* %14
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %35 = icmp ne i64 %34, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %35, label %66, label %36
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile36
	jmp	mz_zip_reader_init_cfile66
	.text
mz_zip_reader_init_cfile36:
	# %37 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = call i32 @fseeko (i8* %37, i64 0, i32 2)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$2, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fseeko
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %39 = icmp ne i32 %38, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %39, label %40, label %49
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile49
	jmp	mz_zip_reader_init_cfile40
	.text
mz_zip_reader_init_cfile40:
	# %41 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %41, i8** %7
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 22, i32* %8
	movq	$22, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %42 = load i8*, i8** %7
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %43 = icmp ne i8* %42, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %43, label %44, label %48
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile48
	jmp	mz_zip_reader_init_cfile44
	.text
mz_zip_reader_init_cfile44:
	# %45 = load i32, i32* %8
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %46 = load i8*, i8** %7
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = getelementptr %struct.mz_zip_archive, i8* %46, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %45, i32* %47
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %48
	jmp	mz_zip_reader_init_cfile48
	.text
mz_zip_reader_init_cfile48:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %101
	jmp	mz_zip_reader_init_cfile101
	.text
mz_zip_reader_init_cfile49:
	# %50 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %51 = call i64 @ftello (i8* %50)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_ftello
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r13
	# %52 = load i64, i64* %16
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = sub i64 %51, %52
	movq	%r13, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %53, i64* %14
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %54 = load i64, i64* %14
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = icmp ult i64 %54, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %55, label %56, label %65
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile65
	jmp	mz_zip_reader_init_cfile56
	.text
mz_zip_reader_init_cfile56:
	# %57 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %57, i8** %9
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 8, i32* %10
	movq	$8, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %58 = load i8*, i8** %9
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = icmp ne i8* %58, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %59, label %60, label %64
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile64
	jmp	mz_zip_reader_init_cfile60
	.text
mz_zip_reader_init_cfile60:
	# %61 = load i32, i32* %10
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %62 = load i8*, i8** %9
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = getelementptr %struct.mz_zip_archive, i8* %62, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %61, i32* %63
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %64
	jmp	mz_zip_reader_init_cfile64
	.text
mz_zip_reader_init_cfile64:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %101
	jmp	mz_zip_reader_init_cfile101
	.text
mz_zip_reader_init_cfile65:
	# br label %66
	jmp	mz_zip_reader_init_cfile66
	.text
mz_zip_reader_init_cfile66:
	# %67 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %68 = load i32, i32* %15
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %69 = call i32 @mz_zip_reader_init_internal (i8* %67, i32 %68)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %70 = icmp ne i32 %69, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %70, label %72, label %71
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile71
	jmp	mz_zip_reader_init_cfile72
	.text
mz_zip_reader_init_cfile71:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %101
	jmp	mz_zip_reader_init_cfile101
	.text
mz_zip_reader_init_cfile72:
	# %73 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %74 = getelementptr %struct.mz_zip_archive, i8* %73, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 5, i32* %74
	movq	$5, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %75 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %76 = getelementptr %struct.mz_zip_archive, i8* %75, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @mz_zip_file_read_func, i8** %76
	leaq	_mz_zip_file_read_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %77 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %78 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %79 = getelementptr %struct.mz_zip_archive, i8* %78, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %77, i8** %79
	movq	%r11, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %80 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %81 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %82 = getelementptr %struct.mz_zip_archive, i8* %81, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %83 = load i8*, i8** %82
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %84 = getelementptr %struct.mz_zip_internal_state_tag, i8* %83, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %80, i8** %84
	movq	%r8, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %85 = load i64, i64* %14
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %86 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %87 = getelementptr %struct.mz_zip_archive, i8* %86, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %85, i64* %87
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %88 = load i64, i64* %16
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %89 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = getelementptr %struct.mz_zip_archive, i8* %89, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %91 = load i8*, i8** %90
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = getelementptr %struct.mz_zip_internal_state_tag, i8* %91, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %88, i64* %92
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %93 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %94 = load i32, i32* %15
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %95 = call i32 @mz_zip_reader_read_central_dir (i8* %93, i32 %94)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_read_central_dir
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %96 = icmp ne i32 %95, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %96, label %100, label %97
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_init_cfile97
	jmp	mz_zip_reader_init_cfile100
	.text
mz_zip_reader_init_cfile97:
	# %98 = load i8*, i8** %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = call i32 @mz_zip_reader_end_internal (i8* %98, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %101
	jmp	mz_zip_reader_init_cfile101
	.text
mz_zip_reader_init_cfile100:
	# store i32 1, i32* %11
	movq	$1, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %101
	jmp	mz_zip_reader_init_cfile101
	.text
mz_zip_reader_init_cfile101:
	# %102 = load i32, i32* %11
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %102
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_is_file_encrypted
_mz_zip_reader_is_file_encrypted:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%r12
	popq	%r15
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %9
	movq	%r15, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %10
	movq	%r12, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %13 = load i8*, i8** %9
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %14 = load i32, i32* %10
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# store i8* %13, i8** %4
	movq	%r12, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 %14, i32* %5
	movq	%r10, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %15 = load i8*, i8** %4
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %16 = icmp ne i8* %15, null
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r10
	setne	%r10b
	# br i1 %16, label %17, label %28
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_encrypted28
	jmp	mz_zip_reader_is_file_encrypted17
	.text
mz_zip_reader_is_file_encrypted17:
	# %18 = load i8*, i8** %4
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %19 = getelementptr %struct.mz_zip_archive, i8* %18, i32 0, i32 15
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %20 = load i8*, i8** %19
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %21 = icmp ne i8* %20, null
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r10
	setne	%r10b
	# br i1 %21, label %22, label %28
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_encrypted28
	jmp	mz_zip_reader_is_file_encrypted22
	.text
mz_zip_reader_is_file_encrypted22:
	# %23 = load i32, i32* %5
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %r12
	movl	%eax, %r12d
	# %24 = load i8*, i8** %4
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %25 = getelementptr %struct.mz_zip_archive, i8* %24, i32 0, i32 2
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %26 = load i32, i32* %25
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %27 = icmp uge i32 %23, %26
	movq	%r12, %rax
	movq	%r10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r10
	setnb	%r10b
	# br i1 %27, label %28, label %29
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_encrypted29
	jmp	mz_zip_reader_is_file_encrypted28
	.text
mz_zip_reader_is_file_encrypted28:
	# store i8* null, i8** %3
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %45
	jmp	mz_zip_reader_is_file_encrypted45
	.text
mz_zip_reader_is_file_encrypted29:
	# %30 = load i8*, i8** %4
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %31 = getelementptr %struct.mz_zip_archive, i8* %30, i32 0, i32 15
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %32 = load i8*, i8** %31
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %33 = load i8*, i8** %32
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %34 = load i8*, i8** %4
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %35 = getelementptr %struct.mz_zip_archive, i8* %34, i32 0, i32 15
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %36 = load i8*, i8** %35
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %37 = getelementptr %struct.mz_zip_internal_state_tag, i8* %36, i32 0, i32 1
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %38 = load i8*, i8** %37
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %39 = load i32, i32* %5
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %40 = zext i32 %39 to i64
	movq	%r10, %rax
	movq	$0, %r10
	movl	%eax, %r10d
	# %41 = getelementptr i32, i8* %38, i64 %40
	movq	%r13, %rcx
	movq	%r10, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %42 = load i32, i32* %41
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %43 = zext i32 %42 to i64
	movq	%r10, %rax
	movq	$0, %r10
	movl	%eax, %r10d
	# %44 = getelementptr i8, i8* %33, i64 %43
	movq	%r12, %rcx
	movq	%r10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# store i8* %44, i8** %3
	movq	%r10, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %45
	jmp	mz_zip_reader_is_file_encrypted45
	.text
mz_zip_reader_is_file_encrypted45:
	# %46 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %46, i8** %12
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %47 = load i8*, i8** %12
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %48 = icmp ne i8* %47, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %48, label %58, label %49
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_encrypted49
	jmp	mz_zip_reader_is_file_encrypted58
	.text
mz_zip_reader_is_file_encrypted49:
	# %50 = load i8*, i8** %9
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %50, i8** %6
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %51 = load i8*, i8** %6
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %52 = icmp ne i8* %51, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %52, label %53, label %57
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_encrypted57
	jmp	mz_zip_reader_is_file_encrypted53
	.text
mz_zip_reader_is_file_encrypted53:
	# %54 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %55 = load i8*, i8** %6
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %56 = getelementptr %struct.mz_zip_archive, i8* %55, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %54, i32* %56
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %57
	jmp	mz_zip_reader_is_file_encrypted57
	.text
mz_zip_reader_is_file_encrypted57:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %75
	jmp	mz_zip_reader_is_file_encrypted75
	.text
mz_zip_reader_is_file_encrypted58:
	# %59 = load i8*, i8** %12
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = getelementptr i8, i8* %59, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %61 = getelementptr i8, i8* %60, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %62 = load i8, i8* %61
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %63 = zext i8 %62 to i32
	movq	%rdx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %64 = load i8*, i8** %12
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = getelementptr i8, i8* %64, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %66 = getelementptr i8, i8* %65, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %67 = load i8, i8* %66
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %68 = zext i8 %67 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %69 = shl i32 %68, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %70 = or i32 %63, %69
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %70, i32* %11
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %71 = load i32, i32* %11
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %72 = and i32 %71, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %73 = icmp ne i32 %72, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %74 = zext i1 %73 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %74, i32* %8
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %75
	jmp	mz_zip_reader_is_file_encrypted75
	.text
mz_zip_reader_is_file_encrypted75:
	# %76 = load i32, i32* %8
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %76
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_is_file_supported
_mz_zip_reader_is_file_supported:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$64, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%r8
	popq	-8(%rbp)
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %19 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %15
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %16
	movq	%r8, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %20 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %21 = load i32, i32* %16
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i8* %20, i8** %4
	movq	%r8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %21, i32* %5
	movq	%rbx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %22 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %23 = icmp ne i8* %22, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %23, label %24, label %35
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported35
	jmp	mz_zip_reader_is_file_supported24
	.text
mz_zip_reader_is_file_supported24:
	# %25 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %26 = getelementptr %struct.mz_zip_archive, i8* %25, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %27 = load i8*, i8** %26
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %28 = icmp ne i8* %27, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %28, label %29, label %35
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported35
	jmp	mz_zip_reader_is_file_supported29
	.text
mz_zip_reader_is_file_supported29:
	# %30 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %31 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %32 = getelementptr %struct.mz_zip_archive, i8* %31, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %33 = load i32, i32* %32
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %34 = icmp uge i32 %30, %33
	movq	%r8, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setnb	%bl
	# br i1 %34, label %35, label %36
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported36
	jmp	mz_zip_reader_is_file_supported35
	.text
mz_zip_reader_is_file_supported35:
	# store i8* null, i8** %3
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %52
	jmp	mz_zip_reader_is_file_supported52
	.text
mz_zip_reader_is_file_supported36:
	# %37 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %38 = getelementptr %struct.mz_zip_archive, i8* %37, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %39 = load i8*, i8** %38
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = load i8*, i8** %39
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %41 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %42 = getelementptr %struct.mz_zip_archive, i8* %41, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %43 = load i8*, i8** %42
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %44 = getelementptr %struct.mz_zip_internal_state_tag, i8* %43, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %45 = load i8*, i8** %44
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %46 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %47 = zext i32 %46 to i64
	movq	%r10, %rax
	movq	$0, %r10
	movl	%eax, %r10d
	# %48 = getelementptr i32, i8* %45, i64 %47
	movq	%r8, %rcx
	movq	%r10, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %49 = load i32, i32* %48
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %50 = zext i32 %49 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %51 = getelementptr i8, i8* %40, i64 %50
	movq	%rbx, %rcx
	movq	%r8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %51, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %52
	jmp	mz_zip_reader_is_file_supported52
	.text
mz_zip_reader_is_file_supported52:
	# %53 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %53, i8** %19
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %54 = load i8*, i8** %19
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = icmp ne i8* %54, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %55, label %65, label %56
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported56
	jmp	mz_zip_reader_is_file_supported65
	.text
mz_zip_reader_is_file_supported56:
	# %57 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %57, i8** %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %58 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = icmp ne i8* %58, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %59, label %60, label %64
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported64
	jmp	mz_zip_reader_is_file_supported60
	.text
mz_zip_reader_is_file_supported60:
	# %61 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %62 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = getelementptr %struct.mz_zip_archive, i8* %62, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %61, i32* %63
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %64
	jmp	mz_zip_reader_is_file_supported64
	.text
mz_zip_reader_is_file_supported64:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %131
	jmp	mz_zip_reader_is_file_supported131
	.text
mz_zip_reader_is_file_supported65:
	# %66 = load i8*, i8** %19
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = getelementptr i8, i8* %66, i64 10
	movq	%rdx, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %68 = getelementptr i8, i8* %67, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %69 = load i8, i8* %68
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %70 = zext i8 %69 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %71 = load i8*, i8** %19
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %72 = getelementptr i8, i8* %71, i64 10
	movq	%rdx, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %73 = getelementptr i8, i8* %72, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %74 = load i8, i8* %73
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %75 = zext i8 %74 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %76 = shl i32 %75, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %77 = or i32 %70, %76
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %77, i32* %18
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %78 = load i8*, i8** %19
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %79 = getelementptr i8, i8* %78, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %80 = getelementptr i8, i8* %79, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %81 = load i8, i8* %80
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %82 = zext i8 %81 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %83 = load i8*, i8** %19
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %84 = getelementptr i8, i8* %83, i64 8
	movq	%rbx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %85 = getelementptr i8, i8* %84, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %86 = load i8, i8* %85
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %87 = zext i8 %86 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %88 = shl i32 %87, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %89 = or i32 %82, %88
	movq	%rdx, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %89, i32* %17
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %90 = load i32, i32* %18
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %91 = icmp ne i32 %90, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %91, label %92, label %104
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported104
	jmp	mz_zip_reader_is_file_supported92
	.text
mz_zip_reader_is_file_supported92:
	# %93 = load i32, i32* %18
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %94 = icmp ne i32 %93, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %94, label %95, label %104
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported104
	jmp	mz_zip_reader_is_file_supported95
	.text
mz_zip_reader_is_file_supported95:
	# %96 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %96, i8** %8
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 4, i32* %9
	movq	$4, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %97 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %98 = icmp ne i8* %97, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %98, label %99, label %103
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported103
	jmp	mz_zip_reader_is_file_supported99
	.text
mz_zip_reader_is_file_supported99:
	# %100 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %101 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %102 = getelementptr %struct.mz_zip_archive, i8* %101, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %100, i32* %102
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %103
	jmp	mz_zip_reader_is_file_supported103
	.text
mz_zip_reader_is_file_supported103:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %131
	jmp	mz_zip_reader_is_file_supported131
	.text
mz_zip_reader_is_file_supported104:
	# %105 = load i32, i32* %17
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %106 = and i32 %105, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %107 = icmp ne i32 %106, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %107, label %108, label %117
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported117
	jmp	mz_zip_reader_is_file_supported108
	.text
mz_zip_reader_is_file_supported108:
	# %109 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %109, i8** %10
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 5, i32* %11
	movq	$5, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %110 = load i8*, i8** %10
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = icmp ne i8* %110, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %111, label %112, label %116
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported116
	jmp	mz_zip_reader_is_file_supported112
	.text
mz_zip_reader_is_file_supported112:
	# %113 = load i32, i32* %11
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %114 = load i8*, i8** %10
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = getelementptr %struct.mz_zip_archive, i8* %114, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %113, i32* %115
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %116
	jmp	mz_zip_reader_is_file_supported116
	.text
mz_zip_reader_is_file_supported116:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %131
	jmp	mz_zip_reader_is_file_supported131
	.text
mz_zip_reader_is_file_supported117:
	# %118 = load i32, i32* %17
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %119 = and i32 %118, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %120 = icmp ne i32 %119, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %120, label %121, label %130
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported130
	jmp	mz_zip_reader_is_file_supported121
	.text
mz_zip_reader_is_file_supported121:
	# %122 = load i8*, i8** %15
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %122, i8** %12
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 6, i32* %13
	movq	$6, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %123 = load i8*, i8** %12
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %124 = icmp ne i8* %123, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %124, label %125, label %129
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_supported129
	jmp	mz_zip_reader_is_file_supported125
	.text
mz_zip_reader_is_file_supported125:
	# %126 = load i32, i32* %13
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %127 = load i8*, i8** %12
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = getelementptr %struct.mz_zip_archive, i8* %127, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %126, i32* %128
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %129
	jmp	mz_zip_reader_is_file_supported129
	.text
mz_zip_reader_is_file_supported129:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %131
	jmp	mz_zip_reader_is_file_supported131
	.text
mz_zip_reader_is_file_supported130:
	# store i32 1, i32* %14
	movq	$1, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %131
	jmp	mz_zip_reader_is_file_supported131
	.text
mz_zip_reader_is_file_supported131:
	# %132 = load i32, i32* %14
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %132
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_is_file_a_directory
_mz_zip_reader_is_file_a_directory:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$16, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%r14
	popq	-8(%rbp)
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %9
	movq	-8(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %10
	movq	%r14, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %15 = load i8*, i8** %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %16 = load i32, i32* %10
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i8* %15, i8** %4
	movq	%r14, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %16, i32* %5
	movq	%rbx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %17 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %18 = icmp ne i8* %17, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %18, label %19, label %30
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_a_directory30
	jmp	mz_zip_reader_is_file_a_directory19
	.text
mz_zip_reader_is_file_a_directory19:
	# %20 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %21 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %22 = load i8*, i8** %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %23 = icmp ne i8* %22, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %23, label %24, label %30
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_a_directory30
	jmp	mz_zip_reader_is_file_a_directory24
	.text
mz_zip_reader_is_file_a_directory24:
	# %25 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %r14
	movl	%eax, %r14d
	# %26 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %27 = getelementptr %struct.mz_zip_archive, i8* %26, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %28 = load i32, i32* %27
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %29 = icmp uge i32 %25, %28
	movq	%r14, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setnb	%bl
	# br i1 %29, label %30, label %31
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_a_directory31
	jmp	mz_zip_reader_is_file_a_directory30
	.text
mz_zip_reader_is_file_a_directory30:
	# store i8* null, i8** %3
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %47
	jmp	mz_zip_reader_is_file_a_directory47
	.text
mz_zip_reader_is_file_a_directory31:
	# %32 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %33 = getelementptr %struct.mz_zip_archive, i8* %32, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %34 = load i8*, i8** %33
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %35 = load i8*, i8** %34
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %36 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %37 = getelementptr %struct.mz_zip_archive, i8* %36, i32 0, i32 15
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r14
	# %38 = load i8*, i8** %37
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %39 = getelementptr %struct.mz_zip_internal_state_tag, i8* %38, i32 0, i32 1
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r14
	# %40 = load i8*, i8** %39
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %41 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %r15
	movl	%eax, %r15d
	# %42 = zext i32 %41 to i64
	movq	%r15, %rax
	movq	$0, %r15
	movl	%eax, %r15d
	# %43 = getelementptr i32, i8* %40, i64 %42
	movq	%r14, %rcx
	movq	%r15, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r14
	# %44 = load i32, i32* %43
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %r14
	movl	%eax, %r14d
	# %45 = zext i32 %44 to i64
	movq	%r14, %rax
	movq	$0, %r14
	movl	%eax, %r14d
	# %46 = getelementptr i8, i8* %35, i64 %45
	movq	%rbx, %rcx
	movq	%r14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %46, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %47
	jmp	mz_zip_reader_is_file_a_directory47
	.text
mz_zip_reader_is_file_a_directory47:
	# %48 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %48, i8** %14
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %49 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = icmp ne i8* %49, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %50, label %60, label %51
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_a_directory51
	jmp	mz_zip_reader_is_file_a_directory60
	.text
mz_zip_reader_is_file_a_directory51:
	# %52 = load i8*, i8** %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %52, i8** %6
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %53 = load i8*, i8** %6
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %54 = icmp ne i8* %53, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %54, label %55, label %59
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_a_directory59
	jmp	mz_zip_reader_is_file_a_directory55
	.text
mz_zip_reader_is_file_a_directory55:
	# %56 = load i32, i32* %7
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %57 = load i8*, i8** %6
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = getelementptr %struct.mz_zip_archive, i8* %57, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %56, i32* %58
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %59
	jmp	mz_zip_reader_is_file_a_directory59
	.text
mz_zip_reader_is_file_a_directory59:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	mz_zip_reader_is_file_a_directory133
	.text
mz_zip_reader_is_file_a_directory60:
	# %61 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = getelementptr i8, i8* %61, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %63 = getelementptr i8, i8* %62, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %64 = load i8, i8* %63
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %65 = zext i8 %64 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %66 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = getelementptr i8, i8* %66, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %68 = getelementptr i8, i8* %67, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %69 = load i8, i8* %68
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %70 = zext i8 %69 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %71 = shl i32 %70, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %72 = or i32 %65, %71
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %72, i32* %11
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %73 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %74 = icmp ne i32 %73, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %74, label %75, label %87
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_a_directory87
	jmp	mz_zip_reader_is_file_a_directory75
	.text
mz_zip_reader_is_file_a_directory75:
	# %76 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = getelementptr i8, i8* %76, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %78 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %79 = zext i32 %78 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %80 = getelementptr i8, i8* %77, i64 %79
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %81 = getelementptr i8, i8* %80, i64 -1
	movq	%rdx, %rcx
	movq	$-1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %82 = load i8, i8* %81
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %83 = zext i8 %82 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %84 = icmp eq i32 %83, 47
	movq	%rdx, %rax
	movq	$47, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %84, label %85, label %86
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_a_directory86
	jmp	mz_zip_reader_is_file_a_directory85
	.text
mz_zip_reader_is_file_a_directory85:
	# store i32 1, i32* %8
	movq	$1, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	mz_zip_reader_is_file_a_directory133
	.text
mz_zip_reader_is_file_a_directory86:
	# br label %87
	jmp	mz_zip_reader_is_file_a_directory87
	.text
mz_zip_reader_is_file_a_directory87:
	# %88 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %89 = getelementptr i8, i8* %88, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %90 = getelementptr i8, i8* %89, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %91 = load i8, i8* %90
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %92 = zext i8 %91 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %93 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %94 = getelementptr i8, i8* %93, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %95 = getelementptr i8, i8* %94, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %96 = load i8, i8* %95
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %97 = zext i8 %96 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %98 = shl i32 %97, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %99 = or i32 %92, %98
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %100 = lshr i32 %99, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %100, i32* %12
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %101 = load i32, i32* %12
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %102 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %103 = getelementptr i8, i8* %102, i64 38
	movq	%rdx, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %104 = getelementptr i8, i8* %103, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %105 = load i8, i8* %104
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %106 = zext i8 %105 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %107 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %108 = getelementptr i8, i8* %107, i64 38
	movq	%rdx, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %109 = getelementptr i8, i8* %108, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %110 = load i8, i8* %109
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %111 = zext i8 %110 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %112 = shl i32 %111, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %113 = or i32 %106, %112
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %114 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = getelementptr i8, i8* %114, i64 38
	movq	%rdx, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %116 = getelementptr i8, i8* %115, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %117 = load i8, i8* %116
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %118 = zext i8 %117 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %119 = shl i32 %118, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %120 = or i32 %113, %119
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %121 = load i8*, i8** %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %122 = getelementptr i8, i8* %121, i64 38
	movq	%rdx, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %123 = getelementptr i8, i8* %122, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %124 = load i8, i8* %123
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %125 = zext i8 %124 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %126 = shl i32 %125, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %127 = or i32 %120, %126
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %127, i32* %13
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %128 = load i32, i32* %13
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %129 = and i32 %128, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %130 = icmp ne i32 %129, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %130, label %131, label %132
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_is_file_a_directory132
	jmp	mz_zip_reader_is_file_a_directory131
	.text
mz_zip_reader_is_file_a_directory131:
	# store i32 1, i32* %8
	movq	$1, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	mz_zip_reader_is_file_a_directory133
	.text
mz_zip_reader_is_file_a_directory132:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	mz_zip_reader_is_file_a_directory133
	.text
mz_zip_reader_is_file_a_directory133:
	# %134 = load i32, i32* %8
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %134
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_locate_file
_mz_zip_reader_locate_file:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r11
	popq	%r12
	popq	%r13
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %7
	movq	%r12, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%r11, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %12 = load i8*, i8** %7
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %13 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %14 = load i32, i32* %9
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %15 = call i32 @mz_zip_reader_locate_file_v2 (i8* %11, i8* %12, i8* %13, i32 %14, i8* %10)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %16 = icmp ne i32 %15, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %16, label %18, label %17
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file17
	jmp	mz_zip_reader_locate_file18
	.text
mz_zip_reader_locate_file17:
	# store i32 -1, i32* %5
	movq	$-1, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %20
	jmp	mz_zip_reader_locate_file20
	.text
mz_zip_reader_locate_file18:
	# %19 = load i32, i32* %10
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %19, i32* %5
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %20
	jmp	mz_zip_reader_locate_file20
	.text
mz_zip_reader_locate_file20:
	# %21 = load i32, i32* %5
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %21
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_locate_file_v2
_mz_zip_reader_locate_file_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$272, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%rbx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	popq	%r9
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -8(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -80(%rbp)
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -152(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %29 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %31 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %32 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %33 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %34 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -216(%rbp)
	# %35 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %36 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %37 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %38 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %39 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -256(%rbp)
	# %40 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -264(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -272(%rbp)
	# store i8* %0, i8** %27
	movq	%r9, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %28
	movq	%rdi, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %29
	movq	%rsi, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %30
	movq	%rdx, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %4, i8** %31
	movq	%rbx, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# %42 = load i8*, i8** %31
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %43 = icmp ne i8* %42, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %43, label %44, label %46
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v246
	jmp	mz_zip_reader_locate_file_v244
	.text
mz_zip_reader_locate_file_v244:
	# %45 = load i8*, i8** %31
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i32 0, i32* %45
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	mz_zip_reader_locate_file_v246
	.text
mz_zip_reader_locate_file_v246:
	# %47 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %48 = icmp ne i8* %47, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %48, label %49, label %57
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v257
	jmp	mz_zip_reader_locate_file_v249
	.text
mz_zip_reader_locate_file_v249:
	# %50 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %51 = getelementptr %struct.mz_zip_archive, i8* %50, i32 0, i32 15
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %52 = load i8*, i8** %51
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %53 = icmp ne i8* %52, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %53, label %54, label %57
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v257
	jmp	mz_zip_reader_locate_file_v254
	.text
mz_zip_reader_locate_file_v254:
	# %55 = load i8*, i8** %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %56 = icmp ne i8* %55, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %56, label %66, label %57
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v257
	jmp	mz_zip_reader_locate_file_v266
	.text
mz_zip_reader_locate_file_v257:
	# %58 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %58, i8** %18
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %19
	movq	$24, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %59 = load i8*, i8** %18
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = icmp ne i8* %59, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %60, label %61, label %65
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v265
	jmp	mz_zip_reader_locate_file_v261
	.text
mz_zip_reader_locate_file_v261:
	# %62 = load i32, i32* %19
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %63 = load i8*, i8** %18
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = getelementptr %struct.mz_zip_archive, i8* %63, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %62, i32* %64
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %65
	jmp	mz_zip_reader_locate_file_v265
	.text
mz_zip_reader_locate_file_v265:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %488
	jmp	mz_zip_reader_locate_file_v2488
	.text
mz_zip_reader_locate_file_v266:
	# %67 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %68 = getelementptr %struct.mz_zip_archive, i8* %67, i32 0, i32 15
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %69 = load i8*, i8** %68
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %70 = getelementptr %struct.mz_zip_internal_state_tag, i8* %69, i32 0, i32 3
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %71 = load i32, i32* %70
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %72 = and i32 %71, 2048
	movq	%rdi, %rax
	movq	$2048, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %73 = icmp eq i32 %72, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# br i1 %73, label %74, label %99
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v299
	jmp	mz_zip_reader_locate_file_v274
	.text
mz_zip_reader_locate_file_v274:
	# %75 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %76 = getelementptr %struct.mz_zip_archive, i8* %75, i32 0, i32 3
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %77 = load i32, i32* %76
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %78 = icmp eq i32 %77, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# br i1 %78, label %79, label %99
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v299
	jmp	mz_zip_reader_locate_file_v279
	.text
mz_zip_reader_locate_file_v279:
	# %80 = load i32, i32* %30
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %81 = and i32 %80, 768
	movq	%rdi, %rax
	movq	$768, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %82 = icmp eq i32 %81, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# br i1 %82, label %83, label %99
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v299
	jmp	mz_zip_reader_locate_file_v283
	.text
mz_zip_reader_locate_file_v283:
	# %84 = load i8*, i8** %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %85 = icmp ne i8* %84, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %85, label %99, label %86
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v286
	jmp	mz_zip_reader_locate_file_v299
	.text
mz_zip_reader_locate_file_v286:
	# %87 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %88 = getelementptr %struct.mz_zip_archive, i8* %87, i32 0, i32 15
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %89 = load i8*, i8** %88
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %90 = getelementptr %struct.mz_zip_internal_state_tag, i8* %89, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %91 = getelementptr %struct.mz_zip_array, i8* %90, i32 0, i32 1
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %92 = load i64, i64* %91
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %93 = icmp ne i64 %92, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %93, label %94, label %99
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v299
	jmp	mz_zip_reader_locate_file_v294
	.text
mz_zip_reader_locate_file_v294:
	# %95 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %96 = load i8*, i8** %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %97 = load i8*, i8** %31
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %98 = call i32 @mz_zip_locate_file_binary_search (i8* %95, i8* %96, i8* %97)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_locate_file_binary_search
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %98, i32* %26
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %488
	jmp	mz_zip_reader_locate_file_v2488
	.text
mz_zip_reader_locate_file_v299:
	# %100 = load i8*, i8** %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %101 = call i64 @strlen (i8* %100)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_strlen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# store i64 %101, i64* %33
	movq	%rdi, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# %102 = load i64, i64* %33
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %103 = icmp ugt i64 %102, 65535
	movq	%rdi, %rax
	movq	$65535, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	seta	%dil
	# br i1 %103, label %104, label %113
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2113
	jmp	mz_zip_reader_locate_file_v2104
	.text
mz_zip_reader_locate_file_v2104:
	# %105 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %105, i8** %20
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %21
	movq	$24, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %106 = load i8*, i8** %20
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %107 = icmp ne i8* %106, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %107, label %108, label %112
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2112
	jmp	mz_zip_reader_locate_file_v2108
	.text
mz_zip_reader_locate_file_v2108:
	# %109 = load i32, i32* %21
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %110 = load i8*, i8** %20
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr %struct.mz_zip_archive, i8* %110, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %109, i32* %111
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %112
	jmp	mz_zip_reader_locate_file_v2112
	.text
mz_zip_reader_locate_file_v2112:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %488
	jmp	mz_zip_reader_locate_file_v2488
	.text
mz_zip_reader_locate_file_v2113:
	# %114 = load i8*, i8** %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %115 = icmp ne i8* %114, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %115, label %116, label %119
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2119
	jmp	mz_zip_reader_locate_file_v2116
	.text
mz_zip_reader_locate_file_v2116:
	# %117 = load i8*, i8** %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = call i64 @strlen (i8* %117)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_strlen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %120
	jmp	mz_zip_reader_locate_file_v2120
	.text
mz_zip_reader_locate_file_v2119:
	# br label %120
	movq	$0, %rdx
	jmp	mz_zip_reader_locate_file_v2120
	.text
mz_zip_reader_locate_file_v2120:
	# %121 = phi i64 [%118, %116], [0, %119]
	# store i64 %121, i64* %34
	movq	%rdx, %rax
	movq	-216(%rbp), %rcx
	movq	%rax, (%rcx)
	# %122 = load i64, i64* %34
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = icmp ugt i64 %122, 65535
	movq	%rdx, %rax
	movq	$65535, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %123, label %124, label %133
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2133
	jmp	mz_zip_reader_locate_file_v2124
	.text
mz_zip_reader_locate_file_v2124:
	# %125 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %125, i8** %22
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %23
	movq	$24, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %126 = load i8*, i8** %22
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %127 = icmp ne i8* %126, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %127, label %128, label %132
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2132
	jmp	mz_zip_reader_locate_file_v2128
	.text
mz_zip_reader_locate_file_v2128:
	# %129 = load i32, i32* %23
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %130 = load i8*, i8** %22
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %131 = getelementptr %struct.mz_zip_archive, i8* %130, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %129, i32* %131
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %132
	jmp	mz_zip_reader_locate_file_v2132
	.text
mz_zip_reader_locate_file_v2132:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %488
	jmp	mz_zip_reader_locate_file_v2488
	.text
mz_zip_reader_locate_file_v2133:
	# store i32 0, i32* %32
	movq	$0, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %134
	jmp	mz_zip_reader_locate_file_v2134
	.text
mz_zip_reader_locate_file_v2134:
	# %135 = load i32, i32* %32
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %136 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %137 = getelementptr %struct.mz_zip_archive, i8* %136, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %138 = load i32, i32* %137
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %139 = icmp ult i32 %135, %138
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %139, label %140, label %479
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2479
	jmp	mz_zip_reader_locate_file_v2140
	.text
mz_zip_reader_locate_file_v2140:
	# %141 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %142 = getelementptr %struct.mz_zip_archive, i8* %141, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %143 = load i8*, i8** %142
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %144 = getelementptr %struct.mz_zip_internal_state_tag, i8* %143, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %145 = getelementptr %struct.mz_zip_array, i8* %144, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %146 = load i8*, i8** %145
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %147 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %148 = getelementptr %struct.mz_zip_archive, i8* %147, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %149 = load i8*, i8** %148
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %150 = getelementptr %struct.mz_zip_internal_state_tag, i8* %149, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %151 = getelementptr %struct.mz_zip_array, i8* %150, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %152 = load i8*, i8** %151
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %153 = load i32, i32* %32
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %154 = zext i32 %153 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %155 = getelementptr i32, i8* %152, i64 %154
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %156 = load i32, i32* %155
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %157 = zext i32 %156 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %158 = getelementptr i8, i8* %146, i64 %157
	movq	%r8, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %158, i8** %35
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# %159 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %160 = getelementptr i8, i8* %159, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %161 = getelementptr i8, i8* %160, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %162 = load i8, i8* %161
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %163 = zext i8 %162 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %164 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %165 = getelementptr i8, i8* %164, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %166 = getelementptr i8, i8* %165, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %167 = load i8, i8* %166
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %168 = zext i8 %167 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %169 = shl i32 %168, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %170 = or i32 %163, %169
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %170, i32* %36
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %171 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %172 = getelementptr i8, i8* %171, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %172, i8** %37
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# %173 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %174 = zext i32 %173 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %175 = load i64, i64* %33
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %176 = icmp ult i64 %174, %175
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %176, label %177, label %178
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2178
	jmp	mz_zip_reader_locate_file_v2177
	.text
mz_zip_reader_locate_file_v2177:
	# br label %476
	jmp	mz_zip_reader_locate_file_v2476
	.text
mz_zip_reader_locate_file_v2178:
	# %179 = load i64, i64* %34
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %180 = icmp ne i64 %179, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %180, label %181, label %316
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2316
	jmp	mz_zip_reader_locate_file_v2181
	.text
mz_zip_reader_locate_file_v2181:
	# %182 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %183 = getelementptr i8, i8* %182, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %184 = getelementptr i8, i8* %183, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %185 = load i8, i8* %184
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %186 = zext i8 %185 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %187 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %188 = getelementptr i8, i8* %187, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %189 = getelementptr i8, i8* %188, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %190 = load i8, i8* %189
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %191 = zext i8 %190 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %192 = shl i32 %191, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %193 = or i32 %186, %192
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %193, i32* %38
	movq	%rdx, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %194 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %195 = getelementptr i8, i8* %194, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %196 = getelementptr i8, i8* %195, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %197 = load i8, i8* %196
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %198 = zext i8 %197 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %199 = load i8*, i8** %35
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %200 = getelementptr i8, i8* %199, i64 32
	movq	%rdx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %201 = getelementptr i8, i8* %200, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %202 = load i8, i8* %201
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %203 = zext i8 %202 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %204 = shl i32 %203, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %205 = or i32 %198, %204
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %205, i32* %39
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# %206 = load i8*, i8** %37
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %207 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %208 = zext i32 %207 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %209 = getelementptr i8, i8* %206, i64 %208
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %210 = load i32, i32* %38
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %211 = zext i32 %210 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %212 = getelementptr i8, i8* %209, i64 %211
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %212, i8** %40
	movq	%rdx, %rax
	movq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
	# %213 = load i32, i32* %39
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %214 = zext i32 %213 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %215 = load i64, i64* %34
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %216 = icmp ne i64 %214, %215
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %216, label %314, label %217
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2217
	jmp	mz_zip_reader_locate_file_v2314
	.text
mz_zip_reader_locate_file_v2217:
	# %218 = load i8*, i8** %29
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %219 = load i8*, i8** %40
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %220 = load i32, i32* %39
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %221 = load i32, i32* %30
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %218, i8** %7
	movq	%r11, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %219, i8** %8
	movq	%r8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %220, i32* %9
	movq	%rdi, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %221, i32* %10
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %222 = load i32, i32* %10
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %223 = and i32 %222, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %224 = icmp ne i32 %223, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %224, label %225, label %233
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2233
	jmp	mz_zip_reader_locate_file_v2225
	.text
mz_zip_reader_locate_file_v2225:
	# %226 = load i8*, i8** %7
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %227 = load i8*, i8** %8
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %228 = load i32, i32* %9
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %229 = zext i32 %228 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %230 = call i32 @memcmp (i8* %226, i8* %227, i64 %229)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memcmp
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %231 = icmp eq i32 0, %230
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %232 = zext i1 %231 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %232, i32* %6
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %311
	jmp	mz_zip_reader_locate_file_v2311
	.text
mz_zip_reader_locate_file_v2233:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	mz_zip_reader_locate_file_v2234
	.text
mz_zip_reader_locate_file_v2234:
	# %235 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %236 = load i32, i32* %9
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %237 = icmp ult i32 %235, %236
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %237, label %238, label %310
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2310
	jmp	mz_zip_reader_locate_file_v2238
	.text
mz_zip_reader_locate_file_v2238:
	# %239 = load i8*, i8** %7
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %240 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %241 = zext i32 %240 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %242 = getelementptr i8, i8* %239, i64 %241
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %243 = load i8, i8* %242
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %244 = sext i8 %243 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %245 = icmp sge i32 %244, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %245, label %246, label %263
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2263
	jmp	mz_zip_reader_locate_file_v2246
	.text
mz_zip_reader_locate_file_v2246:
	# %247 = load i8*, i8** %7
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %248 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %249 = zext i32 %248 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %250 = getelementptr i8, i8* %247, i64 %249
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %251 = load i8, i8* %250
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %252 = sext i8 %251 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %253 = icmp sle i32 %252, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %253, label %254, label %263
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2263
	jmp	mz_zip_reader_locate_file_v2254
	.text
mz_zip_reader_locate_file_v2254:
	# %255 = load i8*, i8** %7
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %256 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %257 = zext i32 %256 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %258 = getelementptr i8, i8* %255, i64 %257
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %259 = load i8, i8* %258
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %260 = sext i8 %259 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %261 = sub i32 %260, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %262 = add i32 %261, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, %r15
	# br label %270
	movq	%r15, %r8
	jmp	mz_zip_reader_locate_file_v2270
	.text
mz_zip_reader_locate_file_v2263:
	# %264 = load i8*, i8** %7
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %265 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %266 = zext i32 %265 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %267 = getelementptr i8, i8* %264, i64 %266
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %268 = load i8, i8* %267
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %269 = sext i8 %268 to i32
	movq	%rdx, %rax
	movq	$0, %r14
	movb	%al, %r14b
	# br label %270
	movq	%r14, %r8
	jmp	mz_zip_reader_locate_file_v2270
	.text
mz_zip_reader_locate_file_v2270:
	# %271 = phi i32 [%262, %254], [%269, %263]
	# %272 = load i8*, i8** %8
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %273 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %274 = zext i32 %273 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %275 = getelementptr i8, i8* %272, i64 %274
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %276 = load i8, i8* %275
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %277 = sext i8 %276 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %278 = icmp sge i32 %277, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %278, label %279, label %296
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2296
	jmp	mz_zip_reader_locate_file_v2279
	.text
mz_zip_reader_locate_file_v2279:
	# %280 = load i8*, i8** %8
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %281 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %282 = zext i32 %281 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %283 = getelementptr i8, i8* %280, i64 %282
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %284 = load i8, i8* %283
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %285 = sext i8 %284 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %286 = icmp sle i32 %285, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %286, label %287, label %296
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2296
	jmp	mz_zip_reader_locate_file_v2287
	.text
mz_zip_reader_locate_file_v2287:
	# %288 = load i8*, i8** %8
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %289 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %290 = zext i32 %289 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %291 = getelementptr i8, i8* %288, i64 %290
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %292 = load i8, i8* %291
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %293 = sext i8 %292 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %294 = sub i32 %293, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %295 = add i32 %294, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, %r13
	# br label %303
	movq	%r13, %rdx
	jmp	mz_zip_reader_locate_file_v2303
	.text
mz_zip_reader_locate_file_v2296:
	# %297 = load i8*, i8** %8
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %298 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %299 = zext i32 %298 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %300 = getelementptr i8, i8* %297, i64 %299
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %301 = load i8, i8* %300
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %302 = sext i8 %301 to i32
	movq	%rdx, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# br label %303
	movq	%r12, %rdx
	jmp	mz_zip_reader_locate_file_v2303
	.text
mz_zip_reader_locate_file_v2303:
	# %304 = phi i32 [%295, %287], [%302, %296]
	# %305 = icmp ne i32 %271, %304
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %305, label %306, label %307
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2307
	jmp	mz_zip_reader_locate_file_v2306
	.text
mz_zip_reader_locate_file_v2306:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %311
	jmp	mz_zip_reader_locate_file_v2311
	.text
mz_zip_reader_locate_file_v2307:
	# %308 = load i32, i32* %11
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %309 = add i32 %308, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %309, i32* %11
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %234
	jmp	mz_zip_reader_locate_file_v2234
	.text
mz_zip_reader_locate_file_v2310:
	# store i32 1, i32* %6
	movq	$1, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %311
	jmp	mz_zip_reader_locate_file_v2311
	.text
mz_zip_reader_locate_file_v2311:
	# %312 = load i32, i32* %6
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %313 = icmp ne i32 %312, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %313, label %315, label %314
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2314
	jmp	mz_zip_reader_locate_file_v2315
	.text
mz_zip_reader_locate_file_v2314:
	# br label %476
	jmp	mz_zip_reader_locate_file_v2476
	.text
mz_zip_reader_locate_file_v2315:
	# br label %316
	jmp	mz_zip_reader_locate_file_v2316
	.text
mz_zip_reader_locate_file_v2316:
	# %317 = load i32, i32* %30
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %318 = and i32 %317, 512
	movq	%rdx, %rax
	movq	$512, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %319 = icmp ne i32 %318, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %319, label %320, label %366
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2366
	jmp	mz_zip_reader_locate_file_v2320
	.text
mz_zip_reader_locate_file_v2320:
	# %321 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %322 = icmp ne i32 %321, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %322, label %323, label %366
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2366
	jmp	mz_zip_reader_locate_file_v2323
	.text
mz_zip_reader_locate_file_v2323:
	# %324 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %325 = sub i32 %324, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %325, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %326
	jmp	mz_zip_reader_locate_file_v2326
	.text
mz_zip_reader_locate_file_v2326:
	# %327 = load i8*, i8** %37
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %328 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %329 = sext i32 %328 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %330 = getelementptr i8, i8* %327, i64 %329
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %331 = load i8, i8* %330
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %332 = sext i8 %331 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %333 = icmp eq i32 %332, 47
	movq	%rdx, %rax
	movq	$47, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %333, label %350, label %334
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2334
	jmp	mz_zip_reader_locate_file_v2350
	.text
mz_zip_reader_locate_file_v2334:
	# %335 = load i8*, i8** %37
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %336 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %337 = sext i32 %336 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %338 = getelementptr i8, i8* %335, i64 %337
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %339 = load i8, i8* %338
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %340 = sext i8 %339 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %341 = icmp eq i32 %340, 92
	movq	%rdx, %rax
	movq	$92, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %341, label %350, label %342
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2342
	jmp	mz_zip_reader_locate_file_v2350
	.text
mz_zip_reader_locate_file_v2342:
	# %343 = load i8*, i8** %37
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %344 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %345 = sext i32 %344 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %346 = getelementptr i8, i8* %343, i64 %345
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %347 = load i8, i8* %346
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %348 = sext i8 %347 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %349 = icmp eq i32 %348, 58
	movq	%rdx, %rax
	movq	$58, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %349, label %350, label %351
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2351
	jmp	mz_zip_reader_locate_file_v2350
	.text
mz_zip_reader_locate_file_v2350:
	# br label %356
	jmp	mz_zip_reader_locate_file_v2356
	.text
mz_zip_reader_locate_file_v2351:
	# br label %352
	jmp	mz_zip_reader_locate_file_v2352
	.text
mz_zip_reader_locate_file_v2352:
	# %353 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %354 = add i32 %353, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %354, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# %355 = icmp sge i32 %354, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %355, label %326, label %356
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2356
	jmp	mz_zip_reader_locate_file_v2326
	.text
mz_zip_reader_locate_file_v2356:
	# %357 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %358 = add i32 %357, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %358, i32* %41
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movl	%eax, (%rcx)
	# %359 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %360 = load i8*, i8** %37
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %361 = sext i32 %359 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %362 = getelementptr i8, i8* %360, i64 %361
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %362, i8** %37
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# %363 = load i32, i32* %41
	movq	-272(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %364 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %365 = sub i32 %364, %363
	movq	%rdx, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %365, i32* %36
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %366
	jmp	mz_zip_reader_locate_file_v2366
	.text
mz_zip_reader_locate_file_v2366:
	# %367 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %368 = zext i32 %367 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %369 = load i64, i64* %33
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %370 = icmp eq i64 %368, %369
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %370, label %371, label %475
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2475
	jmp	mz_zip_reader_locate_file_v2371
	.text
mz_zip_reader_locate_file_v2371:
	# %372 = load i8*, i8** %28
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %373 = load i8*, i8** %37
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %374 = load i32, i32* %36
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %375 = load i32, i32* %30
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %372, i8** %13
	movq	%r11, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %373, i8** %14
	movq	%r8, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %374, i32* %15
	movq	%rdi, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %375, i32* %16
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %376 = load i32, i32* %16
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %377 = and i32 %376, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %378 = icmp ne i32 %377, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %378, label %379, label %387
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2387
	jmp	mz_zip_reader_locate_file_v2379
	.text
mz_zip_reader_locate_file_v2379:
	# %380 = load i8*, i8** %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %381 = load i8*, i8** %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %382 = load i32, i32* %15
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %383 = zext i32 %382 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %384 = call i32 @memcmp (i8* %380, i8* %381, i64 %383)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memcmp
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %385 = icmp eq i32 0, %384
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %386 = zext i1 %385 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %386, i32* %12
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %465
	jmp	mz_zip_reader_locate_file_v2465
	.text
mz_zip_reader_locate_file_v2387:
	# store i32 0, i32* %17
	movq	$0, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %388
	jmp	mz_zip_reader_locate_file_v2388
	.text
mz_zip_reader_locate_file_v2388:
	# %389 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %390 = load i32, i32* %15
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %391 = icmp ult i32 %389, %390
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %391, label %392, label %464
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2464
	jmp	mz_zip_reader_locate_file_v2392
	.text
mz_zip_reader_locate_file_v2392:
	# %393 = load i8*, i8** %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %394 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %395 = zext i32 %394 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %396 = getelementptr i8, i8* %393, i64 %395
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %397 = load i8, i8* %396
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %398 = sext i8 %397 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %399 = icmp sge i32 %398, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %399, label %400, label %417
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2417
	jmp	mz_zip_reader_locate_file_v2400
	.text
mz_zip_reader_locate_file_v2400:
	# %401 = load i8*, i8** %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %402 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %403 = zext i32 %402 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %404 = getelementptr i8, i8* %401, i64 %403
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %405 = load i8, i8* %404
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %406 = sext i8 %405 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %407 = icmp sle i32 %406, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %407, label %408, label %417
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2417
	jmp	mz_zip_reader_locate_file_v2408
	.text
mz_zip_reader_locate_file_v2408:
	# %409 = load i8*, i8** %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %410 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %411 = zext i32 %410 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %412 = getelementptr i8, i8* %409, i64 %411
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %413 = load i8, i8* %412
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %414 = sext i8 %413 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %415 = sub i32 %414, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %416 = add i32 %415, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, %r10
	# br label %424
	movq	%r10, %r8
	jmp	mz_zip_reader_locate_file_v2424
	.text
mz_zip_reader_locate_file_v2417:
	# %418 = load i8*, i8** %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %419 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %420 = zext i32 %419 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %421 = getelementptr i8, i8* %418, i64 %420
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %422 = load i8, i8* %421
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %423 = sext i8 %422 to i32
	movq	%rdx, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# br label %424
	movq	%r9, %r8
	jmp	mz_zip_reader_locate_file_v2424
	.text
mz_zip_reader_locate_file_v2424:
	# %425 = phi i32 [%416, %408], [%423, %417]
	# %426 = load i8*, i8** %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %427 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %428 = zext i32 %427 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %429 = getelementptr i8, i8* %426, i64 %428
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %430 = load i8, i8* %429
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %431 = sext i8 %430 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %432 = icmp sge i32 %431, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %432, label %433, label %450
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2450
	jmp	mz_zip_reader_locate_file_v2433
	.text
mz_zip_reader_locate_file_v2433:
	# %434 = load i8*, i8** %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %435 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %436 = zext i32 %435 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %437 = getelementptr i8, i8* %434, i64 %436
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %438 = load i8, i8* %437
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %439 = sext i8 %438 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %440 = icmp sle i32 %439, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %440, label %441, label %450
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2450
	jmp	mz_zip_reader_locate_file_v2441
	.text
mz_zip_reader_locate_file_v2441:
	# %442 = load i8*, i8** %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %443 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %444 = zext i32 %443 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %445 = getelementptr i8, i8* %442, i64 %444
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %446 = load i8, i8* %445
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %447 = sext i8 %446 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %448 = sub i32 %447, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %449 = add i32 %448, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# br label %457
	movq	%rsi, %rdx
	jmp	mz_zip_reader_locate_file_v2457
	.text
mz_zip_reader_locate_file_v2450:
	# %451 = load i8*, i8** %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %452 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %453 = zext i32 %452 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %454 = getelementptr i8, i8* %451, i64 %453
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %455 = load i8, i8* %454
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %456 = sext i8 %455 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# br label %457
	movq	%rbx, %rdx
	jmp	mz_zip_reader_locate_file_v2457
	.text
mz_zip_reader_locate_file_v2457:
	# %458 = phi i32 [%449, %441], [%456, %450]
	# %459 = icmp ne i32 %425, %458
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %459, label %460, label %461
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2461
	jmp	mz_zip_reader_locate_file_v2460
	.text
mz_zip_reader_locate_file_v2460:
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %465
	jmp	mz_zip_reader_locate_file_v2465
	.text
mz_zip_reader_locate_file_v2461:
	# %462 = load i32, i32* %17
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %463 = add i32 %462, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %463, i32* %17
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %388
	jmp	mz_zip_reader_locate_file_v2388
	.text
mz_zip_reader_locate_file_v2464:
	# store i32 1, i32* %12
	movq	$1, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %465
	jmp	mz_zip_reader_locate_file_v2465
	.text
mz_zip_reader_locate_file_v2465:
	# %466 = load i32, i32* %12
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %467 = icmp ne i32 %466, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %467, label %468, label %475
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2475
	jmp	mz_zip_reader_locate_file_v2468
	.text
mz_zip_reader_locate_file_v2468:
	# %469 = load i8*, i8** %31
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %470 = icmp ne i8* %469, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %470, label %471, label %474
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2474
	jmp	mz_zip_reader_locate_file_v2471
	.text
mz_zip_reader_locate_file_v2471:
	# %472 = load i32, i32* %32
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %473 = load i8*, i8** %31
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %472, i32* %473
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %474
	jmp	mz_zip_reader_locate_file_v2474
	.text
mz_zip_reader_locate_file_v2474:
	# store i32 1, i32* %26
	movq	$1, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %488
	jmp	mz_zip_reader_locate_file_v2488
	.text
mz_zip_reader_locate_file_v2475:
	# br label %476
	jmp	mz_zip_reader_locate_file_v2476
	.text
mz_zip_reader_locate_file_v2476:
	# %477 = load i32, i32* %32
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %478 = add i32 %477, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %478, i32* %32
	movq	%rdx, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %134
	jmp	mz_zip_reader_locate_file_v2134
	.text
mz_zip_reader_locate_file_v2479:
	# %480 = load i8*, i8** %27
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %480, i8** %24
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 28, i32* %25
	movq	$28, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# %481 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %482 = icmp ne i8* %481, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %482, label %483, label %487
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_file_v2487
	jmp	mz_zip_reader_locate_file_v2483
	.text
mz_zip_reader_locate_file_v2483:
	# %484 = load i32, i32* %25
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %485 = load i8*, i8** %24
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %486 = getelementptr %struct.mz_zip_archive, i8* %485, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %484, i32* %486
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %487
	jmp	mz_zip_reader_locate_file_v2487
	.text
mz_zip_reader_locate_file_v2487:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %488
	jmp	mz_zip_reader_locate_file_v2488
	.text
mz_zip_reader_locate_file_v2488:
	# %489 = load i32, i32* %26
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %489
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_locate_file_binary_search
_mz_zip_locate_file_binary_search:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$208, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%rbx
	popq	%rsi
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %12 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -72(%rbp)
	# %13 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -80(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %19 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -128(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %23 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -144(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -160(%rbp)
	# %26 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %27 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %28 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -184(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -192(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# store i8* %0, i8** %17
	movq	%rsi, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %18
	movq	%rbx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %19
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movq	%rax, (%rcx)
	# %31 = load i8*, i8** %17
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = getelementptr %struct.mz_zip_archive, i8* %31, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %33 = load i8*, i8** %32
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %33, i8** %20
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %34 = load i8*, i8** %20
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %35 = getelementptr %struct.mz_zip_internal_state_tag, i8* %34, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %35, i8** %21
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %36 = load i8*, i8** %20
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %37 = getelementptr %struct.mz_zip_internal_state_tag, i8* %36, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %37, i8** %22
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %38 = load i8*, i8** %20
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %39 = getelementptr %struct.mz_zip_internal_state_tag, i8* %38, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %40 = getelementptr %struct.mz_zip_array, i8* %39, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %41 = load i8*, i8** %40
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %42 = getelementptr i32, i8* %41, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %42, i8** %23
	movq	%rdx, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# %43 = load i8*, i8** %17
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %44 = getelementptr %struct.mz_zip_archive, i8* %43, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %45 = load i32, i32* %44
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %45, i32* %24
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %46 = load i8*, i8** %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = call i64 @strlen (i8* %46)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_strlen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %48 = trunc i64 %47 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %48, i32* %25
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	# %49 = load i8*, i8** %19
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = icmp ne i8* %49, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %50, label %51, label %53
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search53
	jmp	mz_zip_locate_file_binary_search51
	.text
mz_zip_locate_file_binary_search51:
	# %52 = load i8*, i8** %19
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 0, i32* %52
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %53
	jmp	mz_zip_locate_file_binary_search53
	.text
mz_zip_locate_file_binary_search53:
	# %54 = load i32, i32* %24
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %55 = icmp ne i32 %54, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %55, label %56, label %212
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search212
	jmp	mz_zip_locate_file_binary_search56
	.text
mz_zip_locate_file_binary_search56:
	# store i64 0, i64* %26
	movq	$0, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# %57 = load i32, i32* %24
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %58 = zext i32 %57 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %59 = sub i64 %58, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %59, i64* %27
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %60
	jmp	mz_zip_locate_file_binary_search60
	.text
mz_zip_locate_file_binary_search60:
	# %61 = load i64, i64* %26
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %62 = load i64, i64* %27
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = icmp sle i64 %61, %62
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setle	%dl
	# br i1 %63, label %64, label %211
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search211
	jmp	mz_zip_locate_file_binary_search64
	.text
mz_zip_locate_file_binary_search64:
	# %65 = load i64, i64* %26
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %66 = load i64, i64* %27
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %67 = load i64, i64* %26
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = sub i64 %66, %67
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %69 = ashr i64 %68, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %70 = add i64 %65, %69
	movq	%r13, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %70, i64* %28
	movq	%rdx, %rax
	movq	-184(%rbp), %rcx
	movq	%rax, (%rcx)
	# %71 = load i8*, i8** %23
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %72 = load i64, i64* %28
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %73 = trunc i64 %72 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %74 = zext i32 %73 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %75 = getelementptr i32, i8* %71, i64 %74
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %76 = load i32, i32* %75
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %76, i32* %29
	movq	%rdx, %rax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	# %77 = load i8*, i8** %22
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r15
	# %78 = load i8*, i8** %21
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %79 = load i32, i32* %29
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r13
	movl	%eax, %r13d
	# %80 = load i8*, i8** %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %81 = load i32, i32* %25
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %77, i8** %4
	movq	%r15, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %78, i8** %5
	movq	%r14, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %79, i32* %6
	movq	%r13, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %80, i8** %7
	movq	%rdi, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %81, i32* %8
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %82 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %83 = load i8*, i8** %82
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %84 = load i8*, i8** %5
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %85 = load i8*, i8** %84
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %86 = load i32, i32* %6
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %87 = zext i32 %86 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %88 = getelementptr i32, i8* %85, i64 %87
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %89 = load i32, i32* %88
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %90 = zext i32 %89 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %91 = getelementptr i8, i8* %83, i64 %90
	movq	%r13, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %91, i8** %9
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# %92 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %93 = getelementptr i8, i8* %92, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %94 = load i8, i8* %93
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %95 = zext i8 %94 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %96 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %97 = getelementptr i8, i8* %96, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %98 = getelementptr i8, i8* %97, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %99 = load i8, i8* %98
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %100 = zext i8 %99 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %101 = shl i32 %100, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %102 = or i32 %95, %101
	movq	%rdi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %102, i32* %11
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8 0, i8* %12
	movq	$0, %rax
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	# store i8 0, i8* %13
	movq	$0, %rax
	movq	-80(%rbp), %rcx
	movb	%al, (%rcx)
	# %103 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %104 = getelementptr i8, i8* %103, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %104, i8** %9
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# %105 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %106 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %107 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %108 = icmp ult i32 %106, %107
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %108, label %109, label %111
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search111
	jmp	mz_zip_locate_file_binary_search109
	.text
mz_zip_locate_file_binary_search109:
	# %110 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r12
	movl	%eax, %r12d
	# br label %113
	movq	%r12, %rdx
	jmp	mz_zip_locate_file_binary_search113
	.text
mz_zip_locate_file_binary_search111:
	# %112 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -208(%rbp)
	movl	%eax, -208(%rbp)
	# br label %113
	movq	-208(%rbp), %rdx
	jmp	mz_zip_locate_file_binary_search113
	.text
mz_zip_locate_file_binary_search113:
	# %114 = phi i32 [%110, %109], [%112, %111]
	# %115 = zext i32 %114 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %116 = getelementptr i8, i8* %105, i64 %115
	movq	%r13, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %116, i8** %10
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %117
	jmp	mz_zip_locate_file_binary_search117
	.text
mz_zip_locate_file_binary_search117:
	# %118 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %119 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %120 = icmp ult i8* %118, %119
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %120, label %121, label %175
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search175
	jmp	mz_zip_locate_file_binary_search121
	.text
mz_zip_locate_file_binary_search121:
	# %122 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = load i8, i8* %122
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %124 = zext i8 %123 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %125 = icmp sge i32 %124, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %125, label %126, label %137
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search137
	jmp	mz_zip_locate_file_binary_search126
	.text
mz_zip_locate_file_binary_search126:
	# %127 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = load i8, i8* %127
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %129 = zext i8 %128 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %130 = icmp sle i32 %129, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %130, label %131, label %137
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search137
	jmp	mz_zip_locate_file_binary_search131
	.text
mz_zip_locate_file_binary_search131:
	# %132 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %133 = load i8, i8* %132
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %134 = zext i8 %133 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %135 = sub i32 %134, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %136 = add i32 %135, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, %r11
	# br label %141
	movq	%r11, %rdx
	jmp	mz_zip_locate_file_binary_search141
	.text
mz_zip_locate_file_binary_search137:
	# %138 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %139 = load i8, i8* %138
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %140 = zext i8 %139 to i32
	movq	%rdx, %rax
	movq	$0, %r10
	movb	%al, %r10b
	# br label %141
	movq	%r10, %rdx
	jmp	mz_zip_locate_file_binary_search141
	.text
mz_zip_locate_file_binary_search141:
	# %142 = phi i32 [%136, %131], [%140, %137]
	# %143 = trunc i32 %142 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %143, i8* %12
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	# %144 = zext i8 %143 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %145 = load i8*, i8** %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %146 = load i8, i8* %145
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %147 = sext i8 %146 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %148 = icmp sge i32 %147, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %148, label %149, label %160
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search160
	jmp	mz_zip_locate_file_binary_search149
	.text
mz_zip_locate_file_binary_search149:
	# %150 = load i8*, i8** %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %151 = load i8, i8* %150
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %152 = sext i8 %151 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %153 = icmp sle i32 %152, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %153, label %154, label %160
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search160
	jmp	mz_zip_locate_file_binary_search154
	.text
mz_zip_locate_file_binary_search154:
	# %155 = load i8*, i8** %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %156 = load i8, i8* %155
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %157 = sext i8 %156 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %158 = sub i32 %157, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %159 = add i32 %158, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# br label %164
	movq	%r9, %rdx
	jmp	mz_zip_locate_file_binary_search164
	.text
mz_zip_locate_file_binary_search160:
	# %161 = load i8*, i8** %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %162 = load i8, i8* %161
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %163 = sext i8 %162 to i32
	movq	%rdx, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# br label %164
	movq	%r8, %rdx
	jmp	mz_zip_locate_file_binary_search164
	.text
mz_zip_locate_file_binary_search164:
	# %165 = phi i32 [%159, %154], [%163, %160]
	# %166 = trunc i32 %165 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %166, i8* %13
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movb	%al, (%rcx)
	# %167 = zext i8 %166 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %168 = icmp ne i32 %144, %167
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %168, label %169, label %170
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search170
	jmp	mz_zip_locate_file_binary_search169
	.text
mz_zip_locate_file_binary_search169:
	# br label %175
	jmp	mz_zip_locate_file_binary_search175
	.text
mz_zip_locate_file_binary_search170:
	# %171 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %172 = getelementptr i8, i8* %171, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %172, i8** %9
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# %173 = load i8*, i8** %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %174 = getelementptr i8, i8* %173, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %174, i8** %7
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %117
	jmp	mz_zip_locate_file_binary_search117
	.text
mz_zip_locate_file_binary_search175:
	# %176 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %177 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %178 = icmp eq i8* %176, %177
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %178, label %179, label %183
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search183
	jmp	mz_zip_locate_file_binary_search179
	.text
mz_zip_locate_file_binary_search179:
	# %180 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %181 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %182 = sub i32 %180, %181
	movq	%rsi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# br label %189
	movq	%rsi, %rdx
	jmp	mz_zip_locate_file_binary_search189
	.text
mz_zip_locate_file_binary_search183:
	# %184 = load i8, i8* %12
	movq	-72(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %185 = zext i8 %184 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %186 = load i8, i8* %13
	movq	-80(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %187 = zext i8 %186 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %188 = sub i32 %185, %187
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# br label %189
	movq	%rbx, %rdx
	jmp	mz_zip_locate_file_binary_search189
	.text
mz_zip_locate_file_binary_search189:
	# %190 = phi i32 [%182, %179], [%188, %183]
	# store i32 %190, i32* %30
	movq	%rdx, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %191 = load i32, i32* %30
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %192 = icmp ne i32 %191, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %192, label %200, label %193
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search193
	jmp	mz_zip_locate_file_binary_search200
	.text
mz_zip_locate_file_binary_search193:
	# %194 = load i8*, i8** %19
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %195 = icmp ne i8* %194, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %195, label %196, label %199
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search199
	jmp	mz_zip_locate_file_binary_search196
	.text
mz_zip_locate_file_binary_search196:
	# %197 = load i32, i32* %29
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %198 = load i8*, i8** %19
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %197, i32* %198
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %199
	jmp	mz_zip_locate_file_binary_search199
	.text
mz_zip_locate_file_binary_search199:
	# store i32 1, i32* %16
	movq	$1, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %221
	jmp	mz_zip_locate_file_binary_search221
	.text
mz_zip_locate_file_binary_search200:
	# %201 = load i32, i32* %30
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %202 = icmp slt i32 %201, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %202, label %203, label %206
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search206
	jmp	mz_zip_locate_file_binary_search203
	.text
mz_zip_locate_file_binary_search203:
	# %204 = load i64, i64* %28
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %205 = add i64 %204, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %205, i64* %26
	movq	%rdx, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %209
	jmp	mz_zip_locate_file_binary_search209
	.text
mz_zip_locate_file_binary_search206:
	# %207 = load i64, i64* %28
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %208 = sub i64 %207, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %208, i64* %27
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %209
	jmp	mz_zip_locate_file_binary_search209
	.text
mz_zip_locate_file_binary_search209:
	# br label %210
	jmp	mz_zip_locate_file_binary_search210
	.text
mz_zip_locate_file_binary_search210:
	# br label %60
	jmp	mz_zip_locate_file_binary_search60
	.text
mz_zip_locate_file_binary_search211:
	# br label %212
	jmp	mz_zip_locate_file_binary_search212
	.text
mz_zip_locate_file_binary_search212:
	# %213 = load i8*, i8** %17
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %213, i8** %14
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 28, i32* %15
	movq	$28, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %214 = load i8*, i8** %14
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %215 = icmp ne i8* %214, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %215, label %216, label %220
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_locate_file_binary_search220
	jmp	mz_zip_locate_file_binary_search216
	.text
mz_zip_locate_file_binary_search216:
	# %217 = load i32, i32* %15
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %218 = load i8*, i8** %14
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %219 = getelementptr %struct.mz_zip_archive, i8* %218, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %217, i32* %219
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %220
	jmp	mz_zip_locate_file_binary_search220
	.text
mz_zip_locate_file_binary_search220:
	# store i32 0, i32* %16
	movq	$0, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %221
	jmp	mz_zip_locate_file_binary_search221
	.text
mz_zip_locate_file_binary_search221:
	# %222 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %222
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_to_mem_no_alloc
_mz_zip_reader_extract_to_mem_no_alloc:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$16, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rdx
	popq	%r15
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %14 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %8
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %9
	movq	-16(%rbp), %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %10
	movq	%r15, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %11
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %12
	movq	%r14, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# store i8* %5, i8** %13
	movq	%r13, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %6, i64* %14
	movq	%r12, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %15 = load i8*, i8** %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %16 = load i32, i32* %9
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %17 = load i8*, i8** %10
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %18 = load i64, i64* %11
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %19 = load i32, i32* %12
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %20 = load i8*, i8** %13
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %21 = load i64, i64* %14
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %22 = call i32 @mz_zip_reader_extract_to_mem_no_alloc1 (i8* %15, i32 %16, i8* %17, i64 %18, i32 %19, i8* %20, i64 %21, i8* null)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_mem_no_alloc1
	addq	$16, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %22
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_to_mem_no_alloc1
_mz_zip_reader_extract_to_mem_no_alloc1:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$368, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	popq	%rbx
	popq	%rsi
	popq	%r9
	popq	%r10
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %19 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -120(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -128(%rbp)
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %23 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -152(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %28 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %29 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %31 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %32 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %33 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %34 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %35 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -240(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -248(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -256(%rbp)
	# %38 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -264(%rbp)
	# %39 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %40 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -280(%rbp)
	# %41 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %42 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -296(%rbp)
	# %43 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %44 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -304(%rbp)
	# %45 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -312(%rbp)
	# %46 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %47 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -328(%rbp)
	# %48 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -336(%rbp)
	# %49 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -344(%rbp)
	# %50 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %51 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -360(%rbp)
	# %52 = alloca %struct.mz_zip_archive_file_stat
	subq	$1102, %rsp
	movq	%rsp, -368(%rbp)
	# %53 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %54 = alloca [8 x i32]
	subq	$32, %rsp
	movq	%rsp, %rdi
	# %55 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %56 = alloca %struct.tinfl_decompressor_tag
	subq	$8372, %rsp
	movq	%rsp, %r13
	# %57 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r12
	# %58 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# store i8* %0, i8** %36
	movq	-8(%rbp), %rax
	movq	-248(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %37
	movq	-16(%rbp), %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %38
	movq	-24(%rbp), %rax
	movq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %39
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %40
	movq	%r10, %rax
	movq	-280(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %5, i8** %41
	movq	%r9, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %6, i64* %42
	movq	%rsi, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %7, i8** %43
	movq	%rbx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %44
	movq	$0, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i64 0, i64* %48
	movq	$0, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %50
	movq	$0, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# %59 = getelementptr [8 x i32], i8* %54, i64 0, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %59, i8** %55
	movq	%rdi, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %60 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %61 = icmp ne i8* %60, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %61, label %62, label %84
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc184
	jmp	mz_zip_reader_extract_to_mem_no_alloc162
	.text
mz_zip_reader_extract_to_mem_no_alloc162:
	# %63 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %64 = getelementptr %struct.mz_zip_archive, i8* %63, i32 0, i32 15
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %65 = load i8*, i8** %64
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %66 = icmp ne i8* %65, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %66, label %67, label %84
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc184
	jmp	mz_zip_reader_extract_to_mem_no_alloc167
	.text
mz_zip_reader_extract_to_mem_no_alloc167:
	# %68 = load i64, i64* %39
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %69 = icmp ne i64 %68, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %69, label %70, label %73
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc173
	jmp	mz_zip_reader_extract_to_mem_no_alloc170
	.text
mz_zip_reader_extract_to_mem_no_alloc170:
	# %71 = load i8*, i8** %38
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %72 = icmp ne i8* %71, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %72, label %73, label %84
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc184
	jmp	mz_zip_reader_extract_to_mem_no_alloc173
	.text
mz_zip_reader_extract_to_mem_no_alloc173:
	# %74 = load i64, i64* %42
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %75 = icmp ne i64 %74, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %75, label %76, label %79
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc179
	jmp	mz_zip_reader_extract_to_mem_no_alloc176
	.text
mz_zip_reader_extract_to_mem_no_alloc176:
	# %77 = load i8*, i8** %41
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %78 = icmp ne i8* %77, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %78, label %79, label %84
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc184
	jmp	mz_zip_reader_extract_to_mem_no_alloc179
	.text
mz_zip_reader_extract_to_mem_no_alloc179:
	# %80 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %81 = getelementptr %struct.mz_zip_archive, i8* %80, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %82 = load i8*, i8** %81
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %83 = icmp ne i8* %82, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %83, label %93, label %84
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc184
	jmp	mz_zip_reader_extract_to_mem_no_alloc193
	.text
mz_zip_reader_extract_to_mem_no_alloc184:
	# %85 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %85, i8** %9
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %10
	movq	$24, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %86 = load i8*, i8** %9
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %87 = icmp ne i8* %86, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %87, label %88, label %92
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc192
	jmp	mz_zip_reader_extract_to_mem_no_alloc188
	.text
mz_zip_reader_extract_to_mem_no_alloc188:
	# %89 = load i32, i32* %10
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %90 = load i8*, i8** %9
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %91 = getelementptr %struct.mz_zip_archive, i8* %90, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %89, i32* %91
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %92
	jmp	mz_zip_reader_extract_to_mem_no_alloc192
	.text
mz_zip_reader_extract_to_mem_no_alloc192:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc193:
	# %94 = load i8*, i8** %43
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %95 = icmp ne i8* %94, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %95, label %96, label %98
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc198
	jmp	mz_zip_reader_extract_to_mem_no_alloc196
	.text
mz_zip_reader_extract_to_mem_no_alloc196:
	# %97 = load i8*, i8** %43
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# call void @memcpy (i8* %52, i8* %97, i64 1112, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	-368(%rbp), %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	$1112, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memcpy
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %105
	jmp	mz_zip_reader_extract_to_mem_no_alloc1105
	.text
mz_zip_reader_extract_to_mem_no_alloc198:
	# %99 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %100 = load i32, i32* %37
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %101 = call i32 @mz_zip_reader_file_stat (i8* %99, i32 %100, i8* %52)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	-368(%rbp), %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_file_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %102 = icmp ne i32 %101, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %102, label %104, label %103
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1103
	jmp	mz_zip_reader_extract_to_mem_no_alloc1104
	.text
mz_zip_reader_extract_to_mem_no_alloc1103:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1104:
	# br label %105
	jmp	mz_zip_reader_extract_to_mem_no_alloc1105
	.text
mz_zip_reader_extract_to_mem_no_alloc1105:
	# %106 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 13
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %107 = load i32, i32* %106
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %108 = icmp ne i32 %107, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %108, label %113, label %109
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1109
	jmp	mz_zip_reader_extract_to_mem_no_alloc1113
	.text
mz_zip_reader_extract_to_mem_no_alloc1109:
	# %110 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %111 = load i64, i64* %110
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %112 = icmp ne i64 %111, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %112, label %114, label %113
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1113
	jmp	mz_zip_reader_extract_to_mem_no_alloc1114
	.text
mz_zip_reader_extract_to_mem_no_alloc1113:
	# store i32 1, i32* %35
	movq	$1, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1114:
	# %115 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 4
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %116 = load i16, i16* %115
	movq	%rdi, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %117 = zext i16 %116 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %118 = and i32 %117, 97
	movq	%rdi, %rax
	movq	$97, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %119 = icmp ne i32 %118, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %119, label %120, label %129
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1129
	jmp	mz_zip_reader_extract_to_mem_no_alloc1120
	.text
mz_zip_reader_extract_to_mem_no_alloc1120:
	# %121 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %121, i8** %11
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 5, i32* %12
	movq	$5, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %122 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = icmp ne i8* %122, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %123, label %124, label %128
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1128
	jmp	mz_zip_reader_extract_to_mem_no_alloc1124
	.text
mz_zip_reader_extract_to_mem_no_alloc1124:
	# %125 = load i32, i32* %12
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %126 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %127 = getelementptr %struct.mz_zip_archive, i8* %126, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %125, i32* %127
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %128
	jmp	mz_zip_reader_extract_to_mem_no_alloc1128
	.text
mz_zip_reader_extract_to_mem_no_alloc1128:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1129:
	# %130 = load i32, i32* %40
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %131 = and i32 %130, 1024
	movq	%rdi, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %132 = icmp ne i32 %131, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %132, label %152, label %133
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1133
	jmp	mz_zip_reader_extract_to_mem_no_alloc1152
	.text
mz_zip_reader_extract_to_mem_no_alloc1133:
	# %134 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 5
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %135 = load i16, i16* %134
	movq	%rdi, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %136 = zext i16 %135 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %137 = icmp ne i32 %136, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %137, label %138, label %152
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1152
	jmp	mz_zip_reader_extract_to_mem_no_alloc1138
	.text
mz_zip_reader_extract_to_mem_no_alloc1138:
	# %139 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 5
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %140 = load i16, i16* %139
	movq	%rdi, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %141 = zext i16 %140 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %142 = icmp ne i32 %141, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %142, label %143, label %152
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1152
	jmp	mz_zip_reader_extract_to_mem_no_alloc1143
	.text
mz_zip_reader_extract_to_mem_no_alloc1143:
	# %144 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %144, i8** %13
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 4, i32* %14
	movq	$4, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %145 = load i8*, i8** %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %146 = icmp ne i8* %145, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %146, label %147, label %151
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1151
	jmp	mz_zip_reader_extract_to_mem_no_alloc1147
	.text
mz_zip_reader_extract_to_mem_no_alloc1147:
	# %148 = load i32, i32* %14
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %149 = load i8*, i8** %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %150 = getelementptr %struct.mz_zip_archive, i8* %149, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %148, i32* %150
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %151
	jmp	mz_zip_reader_extract_to_mem_no_alloc1151
	.text
mz_zip_reader_extract_to_mem_no_alloc1151:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1152:
	# %153 = load i32, i32* %40
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %154 = and i32 %153, 1024
	movq	%rdi, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %155 = icmp ne i32 %154, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %155, label %156, label %159
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1159
	jmp	mz_zip_reader_extract_to_mem_no_alloc1156
	.text
mz_zip_reader_extract_to_mem_no_alloc1156:
	# %157 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %158 = load i64, i64* %157
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# br label %162
	movq	%rsi, %rbx
	jmp	mz_zip_reader_extract_to_mem_no_alloc1162
	.text
mz_zip_reader_extract_to_mem_no_alloc1159:
	# %160 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 8
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %161 = load i64, i64* %160
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %162
	jmp	mz_zip_reader_extract_to_mem_no_alloc1162
	.text
mz_zip_reader_extract_to_mem_no_alloc1162:
	# %163 = phi i64 [%158, %156], [%161, %159]
	# store i64 %163, i64* %45
	movq	%rbx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %164 = load i64, i64* %39
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %165 = load i64, i64* %45
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %166 = icmp ult i64 %164, %165
	movq	%rbx, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %166, label %167, label %176
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1176
	jmp	mz_zip_reader_extract_to_mem_no_alloc1167
	.text
mz_zip_reader_extract_to_mem_no_alloc1167:
	# %168 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %168, i8** %15
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 26, i32* %16
	movq	$26, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %169 = load i8*, i8** %15
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %170 = icmp ne i8* %169, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %170, label %171, label %175
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1175
	jmp	mz_zip_reader_extract_to_mem_no_alloc1171
	.text
mz_zip_reader_extract_to_mem_no_alloc1171:
	# %172 = load i32, i32* %16
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %173 = load i8*, i8** %15
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %174 = getelementptr %struct.mz_zip_archive, i8* %173, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %172, i32* %174
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %175
	jmp	mz_zip_reader_extract_to_mem_no_alloc1175
	.text
mz_zip_reader_extract_to_mem_no_alloc1175:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1176:
	# %177 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 11
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %178 = load i64, i64* %177
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i64 %178, i64* %46
	movq	%rbx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# %179 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %180 = getelementptr %struct.mz_zip_archive, i8* %179, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %181 = load i8*, i8** %180
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %182 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %183 = getelementptr %struct.mz_zip_archive, i8* %182, i32 0, i32 14
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %184 = load i8*, i8** %183
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %185 = load i64, i64* %46
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %186 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %187 = call i64 %181 (i8* %184, i64 %185, i8* %186, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %188 = icmp ne i64 %187, 30
	movq	%rbx, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %188, label %189, label %198
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1198
	jmp	mz_zip_reader_extract_to_mem_no_alloc1189
	.text
mz_zip_reader_extract_to_mem_no_alloc1189:
	# %190 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %190, i8** %17
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %18
	movq	$20, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %191 = load i8*, i8** %17
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %192 = icmp ne i8* %191, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %192, label %193, label %197
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1197
	jmp	mz_zip_reader_extract_to_mem_no_alloc1193
	.text
mz_zip_reader_extract_to_mem_no_alloc1193:
	# %194 = load i32, i32* %18
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %195 = load i8*, i8** %17
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %196 = getelementptr %struct.mz_zip_archive, i8* %195, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %194, i32* %196
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %197
	jmp	mz_zip_reader_extract_to_mem_no_alloc1197
	.text
mz_zip_reader_extract_to_mem_no_alloc1197:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1198:
	# %199 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %200 = getelementptr i8, i8* %199, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %201 = load i8, i8* %200
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %202 = zext i8 %201 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %203 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %204 = getelementptr i8, i8* %203, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %205 = load i8, i8* %204
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %206 = zext i8 %205 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %207 = shl i32 %206, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %208 = or i32 %202, %207
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %209 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %210 = getelementptr i8, i8* %209, i64 2
	movq	%rbx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %211 = load i8, i8* %210
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %212 = zext i8 %211 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %213 = shl i32 %212, 16
	movq	%rbx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %214 = or i32 %208, %213
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %215 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %216 = getelementptr i8, i8* %215, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %217 = load i8, i8* %216
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %218 = zext i8 %217 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %219 = shl i32 %218, 24
	movq	%rbx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %220 = or i32 %214, %219
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %221 = icmp ne i32 %220, 67324752
	movq	%rbx, %rax
	movq	$67324752, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %221, label %222, label %231
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1231
	jmp	mz_zip_reader_extract_to_mem_no_alloc1222
	.text
mz_zip_reader_extract_to_mem_no_alloc1222:
	# %223 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %223, i8** %19
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %20
	movq	$9, %rax
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	# %224 = load i8*, i8** %19
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = icmp ne i8* %224, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %225, label %226, label %230
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1230
	jmp	mz_zip_reader_extract_to_mem_no_alloc1226
	.text
mz_zip_reader_extract_to_mem_no_alloc1226:
	# %227 = load i32, i32* %20
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %228 = load i8*, i8** %19
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %229 = getelementptr %struct.mz_zip_archive, i8* %228, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %227, i32* %229
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %230
	jmp	mz_zip_reader_extract_to_mem_no_alloc1230
	.text
mz_zip_reader_extract_to_mem_no_alloc1230:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1231:
	# %232 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %233 = getelementptr i8, i8* %232, i64 26
	movq	%rbx, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %234 = getelementptr i8, i8* %233, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %235 = load i8, i8* %234
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %236 = zext i8 %235 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %237 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %238 = getelementptr i8, i8* %237, i64 26
	movq	%rbx, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %239 = getelementptr i8, i8* %238, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %240 = load i8, i8* %239
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %241 = zext i8 %240 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %242 = shl i32 %241, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %243 = or i32 %236, %242
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %244 = add i32 30, %243
	movq	$30, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %245 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %246 = getelementptr i8, i8* %245, i64 28
	movq	%rbx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %247 = getelementptr i8, i8* %246, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %248 = load i8, i8* %247
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %249 = zext i8 %248 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %250 = load i8*, i8** %55
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %251 = getelementptr i8, i8* %250, i64 28
	movq	%rbx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %252 = getelementptr i8, i8* %251, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %253 = load i8, i8* %252
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %254 = zext i8 %253 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %255 = shl i32 %254, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %256 = or i32 %249, %255
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %257 = add i32 %244, %256
	movq	%rdi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %258 = zext i32 %257 to i64
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %259 = load i64, i64* %46
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %260 = add i64 %259, %258
	movq	%rbx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %260, i64* %46
	movq	%rbx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# %261 = load i64, i64* %46
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %262 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %263 = load i64, i64* %262
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %264 = add i64 %261, %263
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %265 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %266 = getelementptr %struct.mz_zip_archive, i8* %265, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %267 = load i64, i64* %266
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %268 = icmp ugt i64 %264, %267
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	seta	%bl
	# br i1 %268, label %269, label %278
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1278
	jmp	mz_zip_reader_extract_to_mem_no_alloc1269
	.text
mz_zip_reader_extract_to_mem_no_alloc1269:
	# %270 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %270, i8** %21
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %22
	movq	$9, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# %271 = load i8*, i8** %21
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %272 = icmp ne i8* %271, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %272, label %273, label %277
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1277
	jmp	mz_zip_reader_extract_to_mem_no_alloc1273
	.text
mz_zip_reader_extract_to_mem_no_alloc1273:
	# %274 = load i32, i32* %22
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %275 = load i8*, i8** %21
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %276 = getelementptr %struct.mz_zip_archive, i8* %275, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %274, i32* %276
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %277
	jmp	mz_zip_reader_extract_to_mem_no_alloc1277
	.text
mz_zip_reader_extract_to_mem_no_alloc1277:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1278:
	# %279 = load i32, i32* %40
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %280 = and i32 %279, 1024
	movq	%rbx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %281 = icmp ne i32 %280, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %281, label %286, label %282
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1282
	jmp	mz_zip_reader_extract_to_mem_no_alloc1286
	.text
mz_zip_reader_extract_to_mem_no_alloc1282:
	# %283 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 5
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %284 = load i16, i16* %283
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %285 = icmp ne i16 %284, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %285, label %332, label %286
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1286
	jmp	mz_zip_reader_extract_to_mem_no_alloc1332
	.text
mz_zip_reader_extract_to_mem_no_alloc1286:
	# %287 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %288 = getelementptr %struct.mz_zip_archive, i8* %287, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %289 = load i8*, i8** %288
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %290 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %291 = getelementptr %struct.mz_zip_archive, i8* %290, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %292 = load i8*, i8** %291
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %293 = load i64, i64* %46
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %294 = load i8*, i8** %38
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %295 = load i64, i64* %45
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %296 = call i64 %289 (i8* %292, i64 %293, i8* %294, i64 %295)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %297 = load i64, i64* %45
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %298 = icmp ne i64 %296, %297
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %298, label %299, label %308
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1308
	jmp	mz_zip_reader_extract_to_mem_no_alloc1299
	.text
mz_zip_reader_extract_to_mem_no_alloc1299:
	# %300 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %300, i8** %23
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %24
	movq	$20, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# %301 = load i8*, i8** %23
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %302 = icmp ne i8* %301, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %302, label %303, label %307
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1307
	jmp	mz_zip_reader_extract_to_mem_no_alloc1303
	.text
mz_zip_reader_extract_to_mem_no_alloc1303:
	# %304 = load i32, i32* %24
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %305 = load i8*, i8** %23
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %306 = getelementptr %struct.mz_zip_archive, i8* %305, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %304, i32* %306
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %307
	jmp	mz_zip_reader_extract_to_mem_no_alloc1307
	.text
mz_zip_reader_extract_to_mem_no_alloc1307:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1308:
	# %309 = load i32, i32* %40
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %310 = and i32 %309, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %311 = icmp eq i32 %310, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %311, label %312, label %331
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1331
	jmp	mz_zip_reader_extract_to_mem_no_alloc1312
	.text
mz_zip_reader_extract_to_mem_no_alloc1312:
	# %313 = load i8*, i8** %38
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %314 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 8
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %315 = load i64, i64* %314
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %316 = call i64 @mz_crc32 (i64 0, i8* %313, i64 %315)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$0, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %317 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 6
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %318 = load i32, i32* %317
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %319 = zext i32 %318 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %320 = icmp ne i64 %316, %319
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %320, label %321, label %330
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1330
	jmp	mz_zip_reader_extract_to_mem_no_alloc1321
	.text
mz_zip_reader_extract_to_mem_no_alloc1321:
	# %322 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %322, i8** %25
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 14, i32* %26
	movq	$14, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# %323 = load i8*, i8** %25
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %324 = icmp ne i8* %323, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %324, label %325, label %329
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1329
	jmp	mz_zip_reader_extract_to_mem_no_alloc1325
	.text
mz_zip_reader_extract_to_mem_no_alloc1325:
	# %326 = load i32, i32* %26
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %327 = load i8*, i8** %25
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %328 = getelementptr %struct.mz_zip_archive, i8* %327, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %326, i32* %328
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %329
	jmp	mz_zip_reader_extract_to_mem_no_alloc1329
	.text
mz_zip_reader_extract_to_mem_no_alloc1329:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1330:
	# br label %331
	jmp	mz_zip_reader_extract_to_mem_no_alloc1331
	.text
mz_zip_reader_extract_to_mem_no_alloc1331:
	# store i32 1, i32* %35
	movq	$1, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1332:
	# br label %333
	jmp	mz_zip_reader_extract_to_mem_no_alloc1333
	.text
mz_zip_reader_extract_to_mem_no_alloc1333:
	# %334 = getelementptr %struct.tinfl_decompressor_tag, i8* %56, i32 0, i32 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %334
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %335
	jmp	mz_zip_reader_extract_to_mem_no_alloc1335
	.text
mz_zip_reader_extract_to_mem_no_alloc1335:
	# %336 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %337 = getelementptr %struct.mz_zip_archive, i8* %336, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %338 = load i8*, i8** %337
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %339 = getelementptr %struct.mz_zip_internal_state_tag, i8* %338, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %340 = load i8*, i8** %339
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %341 = icmp ne i8* %340, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %341, label %342, label %352
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1352
	jmp	mz_zip_reader_extract_to_mem_no_alloc1342
	.text
mz_zip_reader_extract_to_mem_no_alloc1342:
	# %343 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %344 = getelementptr %struct.mz_zip_archive, i8* %343, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %345 = load i8*, i8** %344
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %346 = getelementptr %struct.mz_zip_internal_state_tag, i8* %345, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %347 = load i8*, i8** %346
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %348 = load i64, i64* %46
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %349 = getelementptr i8, i8* %347, i64 %348
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %349, i8** %53
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %350 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %351 = load i64, i64* %350
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %351, i64* %51
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %351, i64* %49
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %47
	movq	$0, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %396
	jmp	mz_zip_reader_extract_to_mem_no_alloc1396
	.text
mz_zip_reader_extract_to_mem_no_alloc1352:
	# %353 = load i8*, i8** %41
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %354 = icmp ne i8* %353, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %354, label %355, label %364
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1364
	jmp	mz_zip_reader_extract_to_mem_no_alloc1355
	.text
mz_zip_reader_extract_to_mem_no_alloc1355:
	# %356 = load i64, i64* %42
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %357 = icmp ne i64 %356, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %357, label %359, label %358
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1358
	jmp	mz_zip_reader_extract_to_mem_no_alloc1359
	.text
mz_zip_reader_extract_to_mem_no_alloc1358:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1359:
	# %360 = load i8*, i8** %41
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %360, i8** %53
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %361 = load i64, i64* %42
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %361, i64* %49
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %51
	movq	$0, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# %362 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %363 = load i64, i64* %362
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %363, i64* %47
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %395
	jmp	mz_zip_reader_extract_to_mem_no_alloc1395
	.text
mz_zip_reader_extract_to_mem_no_alloc1364:
	# %365 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %366 = load i64, i64* %365
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %367 = icmp ult i64 %366, 65536
	movq	%rbx, %rax
	movq	$65536, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %367, label %368, label %371
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1371
	jmp	mz_zip_reader_extract_to_mem_no_alloc1368
	.text
mz_zip_reader_extract_to_mem_no_alloc1368:
	# %369 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %370 = load i64, i64* %369
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %372
	jmp	mz_zip_reader_extract_to_mem_no_alloc1372
	.text
mz_zip_reader_extract_to_mem_no_alloc1371:
	# br label %372
	movq	$65536, %rdx
	jmp	mz_zip_reader_extract_to_mem_no_alloc1372
	.text
mz_zip_reader_extract_to_mem_no_alloc1372:
	# %373 = phi i64 [%370, %368], [65536, %371]
	# store i64 %373, i64* %49
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# %374 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %375 = getelementptr %struct.mz_zip_archive, i8* %374, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %376 = load i8*, i8** %375
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %377 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %378 = getelementptr %struct.mz_zip_archive, i8* %377, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %379 = load i8*, i8** %378
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %380 = load i64, i64* %49
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %381 = call i8* %376 (i8* %379, i64 1, i64 %380)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %381, i8** %53
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %382 = icmp eq i8* null, %381
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %382, label %383, label %392
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1392
	jmp	mz_zip_reader_extract_to_mem_no_alloc1383
	.text
mz_zip_reader_extract_to_mem_no_alloc1383:
	# %384 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %384, i8** %27
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %28
	movq	$16, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# %385 = load i8*, i8** %27
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %386 = icmp ne i8* %385, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %386, label %387, label %391
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1391
	jmp	mz_zip_reader_extract_to_mem_no_alloc1387
	.text
mz_zip_reader_extract_to_mem_no_alloc1387:
	# %388 = load i32, i32* %28
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %389 = load i8*, i8** %27
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %390 = getelementptr %struct.mz_zip_archive, i8* %389, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %388, i32* %390
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %391
	jmp	mz_zip_reader_extract_to_mem_no_alloc1391
	.text
mz_zip_reader_extract_to_mem_no_alloc1391:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1392:
	# store i64 0, i64* %51
	movq	$0, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# %393 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %394 = load i64, i64* %393
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %394, i64* %47
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %395
	jmp	mz_zip_reader_extract_to_mem_no_alloc1395
	.text
mz_zip_reader_extract_to_mem_no_alloc1395:
	# br label %396
	jmp	mz_zip_reader_extract_to_mem_no_alloc1396
	.text
mz_zip_reader_extract_to_mem_no_alloc1396:
	# br label %397
	jmp	mz_zip_reader_extract_to_mem_no_alloc1397
	.text
mz_zip_reader_extract_to_mem_no_alloc1397:
	# %398 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 8
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %399 = load i64, i64* %398
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %400 = load i64, i64* %48
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %401 = sub i64 %399, %400
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %401, i64* %58
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %402 = load i64, i64* %51
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %403 = icmp ne i64 %402, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %403, label %449, label %404
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1404
	jmp	mz_zip_reader_extract_to_mem_no_alloc1449
	.text
mz_zip_reader_extract_to_mem_no_alloc1404:
	# %405 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %406 = getelementptr %struct.mz_zip_archive, i8* %405, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %407 = load i8*, i8** %406
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %408 = getelementptr %struct.mz_zip_internal_state_tag, i8* %407, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %409 = load i8*, i8** %408
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %410 = icmp ne i8* %409, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %410, label %449, label %411
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1411
	jmp	mz_zip_reader_extract_to_mem_no_alloc1449
	.text
mz_zip_reader_extract_to_mem_no_alloc1411:
	# %412 = load i64, i64* %49
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %413 = load i64, i64* %47
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %414 = icmp ult i64 %412, %413
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %414, label %415, label %417
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1417
	jmp	mz_zip_reader_extract_to_mem_no_alloc1415
	.text
mz_zip_reader_extract_to_mem_no_alloc1415:
	# %416 = load i64, i64* %49
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# br label %419
	movq	%r10, %rdx
	jmp	mz_zip_reader_extract_to_mem_no_alloc1419
	.text
mz_zip_reader_extract_to_mem_no_alloc1417:
	# %418 = load i64, i64* %47
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# br label %419
	movq	%r9, %rdx
	jmp	mz_zip_reader_extract_to_mem_no_alloc1419
	.text
mz_zip_reader_extract_to_mem_no_alloc1419:
	# %420 = phi i64 [%416, %415], [%418, %417]
	# store i64 %420, i64* %51
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# %421 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %422 = getelementptr %struct.mz_zip_archive, i8* %421, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %423 = load i8*, i8** %422
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %424 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %425 = getelementptr %struct.mz_zip_archive, i8* %424, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %426 = load i8*, i8** %425
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %427 = load i64, i64* %46
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %428 = load i8*, i8** %53
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %429 = load i64, i64* %51
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %430 = call i64 %423 (i8* %426, i64 %427, i8* %428, i64 %429)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %431 = load i64, i64* %51
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %432 = icmp ne i64 %430, %431
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %432, label %433, label %442
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1442
	jmp	mz_zip_reader_extract_to_mem_no_alloc1433
	.text
mz_zip_reader_extract_to_mem_no_alloc1433:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# %434 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %434, i8** %29
	movq	%rdx, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 11, i32* %30
	movq	$11, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %435 = load i8*, i8** %29
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %436 = icmp ne i8* %435, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %436, label %437, label %441
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1441
	jmp	mz_zip_reader_extract_to_mem_no_alloc1437
	.text
mz_zip_reader_extract_to_mem_no_alloc1437:
	# %438 = load i32, i32* %30
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %439 = load i8*, i8** %29
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %440 = getelementptr %struct.mz_zip_archive, i8* %439, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %438, i32* %440
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %441
	jmp	mz_zip_reader_extract_to_mem_no_alloc1441
	.text
mz_zip_reader_extract_to_mem_no_alloc1441:
	# br label %476
	jmp	mz_zip_reader_extract_to_mem_no_alloc1476
	.text
mz_zip_reader_extract_to_mem_no_alloc1442:
	# %443 = load i64, i64* %51
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %444 = load i64, i64* %46
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %445 = add i64 %444, %443
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %445, i64* %46
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# %446 = load i64, i64* %51
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %447 = load i64, i64* %47
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %448 = sub i64 %447, %446
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %448, i64* %47
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %50
	movq	$0, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %449
	jmp	mz_zip_reader_extract_to_mem_no_alloc1449
	.text
mz_zip_reader_extract_to_mem_no_alloc1449:
	# %450 = load i64, i64* %51
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %450, i64* %57
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %451 = load i8*, i8** %53
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %452 = load i64, i64* %50
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %453 = getelementptr i8, i8* %451, i64 %452
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %454 = load i8*, i8** %38
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %455 = load i8*, i8** %38
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %456 = load i64, i64* %48
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %457 = getelementptr i8, i8* %455, i64 %456
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %458 = load i64, i64* %47
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %459 = icmp ne i64 %458, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# %460 = zext i1 %459 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %461 = select i1 %459, i32 2, i32 0
	movq	%rbx, %rcx
	movq	$2, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# %462 = or i32 4, %461
	movq	$4, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %463 = call i32 @tinfl_decompress (i8* %56, i8* %453, i8* %57, i8* %454, i8* %457, i8* %58, i32 %462)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r13, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_decompress
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %463, i32* %44
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# %464 = load i64, i64* %57
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %465 = load i64, i64* %51
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %466 = sub i64 %465, %464
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %466, i64* %51
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# %467 = load i64, i64* %57
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %468 = load i64, i64* %50
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %469 = add i64 %468, %467
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %469, i64* %50
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# %470 = load i64, i64* %58
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %471 = load i64, i64* %48
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %472 = add i64 %471, %470
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %472, i64* %48
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %473
	jmp	mz_zip_reader_extract_to_mem_no_alloc1473
	.text
mz_zip_reader_extract_to_mem_no_alloc1473:
	# %474 = load i32, i32* %44
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %475 = icmp eq i32 %474, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %475, label %397, label %476
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1476
	jmp	mz_zip_reader_extract_to_mem_no_alloc1397
	.text
mz_zip_reader_extract_to_mem_no_alloc1476:
	# %477 = load i32, i32* %44
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %478 = icmp eq i32 %477, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %478, label %479, label %513
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1513
	jmp	mz_zip_reader_extract_to_mem_no_alloc1479
	.text
mz_zip_reader_extract_to_mem_no_alloc1479:
	# %480 = load i64, i64* %48
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %481 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 8
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %482 = load i64, i64* %481
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %483 = icmp ne i64 %480, %482
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %483, label %484, label %493
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1493
	jmp	mz_zip_reader_extract_to_mem_no_alloc1484
	.text
mz_zip_reader_extract_to_mem_no_alloc1484:
	# %485 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %485, i8** %31
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 13, i32* %32
	movq	$13, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %486 = load i8*, i8** %31
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %487 = icmp ne i8* %486, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %487, label %488, label %492
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1492
	jmp	mz_zip_reader_extract_to_mem_no_alloc1488
	.text
mz_zip_reader_extract_to_mem_no_alloc1488:
	# %489 = load i32, i32* %32
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %490 = load i8*, i8** %31
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %491 = getelementptr %struct.mz_zip_archive, i8* %490, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %489, i32* %491
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %492
	jmp	mz_zip_reader_extract_to_mem_no_alloc1492
	.text
mz_zip_reader_extract_to_mem_no_alloc1492:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %512
	jmp	mz_zip_reader_extract_to_mem_no_alloc1512
	.text
mz_zip_reader_extract_to_mem_no_alloc1493:
	# %494 = load i8*, i8** %38
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %495 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 8
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %496 = load i64, i64* %495
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %497 = call i64 @mz_crc32 (i64 0, i8* %494, i64 %496)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$0, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %498 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 6
	movq	-368(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %499 = load i32, i32* %498
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %500 = zext i32 %499 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %501 = icmp ne i64 %497, %500
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %501, label %502, label %511
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1511
	jmp	mz_zip_reader_extract_to_mem_no_alloc1502
	.text
mz_zip_reader_extract_to_mem_no_alloc1502:
	# %503 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %503, i8** %33
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 14, i32* %34
	movq	$14, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %504 = load i8*, i8** %33
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %505 = icmp ne i8* %504, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %505, label %506, label %510
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1510
	jmp	mz_zip_reader_extract_to_mem_no_alloc1506
	.text
mz_zip_reader_extract_to_mem_no_alloc1506:
	# %507 = load i32, i32* %34
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %508 = load i8*, i8** %33
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %509 = getelementptr %struct.mz_zip_archive, i8* %508, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %507, i32* %509
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %510
	jmp	mz_zip_reader_extract_to_mem_no_alloc1510
	.text
mz_zip_reader_extract_to_mem_no_alloc1510:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %511
	jmp	mz_zip_reader_extract_to_mem_no_alloc1511
	.text
mz_zip_reader_extract_to_mem_no_alloc1511:
	# br label %512
	jmp	mz_zip_reader_extract_to_mem_no_alloc1512
	.text
mz_zip_reader_extract_to_mem_no_alloc1512:
	# br label %513
	jmp	mz_zip_reader_extract_to_mem_no_alloc1513
	.text
mz_zip_reader_extract_to_mem_no_alloc1513:
	# %514 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %515 = getelementptr %struct.mz_zip_archive, i8* %514, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %516 = load i8*, i8** %515
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %517 = getelementptr %struct.mz_zip_internal_state_tag, i8* %516, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %518 = load i8*, i8** %517
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %519 = icmp ne i8* %518, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %519, label %531, label %520
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1520
	jmp	mz_zip_reader_extract_to_mem_no_alloc1531
	.text
mz_zip_reader_extract_to_mem_no_alloc1520:
	# %521 = load i8*, i8** %41
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %522 = icmp ne i8* %521, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %522, label %531, label %523
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_mem_no_alloc1523
	jmp	mz_zip_reader_extract_to_mem_no_alloc1531
	.text
mz_zip_reader_extract_to_mem_no_alloc1523:
	# %524 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %525 = getelementptr %struct.mz_zip_archive, i8* %524, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %526 = load i8*, i8** %525
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %527 = load i8*, i8** %36
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %528 = getelementptr %struct.mz_zip_archive, i8* %527, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %529 = load i8*, i8** %528
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %530 = load i8*, i8** %53
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %526 (i8* %529, i8* %530)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %531
	jmp	mz_zip_reader_extract_to_mem_no_alloc1531
	.text
mz_zip_reader_extract_to_mem_no_alloc1531:
	# %532 = load i32, i32* %44
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %533 = icmp eq i32 %532, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %534 = zext i1 %533 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %534, i32* %35
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %535
	jmp	mz_zip_reader_extract_to_mem_no_alloc1535
	.text
mz_zip_reader_extract_to_mem_no_alloc1535:
	# %536 = load i32, i32* %35
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %536
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_file_to_mem_no_alloc
_mz_zip_reader_extract_file_to_mem_no_alloc:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$32, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	popq	%r14
	popq	%r15
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %12 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %15 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %9
	movq	-8(%rbp), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %10
	movq	-16(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %11
	movq	-24(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %12
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %13
	movq	-32(%rbp), %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# store i8* %5, i8** %14
	movq	%r15, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i64 %6, i64* %15
	movq	%r14, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %17 = load i8*, i8** %9
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %18 = load i8*, i8** %10
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %19 = load i32, i32* %13
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %20 = call i32 @mz_zip_reader_locate_file_v2 (i8* %17, i8* %18, i8* null, i32 %19, i8* %16)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r14, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %21 = icmp ne i32 %20, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %21, label %23, label %22
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_file_to_mem_no_alloc22
	jmp	mz_zip_reader_extract_file_to_mem_no_alloc23
	.text
mz_zip_reader_extract_file_to_mem_no_alloc22:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %32
	jmp	mz_zip_reader_extract_file_to_mem_no_alloc32
	.text
mz_zip_reader_extract_file_to_mem_no_alloc23:
	# %24 = load i8*, i8** %9
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %25 = load i32, i32* %16
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %r12
	movl	%eax, %r12d
	# %26 = load i8*, i8** %11
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %27 = load i64, i64* %12
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %28 = load i32, i32* %13
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %29 = load i8*, i8** %14
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %30 = load i64, i64* %15
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %31 = call i32 @mz_zip_reader_extract_to_mem_no_alloc1 (i8* %24, i32 %25, i8* %26, i64 %27, i32 %28, i8* %29, i64 %30, i8* null)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_mem_no_alloc1
	addq	$16, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %31, i32* %8
	movq	%rdx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %32
	jmp	mz_zip_reader_extract_file_to_mem_no_alloc32
	.text
mz_zip_reader_extract_file_to_mem_no_alloc32:
	# %33 = load i32, i32* %8
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %33
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_to_mem
_mz_zip_reader_extract_to_mem:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%r10
	popq	%rdx
	popq	%r11
	popq	%r12
	popq	%r13
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %7
	movq	%r12, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %8
	movq	%r11, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %9
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %10
	movq	%r10, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %6
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %12 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %13 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %14 = load i64, i64* %9
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = load i32, i32* %10
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %16 = call i32 @mz_zip_reader_extract_to_mem_no_alloc1 (i8* %11, i32 %12, i8* %13, i64 %14, i32 %15, i8* null, i64 0, i8* null)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_mem_no_alloc1
	addq	$16, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %16
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_file_to_mem
_mz_zip_reader_extract_file_to_mem:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%r10
	popq	%rdx
	popq	%r11
	popq	%r12
	popq	%r13
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %7
	movq	%r12, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%r11, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %9
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %10
	movq	%r10, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %6
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %12 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %13 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %14 = load i64, i64* %9
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = load i32, i32* %10
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %16 = call i32 @mz_zip_reader_extract_file_to_mem_no_alloc (i8* %11, i8* %12, i8* %13, i64 %14, i32 %15, i8* null, i64 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_file_to_mem_no_alloc
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %16
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_to_heap
_mz_zip_reader_extract_to_heap:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$16, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	%rsi
	popq	%rdi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %12 = alloca %struct.mz_zip_archive_file_stat
	subq	$1102, %rsp
	movq	%rsp, %r10
	# %13 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %8
	movq	%rdi, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %9
	movq	%rsi, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %10
	movq	%rbx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %11
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %15 = load i8*, i8** %10
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %16 = icmp ne i8* %15, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %16, label %17, label %19
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_heap19
	jmp	mz_zip_reader_extract_to_heap17
	.text
mz_zip_reader_extract_to_heap17:
	# %18 = load i8*, i8** %10
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 0, i64* %18
	movq	$0, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %19
	jmp	mz_zip_reader_extract_to_heap19
	.text
mz_zip_reader_extract_to_heap19:
	# %20 = load i8*, i8** %8
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %21 = load i32, i32* %9
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %22 = call i32 @mz_zip_reader_file_stat (i8* %20, i32 %21, i8* %12)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_file_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %23 = icmp ne i32 %22, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %23, label %25, label %24
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_heap24
	jmp	mz_zip_reader_extract_to_heap25
	.text
mz_zip_reader_extract_to_heap24:
	# store i8* null, i8** %7
	movq	$0, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# br label %79
	jmp	mz_zip_reader_extract_to_heap79
	.text
mz_zip_reader_extract_to_heap25:
	# %26 = load i32, i32* %11
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %27 = and i32 %26, 1024
	movq	%rsi, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %28 = icmp ne i32 %27, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %28, label %29, label %32
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_heap32
	jmp	mz_zip_reader_extract_to_heap29
	.text
mz_zip_reader_extract_to_heap29:
	# %30 = getelementptr %struct.mz_zip_archive_file_stat, i8* %12, i32 0, i32 7
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %31 = load i64, i64* %30
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %35
	movq	%rbx, %rdx
	jmp	mz_zip_reader_extract_to_heap35
	.text
mz_zip_reader_extract_to_heap32:
	# %33 = getelementptr %struct.mz_zip_archive_file_stat, i8* %12, i32 0, i32 8
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %34 = load i64, i64* %33
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %35
	jmp	mz_zip_reader_extract_to_heap35
	.text
mz_zip_reader_extract_to_heap35:
	# %36 = phi i64 [%31, %29], [%34, %32]
	# store i64 %36, i64* %13
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %37 = load i8*, i8** %8
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = getelementptr %struct.mz_zip_archive, i8* %37, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %39 = load i8*, i8** %38
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %40 = load i8*, i8** %8
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = getelementptr %struct.mz_zip_archive, i8* %40, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %42 = load i8*, i8** %41
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %43 = load i64, i64* %13
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %44 = call i8* %39 (i8* %42, i64 1, i64 %43)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %44, i8** %14
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %45 = icmp eq i8* null, %44
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %45, label %46, label %55
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_heap55
	jmp	mz_zip_reader_extract_to_heap46
	.text
mz_zip_reader_extract_to_heap46:
	# %47 = load i8*, i8** %8
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %47, i8** %5
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %6
	movq	$16, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %48 = load i8*, i8** %5
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = icmp ne i8* %48, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %49, label %50, label %54
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_heap54
	jmp	mz_zip_reader_extract_to_heap50
	.text
mz_zip_reader_extract_to_heap50:
	# %51 = load i32, i32* %6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %52 = load i8*, i8** %5
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = getelementptr %struct.mz_zip_archive, i8* %52, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %51, i32* %53
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %54
	jmp	mz_zip_reader_extract_to_heap54
	.text
mz_zip_reader_extract_to_heap54:
	# store i8* null, i8** %7
	movq	$0, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# br label %79
	jmp	mz_zip_reader_extract_to_heap79
	.text
mz_zip_reader_extract_to_heap55:
	# %56 = load i8*, i8** %8
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %57 = load i32, i32* %9
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %r13
	movl	%eax, %r13d
	# %58 = load i8*, i8** %14
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %59 = load i64, i64* %13
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %60 = load i32, i32* %11
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %61 = call i32 @mz_zip_reader_extract_to_mem_no_alloc1 (i8* %56, i32 %57, i8* %58, i64 %59, i32 %60, i8* null, i64 0, i8* %12)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_mem_no_alloc1
	addq	$16, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %62 = icmp ne i32 %61, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %62, label %71, label %63
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_heap63
	jmp	mz_zip_reader_extract_to_heap71
	.text
mz_zip_reader_extract_to_heap63:
	# %64 = load i8*, i8** %8
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = getelementptr %struct.mz_zip_archive, i8* %64, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %66 = load i8*, i8** %65
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = load i8*, i8** %8
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = getelementptr %struct.mz_zip_archive, i8* %67, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %69 = load i8*, i8** %68
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %70 = load i8*, i8** %14
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %66 (i8* %69, i8* %70)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %7
	movq	$0, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# br label %79
	jmp	mz_zip_reader_extract_to_heap79
	.text
mz_zip_reader_extract_to_heap71:
	# %72 = load i8*, i8** %10
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %73 = icmp ne i8* %72, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %73, label %74, label %77
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_heap77
	jmp	mz_zip_reader_extract_to_heap74
	.text
mz_zip_reader_extract_to_heap74:
	# %75 = load i64, i64* %13
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %76 = load i8*, i8** %10
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %75, i64* %76
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %77
	jmp	mz_zip_reader_extract_to_heap77
	.text
mz_zip_reader_extract_to_heap77:
	# %78 = load i8*, i8** %14
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %78, i8** %7
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# br label %79
	jmp	mz_zip_reader_extract_to_heap79
	.text
mz_zip_reader_extract_to_heap79:
	# %80 = load i8*, i8** %7
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %80
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_file_stat
_mz_zip_reader_file_stat:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rsi
	popq	%rdi
	popq	%r12
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %7
	movq	%r12, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %8
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %9
	movq	%rsi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %10 = load i8*, i8** %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %11 = load i32, i32* %8
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %12 = load i8*, i8** %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %13 = load i32, i32* %8
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %12, i8** %5
	movq	%r10, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 %13, i32* %6
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %14 = load i8*, i8** %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %15 = icmp ne i8* %14, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %15, label %16, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_file_stat27
	jmp	mz_zip_reader_file_stat16
	.text
mz_zip_reader_file_stat16:
	# %17 = load i8*, i8** %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = getelementptr %struct.mz_zip_archive, i8* %17, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %19 = load i8*, i8** %18
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %20 = icmp ne i8* %19, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %20, label %21, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_file_stat27
	jmp	mz_zip_reader_file_stat21
	.text
mz_zip_reader_file_stat21:
	# %22 = load i32, i32* %6
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %23 = load i8*, i8** %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %24 = getelementptr %struct.mz_zip_archive, i8* %23, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %25 = load i32, i32* %24
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %26 = icmp uge i32 %22, %25
	movq	%r10, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %26, label %27, label %28
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_file_stat28
	jmp	mz_zip_reader_file_stat27
	.text
mz_zip_reader_file_stat27:
	# store i8* null, i8** %4
	movq	$0, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %44
	jmp	mz_zip_reader_file_stat44
	.text
mz_zip_reader_file_stat28:
	# %29 = load i8*, i8** %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %30 = getelementptr %struct.mz_zip_archive, i8* %29, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %31 = load i8*, i8** %30
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = load i8*, i8** %31
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %33 = load i8*, i8** %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %35 = load i8*, i8** %34
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = getelementptr %struct.mz_zip_internal_state_tag, i8* %35, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %37 = load i8*, i8** %36
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %38 = load i32, i32* %6
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %39 = zext i32 %38 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = getelementptr i32, i8* %37, i64 %39
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %41 = load i32, i32* %40
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %42 = zext i32 %41 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %43 = getelementptr i8, i8* %32, i64 %42
	movq	%r10, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %43, i8** %4
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %44
	jmp	mz_zip_reader_file_stat44
	.text
mz_zip_reader_file_stat44:
	# %45 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %46 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = call i32 @mz_zip_file_stat_internal (i8* %10, i32 %11, i8* %45, i8* %46, i8* null)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_file_stat_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %47
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_file_to_heap
_mz_zip_reader_extract_file_to_heap:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%r12
	popq	%r13
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %7
	movq	%r12, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%rsi, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %12 = load i8*, i8** %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %13 = load i32, i32* %9
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %14 = call i32 @mz_zip_reader_locate_file_v2 (i8* %11, i8* %12, i8* null, i32 %13, i8* %10)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %15 = icmp ne i32 %14, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %15, label %22, label %16
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_file_to_heap16
	jmp	mz_zip_reader_extract_file_to_heap22
	.text
mz_zip_reader_extract_file_to_heap16:
	# %17 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = icmp ne i8* %17, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %18, label %19, label %21
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_file_to_heap21
	jmp	mz_zip_reader_extract_file_to_heap19
	.text
mz_zip_reader_extract_file_to_heap19:
	# %20 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %20
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %21
	jmp	mz_zip_reader_extract_file_to_heap21
	.text
mz_zip_reader_extract_file_to_heap21:
	# store i8* null, i8** %5
	movq	$0, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# br label %28
	jmp	mz_zip_reader_extract_file_to_heap28
	.text
mz_zip_reader_extract_file_to_heap22:
	# %23 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %24 = load i32, i32* %10
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %25 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %26 = load i32, i32* %9
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %27 = call i8* @mz_zip_reader_extract_to_heap (i8* %23, i32 %24, i8* %25, i32 %26)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_heap
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %27, i8** %5
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# br label %28
	jmp	mz_zip_reader_extract_file_to_heap28
	.text
mz_zip_reader_extract_file_to_heap28:
	# %29 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %29
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_to_callback
_mz_zip_reader_extract_to_callback:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$392, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%rbx
	popq	%rdx
	popq	%r8
	popq	%r9
	popq	%r10
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -120(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -144(%rbp)
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -152(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %33 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %34 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %35 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %38 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -256(%rbp)
	# %39 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -264(%rbp)
	# %40 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %41 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %42 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -280(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -288(%rbp)
	# %44 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -296(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -304(%rbp)
	# %46 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -312(%rbp)
	# %47 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %48 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -328(%rbp)
	# %49 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -336(%rbp)
	# %50 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -344(%rbp)
	# %51 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %52 = alloca %struct.mz_zip_archive_file_stat
	subq	$1102, %rsp
	movq	%rsp, -360(%rbp)
	# %53 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -368(%rbp)
	# %54 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -376(%rbp)
	# %55 = alloca [8 x i32]
	subq	$32, %rsp
	movq	%rsp, %rsi
	# %56 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -384(%rbp)
	# %57 = alloca %struct.tinfl_decompressor_tag
	subq	$8372, %rsp
	movq	%rsp, -392(%rbp)
	# %58 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %59 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %60 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# store i8* %0, i8** %39
	movq	%r10, %rax
	movq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %40
	movq	%r9, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %41
	movq	%r8, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %42
	movq	%rdx, %rax
	movq	-280(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %43
	movq	%rbx, %rax
	movq	-288(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %44
	movq	$0, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %45
	movq	$0, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i64 0, i64* %47
	movq	$0, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %50
	movq	$0, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %53
	movq	$0, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %54
	movq	$0, %rax
	movq	-376(%rbp), %rcx
	movq	%rax, (%rcx)
	# %61 = getelementptr [8 x i32], i8* %55, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %61, i8** %56
	movq	%rsi, %rax
	movq	-384(%rbp), %rcx
	movq	%rax, (%rcx)
	# %62 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %63 = icmp ne i8* %62, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %63, label %64, label %77
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback77
	jmp	mz_zip_reader_extract_to_callback64
	.text
mz_zip_reader_extract_to_callback64:
	# %65 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %66 = getelementptr %struct.mz_zip_archive, i8* %65, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %67 = load i8*, i8** %66
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %68 = icmp ne i8* %67, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %68, label %69, label %77
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback77
	jmp	mz_zip_reader_extract_to_callback69
	.text
mz_zip_reader_extract_to_callback69:
	# %70 = load i8*, i8** %41
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %71 = icmp ne i8* %70, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %71, label %72, label %77
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback77
	jmp	mz_zip_reader_extract_to_callback72
	.text
mz_zip_reader_extract_to_callback72:
	# %73 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %74 = getelementptr %struct.mz_zip_archive, i8* %73, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %75 = load i8*, i8** %74
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %76 = icmp ne i8* %75, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %76, label %86, label %77
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback77
	jmp	mz_zip_reader_extract_to_callback86
	.text
mz_zip_reader_extract_to_callback77:
	# %78 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %78, i8** %6
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %79 = load i8*, i8** %6
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %80 = icmp ne i8* %79, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %80, label %81, label %85
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback85
	jmp	mz_zip_reader_extract_to_callback81
	.text
mz_zip_reader_extract_to_callback81:
	# %82 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %83 = load i8*, i8** %6
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %84 = getelementptr %struct.mz_zip_archive, i8* %83, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %82, i32* %84
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %85
	jmp	mz_zip_reader_extract_to_callback85
	.text
mz_zip_reader_extract_to_callback85:
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback86:
	# %87 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %88 = load i32, i32* %40
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %89 = call i32 @mz_zip_reader_file_stat (i8* %87, i32 %88, i8* %52)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	-360(%rbp), %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_file_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %90 = icmp ne i32 %89, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %90, label %92, label %91
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback91
	jmp	mz_zip_reader_extract_to_callback92
	.text
mz_zip_reader_extract_to_callback91:
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback92:
	# %93 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 13
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %94 = load i32, i32* %93
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %95 = icmp ne i32 %94, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %95, label %100, label %96
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback96
	jmp	mz_zip_reader_extract_to_callback100
	.text
mz_zip_reader_extract_to_callback96:
	# %97 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %98 = load i64, i64* %97
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %99 = icmp ne i64 %98, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %99, label %101, label %100
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback100
	jmp	mz_zip_reader_extract_to_callback101
	.text
mz_zip_reader_extract_to_callback100:
	# store i32 1, i32* %38
	movq	$1, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback101:
	# %102 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 4
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %103 = load i16, i16* %102
	movq	%rsi, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %104 = zext i16 %103 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %105 = and i32 %104, 97
	movq	%rsi, %rax
	movq	$97, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %106 = icmp ne i32 %105, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %106, label %107, label %116
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback116
	jmp	mz_zip_reader_extract_to_callback107
	.text
mz_zip_reader_extract_to_callback107:
	# %108 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %108, i8** %8
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 5, i32* %9
	movq	$5, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %109 = load i8*, i8** %8
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %110 = icmp ne i8* %109, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %110, label %111, label %115
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback115
	jmp	mz_zip_reader_extract_to_callback111
	.text
mz_zip_reader_extract_to_callback111:
	# %112 = load i32, i32* %9
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %113 = load i8*, i8** %8
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %114 = getelementptr %struct.mz_zip_archive, i8* %113, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %112, i32* %114
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %115
	jmp	mz_zip_reader_extract_to_callback115
	.text
mz_zip_reader_extract_to_callback115:
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback116:
	# %117 = load i32, i32* %43
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %118 = and i32 %117, 1024
	movq	%rsi, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %119 = icmp ne i32 %118, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %119, label %139, label %120
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback120
	jmp	mz_zip_reader_extract_to_callback139
	.text
mz_zip_reader_extract_to_callback120:
	# %121 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 5
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %122 = load i16, i16* %121
	movq	%rsi, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %123 = zext i16 %122 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %124 = icmp ne i32 %123, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %124, label %125, label %139
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback139
	jmp	mz_zip_reader_extract_to_callback125
	.text
mz_zip_reader_extract_to_callback125:
	# %126 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 5
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %127 = load i16, i16* %126
	movq	%rsi, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %128 = zext i16 %127 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %129 = icmp ne i32 %128, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %129, label %130, label %139
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback139
	jmp	mz_zip_reader_extract_to_callback130
	.text
mz_zip_reader_extract_to_callback130:
	# %131 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %131, i8** %10
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 4, i32* %11
	movq	$4, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %132 = load i8*, i8** %10
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %133 = icmp ne i8* %132, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %133, label %134, label %138
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback138
	jmp	mz_zip_reader_extract_to_callback134
	.text
mz_zip_reader_extract_to_callback134:
	# %135 = load i32, i32* %11
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %136 = load i8*, i8** %10
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %137 = getelementptr %struct.mz_zip_archive, i8* %136, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %135, i32* %137
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %138
	jmp	mz_zip_reader_extract_to_callback138
	.text
mz_zip_reader_extract_to_callback138:
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback139:
	# %140 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 11
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %141 = load i64, i64* %140
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %141, i64* %51
	movq	%rsi, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# %142 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %143 = getelementptr %struct.mz_zip_archive, i8* %142, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %144 = load i8*, i8** %143
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %145 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %146 = getelementptr %struct.mz_zip_archive, i8* %145, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %147 = load i8*, i8** %146
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %148 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %149 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %150 = call i64 %144 (i8* %147, i64 %148, i8* %149, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r12, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %151 = icmp ne i64 %150, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %151, label %152, label %161
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback161
	jmp	mz_zip_reader_extract_to_callback152
	.text
mz_zip_reader_extract_to_callback152:
	# %153 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %153, i8** %12
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %13
	movq	$20, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %154 = load i8*, i8** %12
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %155 = icmp ne i8* %154, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %155, label %156, label %160
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback160
	jmp	mz_zip_reader_extract_to_callback156
	.text
mz_zip_reader_extract_to_callback156:
	# %157 = load i32, i32* %13
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %158 = load i8*, i8** %12
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %159 = getelementptr %struct.mz_zip_archive, i8* %158, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %157, i32* %159
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %160
	jmp	mz_zip_reader_extract_to_callback160
	.text
mz_zip_reader_extract_to_callback160:
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback161:
	# %162 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %163 = getelementptr i8, i8* %162, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %164 = load i8, i8* %163
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %165 = zext i8 %164 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %166 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %167 = getelementptr i8, i8* %166, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %168 = load i8, i8* %167
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %169 = zext i8 %168 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %170 = shl i32 %169, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %171 = or i32 %165, %170
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %172 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %173 = getelementptr i8, i8* %172, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %174 = load i8, i8* %173
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %175 = zext i8 %174 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %176 = shl i32 %175, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %177 = or i32 %171, %176
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %178 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %179 = getelementptr i8, i8* %178, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %180 = load i8, i8* %179
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %181 = zext i8 %180 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %182 = shl i32 %181, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %183 = or i32 %177, %182
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %184 = icmp ne i32 %183, 67324752
	movq	%rsi, %rax
	movq	$67324752, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %184, label %185, label %194
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback194
	jmp	mz_zip_reader_extract_to_callback185
	.text
mz_zip_reader_extract_to_callback185:
	# %186 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %186, i8** %14
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %15
	movq	$9, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %187 = load i8*, i8** %14
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %188 = icmp ne i8* %187, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %188, label %189, label %193
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback193
	jmp	mz_zip_reader_extract_to_callback189
	.text
mz_zip_reader_extract_to_callback189:
	# %190 = load i32, i32* %15
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %191 = load i8*, i8** %14
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %192 = getelementptr %struct.mz_zip_archive, i8* %191, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %190, i32* %192
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %193
	jmp	mz_zip_reader_extract_to_callback193
	.text
mz_zip_reader_extract_to_callback193:
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback194:
	# %195 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %196 = getelementptr i8, i8* %195, i64 26
	movq	%rsi, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %197 = getelementptr i8, i8* %196, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %198 = load i8, i8* %197
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %199 = zext i8 %198 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %200 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %201 = getelementptr i8, i8* %200, i64 26
	movq	%rsi, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %202 = getelementptr i8, i8* %201, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %203 = load i8, i8* %202
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %204 = zext i8 %203 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %205 = shl i32 %204, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %206 = or i32 %199, %205
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %207 = add i32 30, %206
	movq	$30, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %r12
	# %208 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %209 = getelementptr i8, i8* %208, i64 28
	movq	%rsi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %210 = getelementptr i8, i8* %209, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %211 = load i8, i8* %210
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %212 = zext i8 %211 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %213 = load i8*, i8** %56
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %214 = getelementptr i8, i8* %213, i64 28
	movq	%rsi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %215 = getelementptr i8, i8* %214, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %216 = load i8, i8* %215
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %217 = zext i8 %216 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %218 = shl i32 %217, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %219 = or i32 %212, %218
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %220 = add i32 %207, %219
	movq	%r12, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %221 = zext i32 %220 to i64
	movq	%rsi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %222 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %223 = add i64 %222, %221
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %223, i64* %51
	movq	%rsi, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# %224 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %225 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %226 = load i64, i64* %225
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %227 = add i64 %224, %226
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %228 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %229 = getelementptr %struct.mz_zip_archive, i8* %228, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %230 = load i64, i64* %229
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %231 = icmp ugt i64 %227, %230
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %231, label %232, label %241
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback241
	jmp	mz_zip_reader_extract_to_callback232
	.text
mz_zip_reader_extract_to_callback232:
	# %233 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %233, i8** %16
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %17
	movq	$9, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %234 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %235 = icmp ne i8* %234, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %235, label %236, label %240
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback240
	jmp	mz_zip_reader_extract_to_callback236
	.text
mz_zip_reader_extract_to_callback236:
	# %237 = load i32, i32* %17
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %238 = load i8*, i8** %16
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %239 = getelementptr %struct.mz_zip_archive, i8* %238, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %237, i32* %239
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %240
	jmp	mz_zip_reader_extract_to_callback240
	.text
mz_zip_reader_extract_to_callback240:
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback241:
	# %242 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %243 = getelementptr %struct.mz_zip_archive, i8* %242, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %244 = load i8*, i8** %243
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %245 = getelementptr %struct.mz_zip_internal_state_tag, i8* %244, i32 0, i32 8
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %246 = load i8*, i8** %245
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %247 = icmp ne i8* %246, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %247, label %248, label %258
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback258
	jmp	mz_zip_reader_extract_to_callback248
	.text
mz_zip_reader_extract_to_callback248:
	# %249 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %250 = getelementptr %struct.mz_zip_archive, i8* %249, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %251 = load i8*, i8** %250
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %252 = getelementptr %struct.mz_zip_internal_state_tag, i8* %251, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %253 = load i8*, i8** %252
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %254 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %255 = getelementptr i8, i8* %253, i64 %254
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %255, i8** %53
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# %256 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %257 = load i64, i64* %256
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %257, i64* %48
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %257, i64* %46
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %49
	movq	$0, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %289
	jmp	mz_zip_reader_extract_to_callback289
	.text
mz_zip_reader_extract_to_callback258:
	# %259 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %260 = load i64, i64* %259
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %261 = icmp ult i64 %260, 65536
	movq	%rsi, %rax
	movq	$65536, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %261, label %262, label %265
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback265
	jmp	mz_zip_reader_extract_to_callback262
	.text
mz_zip_reader_extract_to_callback262:
	# %263 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %264 = load i64, i64* %263
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %266
	jmp	mz_zip_reader_extract_to_callback266
	.text
mz_zip_reader_extract_to_callback265:
	# br label %266
	movq	$65536, %rdx
	jmp	mz_zip_reader_extract_to_callback266
	.text
mz_zip_reader_extract_to_callback266:
	# %267 = phi i64 [%264, %262], [65536, %265]
	# store i64 %267, i64* %46
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %268 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %269 = getelementptr %struct.mz_zip_archive, i8* %268, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %270 = load i8*, i8** %269
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %271 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %272 = getelementptr %struct.mz_zip_archive, i8* %271, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %273 = load i8*, i8** %272
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %274 = load i64, i64* %46
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %275 = call i8* %270 (i8* %273, i64 1, i64 %274)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %275, i8** %53
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# %276 = icmp eq i8* null, %275
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %276, label %277, label %286
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback286
	jmp	mz_zip_reader_extract_to_callback277
	.text
mz_zip_reader_extract_to_callback277:
	# %278 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %278, i8** %18
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %19
	movq	$16, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %279 = load i8*, i8** %18
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %280 = icmp ne i8* %279, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %280, label %281, label %285
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback285
	jmp	mz_zip_reader_extract_to_callback281
	.text
mz_zip_reader_extract_to_callback281:
	# %282 = load i32, i32* %19
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %283 = load i8*, i8** %18
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %284 = getelementptr %struct.mz_zip_archive, i8* %283, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %282, i32* %284
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %285
	jmp	mz_zip_reader_extract_to_callback285
	.text
mz_zip_reader_extract_to_callback285:
	# store i32 0, i32* %38
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback286:
	# store i64 0, i64* %48
	movq	$0, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# %287 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %288 = load i64, i64* %287
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %288, i64* %49
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %289
	jmp	mz_zip_reader_extract_to_callback289
	.text
mz_zip_reader_extract_to_callback289:
	# %290 = load i32, i32* %43
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %291 = and i32 %290, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %292 = icmp ne i32 %291, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %292, label %297, label %293
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback293
	jmp	mz_zip_reader_extract_to_callback297
	.text
mz_zip_reader_extract_to_callback293:
	# %294 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 5
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %295 = load i16, i16* %294
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %296 = icmp ne i16 %295, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %296, label %422, label %297
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback297
	jmp	mz_zip_reader_extract_to_callback422
	.text
mz_zip_reader_extract_to_callback297:
	# %298 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %299 = getelementptr %struct.mz_zip_archive, i8* %298, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %300 = load i8*, i8** %299
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %301 = getelementptr %struct.mz_zip_internal_state_tag, i8* %300, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %302 = load i8*, i8** %301
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %303 = icmp ne i8* %302, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %303, label %304, label %346
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback346
	jmp	mz_zip_reader_extract_to_callback304
	.text
mz_zip_reader_extract_to_callback304:
	# %305 = load i8*, i8** %41
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %306 = load i8*, i8** %42
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %307 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %308 = load i8*, i8** %53
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %309 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %310 = load i64, i64* %309
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %311 = call i64 %305 (i8* %306, i64 %307, i8* %308, i64 %310)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %312 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %313 = load i64, i64* %312
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %314 = icmp ne i64 %311, %313
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %314, label %315, label %324
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback324
	jmp	mz_zip_reader_extract_to_callback315
	.text
mz_zip_reader_extract_to_callback315:
	# %316 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %316, i8** %20
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 31, i32* %21
	movq	$31, %rax
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	# %317 = load i8*, i8** %20
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %318 = icmp ne i8* %317, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %318, label %319, label %323
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback323
	jmp	mz_zip_reader_extract_to_callback319
	.text
mz_zip_reader_extract_to_callback319:
	# %320 = load i32, i32* %21
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %321 = load i8*, i8** %20
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %322 = getelementptr %struct.mz_zip_archive, i8* %321, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %320, i32* %322
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %323
	jmp	mz_zip_reader_extract_to_callback323
	.text
mz_zip_reader_extract_to_callback323:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %337
	jmp	mz_zip_reader_extract_to_callback337
	.text
mz_zip_reader_extract_to_callback324:
	# %325 = load i32, i32* %43
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %326 = and i32 %325, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %327 = icmp ne i32 %326, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %327, label %336, label %328
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback328
	jmp	mz_zip_reader_extract_to_callback336
	.text
mz_zip_reader_extract_to_callback328:
	# %329 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %330 = zext i32 %329 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %331 = load i8*, i8** %53
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %332 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %333 = load i64, i64* %332
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %334 = call i64 @mz_crc32 (i64 %330, i8* %331, i64 %333)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %335 = trunc i64 %334 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %335, i32* %45
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %336
	jmp	mz_zip_reader_extract_to_callback336
	.text
mz_zip_reader_extract_to_callback336:
	# br label %337
	jmp	mz_zip_reader_extract_to_callback337
	.text
mz_zip_reader_extract_to_callback337:
	# %338 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %339 = load i64, i64* %338
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %340 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %341 = add i64 %340, %339
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %341, i64* %51
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# %342 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 7
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %343 = load i64, i64* %342
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %344 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %345 = add i64 %344, %343
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %345, i64* %50
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %49
	movq	$0, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %421
	jmp	mz_zip_reader_extract_to_callback421
	.text
mz_zip_reader_extract_to_callback346:
	# br label %347
	jmp	mz_zip_reader_extract_to_callback347
	.text
mz_zip_reader_extract_to_callback347:
	# %348 = load i64, i64* %49
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %349 = icmp ne i64 %348, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %349, label %350, label %420
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback420
	jmp	mz_zip_reader_extract_to_callback350
	.text
mz_zip_reader_extract_to_callback350:
	# %351 = load i64, i64* %46
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %352 = load i64, i64* %49
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %353 = icmp ult i64 %351, %352
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %353, label %354, label %356
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback356
	jmp	mz_zip_reader_extract_to_callback354
	.text
mz_zip_reader_extract_to_callback354:
	# %355 = load i64, i64* %46
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# br label %358
	movq	%r9, %rdx
	jmp	mz_zip_reader_extract_to_callback358
	.text
mz_zip_reader_extract_to_callback356:
	# %357 = load i64, i64* %49
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# br label %358
	movq	%r8, %rdx
	jmp	mz_zip_reader_extract_to_callback358
	.text
mz_zip_reader_extract_to_callback358:
	# %359 = phi i64 [%355, %354], [%357, %356]
	# store i64 %359, i64* %48
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# %360 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %361 = getelementptr %struct.mz_zip_archive, i8* %360, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %362 = load i8*, i8** %361
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %363 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %364 = getelementptr %struct.mz_zip_archive, i8* %363, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %365 = load i8*, i8** %364
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %366 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %367 = load i8*, i8** %53
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %368 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %369 = call i64 %362 (i8* %365, i64 %366, i8* %367, i64 %368)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %370 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %371 = icmp ne i64 %369, %370
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %371, label %372, label %381
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback381
	jmp	mz_zip_reader_extract_to_callback372
	.text
mz_zip_reader_extract_to_callback372:
	# %373 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %373, i8** %22
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %23
	movq	$20, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %374 = load i8*, i8** %22
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %375 = icmp ne i8* %374, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %375, label %376, label %380
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback380
	jmp	mz_zip_reader_extract_to_callback376
	.text
mz_zip_reader_extract_to_callback376:
	# %377 = load i32, i32* %23
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %378 = load i8*, i8** %22
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %379 = getelementptr %struct.mz_zip_archive, i8* %378, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %377, i32* %379
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %380
	jmp	mz_zip_reader_extract_to_callback380
	.text
mz_zip_reader_extract_to_callback380:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %420
	jmp	mz_zip_reader_extract_to_callback420
	.text
mz_zip_reader_extract_to_callback381:
	# %382 = load i32, i32* %43
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %383 = and i32 %382, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %384 = icmp ne i32 %383, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %384, label %392, label %385
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback385
	jmp	mz_zip_reader_extract_to_callback392
	.text
mz_zip_reader_extract_to_callback385:
	# %386 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %387 = zext i32 %386 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %388 = load i8*, i8** %53
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %389 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %390 = call i64 @mz_crc32 (i64 %387, i8* %388, i64 %389)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %391 = trunc i64 %390 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %391, i32* %45
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %392
	jmp	mz_zip_reader_extract_to_callback392
	.text
mz_zip_reader_extract_to_callback392:
	# %393 = load i8*, i8** %41
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %394 = load i8*, i8** %42
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %395 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %396 = load i8*, i8** %53
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %397 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %398 = call i64 %393 (i8* %394, i64 %395, i8* %396, i64 %397)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %399 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %400 = icmp ne i64 %398, %399
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %400, label %401, label %410
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback410
	jmp	mz_zip_reader_extract_to_callback401
	.text
mz_zip_reader_extract_to_callback401:
	# %402 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %402, i8** %24
	movq	%rdx, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 31, i32* %25
	movq	$31, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# %403 = load i8*, i8** %24
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %404 = icmp ne i8* %403, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %404, label %405, label %409
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback409
	jmp	mz_zip_reader_extract_to_callback405
	.text
mz_zip_reader_extract_to_callback405:
	# %406 = load i32, i32* %25
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %407 = load i8*, i8** %24
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %408 = getelementptr %struct.mz_zip_archive, i8* %407, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %406, i32* %408
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %409
	jmp	mz_zip_reader_extract_to_callback409
	.text
mz_zip_reader_extract_to_callback409:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %420
	jmp	mz_zip_reader_extract_to_callback420
	.text
mz_zip_reader_extract_to_callback410:
	# %411 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %412 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %413 = add i64 %412, %411
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %413, i64* %51
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# %414 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %415 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %416 = add i64 %415, %414
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %416, i64* %50
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# %417 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %418 = load i64, i64* %49
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %419 = sub i64 %418, %417
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %419, i64* %49
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %347
	jmp	mz_zip_reader_extract_to_callback347
	.text
mz_zip_reader_extract_to_callback420:
	# br label %421
	jmp	mz_zip_reader_extract_to_callback421
	.text
mz_zip_reader_extract_to_callback421:
	# br label %571
	jmp	mz_zip_reader_extract_to_callback571
	.text
mz_zip_reader_extract_to_callback422:
	# br label %423
	jmp	mz_zip_reader_extract_to_callback423
	.text
mz_zip_reader_extract_to_callback423:
	# %424 = getelementptr %struct.tinfl_decompressor_tag, i8* %57, i32 0, i32 0
	movq	-392(%rbp), %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %424
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %425
	jmp	mz_zip_reader_extract_to_callback425
	.text
mz_zip_reader_extract_to_callback425:
	# %426 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %427 = getelementptr %struct.mz_zip_archive, i8* %426, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %428 = load i8*, i8** %427
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %429 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %430 = getelementptr %struct.mz_zip_archive, i8* %429, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %431 = load i8*, i8** %430
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %432 = call i8* %428 (i8* %431, i64 1, i64 32768)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$32768, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %432, i8** %54
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movq	%rax, (%rcx)
	# %433 = icmp eq i8* null, %432
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %433, label %434, label %443
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback443
	jmp	mz_zip_reader_extract_to_callback434
	.text
mz_zip_reader_extract_to_callback434:
	# %435 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %435, i8** %26
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %27
	movq	$16, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# %436 = load i8*, i8** %26
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %437 = icmp ne i8* %436, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %437, label %438, label %442
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback442
	jmp	mz_zip_reader_extract_to_callback438
	.text
mz_zip_reader_extract_to_callback438:
	# %439 = load i32, i32* %27
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %440 = load i8*, i8** %26
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %441 = getelementptr %struct.mz_zip_archive, i8* %440, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %439, i32* %441
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %442
	jmp	mz_zip_reader_extract_to_callback442
	.text
mz_zip_reader_extract_to_callback442:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %570
	jmp	mz_zip_reader_extract_to_callback570
	.text
mz_zip_reader_extract_to_callback443:
	# br label %444
	jmp	mz_zip_reader_extract_to_callback444
	.text
mz_zip_reader_extract_to_callback444:
	# %445 = load i8*, i8** %54
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %446 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %447 = and i64 %446, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %448 = getelementptr i8, i8* %445, i64 %447
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %448, i8** %58
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %449 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %450 = and i64 %449, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %451 = sub i64 32768, %450
	movq	$32768, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %451, i64* %60
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %452 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %453 = icmp ne i64 %452, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %453, label %499, label %454
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback454
	jmp	mz_zip_reader_extract_to_callback499
	.text
mz_zip_reader_extract_to_callback454:
	# %455 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %456 = getelementptr %struct.mz_zip_archive, i8* %455, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %457 = load i8*, i8** %456
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %458 = getelementptr %struct.mz_zip_internal_state_tag, i8* %457, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %459 = load i8*, i8** %458
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %460 = icmp ne i8* %459, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %460, label %499, label %461
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback461
	jmp	mz_zip_reader_extract_to_callback499
	.text
mz_zip_reader_extract_to_callback461:
	# %462 = load i64, i64* %46
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %463 = load i64, i64* %49
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %464 = icmp ult i64 %462, %463
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %464, label %465, label %467
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback467
	jmp	mz_zip_reader_extract_to_callback465
	.text
mz_zip_reader_extract_to_callback465:
	# %466 = load i64, i64* %46
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# br label %469
	movq	%r11, %rdx
	jmp	mz_zip_reader_extract_to_callback469
	.text
mz_zip_reader_extract_to_callback467:
	# %468 = load i64, i64* %49
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# br label %469
	movq	%r10, %rdx
	jmp	mz_zip_reader_extract_to_callback469
	.text
mz_zip_reader_extract_to_callback469:
	# %470 = phi i64 [%466, %465], [%468, %467]
	# store i64 %470, i64* %48
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# %471 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %472 = getelementptr %struct.mz_zip_archive, i8* %471, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %473 = load i8*, i8** %472
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %474 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %475 = getelementptr %struct.mz_zip_archive, i8* %474, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %476 = load i8*, i8** %475
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %477 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %478 = load i8*, i8** %53
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %479 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %480 = call i64 %473 (i8* %476, i64 %477, i8* %478, i64 %479)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %481 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %482 = icmp ne i64 %480, %481
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %482, label %483, label %492
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback492
	jmp	mz_zip_reader_extract_to_callback483
	.text
mz_zip_reader_extract_to_callback483:
	# %484 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %484, i8** %28
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %29
	movq	$20, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# %485 = load i8*, i8** %28
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %486 = icmp ne i8* %485, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %486, label %487, label %491
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback491
	jmp	mz_zip_reader_extract_to_callback487
	.text
mz_zip_reader_extract_to_callback487:
	# %488 = load i32, i32* %29
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %489 = load i8*, i8** %28
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %490 = getelementptr %struct.mz_zip_archive, i8* %489, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %488, i32* %490
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %491
	jmp	mz_zip_reader_extract_to_callback491
	.text
mz_zip_reader_extract_to_callback491:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %569
	jmp	mz_zip_reader_extract_to_callback569
	.text
mz_zip_reader_extract_to_callback492:
	# %493 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %494 = load i64, i64* %51
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %495 = add i64 %494, %493
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %495, i64* %51
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# %496 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %497 = load i64, i64* %49
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %498 = sub i64 %497, %496
	movq	%rsi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %498, i64* %49
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %47
	movq	$0, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %499
	jmp	mz_zip_reader_extract_to_callback499
	.text
mz_zip_reader_extract_to_callback499:
	# %500 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %500, i64* %59
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %501 = load i8*, i8** %53
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %502 = load i64, i64* %47
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %503 = getelementptr i8, i8* %501, i64 %502
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %504 = load i8*, i8** %54
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %505 = load i8*, i8** %58
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %506 = load i64, i64* %49
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %507 = icmp ne i64 %506, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setne	%r9b
	# %508 = zext i1 %507 to i64
	movq	%r9, %rax
	movq	%rax, %rdx
	# %509 = select i1 %507, i32 2, i32 0
	movq	%r9, %rcx
	movq	$2, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# %510 = call i32 @tinfl_decompress (i8* %57, i8* %503, i8* %59, i8* %504, i8* %505, i8* %60, i32 %509)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	-392(%rbp), %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_decompress
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %510, i32* %44
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# %511 = load i64, i64* %59
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %512 = load i64, i64* %48
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %513 = sub i64 %512, %511
	movq	%rdx, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %513, i64* %48
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# %514 = load i64, i64* %59
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %515 = load i64, i64* %47
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %516 = add i64 %515, %514
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %516, i64* %47
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# %517 = load i64, i64* %60
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %518 = icmp ne i64 %517, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %518, label %519, label %560
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback560
	jmp	mz_zip_reader_extract_to_callback519
	.text
mz_zip_reader_extract_to_callback519:
	# %520 = load i8*, i8** %41
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %521 = load i8*, i8** %42
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %522 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %523 = load i8*, i8** %58
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %524 = load i64, i64* %60
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %525 = call i64 %520 (i8* %521, i64 %522, i8* %523, i64 %524)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %526 = load i64, i64* %60
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %527 = icmp ne i64 %525, %526
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %527, label %528, label %537
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback537
	jmp	mz_zip_reader_extract_to_callback528
	.text
mz_zip_reader_extract_to_callback528:
	# %529 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %529, i8** %30
	movq	%rdx, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 31, i32* %31
	movq	$31, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %530 = load i8*, i8** %30
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %531 = icmp ne i8* %530, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %531, label %532, label %536
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback536
	jmp	mz_zip_reader_extract_to_callback532
	.text
mz_zip_reader_extract_to_callback532:
	# %533 = load i32, i32* %31
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %534 = load i8*, i8** %30
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %535 = getelementptr %struct.mz_zip_archive, i8* %534, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %533, i32* %535
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %536
	jmp	mz_zip_reader_extract_to_callback536
	.text
mz_zip_reader_extract_to_callback536:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %569
	jmp	mz_zip_reader_extract_to_callback569
	.text
mz_zip_reader_extract_to_callback537:
	# %538 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %539 = zext i32 %538 to i64
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %540 = load i8*, i8** %58
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %541 = load i64, i64* %60
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %542 = call i64 @mz_crc32 (i64 %539, i8* %540, i64 %541)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %543 = trunc i64 %542 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %543, i32* %45
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# %544 = load i64, i64* %60
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %545 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %546 = add i64 %545, %544
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %546, i64* %50
	movq	%rsi, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# %547 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 8
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %548 = load i64, i64* %547
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %549 = icmp ugt i64 %546, %548
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %549, label %550, label %559
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback559
	jmp	mz_zip_reader_extract_to_callback550
	.text
mz_zip_reader_extract_to_callback550:
	# %551 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %551, i8** %32
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 11, i32* %33
	movq	$11, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %552 = load i8*, i8** %32
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %553 = icmp ne i8* %552, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %553, label %554, label %558
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback558
	jmp	mz_zip_reader_extract_to_callback554
	.text
mz_zip_reader_extract_to_callback554:
	# %555 = load i32, i32* %33
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %556 = load i8*, i8** %32
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %557 = getelementptr %struct.mz_zip_archive, i8* %556, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %555, i32* %557
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %558
	jmp	mz_zip_reader_extract_to_callback558
	.text
mz_zip_reader_extract_to_callback558:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %569
	jmp	mz_zip_reader_extract_to_callback569
	.text
mz_zip_reader_extract_to_callback559:
	# br label %560
	jmp	mz_zip_reader_extract_to_callback560
	.text
mz_zip_reader_extract_to_callback560:
	# br label %561
	jmp	mz_zip_reader_extract_to_callback561
	.text
mz_zip_reader_extract_to_callback561:
	# %562 = load i32, i32* %44
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %563 = icmp eq i32 %562, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %563, label %567, label %564
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rdx
	je	mz_zip_reader_extract_to_callback564
	jmp	mz_zip_reader_extract_to_callback567
	.text
mz_zip_reader_extract_to_callback564:
	# %565 = load i32, i32* %44
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %566 = icmp eq i32 %565, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br label %567
	movq	%rbx, %rdx
	jmp	mz_zip_reader_extract_to_callback567
	.text
mz_zip_reader_extract_to_callback567:
	# %568 = phi i1 [1, %561], [%566, %564]
	# br i1 %568, label %444, label %569
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback569
	jmp	mz_zip_reader_extract_to_callback444
	.text
mz_zip_reader_extract_to_callback569:
	# br label %570
	jmp	mz_zip_reader_extract_to_callback570
	.text
mz_zip_reader_extract_to_callback570:
	# br label %571
	jmp	mz_zip_reader_extract_to_callback571
	.text
mz_zip_reader_extract_to_callback571:
	# %572 = load i32, i32* %44
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %573 = icmp eq i32 %572, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %573, label %574, label %608
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback608
	jmp	mz_zip_reader_extract_to_callback574
	.text
mz_zip_reader_extract_to_callback574:
	# %575 = load i32, i32* %43
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %576 = and i32 %575, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %577 = icmp ne i32 %576, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %577, label %608, label %578
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback578
	jmp	mz_zip_reader_extract_to_callback608
	.text
mz_zip_reader_extract_to_callback578:
	# %579 = load i64, i64* %50
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %580 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 8
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %581 = load i64, i64* %580
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %582 = icmp ne i64 %579, %581
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %582, label %583, label %592
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback592
	jmp	mz_zip_reader_extract_to_callback583
	.text
mz_zip_reader_extract_to_callback583:
	# %584 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %584, i8** %34
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 13, i32* %35
	movq	$13, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %585 = load i8*, i8** %34
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %586 = icmp ne i8* %585, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %586, label %587, label %591
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback591
	jmp	mz_zip_reader_extract_to_callback587
	.text
mz_zip_reader_extract_to_callback587:
	# %588 = load i32, i32* %35
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %589 = load i8*, i8** %34
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %590 = getelementptr %struct.mz_zip_archive, i8* %589, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %588, i32* %590
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %591
	jmp	mz_zip_reader_extract_to_callback591
	.text
mz_zip_reader_extract_to_callback591:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %607
	jmp	mz_zip_reader_extract_to_callback607
	.text
mz_zip_reader_extract_to_callback592:
	# %593 = load i32, i32* %45
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %594 = getelementptr %struct.mz_zip_archive_file_stat, i8* %52, i32 0, i32 6
	movq	-360(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %595 = load i32, i32* %594
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %596 = icmp ne i32 %593, %595
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %596, label %597, label %606
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback606
	jmp	mz_zip_reader_extract_to_callback597
	.text
mz_zip_reader_extract_to_callback597:
	# %598 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %598, i8** %36
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 11, i32* %37
	movq	$11, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %599 = load i8*, i8** %36
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %600 = icmp ne i8* %599, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %600, label %601, label %605
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback605
	jmp	mz_zip_reader_extract_to_callback601
	.text
mz_zip_reader_extract_to_callback601:
	# %602 = load i32, i32* %37
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %603 = load i8*, i8** %36
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %604 = getelementptr %struct.mz_zip_archive, i8* %603, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %602, i32* %604
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %605
	jmp	mz_zip_reader_extract_to_callback605
	.text
mz_zip_reader_extract_to_callback605:
	# store i32 -1, i32* %44
	movq	$-1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %606
	jmp	mz_zip_reader_extract_to_callback606
	.text
mz_zip_reader_extract_to_callback606:
	# br label %607
	jmp	mz_zip_reader_extract_to_callback607
	.text
mz_zip_reader_extract_to_callback607:
	# br label %608
	jmp	mz_zip_reader_extract_to_callback608
	.text
mz_zip_reader_extract_to_callback608:
	# %609 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %610 = getelementptr %struct.mz_zip_archive, i8* %609, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %611 = load i8*, i8** %610
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %612 = getelementptr %struct.mz_zip_internal_state_tag, i8* %611, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %613 = load i8*, i8** %612
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %614 = icmp ne i8* %613, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %614, label %623, label %615
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback615
	jmp	mz_zip_reader_extract_to_callback623
	.text
mz_zip_reader_extract_to_callback615:
	# %616 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %617 = getelementptr %struct.mz_zip_archive, i8* %616, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %618 = load i8*, i8** %617
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %619 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %620 = getelementptr %struct.mz_zip_archive, i8* %619, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %621 = load i8*, i8** %620
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %622 = load i8*, i8** %53
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %618 (i8* %621, i8* %622)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %623
	jmp	mz_zip_reader_extract_to_callback623
	.text
mz_zip_reader_extract_to_callback623:
	# %624 = load i8*, i8** %54
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %625 = icmp ne i8* %624, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %625, label %626, label %634
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_callback634
	jmp	mz_zip_reader_extract_to_callback626
	.text
mz_zip_reader_extract_to_callback626:
	# %627 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %628 = getelementptr %struct.mz_zip_archive, i8* %627, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %629 = load i8*, i8** %628
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %630 = load i8*, i8** %39
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %631 = getelementptr %struct.mz_zip_archive, i8* %630, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %632 = load i8*, i8** %631
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %633 = load i8*, i8** %54
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %629 (i8* %632, i8* %633)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %634
	jmp	mz_zip_reader_extract_to_callback634
	.text
mz_zip_reader_extract_to_callback634:
	# %635 = load i32, i32* %44
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %636 = icmp eq i32 %635, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %637 = zext i1 %636 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %637, i32* %38
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %638
	jmp	mz_zip_reader_extract_to_callback638
	.text
mz_zip_reader_extract_to_callback638:
	# %639 = load i32, i32* %38
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %639
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_file_to_callback
_mz_zip_reader_extract_file_to_callback:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%rsi
	popq	%rdx
	popq	%r13
	popq	%r14
	popq	%r15
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %7
	movq	%r15, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %8
	movq	%r14, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %9
	movq	%r13, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %10
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %11
	movq	%rsi, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %13 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %14 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = load i32, i32* %11
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %16 = call i32 @mz_zip_reader_locate_file_v2 (i8* %13, i8* %14, i8* null, i32 %15, i8* %12)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %17 = icmp ne i32 %16, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %17, label %19, label %18
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_file_to_callback18
	jmp	mz_zip_reader_extract_file_to_callback19
	.text
mz_zip_reader_extract_file_to_callback18:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %26
	jmp	mz_zip_reader_extract_file_to_callback26
	.text
mz_zip_reader_extract_file_to_callback19:
	# %20 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %21 = load i32, i32* %12
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %22 = load i8*, i8** %9
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %23 = load i8*, i8** %10
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %24 = load i32, i32* %11
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %25 = call i32 @mz_zip_reader_extract_to_callback (i8* %20, i32 %21, i8* %22, i8* %23, i32 %24)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_callback
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %25, i32* %6
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %26
	jmp	mz_zip_reader_extract_file_to_callback26
	.text
mz_zip_reader_extract_file_to_callback26:
	# %27 = load i32, i32* %6
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %27
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_iter_new
_mz_zip_reader_extract_iter_new:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$112, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %25 = alloca [8 x i32]
	subq	$32, %rsp
	movq	%rsp, %rbx
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %21
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %22
	movq	-16(%rbp), %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %23
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %27 = getelementptr [8 x i32], i8* %25, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %27, i8** %26
	movq	%rbx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %28 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %29 = icmp ne i8* %28, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %29, label %30, label %35
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new35
	jmp	mz_zip_reader_extract_iter_new30
	.text
mz_zip_reader_extract_iter_new30:
	# %31 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %32 = getelementptr %struct.mz_zip_archive, i8* %31, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %33 = load i8*, i8** %32
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %34 = icmp ne i8* %33, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %34, label %36, label %35
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new35
	jmp	mz_zip_reader_extract_iter_new36
	.text
mz_zip_reader_extract_iter_new35:
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new36:
	# %37 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %38 = getelementptr %struct.mz_zip_archive, i8* %37, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %39 = load i8*, i8** %38
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %41 = getelementptr %struct.mz_zip_archive, i8* %40, i32 0, i32 10
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %42 = load i8*, i8** %41
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %43 = call i8* %39 (i8* %42, i64 1, i64 9584)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$9584, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i8* %43, i8** %24
	movq	%rbx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %44 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %45 = icmp ne i8* %44, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %45, label %55, label %46
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new46
	jmp	mz_zip_reader_extract_iter_new55
	.text
mz_zip_reader_extract_iter_new46:
	# %47 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %47, i8** %4
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %5
	movq	$16, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %48 = load i8*, i8** %4
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = icmp ne i8* %48, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %49, label %50, label %54
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new54
	jmp	mz_zip_reader_extract_iter_new50
	.text
mz_zip_reader_extract_iter_new50:
	# %51 = load i32, i32* %5
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %52 = load i8*, i8** %4
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = getelementptr %struct.mz_zip_archive, i8* %52, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %51, i32* %53
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %54
	jmp	mz_zip_reader_extract_iter_new54
	.text
mz_zip_reader_extract_iter_new54:
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new55:
	# %56 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %57 = load i32, i32* %22
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %58 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %59 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %58, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %60 = call i32 @mz_zip_reader_file_stat (i8* %56, i32 %57, i8* %59)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_file_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %61 = icmp ne i32 %60, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %61, label %70, label %62
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new62
	jmp	mz_zip_reader_extract_iter_new70
	.text
mz_zip_reader_extract_iter_new62:
	# %63 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = getelementptr %struct.mz_zip_archive, i8* %63, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %65 = load i8*, i8** %64
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %66 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = getelementptr %struct.mz_zip_archive, i8* %66, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %68 = load i8*, i8** %67
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %69 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %65 (i8* %68, i8* %69)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new70:
	# %71 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %72 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %71, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %73 = getelementptr %struct.mz_zip_archive_file_stat, i8* %72, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %74 = load i16, i16* %73
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %75 = zext i16 %74 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %76 = and i32 %75, 97
	movq	%rbx, %rax
	movq	$97, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %77 = icmp ne i32 %76, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %77, label %78, label %94
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new94
	jmp	mz_zip_reader_extract_iter_new78
	.text
mz_zip_reader_extract_iter_new78:
	# %79 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %79, i8** %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 5, i32* %7
	movq	$5, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %80 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %81 = icmp ne i8* %80, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %81, label %82, label %86
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new86
	jmp	mz_zip_reader_extract_iter_new82
	.text
mz_zip_reader_extract_iter_new82:
	# %83 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %84 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %85 = getelementptr %struct.mz_zip_archive, i8* %84, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %83, i32* %85
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %86
	jmp	mz_zip_reader_extract_iter_new86
	.text
mz_zip_reader_extract_iter_new86:
	# %87 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = getelementptr %struct.mz_zip_archive, i8* %87, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %89 = load i8*, i8** %88
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %91 = getelementptr %struct.mz_zip_archive, i8* %90, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %92 = load i8*, i8** %91
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %93 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %89 (i8* %92, i8* %93)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new94:
	# %95 = load i32, i32* %23
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %96 = and i32 %95, 1024
	movq	%rbx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %97 = icmp ne i32 %96, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %97, label %128, label %98
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new98
	jmp	mz_zip_reader_extract_iter_new128
	.text
mz_zip_reader_extract_iter_new98:
	# %99 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %100 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %99, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %101 = getelementptr %struct.mz_zip_archive_file_stat, i8* %100, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %102 = load i16, i16* %101
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %103 = zext i16 %102 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %104 = icmp ne i32 %103, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %104, label %105, label %128
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new128
	jmp	mz_zip_reader_extract_iter_new105
	.text
mz_zip_reader_extract_iter_new105:
	# %106 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %107 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %106, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %108 = getelementptr %struct.mz_zip_archive_file_stat, i8* %107, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %109 = load i16, i16* %108
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %110 = zext i16 %109 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %111 = icmp ne i32 %110, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %111, label %112, label %128
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new128
	jmp	mz_zip_reader_extract_iter_new112
	.text
mz_zip_reader_extract_iter_new112:
	# %113 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %113, i8** %8
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 4, i32* %9
	movq	$4, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %114 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = icmp ne i8* %114, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %115, label %116, label %120
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new120
	jmp	mz_zip_reader_extract_iter_new116
	.text
mz_zip_reader_extract_iter_new116:
	# %117 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %118 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %119 = getelementptr %struct.mz_zip_archive, i8* %118, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %117, i32* %119
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %120
	jmp	mz_zip_reader_extract_iter_new120
	.text
mz_zip_reader_extract_iter_new120:
	# %121 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %122 = getelementptr %struct.mz_zip_archive, i8* %121, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %123 = load i8*, i8** %122
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %124 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = getelementptr %struct.mz_zip_archive, i8* %124, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %126 = load i8*, i8** %125
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %127 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %123 (i8* %126, i8* %127)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new128:
	# %129 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %130 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %131 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %130, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %129, i8** %131
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %132 = load i32, i32* %23
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %133 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %134 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %133, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %132, i32* %134
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %135 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %136 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %135, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %136
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %137 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %138 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %137, i32 0, i32 14
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %138
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %139 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %140 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %139, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %140
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %141 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %142 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %141, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %142
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %143 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %144 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %143, i32 0, i32 10
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* null, i8** %144
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %145 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %146 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %145, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* null, i8** %146
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %147 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %148 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %147, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %148
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %149 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %150 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %149, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %151 = getelementptr %struct.mz_zip_archive_file_stat, i8* %150, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %152 = load i64, i64* %151
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %153 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %154 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %153, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 %152, i64* %154
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %155 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %156 = getelementptr %struct.mz_zip_archive, i8* %155, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %157 = load i8*, i8** %156
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %158 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %159 = getelementptr %struct.mz_zip_archive, i8* %158, i32 0, i32 14
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %160 = load i8*, i8** %159
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %161 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %162 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %161, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %163 = load i64, i64* %162
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %164 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %165 = call i64 %157 (i8* %160, i64 %163, i8* %164, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %166 = icmp ne i64 %165, 30
	movq	%rbx, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %166, label %167, label %183
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new183
	jmp	mz_zip_reader_extract_iter_new167
	.text
mz_zip_reader_extract_iter_new167:
	# %168 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %168, i8** %10
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %11
	movq	$20, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %169 = load i8*, i8** %10
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %170 = icmp ne i8* %169, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %170, label %171, label %175
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new175
	jmp	mz_zip_reader_extract_iter_new171
	.text
mz_zip_reader_extract_iter_new171:
	# %172 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %173 = load i8*, i8** %10
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %174 = getelementptr %struct.mz_zip_archive, i8* %173, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %172, i32* %174
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %175
	jmp	mz_zip_reader_extract_iter_new175
	.text
mz_zip_reader_extract_iter_new175:
	# %176 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %177 = getelementptr %struct.mz_zip_archive, i8* %176, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %178 = load i8*, i8** %177
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %179 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %180 = getelementptr %struct.mz_zip_archive, i8* %179, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %181 = load i8*, i8** %180
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %182 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %178 (i8* %181, i8* %182)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new183:
	# %184 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %185 = getelementptr i8, i8* %184, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %186 = load i8, i8* %185
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %187 = zext i8 %186 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %188 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %189 = getelementptr i8, i8* %188, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %190 = load i8, i8* %189
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %191 = zext i8 %190 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %192 = shl i32 %191, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %193 = or i32 %187, %192
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %194 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %195 = getelementptr i8, i8* %194, i64 2
	movq	%rbx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %196 = load i8, i8* %195
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %197 = zext i8 %196 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %198 = shl i32 %197, 16
	movq	%rbx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %199 = or i32 %193, %198
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %200 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %201 = getelementptr i8, i8* %200, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %202 = load i8, i8* %201
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %203 = zext i8 %202 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %204 = shl i32 %203, 24
	movq	%rbx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %205 = or i32 %199, %204
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %206 = icmp ne i32 %205, 67324752
	movq	%rbx, %rax
	movq	$67324752, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %206, label %207, label %223
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new223
	jmp	mz_zip_reader_extract_iter_new207
	.text
mz_zip_reader_extract_iter_new207:
	# %208 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %208, i8** %12
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %13
	movq	$9, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %209 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %210 = icmp ne i8* %209, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %210, label %211, label %215
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new215
	jmp	mz_zip_reader_extract_iter_new211
	.text
mz_zip_reader_extract_iter_new211:
	# %212 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %213 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %214 = getelementptr %struct.mz_zip_archive, i8* %213, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %212, i32* %214
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %215
	jmp	mz_zip_reader_extract_iter_new215
	.text
mz_zip_reader_extract_iter_new215:
	# %216 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %217 = getelementptr %struct.mz_zip_archive, i8* %216, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %218 = load i8*, i8** %217
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %219 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %220 = getelementptr %struct.mz_zip_archive, i8* %219, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %221 = load i8*, i8** %220
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %222 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %218 (i8* %221, i8* %222)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new223:
	# %224 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %225 = getelementptr i8, i8* %224, i64 26
	movq	%rbx, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %226 = getelementptr i8, i8* %225, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %227 = load i8, i8* %226
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %228 = zext i8 %227 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %229 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %230 = getelementptr i8, i8* %229, i64 26
	movq	%rbx, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %231 = getelementptr i8, i8* %230, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %232 = load i8, i8* %231
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %233 = zext i8 %232 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %234 = shl i32 %233, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %235 = or i32 %228, %234
	movq	%rsi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %236 = add i32 30, %235
	movq	$30, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %237 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %238 = getelementptr i8, i8* %237, i64 28
	movq	%rbx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %239 = getelementptr i8, i8* %238, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %240 = load i8, i8* %239
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %241 = zext i8 %240 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %242 = load i8*, i8** %26
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %243 = getelementptr i8, i8* %242, i64 28
	movq	%rdi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %244 = getelementptr i8, i8* %243, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %245 = load i8, i8* %244
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %246 = zext i8 %245 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %247 = shl i32 %246, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %248 = or i32 %241, %247
	movq	%rbx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %249 = add i32 %236, %248
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %250 = zext i32 %249 to i64
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %251 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %252 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %251, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %253 = load i64, i64* %252
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %254 = add i64 %253, %250
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %254, i64* %252
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %255 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %256 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %255, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %257 = load i64, i64* %256
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %258 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %259 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %258, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %260 = getelementptr %struct.mz_zip_archive_file_stat, i8* %259, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %261 = load i64, i64* %260
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %262 = add i64 %257, %261
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %263 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %264 = getelementptr %struct.mz_zip_archive, i8* %263, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %265 = load i64, i64* %264
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %266 = icmp ugt i64 %262, %265
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	seta	%bl
	# br i1 %266, label %267, label %283
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new283
	jmp	mz_zip_reader_extract_iter_new267
	.text
mz_zip_reader_extract_iter_new267:
	# %268 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %268, i8** %14
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %15
	movq	$9, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# %269 = load i8*, i8** %14
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %270 = icmp ne i8* %269, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %270, label %271, label %275
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new275
	jmp	mz_zip_reader_extract_iter_new271
	.text
mz_zip_reader_extract_iter_new271:
	# %272 = load i32, i32* %15
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %273 = load i8*, i8** %14
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %274 = getelementptr %struct.mz_zip_archive, i8* %273, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %272, i32* %274
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %275
	jmp	mz_zip_reader_extract_iter_new275
	.text
mz_zip_reader_extract_iter_new275:
	# %276 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %277 = getelementptr %struct.mz_zip_archive, i8* %276, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %278 = load i8*, i8** %277
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %279 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %280 = getelementptr %struct.mz_zip_archive, i8* %279, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %281 = load i8*, i8** %280
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %282 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %278 (i8* %281, i8* %282)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new283:
	# %284 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %285 = getelementptr %struct.mz_zip_archive, i8* %284, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %286 = load i8*, i8** %285
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %287 = getelementptr %struct.mz_zip_internal_state_tag, i8* %286, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %288 = load i8*, i8** %287
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %289 = icmp ne i8* %288, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %289, label %290, label %316
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new316
	jmp	mz_zip_reader_extract_iter_new290
	.text
mz_zip_reader_extract_iter_new290:
	# %291 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %292 = getelementptr %struct.mz_zip_archive, i8* %291, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %293 = load i8*, i8** %292
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %294 = getelementptr %struct.mz_zip_internal_state_tag, i8* %293, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %295 = load i8*, i8** %294
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %296 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %297 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %296, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %298 = load i64, i64* %297
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %299 = getelementptr i8, i8* %295, i64 %298
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %300 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %301 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %300, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %299, i8** %301
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %302 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %303 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %302, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %304 = getelementptr %struct.mz_zip_archive_file_stat, i8* %303, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %305 = load i64, i64* %304
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %306 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %307 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %306, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %305, i64* %307
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %308 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %309 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %308, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %305, i64* %309
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %310 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %311 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %310, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %312 = getelementptr %struct.mz_zip_archive_file_stat, i8* %311, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %313 = load i64, i64* %312
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %314 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %315 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %314, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %313, i64* %315
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %384
	jmp	mz_zip_reader_extract_iter_new384
	.text
mz_zip_reader_extract_iter_new316:
	# %317 = load i32, i32* %23
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %318 = and i32 %317, 1024
	movq	%rbx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %319 = icmp ne i32 %318, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %319, label %372, label %320
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new320
	jmp	mz_zip_reader_extract_iter_new372
	.text
mz_zip_reader_extract_iter_new320:
	# %321 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %322 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %321, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %323 = getelementptr %struct.mz_zip_archive_file_stat, i8* %322, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %324 = load i16, i16* %323
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %325 = icmp ne i16 %324, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %325, label %326, label %372
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new372
	jmp	mz_zip_reader_extract_iter_new326
	.text
mz_zip_reader_extract_iter_new326:
	# %327 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %328 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %327, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %329 = getelementptr %struct.mz_zip_archive_file_stat, i8* %328, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %330 = load i64, i64* %329
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %331 = icmp ult i64 %330, 65536
	movq	%rbx, %rax
	movq	$65536, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %331, label %332, label %337
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new337
	jmp	mz_zip_reader_extract_iter_new332
	.text
mz_zip_reader_extract_iter_new332:
	# %333 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %334 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %333, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %335 = getelementptr %struct.mz_zip_archive_file_stat, i8* %334, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %336 = load i64, i64* %335
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %338
	movq	%rdx, %rbx
	jmp	mz_zip_reader_extract_iter_new338
	.text
mz_zip_reader_extract_iter_new337:
	# br label %338
	movq	$65536, %rbx
	jmp	mz_zip_reader_extract_iter_new338
	.text
mz_zip_reader_extract_iter_new338:
	# %339 = phi i64 [%336, %332], [65536, %337]
	# %340 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %341 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %340, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %339, i64* %341
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %342 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %343 = getelementptr %struct.mz_zip_archive, i8* %342, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %344 = load i8*, i8** %343
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %345 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %346 = getelementptr %struct.mz_zip_archive, i8* %345, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %347 = load i8*, i8** %346
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %348 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %349 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %348, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %350 = load i64, i64* %349
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %351 = call i8* %344 (i8* %347, i64 1, i64 %350)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %352 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %353 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %352, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %351, i8** %353
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %354 = icmp eq i8* null, %351
	movq	$0, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %354, label %355, label %371
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new371
	jmp	mz_zip_reader_extract_iter_new355
	.text
mz_zip_reader_extract_iter_new355:
	# %356 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %356, i8** %16
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %17
	movq	$16, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %357 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %358 = icmp ne i8* %357, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %358, label %359, label %363
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new363
	jmp	mz_zip_reader_extract_iter_new359
	.text
mz_zip_reader_extract_iter_new359:
	# %360 = load i32, i32* %17
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %361 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %362 = getelementptr %struct.mz_zip_archive, i8* %361, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %360, i32* %362
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %363
	jmp	mz_zip_reader_extract_iter_new363
	.text
mz_zip_reader_extract_iter_new363:
	# %364 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %365 = getelementptr %struct.mz_zip_archive, i8* %364, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %366 = load i8*, i8** %365
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %367 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %368 = getelementptr %struct.mz_zip_archive, i8* %367, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %369 = load i8*, i8** %368
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %370 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %366 (i8* %369, i8* %370)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new371:
	# br label %375
	jmp	mz_zip_reader_extract_iter_new375
	.text
mz_zip_reader_extract_iter_new372:
	# %373 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %374 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %373, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %374
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %375
	jmp	mz_zip_reader_extract_iter_new375
	.text
mz_zip_reader_extract_iter_new375:
	# %376 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %377 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %376, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %377
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %378 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %379 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %378, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %380 = getelementptr %struct.mz_zip_archive_file_stat, i8* %379, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %381 = load i64, i64* %380
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %382 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %383 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %382, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %381, i64* %383
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %384
	jmp	mz_zip_reader_extract_iter_new384
	.text
mz_zip_reader_extract_iter_new384:
	# %385 = load i32, i32* %23
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %386 = and i32 %385, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %387 = icmp ne i32 %386, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %387, label %442, label %388
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new388
	jmp	mz_zip_reader_extract_iter_new442
	.text
mz_zip_reader_extract_iter_new388:
	# %389 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %390 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %389, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %391 = getelementptr %struct.mz_zip_archive_file_stat, i8* %390, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %392 = load i16, i16* %391
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %393 = icmp ne i16 %392, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %393, label %394, label %442
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new442
	jmp	mz_zip_reader_extract_iter_new394
	.text
mz_zip_reader_extract_iter_new394:
	# br label %395
	jmp	mz_zip_reader_extract_iter_new395
	.text
mz_zip_reader_extract_iter_new395:
	# %396 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %397 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %396, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %398 = getelementptr %struct.tinfl_decompressor_tag, i8* %397, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$8372, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %398
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %399
	jmp	mz_zip_reader_extract_iter_new399
	.text
mz_zip_reader_extract_iter_new399:
	# %400 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %401 = getelementptr %struct.mz_zip_archive, i8* %400, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %402 = load i8*, i8** %401
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %403 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %404 = getelementptr %struct.mz_zip_archive, i8* %403, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %405 = load i8*, i8** %404
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %406 = call i8* %402 (i8* %405, i64 1, i64 32768)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$32768, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %407 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %408 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %407, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %406, i8** %408
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %409 = icmp eq i8* null, %406
	movq	$0, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %409, label %410, label %441
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new441
	jmp	mz_zip_reader_extract_iter_new410
	.text
mz_zip_reader_extract_iter_new410:
	# %411 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %411, i8** %18
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %19
	movq	$16, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %412 = load i8*, i8** %18
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %413 = icmp ne i8* %412, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %413, label %414, label %418
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new418
	jmp	mz_zip_reader_extract_iter_new414
	.text
mz_zip_reader_extract_iter_new414:
	# %415 = load i32, i32* %19
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %416 = load i8*, i8** %18
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %417 = getelementptr %struct.mz_zip_archive, i8* %416, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %415, i32* %417
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %418
	jmp	mz_zip_reader_extract_iter_new418
	.text
mz_zip_reader_extract_iter_new418:
	# %419 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %420 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %419, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %421 = load i8*, i8** %420
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %422 = icmp ne i8* %421, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %422, label %423, label %433
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_new433
	jmp	mz_zip_reader_extract_iter_new423
	.text
mz_zip_reader_extract_iter_new423:
	# %424 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %425 = getelementptr %struct.mz_zip_archive, i8* %424, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %426 = load i8*, i8** %425
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %427 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %428 = getelementptr %struct.mz_zip_archive, i8* %427, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %429 = load i8*, i8** %428
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %430 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %431 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %430, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %432 = load i8*, i8** %431
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %426 (i8* %429, i8* %432)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %433
	jmp	mz_zip_reader_extract_iter_new433
	.text
mz_zip_reader_extract_iter_new433:
	# %434 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %435 = getelementptr %struct.mz_zip_archive, i8* %434, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %436 = load i8*, i8** %435
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %437 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %438 = getelementptr %struct.mz_zip_archive, i8* %437, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %439 = load i8*, i8** %438
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %440 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %436 (i8* %439, i8* %440)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %20
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new441:
	# br label %442
	jmp	mz_zip_reader_extract_iter_new442
	.text
mz_zip_reader_extract_iter_new442:
	# %443 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %443, i8** %20
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %444
	jmp	mz_zip_reader_extract_iter_new444
	.text
mz_zip_reader_extract_iter_new444:
	# %445 = load i8*, i8** %20
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %445
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_file_iter_new
_mz_zip_reader_extract_file_iter_new:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rbx
	popq	%rsi
	popq	%r11
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %7
	movq	%rbx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %9 = load i8*, i8** %5
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %10 = load i8*, i8** %6
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %11 = load i32, i32* %7
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %12 = call i32 @mz_zip_reader_locate_file_v2 (i8* %9, i8* %10, i8* null, i32 %11, i8* %8)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %13 = icmp ne i32 %12, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %13, label %15, label %14
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_file_iter_new14
	jmp	mz_zip_reader_extract_file_iter_new15
	.text
mz_zip_reader_extract_file_iter_new14:
	# store i8* null, i8** %4
	movq	$0, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %20
	jmp	mz_zip_reader_extract_file_iter_new20
	.text
mz_zip_reader_extract_file_iter_new15:
	# %16 = load i8*, i8** %5
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %17 = load i32, i32* %8
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %18 = load i32, i32* %7
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %19 = call i8* @mz_zip_reader_extract_iter_new (i8* %16, i32 %17, i32 %18)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_iter_new
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %19, i8** %4
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %20
	jmp	mz_zip_reader_extract_file_iter_new20
	.text
mz_zip_reader_extract_file_iter_new20:
	# %21 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %21
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_iter_read
_mz_zip_reader_extract_iter_read:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$104, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%rbx
	popq	%rsi
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %13 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %14 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %16 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %17 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %18 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# store i8* %0, i8** %11
	movq	%rsi, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %12
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %13
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %14
	movq	$0, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# %19 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %20 = icmp ne i8* %19, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %20, label %21, label %36
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read36
	jmp	mz_zip_reader_extract_iter_read21
	.text
mz_zip_reader_extract_iter_read21:
	# %22 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %23 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %22, i32 0, i32 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %24 = load i8*, i8** %23
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %25 = icmp ne i8* %24, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %25, label %26, label %36
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read36
	jmp	mz_zip_reader_extract_iter_read26
	.text
mz_zip_reader_extract_iter_read26:
	# %27 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %28 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %27, i32 0, i32 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %29 = load i8*, i8** %28
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %30 = getelementptr %struct.mz_zip_archive, i8* %29, i32 0, i32 15
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %31 = load i8*, i8** %30
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %32 = icmp ne i8* %31, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %32, label %33, label %36
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read36
	jmp	mz_zip_reader_extract_iter_read33
	.text
mz_zip_reader_extract_iter_read33:
	# %34 = load i8*, i8** %12
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %35 = icmp ne i8* %34, null
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %35, label %37, label %36
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read36
	jmp	mz_zip_reader_extract_iter_read37
	.text
mz_zip_reader_extract_iter_read36:
	# store i64 0, i64* %10
	movq	$0, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %396
	jmp	mz_zip_reader_extract_iter_read396
	.text
mz_zip_reader_extract_iter_read37:
	# %38 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %39 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %38, i32 0, i32 1
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %40 = load i32, i32* %39
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %41 = and i32 %40, 1024
	movq	%rdi, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %42 = icmp ne i32 %41, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %42, label %49, label %43
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read43
	jmp	mz_zip_reader_extract_iter_read49
	.text
mz_zip_reader_extract_iter_read43:
	# %44 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %45 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %44, i32 0, i32 9
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %46 = getelementptr %struct.mz_zip_archive_file_stat, i8* %45, i32 0, i32 5
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %47 = load i16, i16* %46
	movq	%rdi, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %48 = icmp ne i16 %47, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %48, label %153, label %49
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read49
	jmp	mz_zip_reader_extract_iter_read153
	.text
mz_zip_reader_extract_iter_read49:
	# %50 = load i64, i64* %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %51 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %52 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %51, i32 0, i32 6
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %53 = load i64, i64* %52
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %54 = icmp ult i64 %50, %53
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %54, label %55, label %57
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read57
	jmp	mz_zip_reader_extract_iter_read55
	.text
mz_zip_reader_extract_iter_read55:
	# %56 = load i64, i64* %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %61
	movq	%rbx, %rdx
	jmp	mz_zip_reader_extract_iter_read61
	.text
mz_zip_reader_extract_iter_read57:
	# %58 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %58, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %60 = load i64, i64* %59
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %61
	jmp	mz_zip_reader_extract_iter_read61
	.text
mz_zip_reader_extract_iter_read61:
	# %62 = phi i64 [%56, %55], [%60, %57]
	# store i64 %62, i64* %14
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# %63 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %63, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %65 = load i8*, i8** %64
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %66 = getelementptr %struct.mz_zip_archive, i8* %65, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %67 = load i8*, i8** %66
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = getelementptr %struct.mz_zip_internal_state_tag, i8* %67, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %69 = load i8*, i8** %68
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %70 = icmp ne i8* %69, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %70, label %71, label %87
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read87
	jmp	mz_zip_reader_extract_iter_read71
	.text
mz_zip_reader_extract_iter_read71:
	# %72 = load i8*, i8** %12
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %73 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %74 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %73, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %75 = load i8*, i8** %74
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %76 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %77 = load i8*, i8** %12
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %78 = call i64 @llvm.objectsize.i64.p0 (i8* %77, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %79 = call i8* @__memcpy_chk (i8* %72, i8* %75, i64 %76, i64 %78)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %80 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %81 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %80, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %82 = load i8*, i8** %81
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %83 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %84 = getelementptr i8, i8* %82, i64 %83
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %85 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %85, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %84, i8** %86
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %120
	jmp	mz_zip_reader_extract_iter_read120
	.text
mz_zip_reader_extract_iter_read87:
	# %88 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %89 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %88, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %90 = load i8*, i8** %89
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %91 = getelementptr %struct.mz_zip_archive, i8* %90, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %92 = load i8*, i8** %91
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %93 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %94 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %93, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %95 = load i8*, i8** %94
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %96 = getelementptr %struct.mz_zip_archive, i8* %95, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %97 = load i8*, i8** %96
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %98 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %98, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %100 = load i64, i64* %99
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %101 = load i8*, i8** %12
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %102 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %103 = call i64 %92 (i8* %97, i64 %100, i8* %101, i64 %102)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %104 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %105 = icmp ne i64 %103, %104
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %105, label %106, label %119
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read119
	jmp	mz_zip_reader_extract_iter_read106
	.text
mz_zip_reader_extract_iter_read106:
	# %107 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %108 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %107, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %109 = load i8*, i8** %108
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %109, i8** %4
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %5
	movq	$20, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %110 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = icmp ne i8* %110, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %111, label %112, label %116
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read116
	jmp	mz_zip_reader_extract_iter_read112
	.text
mz_zip_reader_extract_iter_read112:
	# %113 = load i32, i32* %5
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %114 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = getelementptr %struct.mz_zip_archive, i8* %114, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %113, i32* %115
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %116
	jmp	mz_zip_reader_extract_iter_read116
	.text
mz_zip_reader_extract_iter_read116:
	# %117 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %117, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 -1, i32* %118
	movq	$-1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i64 0, i64* %14
	movq	$0, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %119
	jmp	mz_zip_reader_extract_iter_read119
	.text
mz_zip_reader_extract_iter_read119:
	# br label %120
	jmp	mz_zip_reader_extract_iter_read120
	.text
mz_zip_reader_extract_iter_read120:
	# %121 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %122 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %121, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %123 = load i32, i32* %122
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %124 = and i32 %123, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %125 = icmp ne i32 %124, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %125, label %137, label %126
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read126
	jmp	mz_zip_reader_extract_iter_read137
	.text
mz_zip_reader_extract_iter_read126:
	# %127 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %127, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %129 = load i32, i32* %128
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %130 = zext i32 %129 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %131 = load i8*, i8** %12
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %132 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %133 = call i64 @mz_crc32 (i64 %130, i8* %131, i64 %132)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %134 = trunc i64 %133 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %135 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %136 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %135, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %134, i32* %136
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %137
	jmp	mz_zip_reader_extract_iter_read137
	.text
mz_zip_reader_extract_iter_read137:
	# %138 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %139 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %140 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %139, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %141 = load i64, i64* %140
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %142 = add i64 %141, %138
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %142, i64* %140
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %143 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %144 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %145 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %144, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %146 = load i64, i64* %145
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %147 = add i64 %146, %143
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %147, i64* %145
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %148 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %149 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %150 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %149, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %151 = load i64, i64* %150
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %152 = sub i64 %151, %148
	movq	%rdx, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %152, i64* %150
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %394
	jmp	mz_zip_reader_extract_iter_read394
	.text
mz_zip_reader_extract_iter_read153:
	# br label %154
	jmp	mz_zip_reader_extract_iter_read154
	.text
mz_zip_reader_extract_iter_read154:
	# %155 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %156 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %155, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %157 = load i8*, i8** %156
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %158 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %159 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %158, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %160 = load i64, i64* %159
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %161 = and i64 %160, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %162 = getelementptr i8, i8* %157, i64 %161
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %162, i8** %15
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# %163 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %164 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %163, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %165 = load i64, i64* %164
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %166 = and i64 %165, 32767
	movq	%rdx, %rax
	movq	$32767, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %167 = sub i64 32768, %166
	movq	$32768, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %167, i64* %17
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# %168 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %169 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %168, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %170 = load i64, i64* %169
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %171 = icmp ne i64 %170, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %171, label %299, label %172
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read172
	jmp	mz_zip_reader_extract_iter_read299
	.text
mz_zip_reader_extract_iter_read172:
	# %173 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %174 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %173, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %175 = load i64, i64* %174
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %176 = icmp ne i64 %175, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %176, label %260, label %177
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read177
	jmp	mz_zip_reader_extract_iter_read260
	.text
mz_zip_reader_extract_iter_read177:
	# %178 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %179 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %178, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %180 = load i8*, i8** %179
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %181 = getelementptr %struct.mz_zip_archive, i8* %180, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %182 = load i8*, i8** %181
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %183 = getelementptr %struct.mz_zip_internal_state_tag, i8* %182, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %184 = load i8*, i8** %183
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %185 = icmp ne i8* %184, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %185, label %260, label %186
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read186
	jmp	mz_zip_reader_extract_iter_read260
	.text
mz_zip_reader_extract_iter_read186:
	# %187 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %188 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %187, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %189 = load i64, i64* %188
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %190 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %191 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %190, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %192 = load i64, i64* %191
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %193 = icmp ult i64 %189, %192
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %193, label %194, label %198
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read198
	jmp	mz_zip_reader_extract_iter_read194
	.text
mz_zip_reader_extract_iter_read194:
	# %195 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %196 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %195, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %197 = load i64, i64* %196
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r15
	# br label %202
	movq	%r15, %rdi
	jmp	mz_zip_reader_extract_iter_read202
	.text
mz_zip_reader_extract_iter_read198:
	# %199 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %200 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %199, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %201 = load i64, i64* %200
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# br label %202
	movq	%r14, %rdi
	jmp	mz_zip_reader_extract_iter_read202
	.text
mz_zip_reader_extract_iter_read202:
	# %203 = phi i64 [%197, %194], [%201, %198]
	# %204 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %205 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %204, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %203, i64* %205
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %206 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %207 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %206, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %208 = load i8*, i8** %207
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %209 = getelementptr %struct.mz_zip_archive, i8* %208, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %210 = load i8*, i8** %209
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %211 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %212 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %211, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %213 = load i8*, i8** %212
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %214 = getelementptr %struct.mz_zip_archive, i8* %213, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %215 = load i8*, i8** %214
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %216 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %217 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %216, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %218 = load i64, i64* %217
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %219 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %220 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %219, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %221 = load i8*, i8** %220
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %222 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %223 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %222, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %224 = load i64, i64* %223
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = call i64 %210 (i8* %215, i64 %218, i8* %221, i64 %224)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %226 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %227 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %226, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %228 = load i64, i64* %227
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %229 = icmp ne i64 %225, %228
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %229, label %230, label %243
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read243
	jmp	mz_zip_reader_extract_iter_read230
	.text
mz_zip_reader_extract_iter_read230:
	# %231 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %232 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %231, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %233 = load i8*, i8** %232
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %233, i8** %6
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %7
	movq	$20, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %234 = load i8*, i8** %6
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %235 = icmp ne i8* %234, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %235, label %236, label %240
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read240
	jmp	mz_zip_reader_extract_iter_read236
	.text
mz_zip_reader_extract_iter_read236:
	# %237 = load i32, i32* %7
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %238 = load i8*, i8** %6
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %239 = getelementptr %struct.mz_zip_archive, i8* %238, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %237, i32* %239
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %240
	jmp	mz_zip_reader_extract_iter_read240
	.text
mz_zip_reader_extract_iter_read240:
	# %241 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %242 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %241, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 -1, i32* %242
	movq	$-1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %393
	jmp	mz_zip_reader_extract_iter_read393
	.text
mz_zip_reader_extract_iter_read243:
	# %244 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %245 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %244, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %246 = load i64, i64* %245
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %247 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %248 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %247, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %249 = load i64, i64* %248
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %250 = add i64 %249, %246
	movq	%rdx, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %250, i64* %248
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %251 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %252 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %251, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %253 = load i64, i64* %252
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %254 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %255 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %254, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %256 = load i64, i64* %255
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %257 = sub i64 %256, %253
	movq	%rdx, %rax
	movq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %257, i64* %255
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %258 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %259 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %258, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %259
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %260
	jmp	mz_zip_reader_extract_iter_read260
	.text
mz_zip_reader_extract_iter_read260:
	# %261 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %262 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %261, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %263 = load i64, i64* %262
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %263, i64* %16
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# %264 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %265 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %264, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# %266 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %267 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %266, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %268 = load i8*, i8** %267
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %269 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %270 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %269, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %271 = load i64, i64* %270
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %272 = getelementptr i8, i8* %268, i64 %271
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %273 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %274 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %273, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %275 = load i8*, i8** %274
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %276 = load i8*, i8** %15
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %277 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %278 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %277, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %279 = load i64, i64* %278
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %280 = icmp ne i64 %279, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# %281 = zext i1 %280 to i64
	movq	%rdi, %rax
	movq	%rax, %rdx
	# %282 = select i1 %280, i32 2, i32 0
	movq	%rdi, %rcx
	movq	$2, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# %283 = call i32 @tinfl_decompress (i8* %265, i8* %272, i8* %16, i8* %275, i8* %276, i8* %17, i32 %282)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r13, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	-88(%rbp), %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	-96(%rbp), %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tinfl_decompress
	addq	$8, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %284 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %285 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %284, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %283, i32* %285
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %286 = load i64, i64* %16
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %287 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %288 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %287, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %289 = load i64, i64* %288
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %290 = sub i64 %289, %286
	movq	%rdx, %rax
	movq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %290, i64* %288
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %291 = load i64, i64* %16
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %292 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %293 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %292, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %294 = load i64, i64* %293
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %295 = add i64 %294, %291
	movq	%rdx, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %295, i64* %293
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %296 = load i64, i64* %17
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %297 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %298 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %297, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %296, i64* %298
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %299
	jmp	mz_zip_reader_extract_iter_read299
	.text
mz_zip_reader_extract_iter_read299:
	# %300 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %301 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %300, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %302 = load i64, i64* %301
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %303 = icmp ne i64 %302, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %303, label %304, label %374
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read374
	jmp	mz_zip_reader_extract_iter_read304
	.text
mz_zip_reader_extract_iter_read304:
	# %305 = load i64, i64* %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %306 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %307 = sub i64 %305, %306
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# %308 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %309 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %308, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %310 = load i64, i64* %309
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %311 = icmp ult i64 %307, %310
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %311, label %312, label %316
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read316
	jmp	mz_zip_reader_extract_iter_read312
	.text
mz_zip_reader_extract_iter_read312:
	# %313 = load i64, i64* %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %314 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %315 = sub i64 %313, %314
	movq	%rdi, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %r12
	# br label %320
	movq	%r12, %rdx
	jmp	mz_zip_reader_extract_iter_read320
	.text
mz_zip_reader_extract_iter_read316:
	# %317 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %318 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %317, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %319 = load i64, i64* %318
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# br label %320
	movq	%r11, %rdx
	jmp	mz_zip_reader_extract_iter_read320
	.text
mz_zip_reader_extract_iter_read320:
	# %321 = phi i64 [%315, %312], [%319, %316]
	# store i64 %321, i64* %18
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# %322 = load i8*, i8** %12
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %323 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %324 = getelementptr i8, i8* %322, i64 %323
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %325 = load i8*, i8** %15
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %326 = load i64, i64* %18
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %327 = load i8*, i8** %12
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %328 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %329 = getelementptr i8, i8* %327, i64 %328
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %330 = call i64 @llvm.objectsize.i64.p0 (i8* %329, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %331 = call i8* @__memcpy_chk (i8* %324, i8* %325, i64 %326, i64 %330)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %332 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %333 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %332, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %334 = load i32, i32* %333
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %335 = zext i32 %334 to i64
	movq	%rdx, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %336 = load i8*, i8** %15
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %337 = load i64, i64* %18
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %338 = call i64 @mz_crc32 (i64 %335, i8* %336, i64 %337)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %339 = trunc i64 %338 to i32
	movq	%rdx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %340 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %341 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %340, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %339, i32* %341
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %342 = load i64, i64* %18
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %343 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %344 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %343, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %345 = load i64, i64* %344
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %346 = sub i64 %345, %342
	movq	%rdx, %rax
	movq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %346, i64* %344
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %347 = load i64, i64* %18
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %348 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %349 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %348, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %350 = load i64, i64* %349
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %351 = add i64 %350, %347
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i64 %351, i64* %349
	movq	%rdi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %352 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %353 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %352, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %354 = getelementptr %struct.mz_zip_archive_file_stat, i8* %353, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %355 = load i64, i64* %354
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %356 = icmp ugt i64 %351, %355
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %356, label %357, label %370
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read370
	jmp	mz_zip_reader_extract_iter_read357
	.text
mz_zip_reader_extract_iter_read357:
	# %358 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %359 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %358, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %360 = load i8*, i8** %359
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %360, i8** %8
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 11, i32* %9
	movq	$11, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %361 = load i8*, i8** %8
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %362 = icmp ne i8* %361, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %362, label %363, label %367
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read367
	jmp	mz_zip_reader_extract_iter_read363
	.text
mz_zip_reader_extract_iter_read363:
	# %364 = load i32, i32* %9
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %365 = load i8*, i8** %8
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %366 = getelementptr %struct.mz_zip_archive, i8* %365, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %364, i32* %366
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %367
	jmp	mz_zip_reader_extract_iter_read367
	.text
mz_zip_reader_extract_iter_read367:
	# %368 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %369 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %368, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 -1, i32* %369
	movq	$-1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %393
	jmp	mz_zip_reader_extract_iter_read393
	.text
mz_zip_reader_extract_iter_read370:
	# %371 = load i64, i64* %18
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %372 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %373 = add i64 %372, %371
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %373, i64* %14
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %374
	jmp	mz_zip_reader_extract_iter_read374
	.text
mz_zip_reader_extract_iter_read374:
	# br label %375
	jmp	mz_zip_reader_extract_iter_read375
	.text
mz_zip_reader_extract_iter_read375:
	# %376 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %377 = load i64, i64* %13
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %378 = icmp ult i64 %376, %377
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %378, label %379, label %391
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	mz_zip_reader_extract_iter_read391
	jmp	mz_zip_reader_extract_iter_read379
	.text
mz_zip_reader_extract_iter_read379:
	# %380 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %381 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %380, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %382 = load i32, i32* %381
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %383 = icmp eq i32 %382, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %383, label %389, label %384
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rbx
	je	mz_zip_reader_extract_iter_read384
	jmp	mz_zip_reader_extract_iter_read389
	.text
mz_zip_reader_extract_iter_read384:
	# %385 = load i8*, i8** %11
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %386 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %385, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %387 = load i32, i32* %386
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %388 = icmp eq i32 %387, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br label %389
	movq	%rsi, %rbx
	jmp	mz_zip_reader_extract_iter_read389
	.text
mz_zip_reader_extract_iter_read389:
	# %390 = phi i1 [1, %379], [%388, %384]
	# br label %391
	movq	%rbx, %rdx
	jmp	mz_zip_reader_extract_iter_read391
	.text
mz_zip_reader_extract_iter_read391:
	# %392 = phi i1 [0, %375], [%390, %389]
	# br i1 %392, label %154, label %393
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_read393
	jmp	mz_zip_reader_extract_iter_read154
	.text
mz_zip_reader_extract_iter_read393:
	# br label %394
	jmp	mz_zip_reader_extract_iter_read394
	.text
mz_zip_reader_extract_iter_read394:
	# %395 = load i64, i64* %14
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %395, i64* %10
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %396
	jmp	mz_zip_reader_extract_iter_read396
	.text
mz_zip_reader_extract_iter_read396:
	# %397 = load i64, i64* %10
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %397
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_iter_free
_mz_zip_reader_extract_iter_free:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%r11
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %7
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %9 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %10 = icmp ne i8* %9, null
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r11
	setne	%r11b
	# br i1 %10, label %11, label %23
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free23
	jmp	mz_zip_reader_extract_iter_free11
	.text
mz_zip_reader_extract_iter_free11:
	# %12 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %13 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %12, i32 0, i32 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %14 = load i8*, i8** %13
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %15 = icmp ne i8* %14, null
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r11
	setne	%r11b
	# br i1 %15, label %16, label %23
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free23
	jmp	mz_zip_reader_extract_iter_free16
	.text
mz_zip_reader_extract_iter_free16:
	# %17 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %18 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %17, i32 0, i32 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %19 = load i8*, i8** %18
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %20 = getelementptr %struct.mz_zip_archive, i8* %19, i32 0, i32 15
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %21 = load i8*, i8** %20
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %22 = icmp ne i8* %21, null
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r11
	setne	%r11b
	# br i1 %22, label %24, label %23
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free23
	jmp	mz_zip_reader_extract_iter_free24
	.text
mz_zip_reader_extract_iter_free23:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %141
	jmp	mz_zip_reader_extract_iter_free141
	.text
mz_zip_reader_extract_iter_free24:
	# %25 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %26 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %25, i32 0, i32 2
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %27 = load i32, i32* %26
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %28 = icmp eq i32 %27, 0
	movq	%r11, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r11
	sete	%r11b
	# br i1 %28, label %29, label %81
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free81
	jmp	mz_zip_reader_extract_iter_free29
	.text
mz_zip_reader_extract_iter_free29:
	# %30 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %31 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %30, i32 0, i32 1
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %32 = load i32, i32* %31
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %33 = and i32 %32, 1024
	movq	%r11, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %r11
	# %34 = icmp ne i32 %33, 0
	movq	%r11, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r11
	setne	%r11b
	# br i1 %34, label %81, label %35
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free35
	jmp	mz_zip_reader_extract_iter_free81
	.text
mz_zip_reader_extract_iter_free35:
	# %36 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %37 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %36, i32 0, i32 7
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %38 = load i64, i64* %37
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %39 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %40 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %39, i32 0, i32 9
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %41 = getelementptr %struct.mz_zip_archive_file_stat, i8* %40, i32 0, i32 8
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %42 = load i64, i64* %41
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %43 = icmp ne i64 %38, %42
	movq	%r12, %rax
	movq	%r11, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r11
	setne	%r11b
	# br i1 %43, label %44, label %57
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free57
	jmp	mz_zip_reader_extract_iter_free44
	.text
mz_zip_reader_extract_iter_free44:
	# %45 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %46 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %45, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %47 = load i8*, i8** %46
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %47, i8** %2
	movq	%rbx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 13, i32* %3
	movq	$13, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %48 = load i8*, i8** %2
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %49 = icmp ne i8* %48, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %49, label %50, label %54
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free54
	jmp	mz_zip_reader_extract_iter_free50
	.text
mz_zip_reader_extract_iter_free50:
	# %51 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %52 = load i8*, i8** %2
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = getelementptr %struct.mz_zip_archive, i8* %52, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %51, i32* %53
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %54
	jmp	mz_zip_reader_extract_iter_free54
	.text
mz_zip_reader_extract_iter_free54:
	# %55 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %56 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %55, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 -1, i32* %56
	movq	$-1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %80
	jmp	mz_zip_reader_extract_iter_free80
	.text
mz_zip_reader_extract_iter_free57:
	# %58 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %58, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %60 = load i32, i32* %59
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %61 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %61, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %63 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %64 = load i32, i32* %63
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %65 = icmp ne i32 %60, %64
	movq	%r10, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %65, label %66, label %79
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free79
	jmp	mz_zip_reader_extract_iter_free66
	.text
mz_zip_reader_extract_iter_free66:
	# %67 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %67, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %69 = load i8*, i8** %68
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %69, i8** %4
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 11, i32* %5
	movq	$11, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %70 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = icmp ne i8* %70, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %71, label %72, label %76
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free76
	jmp	mz_zip_reader_extract_iter_free72
	.text
mz_zip_reader_extract_iter_free72:
	# %73 = load i32, i32* %5
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %74 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %75 = getelementptr %struct.mz_zip_archive, i8* %74, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %73, i32* %75
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %76
	jmp	mz_zip_reader_extract_iter_free76
	.text
mz_zip_reader_extract_iter_free76:
	# %77 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %78 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %77, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 -1, i32* %78
	movq	$-1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	mz_zip_reader_extract_iter_free79
	.text
mz_zip_reader_extract_iter_free79:
	# br label %80
	jmp	mz_zip_reader_extract_iter_free80
	.text
mz_zip_reader_extract_iter_free80:
	# br label %81
	jmp	mz_zip_reader_extract_iter_free81
	.text
mz_zip_reader_extract_iter_free81:
	# %82 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %83 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %82, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %84 = load i8*, i8** %83
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %85 = getelementptr %struct.mz_zip_archive, i8* %84, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %86 = load i8*, i8** %85
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %87 = getelementptr %struct.mz_zip_internal_state_tag, i8* %86, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %88 = load i8*, i8** %87
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %89 = icmp ne i8* %88, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %89, label %104, label %90
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free90
	jmp	mz_zip_reader_extract_iter_free104
	.text
mz_zip_reader_extract_iter_free90:
	# %91 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %91, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %93 = load i8*, i8** %92
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %94 = getelementptr %struct.mz_zip_archive, i8* %93, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %95 = load i8*, i8** %94
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %96 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %97 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %96, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %98 = load i8*, i8** %97
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = getelementptr %struct.mz_zip_archive, i8* %98, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %100 = load i8*, i8** %99
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %101 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %102 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %101, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %103 = load i8*, i8** %102
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %95 (i8* %100, i8* %103)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %104
	jmp	mz_zip_reader_extract_iter_free104
	.text
mz_zip_reader_extract_iter_free104:
	# %105 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %106 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %105, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %107 = load i8*, i8** %106
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %108 = icmp ne i8* %107, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %108, label %109, label %123
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_iter_free123
	jmp	mz_zip_reader_extract_iter_free109
	.text
mz_zip_reader_extract_iter_free109:
	# %110 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %110, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %112 = load i8*, i8** %111
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %113 = getelementptr %struct.mz_zip_archive, i8* %112, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %114 = load i8*, i8** %113
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %116 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %115, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %117 = load i8*, i8** %116
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = getelementptr %struct.mz_zip_archive, i8* %117, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %119 = load i8*, i8** %118
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %120 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %121 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %120, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %122 = load i8*, i8** %121
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %114 (i8* %119, i8* %122)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %123
	jmp	mz_zip_reader_extract_iter_free123
	.text
mz_zip_reader_extract_iter_free123:
	# %124 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %124, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %126 = load i32, i32* %125
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %126, i32* %8
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %127 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %127, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %129 = load i8*, i8** %128
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %130 = getelementptr %struct.mz_zip_archive, i8* %129, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %131 = load i8*, i8** %130
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %132 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %133 = getelementptr %struct.mz_zip_reader_extract_iter_state, i8* %132, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$9566, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %134 = load i8*, i8** %133
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %135 = getelementptr %struct.mz_zip_archive, i8* %134, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %136 = load i8*, i8** %135
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %137 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %131 (i8* %136, i8* %137)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %138 = load i32, i32* %8
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %139 = icmp eq i32 %138, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %140 = zext i1 %139 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %140, i32* %6
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %141
	jmp	mz_zip_reader_extract_iter_free141
	.text
mz_zip_reader_extract_iter_free141:
	# %142 = load i32, i32* %6
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %142
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_to_file
_mz_zip_reader_extract_to_file:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$48, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r11
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %17 = alloca %struct.mz_zip_archive_file_stat
	subq	$1102, %rsp
	movq	%rsp, %rsi
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %12
	movq	-8(%rbp), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %13
	movq	-16(%rbp), %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %14
	movq	%r11, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %15
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %19 = load i8*, i8** %12
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %20 = load i32, i32* %13
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %21 = call i32 @mz_zip_reader_file_stat (i8* %19, i32 %20, i8* %17)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_file_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %22 = icmp ne i32 %21, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %22, label %24, label %23
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file23
	jmp	mz_zip_reader_extract_to_file24
	.text
mz_zip_reader_extract_to_file23:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %89
	jmp	mz_zip_reader_extract_to_file89
	.text
mz_zip_reader_extract_to_file24:
	# %25 = getelementptr %struct.mz_zip_archive_file_stat, i8* %17, i32 0, i32 13
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %26 = load i32, i32* %25
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %27 = icmp ne i32 %26, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %27, label %32, label %28
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file28
	jmp	mz_zip_reader_extract_to_file32
	.text
mz_zip_reader_extract_to_file28:
	# %29 = getelementptr %struct.mz_zip_archive_file_stat, i8* %17, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %30 = load i32, i32* %29
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %31 = icmp ne i32 %30, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %31, label %41, label %32
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file32
	jmp	mz_zip_reader_extract_to_file41
	.text
mz_zip_reader_extract_to_file32:
	# %33 = load i8*, i8** %12
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %33, i8** %5
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 6, i32* %6
	movq	$6, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %34 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %35 = icmp ne i8* %34, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %35, label %36, label %40
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file40
	jmp	mz_zip_reader_extract_to_file36
	.text
mz_zip_reader_extract_to_file36:
	# %37 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %38 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %39 = getelementptr %struct.mz_zip_archive, i8* %38, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %37, i32* %39
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %40
	jmp	mz_zip_reader_extract_to_file40
	.text
mz_zip_reader_extract_to_file40:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %89
	jmp	mz_zip_reader_extract_to_file89
	.text
mz_zip_reader_extract_to_file41:
	# %42 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %43 = call i8* @fopen (i8* %42, i8* @.str.19)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	leaq	_.str.19(%rip), %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fopen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %43, i8** %18
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %44 = load i8*, i8** %18
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = icmp ne i8* %44, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %45, label %55, label %46
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file46
	jmp	mz_zip_reader_extract_to_file55
	.text
mz_zip_reader_extract_to_file46:
	# %47 = load i8*, i8** %12
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %47, i8** %7
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 17, i32* %8
	movq	$17, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %48 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = icmp ne i8* %48, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %49, label %50, label %54
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file54
	jmp	mz_zip_reader_extract_to_file50
	.text
mz_zip_reader_extract_to_file50:
	# %51 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %52 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = getelementptr %struct.mz_zip_archive, i8* %52, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %51, i32* %53
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %54
	jmp	mz_zip_reader_extract_to_file54
	.text
mz_zip_reader_extract_to_file54:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %89
	jmp	mz_zip_reader_extract_to_file89
	.text
mz_zip_reader_extract_to_file55:
	# %56 = load i8*, i8** %12
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %57 = load i32, i32* %13
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %58 = load i8*, i8** %18
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = load i32, i32* %15
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %60 = call i32 @mz_zip_reader_extract_to_callback (i8* %56, i32 %57, i8* @mz_zip_file_write_callback, i8* %58, i32 %59)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	leaq	_mz_zip_file_write_callback(%rip), %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_callback
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %60, i32* %16
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %61 = load i8*, i8** %18
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = call i32 @fclose (i8* %61)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_fclose
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %63 = icmp eq i32 %62, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %63, label %64, label %77
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file77
	jmp	mz_zip_reader_extract_to_file64
	.text
mz_zip_reader_extract_to_file64:
	# %65 = load i32, i32* %16
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %66 = icmp ne i32 %65, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %66, label %67, label %76
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file76
	jmp	mz_zip_reader_extract_to_file67
	.text
mz_zip_reader_extract_to_file67:
	# %68 = load i8*, i8** %12
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %68, i8** %9
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i32 21, i32* %10
	movq	$21, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %69 = load i8*, i8** %9
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %70 = icmp ne i8* %69, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %70, label %71, label %75
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file75
	jmp	mz_zip_reader_extract_to_file71
	.text
mz_zip_reader_extract_to_file71:
	# %72 = load i32, i32* %10
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %73 = load i8*, i8** %9
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %74 = getelementptr %struct.mz_zip_archive, i8* %73, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %72, i32* %74
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %75
	jmp	mz_zip_reader_extract_to_file75
	.text
mz_zip_reader_extract_to_file75:
	# br label %76
	jmp	mz_zip_reader_extract_to_file76
	.text
mz_zip_reader_extract_to_file76:
	# store i32 0, i32* %16
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %77
	jmp	mz_zip_reader_extract_to_file77
	.text
mz_zip_reader_extract_to_file77:
	# %78 = load i32, i32* %16
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %79 = icmp ne i32 %78, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %79, label %80, label %87
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_file87
	jmp	mz_zip_reader_extract_to_file80
	.text
mz_zip_reader_extract_to_file80:
	# %81 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %82 = getelementptr %struct.mz_zip_archive_file_stat, i8* %17, i32 0, i32 18
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %83 = load i64, i64* %82
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %84 = getelementptr %struct.mz_zip_archive_file_stat, i8* %17, i32 0, i32 18
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %85 = load i64, i64* %84
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = call i32 @mz_zip_set_file_times (i8* %81, i64 %83, i64 %85)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_set_file_times
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %87
	jmp	mz_zip_reader_extract_to_file87
	.text
mz_zip_reader_extract_to_file87:
	# %88 = load i32, i32* %16
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %88, i32* %11
	movq	%rdx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %89
	jmp	mz_zip_reader_extract_to_file89
	.text
mz_zip_reader_extract_to_file89:
	# %90 = load i32, i32* %11
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %90
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_file_write_callback
_mz_zip_file_write_callback:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r9
	popq	%r10
	popq	%r11
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %6
	movq	%r10, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %7
	movq	%r9, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %8
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %9 = load i64, i64* %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %10 = load i8*, i8** %7
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %11 = load i64, i64* %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %12 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = call i64 @fwrite (i8* %10, i64 1, i64 %11, i8* %12)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fwrite
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i64 %13
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_set_file_times
_mz_zip_set_file_times:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rbx
	popq	%r9
	popq	%r10
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %5 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca %struct.utimbuf
	subq	$16, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %4
	movq	%r10, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %5
	movq	%r9, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %6
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# call void @memset (i8* %7, i8 0, i64 16, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$16, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %8 = load i64, i64* %5
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %9 = getelementptr %struct.utimbuf, i8* %7, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$16, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %8, i64* %9
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %10 = load i64, i64* %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %11 = getelementptr %struct.utimbuf, i8* %7, i32 0, i32 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$16, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %10, i64* %11
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %12 = load i8*, i8** %4
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = call i32 @utime (i8* %12, i8* %7)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_utime
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %14 = icmp ne i32 %13, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %15 = xor i1 %14, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %16 = zext i1 %15 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# ret i32 %16
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_file_to_file
_mz_zip_reader_extract_file_to_file:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%r12
	popq	%r13
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %7
	movq	%r12, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%rsi, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %12 = load i8*, i8** %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %13 = load i32, i32* %9
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %14 = call i32 @mz_zip_reader_locate_file_v2 (i8* %11, i8* %12, i8* null, i32 %13, i8* %10)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %15 = icmp ne i32 %14, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %15, label %17, label %16
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_file_to_file16
	jmp	mz_zip_reader_extract_file_to_file17
	.text
mz_zip_reader_extract_file_to_file16:
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %23
	jmp	mz_zip_reader_extract_file_to_file23
	.text
mz_zip_reader_extract_file_to_file17:
	# %18 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %19 = load i32, i32* %10
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %20 = load i8*, i8** %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %21 = load i32, i32* %9
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %22 = call i32 @mz_zip_reader_extract_to_file (i8* %18, i32 %19, i8* %20, i32 %21)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_file
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %22, i32* %5
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %23
	jmp	mz_zip_reader_extract_file_to_file23
	.text
mz_zip_reader_extract_file_to_file23:
	# %24 = load i32, i32* %5
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %24
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_to_cfile
_mz_zip_reader_extract_to_cfile:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r13
	popq	%r14
	popq	%r15
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %12 = alloca %struct.mz_zip_archive_file_stat
	subq	$1102, %rsp
	movq	%rsp, %r12
	# store i8* %0, i8** %8
	movq	%r15, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %9
	movq	%r14, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %10
	movq	%r13, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %11
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %13 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %14 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %15 = call i32 @mz_zip_reader_file_stat (i8* %13, i32 %14, i8* %12)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r13, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_file_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %16 = icmp ne i32 %15, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %16, label %18, label %17
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_cfile17
	jmp	mz_zip_reader_extract_to_cfile18
	.text
mz_zip_reader_extract_to_cfile17:
	# store i32 0, i32* %7
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %41
	jmp	mz_zip_reader_extract_to_cfile41
	.text
mz_zip_reader_extract_to_cfile18:
	# %19 = getelementptr %struct.mz_zip_archive_file_stat, i8* %12, i32 0, i32 13
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %20 = load i32, i32* %19
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %21 = icmp ne i32 %20, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %21, label %26, label %22
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_cfile22
	jmp	mz_zip_reader_extract_to_cfile26
	.text
mz_zip_reader_extract_to_cfile22:
	# %23 = getelementptr %struct.mz_zip_archive_file_stat, i8* %12, i32 0, i32 15
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %24 = load i32, i32* %23
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %25 = icmp ne i32 %24, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %25, label %35, label %26
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_cfile26
	jmp	mz_zip_reader_extract_to_cfile35
	.text
mz_zip_reader_extract_to_cfile26:
	# %27 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %27, i8** %5
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 6, i32* %6
	movq	$6, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %28 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = icmp ne i8* %28, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %29, label %30, label %34
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_to_cfile34
	jmp	mz_zip_reader_extract_to_cfile30
	.text
mz_zip_reader_extract_to_cfile30:
	# %31 = load i32, i32* %6
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %32 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %33 = getelementptr %struct.mz_zip_archive, i8* %32, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %31, i32* %33
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %34
	jmp	mz_zip_reader_extract_to_cfile34
	.text
mz_zip_reader_extract_to_cfile34:
	# store i32 0, i32* %7
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %41
	jmp	mz_zip_reader_extract_to_cfile41
	.text
mz_zip_reader_extract_to_cfile35:
	# %36 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %37 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %38 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %39 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = call i32 @mz_zip_reader_extract_to_callback (i8* %36, i32 %37, i8* @mz_zip_file_write_callback, i8* %38, i32 %39)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	leaq	_mz_zip_file_write_callback(%rip), %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_callback
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %40, i32* %7
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %41
	jmp	mz_zip_reader_extract_to_cfile41
	.text
mz_zip_reader_extract_to_cfile41:
	# %42 = load i32, i32* %7
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %42
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_extract_file_to_cfile
_mz_zip_reader_extract_file_to_cfile:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%r12
	popq	%r13
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %7
	movq	%r12, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%rsi, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %12 = load i8*, i8** %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %13 = load i32, i32* %9
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %14 = call i32 @mz_zip_reader_locate_file_v2 (i8* %11, i8* %12, i8* null, i32 %13, i8* %10)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %15 = icmp ne i32 %14, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %15, label %17, label %16
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_extract_file_to_cfile16
	jmp	mz_zip_reader_extract_file_to_cfile17
	.text
mz_zip_reader_extract_file_to_cfile16:
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %23
	jmp	mz_zip_reader_extract_file_to_cfile23
	.text
mz_zip_reader_extract_file_to_cfile17:
	# %18 = load i8*, i8** %6
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %19 = load i32, i32* %10
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %20 = load i8*, i8** %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %21 = load i32, i32* %9
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %22 = call i32 @mz_zip_reader_extract_to_cfile (i8* %18, i32 %19, i8* %20, i32 %21)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_cfile
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %22, i32* %5
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %23
	jmp	mz_zip_reader_extract_file_to_cfile23
	.text
mz_zip_reader_extract_file_to_cfile23:
	# %24 = load i32, i32* %5
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %24
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_validate_file
_mz_zip_validate_file:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$656, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%rbx
	popq	%rsi
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %33 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %34 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %35 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -264(%rbp)
	# %38 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %39 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -280(%rbp)
	# %40 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -296(%rbp)
	# %42 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -312(%rbp)
	# %44 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %46 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -336(%rbp)
	# %47 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -344(%rbp)
	# %48 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %49 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -360(%rbp)
	# %50 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -368(%rbp)
	# %51 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -376(%rbp)
	# %52 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -384(%rbp)
	# %53 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -392(%rbp)
	# %54 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -400(%rbp)
	# %55 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -408(%rbp)
	# %56 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -416(%rbp)
	# %57 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -424(%rbp)
	# %58 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -432(%rbp)
	# %59 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -440(%rbp)
	# %60 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -448(%rbp)
	# %61 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -456(%rbp)
	# %62 = alloca %struct.mz_zip_archive_file_stat
	subq	$1102, %rsp
	movq	%rsp, -464(%rbp)
	# %63 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -472(%rbp)
	# %64 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -480(%rbp)
	# %65 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -488(%rbp)
	# %66 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -496(%rbp)
	# %67 = alloca [8 x i32]
	subq	$32, %rsp
	movq	%rsp, %r8
	# %68 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -504(%rbp)
	# %69 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -512(%rbp)
	# %70 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -520(%rbp)
	# %71 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -528(%rbp)
	# %72 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -536(%rbp)
	# %73 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -544(%rbp)
	# %74 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -552(%rbp)
	# %75 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -560(%rbp)
	# %76 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -568(%rbp)
	# %77 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -576(%rbp)
	# %78 = alloca %struct.mz_zip_array
	subq	$28, %rsp
	movq	%rsp, -584(%rbp)
	# %79 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -592(%rbp)
	# %80 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -600(%rbp)
	# %81 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -608(%rbp)
	# %82 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -616(%rbp)
	# %83 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -624(%rbp)
	# %84 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -632(%rbp)
	# %85 = alloca [32 x i8]
	subq	$32, %rsp
	movq	%rsp, -640(%rbp)
	# %86 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -648(%rbp)
	# %87 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -656(%rbp)
	# %88 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %89 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %90 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %91 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# store i8* %0, i8** %59
	movq	%rsi, %rax
	movq	-440(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %60
	movq	%rbx, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %61
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %65
	movq	$0, %rax
	movq	-488(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %66
	movq	$0, %rax
	movq	-496(%rbp), %rcx
	movl	%eax, (%rcx)
	# %92 = getelementptr [8 x i32], i8* %67, i64 0, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %92, i8** %68
	movq	%r8, %rax
	movq	-504(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %69
	movq	$0, %rax
	movq	-512(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %75
	movq	$0, %rax
	movq	-560(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %78, i8** %13
	movq	-584(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %14
	movq	$1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %93 = load i8*, i8** %13
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %94 = load i8*, i8** %13
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %95 = call i64 @llvm.objectsize.i64.p0 (i8* %94, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %96 = call i8* @__memset_chk (i8* %93, i32 0, i64 32, i64 %95)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %97 = load i32, i32* %14
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %98 = load i8*, i8** %13
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %99 = getelementptr %struct.mz_zip_array, i8* %98, i32 0, i32 3
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i32 %97, i32* %99
	movq	%r9, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %100 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %101 = icmp ne i8* %100, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %101, label %102, label %122
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file122
	jmp	mz_zip_validate_file102
	.text
mz_zip_validate_file102:
	# %103 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %104 = getelementptr %struct.mz_zip_archive, i8* %103, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %105 = load i8*, i8** %104
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %106 = icmp ne i8* %105, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %106, label %107, label %122
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file122
	jmp	mz_zip_validate_file107
	.text
mz_zip_validate_file107:
	# %108 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %109 = getelementptr %struct.mz_zip_archive, i8* %108, i32 0, i32 7
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %110 = load i8*, i8** %109
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %111 = icmp ne i8* %110, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %111, label %112, label %122
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file122
	jmp	mz_zip_validate_file112
	.text
mz_zip_validate_file112:
	# %113 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %114 = getelementptr %struct.mz_zip_archive, i8* %113, i32 0, i32 8
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %115 = load i8*, i8** %114
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %116 = icmp ne i8* %115, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %116, label %117, label %122
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file122
	jmp	mz_zip_validate_file117
	.text
mz_zip_validate_file117:
	# %118 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %119 = getelementptr %struct.mz_zip_archive, i8* %118, i32 0, i32 11
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %120 = load i8*, i8** %119
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %121 = icmp ne i8* %120, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %121, label %131, label %122
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file122
	jmp	mz_zip_validate_file131
	.text
mz_zip_validate_file122:
	# %123 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %123, i8** %18
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %19
	movq	$24, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %124 = load i8*, i8** %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = icmp ne i8* %124, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %125, label %126, label %130
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file130
	jmp	mz_zip_validate_file126
	.text
mz_zip_validate_file126:
	# %127 = load i32, i32* %19
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %128 = load i8*, i8** %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %129 = getelementptr %struct.mz_zip_archive, i8* %128, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %127, i32* %129
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %130
	jmp	mz_zip_validate_file130
	.text
mz_zip_validate_file130:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file131:
	# %132 = load i32, i32* %60
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %133 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %134 = getelementptr %struct.mz_zip_archive, i8* %133, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %135 = load i32, i32* %134
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %136 = icmp ugt i32 %132, %135
	movq	%r9, %rax
	movq	%r8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	seta	%r8b
	# br i1 %136, label %137, label %146
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file146
	jmp	mz_zip_validate_file137
	.text
mz_zip_validate_file137:
	# %138 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %138, i8** %20
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %21
	movq	$24, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %139 = load i8*, i8** %20
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %140 = icmp ne i8* %139, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %140, label %141, label %145
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file145
	jmp	mz_zip_validate_file141
	.text
mz_zip_validate_file141:
	# %142 = load i32, i32* %21
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %143 = load i8*, i8** %20
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %144 = getelementptr %struct.mz_zip_archive, i8* %143, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %142, i32* %144
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %145
	jmp	mz_zip_validate_file145
	.text
mz_zip_validate_file145:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file146:
	# %147 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %148 = getelementptr %struct.mz_zip_archive, i8* %147, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %149 = load i8*, i8** %148
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8* %149, i8** %63
	movq	%r8, %rax
	movq	-472(%rbp), %rcx
	movq	%rax, (%rcx)
	# %150 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %151 = load i32, i32* %60
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %150, i8** %16
	movq	%r9, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %151, i32* %17
	movq	%r8, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %152 = load i8*, i8** %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %153 = icmp ne i8* %152, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %153, label %154, label %165
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file165
	jmp	mz_zip_validate_file154
	.text
mz_zip_validate_file154:
	# %155 = load i8*, i8** %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %156 = getelementptr %struct.mz_zip_archive, i8* %155, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %157 = load i8*, i8** %156
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %158 = icmp ne i8* %157, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %158, label %159, label %165
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file165
	jmp	mz_zip_validate_file159
	.text
mz_zip_validate_file159:
	# %160 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %161 = load i8*, i8** %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %162 = getelementptr %struct.mz_zip_archive, i8* %161, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %163 = load i32, i32* %162
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %164 = icmp uge i32 %160, %163
	movq	%r9, %rax
	movq	%r8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setnb	%r8b
	# br i1 %164, label %165, label %166
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file166
	jmp	mz_zip_validate_file165
	.text
mz_zip_validate_file165:
	# store i8* null, i8** %15
	movq	$0, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %182
	jmp	mz_zip_validate_file182
	.text
mz_zip_validate_file166:
	# %167 = load i8*, i8** %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %168 = getelementptr %struct.mz_zip_archive, i8* %167, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %169 = load i8*, i8** %168
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %170 = load i8*, i8** %169
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %171 = load i8*, i8** %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %172 = getelementptr %struct.mz_zip_archive, i8* %171, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %173 = load i8*, i8** %172
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %174 = getelementptr %struct.mz_zip_internal_state_tag, i8* %173, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %175 = load i8*, i8** %174
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %176 = load i32, i32* %17
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %177 = zext i32 %176 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %178 = getelementptr i32, i8* %175, i64 %177
	movq	%r9, %rcx
	movq	%r8, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %179 = load i32, i32* %178
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %180 = zext i32 %179 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %181 = getelementptr i8, i8* %170, i64 %180
	movq	%r10, %rcx
	movq	%r8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %181, i8** %15
	movq	%r8, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %182
	jmp	mz_zip_validate_file182
	.text
mz_zip_validate_file182:
	# %183 = load i8*, i8** %15
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8* %183, i8** %64
	movq	%r8, %rax
	movq	-480(%rbp), %rcx
	movq	%rax, (%rcx)
	# %184 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %185 = load i32, i32* %60
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %186 = load i8*, i8** %64
	movq	-480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %187 = call i32 @mz_zip_file_stat_internal (i8* %184, i32 %185, i8* %186, i8* %62, i8* %65)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	-464(%rbp), %rax
	pushq	%rax
	movq	-488(%rbp), %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_file_stat_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %188 = icmp ne i32 %187, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %188, label %190, label %189
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file189
	jmp	mz_zip_validate_file190
	.text
mz_zip_validate_file189:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file190:
	# %191 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 13
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %192 = load i32, i32* %191
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %193 = icmp ne i32 %192, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %193, label %198, label %194
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file194
	jmp	mz_zip_validate_file198
	.text
mz_zip_validate_file194:
	# %195 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 8
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %196 = load i64, i64* %195
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %197 = icmp ne i64 %196, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %197, label %199, label %198
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file198
	jmp	mz_zip_validate_file199
	.text
mz_zip_validate_file198:
	# store i32 1, i32* %58
	movq	$1, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file199:
	# %200 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 14
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %201 = load i32, i32* %200
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %202 = icmp ne i32 %201, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %202, label %203, label %212
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file212
	jmp	mz_zip_validate_file203
	.text
mz_zip_validate_file203:
	# %204 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %204, i8** %22
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 5, i32* %23
	movq	$5, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# %205 = load i8*, i8** %22
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %206 = icmp ne i8* %205, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %206, label %207, label %211
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file211
	jmp	mz_zip_validate_file207
	.text
mz_zip_validate_file207:
	# %208 = load i32, i32* %23
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %209 = load i8*, i8** %22
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %210 = getelementptr %struct.mz_zip_archive, i8* %209, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %208, i32* %210
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %211
	jmp	mz_zip_validate_file211
	.text
mz_zip_validate_file211:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file212:
	# %213 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 5
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %214 = load i16, i16* %213
	movq	%r8, %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %215 = zext i16 %214 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %216 = icmp ne i32 %215, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %216, label %217, label %231
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file231
	jmp	mz_zip_validate_file217
	.text
mz_zip_validate_file217:
	# %218 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 5
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %219 = load i16, i16* %218
	movq	%r8, %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %220 = zext i16 %219 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %221 = icmp ne i32 %220, 8
	movq	%r8, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %221, label %222, label %231
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file231
	jmp	mz_zip_validate_file222
	.text
mz_zip_validate_file222:
	# %223 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %223, i8** %24
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 4, i32* %25
	movq	$4, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# %224 = load i8*, i8** %24
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = icmp ne i8* %224, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %225, label %226, label %230
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file230
	jmp	mz_zip_validate_file226
	.text
mz_zip_validate_file226:
	# %227 = load i32, i32* %25
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %228 = load i8*, i8** %24
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %229 = getelementptr %struct.mz_zip_archive, i8* %228, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %227, i32* %229
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %230
	jmp	mz_zip_validate_file230
	.text
mz_zip_validate_file230:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file231:
	# %232 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 15
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %233 = load i32, i32* %232
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %234 = icmp ne i32 %233, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %234, label %244, label %235
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file235
	jmp	mz_zip_validate_file244
	.text
mz_zip_validate_file235:
	# %236 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %236, i8** %26
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 6, i32* %27
	movq	$6, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# %237 = load i8*, i8** %26
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %238 = icmp ne i8* %237, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %238, label %239, label %243
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file243
	jmp	mz_zip_validate_file239
	.text
mz_zip_validate_file239:
	# %240 = load i32, i32* %27
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %241 = load i8*, i8** %26
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %242 = getelementptr %struct.mz_zip_archive, i8* %241, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %240, i32* %242
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %243
	jmp	mz_zip_validate_file243
	.text
mz_zip_validate_file243:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file244:
	# %245 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 11
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %246 = load i64, i64* %245
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i64 %246, i64* %69
	movq	%r8, %rax
	movq	-512(%rbp), %rcx
	movq	%rax, (%rcx)
	# %247 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %248 = getelementptr %struct.mz_zip_archive, i8* %247, i32 0, i32 11
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %249 = load i8*, i8** %248
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %250 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %251 = getelementptr %struct.mz_zip_archive, i8* %250, i32 0, i32 14
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %252 = load i8*, i8** %251
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %253 = load i64, i64* %69
	movq	-512(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %254 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %255 = call i64 %249 (i8* %252, i64 %253, i8* %254, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%r8, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %256 = icmp ne i64 %255, 30
	movq	%r8, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %256, label %257, label %266
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file266
	jmp	mz_zip_validate_file257
	.text
mz_zip_validate_file257:
	# %258 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %258, i8** %28
	movq	%rdx, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %29
	movq	$20, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %259 = load i8*, i8** %28
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %260 = icmp ne i8* %259, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %260, label %261, label %265
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file265
	jmp	mz_zip_validate_file261
	.text
mz_zip_validate_file261:
	# %262 = load i32, i32* %29
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %263 = load i8*, i8** %28
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %264 = getelementptr %struct.mz_zip_archive, i8* %263, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %262, i32* %264
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_validate_file265
	.text
mz_zip_validate_file265:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file266:
	# %267 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %268 = getelementptr i8, i8* %267, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %269 = load i8, i8* %268
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %270 = zext i8 %269 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %271 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %272 = getelementptr i8, i8* %271, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %273 = load i8, i8* %272
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %274 = zext i8 %273 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %275 = shl i32 %274, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %276 = or i32 %270, %275
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %277 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %278 = getelementptr i8, i8* %277, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %279 = load i8, i8* %278
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %280 = zext i8 %279 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %281 = shl i32 %280, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %282 = or i32 %276, %281
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %283 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %284 = getelementptr i8, i8* %283, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %285 = load i8, i8* %284
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %286 = zext i8 %285 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %287 = shl i32 %286, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %288 = or i32 %282, %287
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %289 = icmp ne i32 %288, 67324752
	movq	%r8, %rax
	movq	$67324752, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %289, label %290, label %299
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file299
	jmp	mz_zip_validate_file290
	.text
mz_zip_validate_file290:
	# %291 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %291, i8** %30
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %31
	movq	$9, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %292 = load i8*, i8** %30
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %293 = icmp ne i8* %292, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %293, label %294, label %298
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file298
	jmp	mz_zip_validate_file294
	.text
mz_zip_validate_file294:
	# %295 = load i32, i32* %31
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %296 = load i8*, i8** %30
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %297 = getelementptr %struct.mz_zip_archive, i8* %296, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %295, i32* %297
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %298
	jmp	mz_zip_validate_file298
	.text
mz_zip_validate_file298:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file299:
	# %300 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %301 = getelementptr i8, i8* %300, i64 26
	movq	%r8, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %302 = getelementptr i8, i8* %301, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %303 = load i8, i8* %302
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %304 = zext i8 %303 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %305 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %306 = getelementptr i8, i8* %305, i64 26
	movq	%r8, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %307 = getelementptr i8, i8* %306, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %308 = load i8, i8* %307
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %309 = zext i8 %308 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %310 = shl i32 %309, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %311 = or i32 %304, %310
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# store i32 %311, i32* %70
	movq	%r8, %rax
	movq	-520(%rbp), %rcx
	movl	%eax, (%rcx)
	# %312 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %313 = getelementptr i8, i8* %312, i64 28
	movq	%r8, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %314 = getelementptr i8, i8* %313, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %315 = load i8, i8* %314
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %316 = zext i8 %315 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %317 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %318 = getelementptr i8, i8* %317, i64 28
	movq	%r8, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %319 = getelementptr i8, i8* %318, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %320 = load i8, i8* %319
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %321 = zext i8 %320 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %322 = shl i32 %321, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %323 = or i32 %316, %322
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# store i32 %323, i32* %71
	movq	%r8, %rax
	movq	-528(%rbp), %rcx
	movl	%eax, (%rcx)
	# %324 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %325 = getelementptr i8, i8* %324, i64 18
	movq	%r8, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %326 = getelementptr i8, i8* %325, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %327 = load i8, i8* %326
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %328 = zext i8 %327 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %329 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %330 = getelementptr i8, i8* %329, i64 18
	movq	%r8, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %331 = getelementptr i8, i8* %330, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %332 = load i8, i8* %331
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %333 = zext i8 %332 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %334 = shl i32 %333, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %335 = or i32 %328, %334
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %336 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %337 = getelementptr i8, i8* %336, i64 18
	movq	%r8, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %338 = getelementptr i8, i8* %337, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %339 = load i8, i8* %338
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %340 = zext i8 %339 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %341 = shl i32 %340, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %342 = or i32 %335, %341
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %343 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %344 = getelementptr i8, i8* %343, i64 18
	movq	%r8, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %345 = getelementptr i8, i8* %344, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %346 = load i8, i8* %345
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %347 = zext i8 %346 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %348 = shl i32 %347, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %349 = or i32 %342, %348
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %350 = zext i32 %349 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i64 %350, i64* %73
	movq	%r8, %rax
	movq	-544(%rbp), %rcx
	movq	%rax, (%rcx)
	# %351 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %352 = getelementptr i8, i8* %351, i64 22
	movq	%r8, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %353 = getelementptr i8, i8* %352, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %354 = load i8, i8* %353
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %355 = zext i8 %354 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %356 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %357 = getelementptr i8, i8* %356, i64 22
	movq	%r8, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %358 = getelementptr i8, i8* %357, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %359 = load i8, i8* %358
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %360 = zext i8 %359 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %361 = shl i32 %360, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %362 = or i32 %355, %361
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %363 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %364 = getelementptr i8, i8* %363, i64 22
	movq	%r8, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %365 = getelementptr i8, i8* %364, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %366 = load i8, i8* %365
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %367 = zext i8 %366 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %368 = shl i32 %367, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %369 = or i32 %362, %368
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %370 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %371 = getelementptr i8, i8* %370, i64 22
	movq	%r8, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %372 = getelementptr i8, i8* %371, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %373 = load i8, i8* %372
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %374 = zext i8 %373 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %375 = shl i32 %374, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %376 = or i32 %369, %375
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %377 = zext i32 %376 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i64 %377, i64* %74
	movq	%r8, %rax
	movq	-552(%rbp), %rcx
	movq	%rax, (%rcx)
	# %378 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %379 = getelementptr i8, i8* %378, i64 14
	movq	%r8, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %380 = getelementptr i8, i8* %379, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %381 = load i8, i8* %380
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %382 = zext i8 %381 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %383 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %384 = getelementptr i8, i8* %383, i64 14
	movq	%r8, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %385 = getelementptr i8, i8* %384, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %386 = load i8, i8* %385
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %387 = zext i8 %386 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %388 = shl i32 %387, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %389 = or i32 %382, %388
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %390 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %391 = getelementptr i8, i8* %390, i64 14
	movq	%r8, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %392 = getelementptr i8, i8* %391, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %393 = load i8, i8* %392
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %394 = zext i8 %393 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %395 = shl i32 %394, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %396 = or i32 %389, %395
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %397 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %398 = getelementptr i8, i8* %397, i64 14
	movq	%r8, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %399 = getelementptr i8, i8* %398, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %400 = load i8, i8* %399
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %401 = zext i8 %400 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %402 = shl i32 %401, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %403 = or i32 %396, %402
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# store i32 %403, i32* %72
	movq	%r8, %rax
	movq	-536(%rbp), %rcx
	movl	%eax, (%rcx)
	# %404 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %405 = getelementptr i8, i8* %404, i64 6
	movq	%r8, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %406 = getelementptr i8, i8* %405, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %407 = load i8, i8* %406
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %408 = zext i8 %407 to i32
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %409 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %410 = getelementptr i8, i8* %409, i64 6
	movq	%r8, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %411 = getelementptr i8, i8* %410, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %412 = load i8, i8* %411
	movq	%r8, %rax
	movb	(%rax), %al
	movq	$0, %r8
	movb	%al, %r8b
	# %413 = zext i8 %412 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %414 = shl i32 %413, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r8
	# %415 = or i32 %408, %414
	movq	%r9, %rax
	movq	%r8, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# store i32 %415, i32* %77
	movq	%r8, %rax
	movq	-576(%rbp), %rcx
	movl	%eax, (%rcx)
	# %416 = load i32, i32* %77
	movq	-576(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %417 = and i32 %416, 8
	movq	%r8, %rax
	movq	$8, %rcx
	andq	%rcx, %rax
	movq	%rax, %r8
	# %418 = icmp ne i32 %417, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# %419 = zext i1 %418 to i32
	movq	%r8, %rax
	movq	%rax, %r8
	# store i32 %419, i32* %76
	movq	%r8, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# %420 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %421 = zext i32 %420 to i64
	movq	%r8, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %422 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 16
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %423 = getelementptr [512 x i8], i8* %422, i64 0, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %424 = call i64 @strlen (i8* %423)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_strlen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %425 = icmp ne i64 %421, %424
	movq	%r9, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %425, label %426, label %435
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file435
	jmp	mz_zip_validate_file426
	.text
mz_zip_validate_file426:
	# %427 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %427, i8** %32
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %33
	movq	$9, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %428 = load i8*, i8** %32
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %429 = icmp ne i8* %428, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %429, label %430, label %434
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file434
	jmp	mz_zip_validate_file430
	.text
mz_zip_validate_file430:
	# %431 = load i32, i32* %33
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %432 = load i8*, i8** %32
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %433 = getelementptr %struct.mz_zip_archive, i8* %432, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %431, i32* %433
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %434
	jmp	mz_zip_validate_file434
	.text
mz_zip_validate_file434:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file435:
	# %436 = load i64, i64* %69
	movq	-512(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %437 = add i64 %436, 30
	movq	%r8, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %438 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %439 = zext i32 %438 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %440 = add i64 %437, %439
	movq	%r9, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %441 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %442 = zext i32 %441 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %443 = add i64 %440, %442
	movq	%r9, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %444 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 7
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %445 = load i64, i64* %444
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %446 = add i64 %443, %445
	movq	%r9, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %447 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %448 = getelementptr %struct.mz_zip_archive, i8* %447, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %449 = load i64, i64* %448
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %450 = icmp ugt i64 %446, %449
	movq	%r9, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	seta	%r8b
	# br i1 %450, label %451, label %460
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file460
	jmp	mz_zip_validate_file451
	.text
mz_zip_validate_file451:
	# %452 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %452, i8** %34
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %35
	movq	$9, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %453 = load i8*, i8** %34
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %454 = icmp ne i8* %453, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %454, label %455, label %459
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file459
	jmp	mz_zip_validate_file455
	.text
mz_zip_validate_file455:
	# %456 = load i32, i32* %35
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %457 = load i8*, i8** %34
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %458 = getelementptr %struct.mz_zip_archive, i8* %457, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %456, i32* %458
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %459
	jmp	mz_zip_validate_file459
	.text
mz_zip_validate_file459:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file460:
	# %461 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %462 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %463 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %464 = icmp ugt i32 %462, %463
	movq	%r9, %rax
	movq	%r8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	seta	%r8b
	# br i1 %464, label %465, label %467
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file467
	jmp	mz_zip_validate_file465
	.text
mz_zip_validate_file465:
	# %466 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# br label %469
	movq	%r11, %rdi
	jmp	mz_zip_validate_file469
	.text
mz_zip_validate_file467:
	# %468 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# br label %469
	jmp	mz_zip_validate_file469
	.text
mz_zip_validate_file469:
	# %470 = phi i32 [%466, %465], [%468, %467]
	# %471 = zext i32 %470 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# store i8* %461, i8** %9
	movq	%r10, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %78, i8** %10
	movq	-584(%rbp), %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %471, i64* %11
	movq	%rdi, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %472 = load i64, i64* %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %473 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %474 = getelementptr %struct.mz_zip_array, i8* %473, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %475 = load i64, i64* %474
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %476 = icmp ugt i64 %472, %475
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	seta	%dil
	# br i1 %476, label %477, label %486
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file486
	jmp	mz_zip_validate_file477
	.text
mz_zip_validate_file477:
	# %478 = load i8*, i8** %9
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %479 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %480 = load i64, i64* %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %481 = load i32, i32* %12
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %482 = call i32 @mz_zip_array_ensure_capacity (i8* %478, i8* %479, i64 %480, i32 %481)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %483 = icmp ne i32 %482, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %483, label %485, label %484
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file484
	jmp	mz_zip_validate_file485
	.text
mz_zip_validate_file484:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %490
	jmp	mz_zip_validate_file490
	.text
mz_zip_validate_file485:
	# br label %486
	jmp	mz_zip_validate_file486
	.text
mz_zip_validate_file486:
	# %487 = load i64, i64* %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %488 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %489 = getelementptr %struct.mz_zip_array, i8* %488, i32 0, i32 1
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i64 %487, i64* %489
	movq	%r8, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %8
	movq	$1, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %490
	jmp	mz_zip_validate_file490
	.text
mz_zip_validate_file490:
	# %491 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %492 = icmp ne i32 %491, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %492, label %502, label %493
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file493
	jmp	mz_zip_validate_file502
	.text
mz_zip_validate_file493:
	# %494 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %494, i8** %36
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %37
	movq	$16, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# %495 = load i8*, i8** %36
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %496 = icmp ne i8* %495, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %496, label %497, label %501
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file501
	jmp	mz_zip_validate_file497
	.text
mz_zip_validate_file497:
	# %498 = load i32, i32* %37
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %499 = load i8*, i8** %36
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %500 = getelementptr %struct.mz_zip_archive, i8* %499, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %498, i32* %500
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %501
	jmp	mz_zip_validate_file501
	.text
mz_zip_validate_file501:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file502:
	# %503 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %504 = icmp ne i32 %503, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %504, label %505, label %550
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file550
	jmp	mz_zip_validate_file505
	.text
mz_zip_validate_file505:
	# %506 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %507 = getelementptr %struct.mz_zip_archive, i8* %506, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %508 = load i8*, i8** %507
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %509 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %510 = getelementptr %struct.mz_zip_archive, i8* %509, i32 0, i32 14
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %511 = load i8*, i8** %510
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %512 = load i64, i64* %69
	movq	-512(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %513 = add i64 %512, 30
	movq	%rdi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %514 = getelementptr %struct.mz_zip_array, i8* %78, i32 0, i32 0
	movq	-584(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %515 = load i8*, i8** %514
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %516 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %517 = zext i32 %516 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %518 = call i64 %508 (i8* %511, i64 %513, i8* %515, i64 %517)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %519 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %520 = zext i32 %519 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %521 = icmp ne i64 %518, %520
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %521, label %522, label %531
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file531
	jmp	mz_zip_validate_file522
	.text
mz_zip_validate_file522:
	# %523 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %523, i8** %38
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %39
	movq	$20, %rax
	movq	-280(%rbp), %rcx
	movl	%eax, (%rcx)
	# %524 = load i8*, i8** %38
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %525 = icmp ne i8* %524, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %525, label %526, label %530
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file530
	jmp	mz_zip_validate_file526
	.text
mz_zip_validate_file526:
	# %527 = load i32, i32* %39
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %528 = load i8*, i8** %38
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %529 = getelementptr %struct.mz_zip_archive, i8* %528, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %527, i32* %529
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %530
	jmp	mz_zip_validate_file530
	.text
mz_zip_validate_file530:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file531:
	# %532 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 16
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %533 = getelementptr [512 x i8], i8* %532, i64 0, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %534 = getelementptr %struct.mz_zip_array, i8* %78, i32 0, i32 0
	movq	-584(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %535 = load i8*, i8** %534
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %536 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %537 = zext i32 %536 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %538 = call i32 @memcmp (i8* %533, i8* %535, i64 %537)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memcmp
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %539 = icmp ne i32 %538, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %539, label %540, label %549
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file549
	jmp	mz_zip_validate_file540
	.text
mz_zip_validate_file540:
	# %541 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %541, i8** %40
	movq	%rdx, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 30, i32* %41
	movq	$30, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# %542 = load i8*, i8** %40
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %543 = icmp ne i8* %542, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %543, label %544, label %548
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file548
	jmp	mz_zip_validate_file544
	.text
mz_zip_validate_file544:
	# %545 = load i32, i32* %41
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %546 = load i8*, i8** %40
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %547 = getelementptr %struct.mz_zip_archive, i8* %546, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %545, i32* %547
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %548
	jmp	mz_zip_validate_file548
	.text
mz_zip_validate_file548:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file549:
	# br label %550
	jmp	mz_zip_validate_file550
	.text
mz_zip_validate_file550:
	# %551 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %552 = icmp ne i32 %551, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %552, label %553, label %787
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file787
	jmp	mz_zip_validate_file553
	.text
mz_zip_validate_file553:
	# %554 = load i64, i64* %73
	movq	-544(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %555 = icmp eq i64 %554, 4294967295
	movq	%rdi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	sete	%dil
	# br i1 %555, label %559, label %556
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file556
	jmp	mz_zip_validate_file559
	.text
mz_zip_validate_file556:
	# %557 = load i64, i64* %74
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %558 = icmp eq i64 %557, 4294967295
	movq	%rdi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	sete	%dil
	# br i1 %558, label %559, label %787
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file787
	jmp	mz_zip_validate_file559
	.text
mz_zip_validate_file559:
	# %560 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# store i32 %560, i32* %79
	movq	%rdi, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %561 = getelementptr %struct.mz_zip_array, i8* %78, i32 0, i32 0
	movq	-584(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %562 = load i8*, i8** %561
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8* %562, i8** %80
	movq	%rdi, %rax
	movq	-600(%rbp), %rcx
	movq	%rax, (%rcx)
	# %563 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %564 = getelementptr %struct.mz_zip_archive, i8* %563, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %565 = load i8*, i8** %564
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %566 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %567 = getelementptr %struct.mz_zip_archive, i8* %566, i32 0, i32 14
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %568 = load i8*, i8** %567
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %569 = load i64, i64* %69
	movq	-512(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %570 = add i64 %569, 30
	movq	%rdi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %571 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %572 = zext i32 %571 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %573 = add i64 %570, %572
	movq	%r8, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %574 = getelementptr %struct.mz_zip_array, i8* %78, i32 0, i32 0
	movq	-584(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %575 = load i8*, i8** %574
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %576 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %577 = zext i32 %576 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %578 = call i64 %565 (i8* %568, i64 %573, i8* %575, i64 %577)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %579 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %580 = zext i32 %579 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %581 = icmp ne i64 %578, %580
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %581, label %582, label %591
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file591
	jmp	mz_zip_validate_file582
	.text
mz_zip_validate_file582:
	# %583 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %583, i8** %42
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %43
	movq	$20, %rax
	movq	-312(%rbp), %rcx
	movl	%eax, (%rcx)
	# %584 = load i8*, i8** %42
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %585 = icmp ne i8* %584, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %585, label %586, label %590
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file590
	jmp	mz_zip_validate_file586
	.text
mz_zip_validate_file586:
	# %587 = load i32, i32* %43
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %588 = load i8*, i8** %42
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %589 = getelementptr %struct.mz_zip_archive, i8* %588, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %587, i32* %589
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %590
	jmp	mz_zip_validate_file590
	.text
mz_zip_validate_file590:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file591:
	# br label %592
	jmp	mz_zip_validate_file592
	.text
mz_zip_validate_file592:
	# %593 = load i32, i32* %79
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %594 = zext i32 %593 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %595 = icmp ult i64 %594, 4
	movq	%rdi, %rax
	movq	$4, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setb	%dil
	# br i1 %595, label %596, label %605
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file605
	jmp	mz_zip_validate_file596
	.text
mz_zip_validate_file596:
	# %597 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %597, i8** %44
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %45
	movq	$9, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %598 = load i8*, i8** %44
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %599 = icmp ne i8* %598, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %599, label %600, label %604
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file604
	jmp	mz_zip_validate_file600
	.text
mz_zip_validate_file600:
	# %601 = load i32, i32* %45
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %602 = load i8*, i8** %44
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %603 = getelementptr %struct.mz_zip_archive, i8* %602, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %601, i32* %603
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %604
	jmp	mz_zip_validate_file604
	.text
mz_zip_validate_file604:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file605:
	# %606 = load i8*, i8** %80
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %607 = getelementptr i8, i8* %606, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %608 = load i8, i8* %607
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %609 = zext i8 %608 to i32
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %610 = load i8*, i8** %80
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %611 = getelementptr i8, i8* %610, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %612 = load i8, i8* %611
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %613 = zext i8 %612 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %614 = shl i32 %613, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %615 = or i32 %609, %614
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %615, i32* %81
	movq	%rdi, %rax
	movq	-608(%rbp), %rcx
	movl	%eax, (%rcx)
	# %616 = load i8*, i8** %80
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %617 = getelementptr i8, i8* %616, i64 2
	movq	%rdi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %618 = getelementptr i8, i8* %617, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %619 = load i8, i8* %618
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %620 = zext i8 %619 to i32
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %621 = load i8*, i8** %80
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %622 = getelementptr i8, i8* %621, i64 2
	movq	%rdi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %623 = getelementptr i8, i8* %622, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %624 = load i8, i8* %623
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %625 = zext i8 %624 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %626 = shl i32 %625, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %627 = or i32 %620, %626
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %627, i32* %82
	movq	%rdi, %rax
	movq	-616(%rbp), %rcx
	movl	%eax, (%rcx)
	# %628 = load i32, i32* %82
	movq	-616(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %629 = zext i32 %628 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %630 = add i64 %629, 4
	movq	%rdi, %rax
	movq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %631 = trunc i64 %630 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# store i32 %631, i32* %83
	movq	%rdi, %rax
	movq	-624(%rbp), %rcx
	movl	%eax, (%rcx)
	# %632 = load i32, i32* %83
	movq	-624(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %633 = load i32, i32* %79
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %634 = icmp ugt i32 %632, %633
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	seta	%dil
	# br i1 %634, label %635, label %644
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file644
	jmp	mz_zip_validate_file635
	.text
mz_zip_validate_file635:
	# %636 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %636, i8** %46
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %47
	movq	$9, %rax
	movq	-344(%rbp), %rcx
	movl	%eax, (%rcx)
	# %637 = load i8*, i8** %46
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %638 = icmp ne i8* %637, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %638, label %639, label %643
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file643
	jmp	mz_zip_validate_file639
	.text
mz_zip_validate_file639:
	# %640 = load i32, i32* %47
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %641 = load i8*, i8** %46
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %642 = getelementptr %struct.mz_zip_archive, i8* %641, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %640, i32* %642
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %643
	jmp	mz_zip_validate_file643
	.text
mz_zip_validate_file643:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file644:
	# %645 = load i32, i32* %81
	movq	-608(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %646 = icmp eq i32 %645, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	sete	%dil
	# br i1 %646, label %647, label %775
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file775
	jmp	mz_zip_validate_file647
	.text
mz_zip_validate_file647:
	# %648 = load i8*, i8** %80
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %649 = getelementptr i8, i8* %648, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %649, i8** %84
	movq	%rdi, %rax
	movq	-632(%rbp), %rcx
	movq	%rax, (%rcx)
	# %650 = load i32, i32* %82
	movq	-616(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %651 = zext i32 %650 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %652 = icmp ult i64 %651, 16
	movq	%rdi, %rax
	movq	$16, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setb	%dil
	# br i1 %652, label %653, label %662
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file662
	jmp	mz_zip_validate_file653
	.text
mz_zip_validate_file653:
	# %654 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %654, i8** %48
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %49
	movq	$9, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %655 = load i8*, i8** %48
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %656 = icmp ne i8* %655, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %656, label %657, label %661
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file661
	jmp	mz_zip_validate_file657
	.text
mz_zip_validate_file657:
	# %658 = load i32, i32* %49
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %659 = load i8*, i8** %48
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %660 = getelementptr %struct.mz_zip_archive, i8* %659, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %658, i32* %660
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %661
	jmp	mz_zip_validate_file661
	.text
mz_zip_validate_file661:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file662:
	# %663 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %664 = getelementptr i8, i8* %663, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %665 = load i8, i8* %664
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %666 = zext i8 %665 to i32
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %667 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %668 = getelementptr i8, i8* %667, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %669 = load i8, i8* %668
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %670 = zext i8 %669 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %671 = shl i32 %670, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %672 = or i32 %666, %671
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %673 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %674 = getelementptr i8, i8* %673, i64 2
	movq	%rdi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %675 = load i8, i8* %674
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %676 = zext i8 %675 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %677 = shl i32 %676, 16
	movq	%rdi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %678 = or i32 %672, %677
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %679 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %680 = getelementptr i8, i8* %679, i64 3
	movq	%rdi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %681 = load i8, i8* %680
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %682 = zext i8 %681 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %683 = shl i32 %682, 24
	movq	%rdi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %684 = or i32 %678, %683
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %685 = zext i32 %684 to i64
	movq	%rdi, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %686 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %687 = getelementptr i8, i8* %686, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %688 = getelementptr i8, i8* %687, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %689 = load i8, i8* %688
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %690 = zext i8 %689 to i32
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %691 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %692 = getelementptr i8, i8* %691, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %693 = getelementptr i8, i8* %692, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %694 = load i8, i8* %693
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %695 = zext i8 %694 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %696 = shl i32 %695, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %697 = or i32 %690, %696
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %698 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %699 = getelementptr i8, i8* %698, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %700 = getelementptr i8, i8* %699, i64 2
	movq	%rdi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %701 = load i8, i8* %700
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %702 = zext i8 %701 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %703 = shl i32 %702, 16
	movq	%rdi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %704 = or i32 %697, %703
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %705 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %706 = getelementptr i8, i8* %705, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %707 = getelementptr i8, i8* %706, i64 3
	movq	%rdi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %708 = load i8, i8* %707
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %709 = zext i8 %708 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %710 = shl i32 %709, 24
	movq	%rdi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %711 = or i32 %704, %710
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %712 = zext i32 %711 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %713 = shl i64 %712, 32
	movq	%rdi, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %714 = or i64 %685, %713
	movq	%r9, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# store i64 %714, i64* %74
	movq	%rdi, %rax
	movq	-552(%rbp), %rcx
	movq	%rax, (%rcx)
	# %715 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %716 = getelementptr i8, i8* %715, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %717 = getelementptr i8, i8* %716, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %718 = load i8, i8* %717
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %719 = zext i8 %718 to i32
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %720 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %721 = getelementptr i8, i8* %720, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %722 = getelementptr i8, i8* %721, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %723 = load i8, i8* %722
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %724 = zext i8 %723 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %725 = shl i32 %724, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %726 = or i32 %719, %725
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %727 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %728 = getelementptr i8, i8* %727, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %729 = getelementptr i8, i8* %728, i64 2
	movq	%rdi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %730 = load i8, i8* %729
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %731 = zext i8 %730 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %732 = shl i32 %731, 16
	movq	%rdi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %733 = or i32 %726, %732
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %734 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %735 = getelementptr i8, i8* %734, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %736 = getelementptr i8, i8* %735, i64 3
	movq	%rdi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %737 = load i8, i8* %736
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %738 = zext i8 %737 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %739 = shl i32 %738, 24
	movq	%rdi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %740 = or i32 %733, %739
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %741 = zext i32 %740 to i64
	movq	%rdi, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %742 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %743 = getelementptr i8, i8* %742, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %744 = getelementptr i8, i8* %743, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %745 = getelementptr i8, i8* %744, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %746 = load i8, i8* %745
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %747 = zext i8 %746 to i32
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %748 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %749 = getelementptr i8, i8* %748, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %750 = getelementptr i8, i8* %749, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %751 = getelementptr i8, i8* %750, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %752 = load i8, i8* %751
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %753 = zext i8 %752 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %754 = shl i32 %753, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %755 = or i32 %747, %754
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %756 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %757 = getelementptr i8, i8* %756, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %758 = getelementptr i8, i8* %757, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %759 = getelementptr i8, i8* %758, i64 2
	movq	%rdi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %760 = load i8, i8* %759
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %761 = zext i8 %760 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %762 = shl i32 %761, 16
	movq	%rdi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %763 = or i32 %755, %762
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %r8
	# %764 = load i8*, i8** %84
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %765 = getelementptr i8, i8* %764, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %766 = getelementptr i8, i8* %765, i64 4
	movq	%rdi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %767 = getelementptr i8, i8* %766, i64 3
	movq	%rdi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %768 = load i8, i8* %767
	movq	%rdi, %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %769 = zext i8 %768 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %770 = shl i32 %769, 24
	movq	%rdi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %771 = or i32 %763, %770
	movq	%r8, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %772 = zext i32 %771 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %773 = shl i64 %772, 32
	movq	%rdi, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %774 = or i64 %741, %773
	movq	%r9, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# store i64 %774, i64* %73
	movq	%rdi, %rax
	movq	-544(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %66
	movq	$1, %rax
	movq	-496(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %786
	jmp	mz_zip_validate_file786
	.text
mz_zip_validate_file775:
	# %776 = load i32, i32* %83
	movq	-624(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %777 = load i8*, i8** %80
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %778 = zext i32 %776 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %779 = getelementptr i8, i8* %777, i64 %778
	movq	%r8, %rcx
	movq	%rdi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %779, i8** %80
	movq	%rdi, %rax
	movq	-600(%rbp), %rcx
	movq	%rax, (%rcx)
	# %780 = load i32, i32* %83
	movq	-624(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %781 = load i32, i32* %79
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %782 = sub i32 %781, %780
	movq	%rdi, %rax
	movq	%r8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %782, i32* %79
	movq	%rdi, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %783
	jmp	mz_zip_validate_file783
	.text
mz_zip_validate_file783:
	# %784 = load i32, i32* %79
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %785 = icmp ne i32 %784, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %785, label %592, label %786
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file786
	jmp	mz_zip_validate_file592
	.text
mz_zip_validate_file786:
	# br label %787
	jmp	mz_zip_validate_file787
	.text
mz_zip_validate_file787:
	# %788 = load i32, i32* %76
	movq	-568(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %789 = icmp ne i32 %788, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %789, label %790, label %1119
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1119
	jmp	mz_zip_validate_file790
	.text
mz_zip_validate_file790:
	# %791 = load i64, i64* %73
	movq	-544(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %792 = icmp ne i64 %791, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setne	%dil
	# br i1 %792, label %1119, label %793
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file793
	jmp	mz_zip_validate_file1119
	.text
mz_zip_validate_file793:
	# %794 = load i32, i32* %72
	movq	-536(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %795 = icmp ne i32 %794, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %795, label %1119, label %796
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file796
	jmp	mz_zip_validate_file1119
	.text
mz_zip_validate_file796:
	# store i64 0, i64* %89
	movq	$0, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %90
	movq	$0, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %797 = load i8*, i8** %63
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %798 = getelementptr %struct.mz_zip_internal_state_tag, i8* %797, i32 0, i32 4
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %799 = load i32, i32* %798
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %800 = icmp ne i32 %799, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# br i1 %800, label %804, label %801
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rdi
	je	mz_zip_validate_file801
	jmp	mz_zip_validate_file804
	.text
mz_zip_validate_file801:
	# %802 = load i32, i32* %66
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %803 = icmp ne i32 %802, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br label %804
	movq	%rsi, %rdi
	jmp	mz_zip_validate_file804
	.text
mz_zip_validate_file804:
	# %805 = phi i1 [1, %796], [%803, %801]
	# %806 = zext i1 %805 to i64
	movq	%rdi, %rax
	movq	%rax, %rsi
	# %807 = select i1 %805, i32 6, i32 4
	pushq	%rdx
	movq	%rdi, %rcx
	movq	$6, %rax
	movq	$4, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rsi
	popq	%rdx
	# store i32 %807, i32* %91
	movq	%rsi, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %808 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %809 = getelementptr %struct.mz_zip_archive, i8* %808, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %810 = load i8*, i8** %809
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %811 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %812 = getelementptr %struct.mz_zip_archive, i8* %811, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %813 = load i8*, i8** %812
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %814 = load i64, i64* %69
	movq	-512(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %815 = add i64 %814, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %816 = load i32, i32* %70
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %817 = zext i32 %816 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %818 = add i64 %815, %817
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %819 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %820 = zext i32 %819 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %821 = add i64 %818, %820
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %822 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 7
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %823 = load i64, i64* %822
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %824 = add i64 %821, %823
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %825 = getelementptr [32 x i8], i8* %85, i64 0, i64 0
	movq	-640(%rbp), %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %826 = load i32, i32* %91
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %827 = zext i32 %826 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %828 = mul i64 4, %827
	movq	$4, %rax
	movq	%rsi, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rsi
	# %829 = call i64 %810 (i8* %813, i64 %824, i8* %825, i64 %828)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %830 = load i32, i32* %91
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %831 = zext i32 %830 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %832 = mul i64 4, %831
	movq	$4, %rax
	movq	%rsi, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rsi
	# %833 = icmp ne i64 %829, %832
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %833, label %834, label %843
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file843
	jmp	mz_zip_validate_file834
	.text
mz_zip_validate_file834:
	# %835 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %835, i8** %50
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %51
	movq	$20, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# %836 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %837 = icmp ne i8* %836, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %837, label %838, label %842
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file842
	jmp	mz_zip_validate_file838
	.text
mz_zip_validate_file838:
	# %839 = load i32, i32* %51
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %840 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %841 = getelementptr %struct.mz_zip_archive, i8* %840, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %839, i32* %841
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %842
	jmp	mz_zip_validate_file842
	.text
mz_zip_validate_file842:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file843:
	# %844 = getelementptr [32 x i8], i8* %85, i64 0, i64 0
	movq	-640(%rbp), %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %845 = getelementptr i8, i8* %844, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %846 = load i8, i8* %845
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %847 = zext i8 %846 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %848 = getelementptr [32 x i8], i8* %85, i64 0, i64 0
	movq	-640(%rbp), %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %849 = getelementptr i8, i8* %848, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %850 = load i8, i8* %849
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %851 = zext i8 %850 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %852 = shl i32 %851, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %853 = or i32 %847, %852
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %854 = getelementptr [32 x i8], i8* %85, i64 0, i64 0
	movq	-640(%rbp), %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %855 = getelementptr i8, i8* %854, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %856 = load i8, i8* %855
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %857 = zext i8 %856 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %858 = shl i32 %857, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %859 = or i32 %853, %858
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %860 = getelementptr [32 x i8], i8* %85, i64 0, i64 0
	movq	-640(%rbp), %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %861 = getelementptr i8, i8* %860, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %862 = load i8, i8* %861
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %863 = zext i8 %862 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %864 = shl i32 %863, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %865 = or i32 %859, %864
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %866 = icmp eq i32 %865, 134695760
	movq	%rsi, %rax
	movq	$134695760, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# %867 = zext i1 %866 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# store i32 %867, i32* %86
	movq	%rsi, %rax
	movq	-648(%rbp), %rcx
	movl	%eax, (%rcx)
	# %868 = load i32, i32* %86
	movq	-648(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %869 = icmp ne i32 %868, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %869, label %870, label %873
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file873
	jmp	mz_zip_validate_file870
	.text
mz_zip_validate_file870:
	# %871 = getelementptr [32 x i8], i8* %85, i64 0, i64 0
	movq	-640(%rbp), %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %872 = getelementptr i8, i8* %871, i64 4
	movq	%rbx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# br label %875
	movq	%rbx, %rdx
	jmp	mz_zip_validate_file875
	.text
mz_zip_validate_file873:
	# %874 = getelementptr [32 x i8], i8* %85, i64 0, i64 0
	movq	-640(%rbp), %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# br label %875
	jmp	mz_zip_validate_file875
	.text
mz_zip_validate_file875:
	# %876 = phi i8* [%872, %870], [%874, %873]
	# store i8* %876, i8** %87
	movq	%rdx, %rax
	movq	-656(%rbp), %rcx
	movq	%rax, (%rcx)
	# %877 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %878 = getelementptr i8, i8* %877, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %879 = load i8, i8* %878
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %880 = zext i8 %879 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %881 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %882 = getelementptr i8, i8* %881, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %883 = load i8, i8* %882
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %884 = zext i8 %883 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %885 = shl i32 %884, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %886 = or i32 %880, %885
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %887 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %888 = getelementptr i8, i8* %887, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %889 = load i8, i8* %888
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %890 = zext i8 %889 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %891 = shl i32 %890, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %892 = or i32 %886, %891
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %893 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %894 = getelementptr i8, i8* %893, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %895 = load i8, i8* %894
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %896 = zext i8 %895 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %897 = shl i32 %896, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %898 = or i32 %892, %897
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %898, i32* %88
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %899 = load i8*, i8** %63
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %900 = getelementptr %struct.mz_zip_internal_state_tag, i8* %899, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %901 = load i32, i32* %900
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %902 = icmp ne i32 %901, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %902, label %906, label %903
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file903
	jmp	mz_zip_validate_file906
	.text
mz_zip_validate_file903:
	# %904 = load i32, i32* %66
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %905 = icmp ne i32 %904, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %905, label %906, label %1035
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1035
	jmp	mz_zip_validate_file906
	.text
mz_zip_validate_file906:
	# %907 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %908 = getelementptr i8, i8* %907, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %909 = getelementptr i8, i8* %908, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %910 = load i8, i8* %909
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %911 = zext i8 %910 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %912 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %913 = getelementptr i8, i8* %912, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %914 = getelementptr i8, i8* %913, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %915 = load i8, i8* %914
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %916 = zext i8 %915 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %917 = shl i32 %916, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %918 = or i32 %911, %917
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %919 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %920 = getelementptr i8, i8* %919, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %921 = getelementptr i8, i8* %920, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %922 = load i8, i8* %921
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %923 = zext i8 %922 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %924 = shl i32 %923, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %925 = or i32 %918, %924
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %926 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %927 = getelementptr i8, i8* %926, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %928 = getelementptr i8, i8* %927, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %929 = load i8, i8* %928
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %930 = zext i8 %929 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %931 = shl i32 %930, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %932 = or i32 %925, %931
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %933 = zext i32 %932 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %934 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %935 = getelementptr i8, i8* %934, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %936 = getelementptr i8, i8* %935, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %937 = getelementptr i8, i8* %936, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %938 = load i8, i8* %937
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %939 = zext i8 %938 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %940 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %941 = getelementptr i8, i8* %940, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %942 = getelementptr i8, i8* %941, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %943 = getelementptr i8, i8* %942, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %944 = load i8, i8* %943
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %945 = zext i8 %944 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %946 = shl i32 %945, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %947 = or i32 %939, %946
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %948 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %949 = getelementptr i8, i8* %948, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %950 = getelementptr i8, i8* %949, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %951 = getelementptr i8, i8* %950, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %952 = load i8, i8* %951
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %953 = zext i8 %952 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %954 = shl i32 %953, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %955 = or i32 %947, %954
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %956 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %957 = getelementptr i8, i8* %956, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %958 = getelementptr i8, i8* %957, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %959 = getelementptr i8, i8* %958, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %960 = load i8, i8* %959
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %961 = zext i8 %960 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %962 = shl i32 %961, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %963 = or i32 %955, %962
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %964 = zext i32 %963 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %965 = shl i64 %964, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %966 = or i64 %933, %965
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %966, i64* %89
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %967 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %968 = getelementptr i8, i8* %967, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %969 = getelementptr i8, i8* %968, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %970 = getelementptr i8, i8* %969, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %971 = load i8, i8* %970
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %972 = zext i8 %971 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %973 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %974 = getelementptr i8, i8* %973, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %975 = getelementptr i8, i8* %974, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %976 = getelementptr i8, i8* %975, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %977 = load i8, i8* %976
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %978 = zext i8 %977 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %979 = shl i32 %978, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %980 = or i32 %972, %979
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %981 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %982 = getelementptr i8, i8* %981, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %983 = getelementptr i8, i8* %982, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %984 = getelementptr i8, i8* %983, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %985 = load i8, i8* %984
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %986 = zext i8 %985 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %987 = shl i32 %986, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %988 = or i32 %980, %987
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %989 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %990 = getelementptr i8, i8* %989, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %991 = getelementptr i8, i8* %990, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %992 = getelementptr i8, i8* %991, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %993 = load i8, i8* %992
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %994 = zext i8 %993 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %995 = shl i32 %994, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %996 = or i32 %988, %995
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %997 = zext i32 %996 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %998 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %999 = getelementptr i8, i8* %998, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1000 = getelementptr i8, i8* %999, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1001 = getelementptr i8, i8* %1000, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1002 = getelementptr i8, i8* %1001, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1003 = load i8, i8* %1002
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1004 = zext i8 %1003 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1005 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1006 = getelementptr i8, i8* %1005, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1007 = getelementptr i8, i8* %1006, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1008 = getelementptr i8, i8* %1007, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1009 = getelementptr i8, i8* %1008, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1010 = load i8, i8* %1009
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1011 = zext i8 %1010 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1012 = shl i32 %1011, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1013 = or i32 %1004, %1012
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1014 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1015 = getelementptr i8, i8* %1014, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1016 = getelementptr i8, i8* %1015, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1017 = getelementptr i8, i8* %1016, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1018 = getelementptr i8, i8* %1017, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1019 = load i8, i8* %1018
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1020 = zext i8 %1019 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1021 = shl i32 %1020, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1022 = or i32 %1013, %1021
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1023 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1024 = getelementptr i8, i8* %1023, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1025 = getelementptr i8, i8* %1024, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1026 = getelementptr i8, i8* %1025, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1027 = getelementptr i8, i8* %1026, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1028 = load i8, i8* %1027
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1029 = zext i8 %1028 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1030 = shl i32 %1029, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1031 = or i32 %1022, %1030
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1032 = zext i32 %1031 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1033 = shl i64 %1032, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1034 = or i64 %997, %1033
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1034, i64* %90
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# br label %1094
	jmp	mz_zip_validate_file1094
	.text
mz_zip_validate_file1035:
	# %1036 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1037 = getelementptr i8, i8* %1036, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1038 = getelementptr i8, i8* %1037, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1039 = load i8, i8* %1038
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1040 = zext i8 %1039 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1041 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1042 = getelementptr i8, i8* %1041, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1043 = getelementptr i8, i8* %1042, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1044 = load i8, i8* %1043
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1045 = zext i8 %1044 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1046 = shl i32 %1045, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1047 = or i32 %1040, %1046
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1048 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1049 = getelementptr i8, i8* %1048, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1050 = getelementptr i8, i8* %1049, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1051 = load i8, i8* %1050
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1052 = zext i8 %1051 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1053 = shl i32 %1052, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1054 = or i32 %1047, %1053
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1055 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1056 = getelementptr i8, i8* %1055, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1057 = getelementptr i8, i8* %1056, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1058 = load i8, i8* %1057
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1059 = zext i8 %1058 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1060 = shl i32 %1059, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1061 = or i32 %1054, %1060
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1062 = zext i32 %1061 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %1062, i64* %89
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %1063 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1064 = getelementptr i8, i8* %1063, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1065 = getelementptr i8, i8* %1064, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1066 = getelementptr i8, i8* %1065, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1067 = load i8, i8* %1066
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1068 = zext i8 %1067 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1069 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1070 = getelementptr i8, i8* %1069, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1071 = getelementptr i8, i8* %1070, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1072 = getelementptr i8, i8* %1071, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1073 = load i8, i8* %1072
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1074 = zext i8 %1073 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1075 = shl i32 %1074, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1076 = or i32 %1068, %1075
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1077 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1078 = getelementptr i8, i8* %1077, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1079 = getelementptr i8, i8* %1078, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1080 = getelementptr i8, i8* %1079, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1081 = load i8, i8* %1080
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1082 = zext i8 %1081 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1083 = shl i32 %1082, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1084 = or i32 %1076, %1083
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1085 = load i8*, i8** %87
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1086 = getelementptr i8, i8* %1085, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1087 = getelementptr i8, i8* %1086, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1088 = getelementptr i8, i8* %1087, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1089 = load i8, i8* %1088
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1090 = zext i8 %1089 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1091 = shl i32 %1090, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1092 = or i32 %1084, %1091
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1093 = zext i32 %1092 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %1093, i64* %90
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# br label %1094
	jmp	mz_zip_validate_file1094
	.text
mz_zip_validate_file1094:
	# %1095 = load i32, i32* %88
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1096 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 6
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1097 = load i32, i32* %1096
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1098 = icmp ne i32 %1095, %1097
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1098, label %1109, label %1099
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1099
	jmp	mz_zip_validate_file1109
	.text
mz_zip_validate_file1099:
	# %1100 = load i64, i64* %89
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1101 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 7
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1102 = load i64, i64* %1101
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1103 = icmp ne i64 %1100, %1102
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1103, label %1109, label %1104
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1104
	jmp	mz_zip_validate_file1109
	.text
mz_zip_validate_file1104:
	# %1105 = load i64, i64* %90
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1106 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 8
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1107 = load i64, i64* %1106
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1108 = icmp ne i64 %1105, %1107
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1108, label %1109, label %1118
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1118
	jmp	mz_zip_validate_file1109
	.text
mz_zip_validate_file1109:
	# %1110 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1110, i8** %52
	movq	%rdx, %rax
	movq	-384(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 30, i32* %53
	movq	$30, %rax
	movq	-392(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1111 = load i8*, i8** %52
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1112 = icmp ne i8* %1111, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1112, label %1113, label %1117
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1117
	jmp	mz_zip_validate_file1113
	.text
mz_zip_validate_file1113:
	# %1114 = load i32, i32* %53
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1115 = load i8*, i8** %52
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1116 = getelementptr %struct.mz_zip_archive, i8* %1115, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1114, i32* %1116
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1117
	jmp	mz_zip_validate_file1117
	.text
mz_zip_validate_file1117:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file1118:
	# br label %1144
	jmp	mz_zip_validate_file1144
	.text
mz_zip_validate_file1119:
	# %1120 = load i32, i32* %72
	movq	-536(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1121 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 6
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1122 = load i32, i32* %1121
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1123 = icmp ne i32 %1120, %1122
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1123, label %1134, label %1124
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1124
	jmp	mz_zip_validate_file1134
	.text
mz_zip_validate_file1124:
	# %1125 = load i64, i64* %73
	movq	-544(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1126 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 7
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1127 = load i64, i64* %1126
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1128 = icmp ne i64 %1125, %1127
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1128, label %1134, label %1129
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1129
	jmp	mz_zip_validate_file1134
	.text
mz_zip_validate_file1129:
	# %1130 = load i64, i64* %74
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1131 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 8
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1132 = load i64, i64* %1131
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1133 = icmp ne i64 %1130, %1132
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1133, label %1134, label %1143
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1143
	jmp	mz_zip_validate_file1134
	.text
mz_zip_validate_file1134:
	# %1135 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1135, i8** %54
	movq	%rdx, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 30, i32* %55
	movq	$30, %rax
	movq	-408(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1136 = load i8*, i8** %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1137 = icmp ne i8* %1136, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1137, label %1138, label %1142
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1142
	jmp	mz_zip_validate_file1138
	.text
mz_zip_validate_file1138:
	# %1139 = load i32, i32* %55
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1140 = load i8*, i8** %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1141 = getelementptr %struct.mz_zip_archive, i8* %1140, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1139, i32* %1141
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1142
	jmp	mz_zip_validate_file1142
	.text
mz_zip_validate_file1142:
	# br label %1183
	jmp	mz_zip_validate_file1183
	.text
mz_zip_validate_file1143:
	# br label %1144
	jmp	mz_zip_validate_file1144
	.text
mz_zip_validate_file1144:
	# %1145 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1145, i8** %4
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %78, i8** %5
	movq	-584(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1146 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1147 = getelementptr %struct.mz_zip_archive, i8* %1146, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1148 = load i8*, i8** %1147
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1149 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1150 = getelementptr %struct.mz_zip_archive, i8* %1149, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1151 = load i8*, i8** %1150
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1152 = load i8*, i8** %5
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1153 = load i8*, i8** %1152
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1148 (i8* %1151, i8* %1153)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1154 = load i8*, i8** %5
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1155 = load i8*, i8** %5
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1156 = call i64 @llvm.objectsize.i64.p0 (i8* %1155, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1157 = call i8* @__memset_chk (i8* %1154, i32 0, i64 32, i64 %1156)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1158 = load i32, i32* %61
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1159 = and i32 %1158, 8192
	movq	%rdx, %rax
	movq	$8192, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1160 = icmp eq i32 %1159, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1160, label %1161, label %1182
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1182
	jmp	mz_zip_validate_file1161
	.text
mz_zip_validate_file1161:
	# %1162 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1163 = load i32, i32* %60
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1164 = call i32 @mz_zip_reader_extract_to_callback (i8* %1162, i32 %1163, i8* @mz_zip_compute_crc32_callback, i8* %75, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	leaq	_mz_zip_compute_crc32_callback(%rip), %rax
	pushq	%rax
	movq	-560(%rbp), %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_callback
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1165 = icmp ne i32 %1164, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1165, label %1167, label %1166
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1166
	jmp	mz_zip_validate_file1167
	.text
mz_zip_validate_file1166:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file1167:
	# %1168 = load i32, i32* %75
	movq	-560(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1169 = getelementptr %struct.mz_zip_archive_file_stat, i8* %62, i32 0, i32 6
	movq	-464(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1170 = load i32, i32* %1169
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1171 = icmp ne i32 %1168, %1170
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1171, label %1172, label %1181
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1181
	jmp	mz_zip_validate_file1172
	.text
mz_zip_validate_file1172:
	# %1173 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1173, i8** %56
	movq	%rdx, %rax
	movq	-416(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 30, i32* %57
	movq	$30, %rax
	movq	-424(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1174 = load i8*, i8** %56
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1175 = icmp ne i8* %1174, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1175, label %1176, label %1180
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file1180
	jmp	mz_zip_validate_file1176
	.text
mz_zip_validate_file1176:
	# %1177 = load i32, i32* %57
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1178 = load i8*, i8** %56
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1179 = getelementptr %struct.mz_zip_archive, i8* %1178, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1177, i32* %1179
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1180
	jmp	mz_zip_validate_file1180
	.text
mz_zip_validate_file1180:
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file1181:
	# br label %1182
	jmp	mz_zip_validate_file1182
	.text
mz_zip_validate_file1182:
	# store i32 1, i32* %58
	movq	$1, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file1183:
	# %1184 = load i8*, i8** %59
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1184, i8** %6
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %78, i8** %7
	movq	-584(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1185 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1186 = getelementptr %struct.mz_zip_archive, i8* %1185, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1187 = load i8*, i8** %1186
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1188 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1189 = getelementptr %struct.mz_zip_archive, i8* %1188, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1190 = load i8*, i8** %1189
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1191 = load i8*, i8** %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1192 = load i8*, i8** %1191
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1187 (i8* %1190, i8* %1192)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1193 = load i8*, i8** %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1194 = load i8*, i8** %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1195 = call i64 @llvm.objectsize.i64.p0 (i8* %1194, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1196 = call i8* @__memset_chk (i8* %1193, i32 0, i64 32, i64 %1195)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1197
	jmp	mz_zip_validate_file1197
	.text
mz_zip_validate_file1197:
	# %1198 = load i32, i32* %58
	movq	-432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %1198
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_file_stat_internal
_mz_zip_file_stat_internal:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$168, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%rbx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	popq	%r8
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -80(%rbp)
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %19 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %23 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %28 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -160(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# store i8* %0, i8** %19
	movq	%r8, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %20
	movq	%rdi, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %21
	movq	%rsi, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %22
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %4, i8** %23
	movq	%rbx, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# %32 = load i8*, i8** %21
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# store i8* %32, i8** %25
	movq	%r11, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %33 = load i8*, i8** %23
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %34 = icmp ne i8* %33, null
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r11
	setne	%r11b
	# br i1 %34, label %35, label %37
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal37
	jmp	mz_zip_file_stat_internal35
	.text
mz_zip_file_stat_internal35:
	# %36 = load i8*, i8** %23
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# store i32 0, i32* %36
	movq	$0, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %37
	jmp	mz_zip_file_stat_internal37
	.text
mz_zip_file_stat_internal37:
	# %38 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %39 = icmp ne i8* %38, null
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r11
	setne	%r11b
	# br i1 %39, label %40, label %43
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal43
	jmp	mz_zip_file_stat_internal40
	.text
mz_zip_file_stat_internal40:
	# %41 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %42 = icmp ne i8* %41, null
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r11
	setne	%r11b
	# br i1 %42, label %52, label %43
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal43
	jmp	mz_zip_file_stat_internal52
	.text
mz_zip_file_stat_internal43:
	# %44 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %44, i8** %6
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %45 = load i8*, i8** %6
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %46 = icmp ne i8* %45, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %46, label %47, label %51
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal51
	jmp	mz_zip_file_stat_internal47
	.text
mz_zip_file_stat_internal47:
	# %48 = load i32, i32* %7
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %49 = load i8*, i8** %6
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = getelementptr %struct.mz_zip_archive, i8* %49, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %48, i32* %50
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %51
	jmp	mz_zip_file_stat_internal51
	.text
mz_zip_file_stat_internal51:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %829
	jmp	mz_zip_file_stat_internal829
	.text
mz_zip_file_stat_internal52:
	# %53 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r12
	movl	%eax, %r12d
	# %54 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %55 = getelementptr %struct.mz_zip_archive_file_stat, i8* %54, i32 0, i32 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i32 %53, i32* %55
	movq	%r12, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %56 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %57 = getelementptr %struct.mz_zip_archive, i8* %56, i32 0, i32 15
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %58 = load i8*, i8** %57
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %59 = getelementptr %struct.mz_zip_internal_state_tag, i8* %58, i32 0, i32 1
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %60 = getelementptr %struct.mz_zip_array, i8* %59, i32 0, i32 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %61 = load i8*, i8** %60
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %62 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %63 = zext i32 %62 to i64
	movq	%r11, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %64 = getelementptr i32, i8* %61, i64 %63
	movq	%r12, %rcx
	movq	%r11, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %65 = load i32, i32* %64
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %66 = zext i32 %65 to i64
	movq	%r11, %rax
	movq	$0, %r12
	movl	%eax, %r12d
	# %67 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %68 = getelementptr %struct.mz_zip_archive_file_stat, i8* %67, i32 0, i32 1
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i64 %66, i64* %68
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %69 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %70 = getelementptr i8, i8* %69, i64 4
	movq	%r11, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %71 = getelementptr i8, i8* %70, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %72 = load i8, i8* %71
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %73 = zext i8 %72 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %74 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %75 = getelementptr i8, i8* %74, i64 4
	movq	%r11, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %76 = getelementptr i8, i8* %75, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %77 = load i8, i8* %76
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %78 = zext i8 %77 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %79 = shl i32 %78, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %80 = or i32 %73, %79
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %81 = trunc i32 %80 to i16
	movq	%r11, %rax
	movq	$0, %r12
	movw	%ax, %r12w
	# %82 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %83 = getelementptr %struct.mz_zip_archive_file_stat, i8* %82, i32 0, i32 2
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i16 %81, i16* %83
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %84 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %85 = getelementptr i8, i8* %84, i64 6
	movq	%r11, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %86 = getelementptr i8, i8* %85, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %87 = load i8, i8* %86
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %88 = zext i8 %87 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %89 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %90 = getelementptr i8, i8* %89, i64 6
	movq	%r11, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %91 = getelementptr i8, i8* %90, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %92 = load i8, i8* %91
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %93 = zext i8 %92 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %94 = shl i32 %93, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %95 = or i32 %88, %94
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %96 = trunc i32 %95 to i16
	movq	%r11, %rax
	movq	$0, %r12
	movw	%ax, %r12w
	# %97 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %98 = getelementptr %struct.mz_zip_archive_file_stat, i8* %97, i32 0, i32 3
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i16 %96, i16* %98
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %99 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %100 = getelementptr i8, i8* %99, i64 8
	movq	%r11, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %101 = getelementptr i8, i8* %100, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %102 = load i8, i8* %101
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %103 = zext i8 %102 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %104 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %105 = getelementptr i8, i8* %104, i64 8
	movq	%r11, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %106 = getelementptr i8, i8* %105, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %107 = load i8, i8* %106
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %108 = zext i8 %107 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %109 = shl i32 %108, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %110 = or i32 %103, %109
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %111 = trunc i32 %110 to i16
	movq	%r11, %rax
	movq	$0, %r12
	movw	%ax, %r12w
	# %112 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %113 = getelementptr %struct.mz_zip_archive_file_stat, i8* %112, i32 0, i32 4
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i16 %111, i16* %113
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %114 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %115 = getelementptr i8, i8* %114, i64 10
	movq	%r11, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %116 = getelementptr i8, i8* %115, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %117 = load i8, i8* %116
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %118 = zext i8 %117 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %119 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %120 = getelementptr i8, i8* %119, i64 10
	movq	%r11, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %121 = getelementptr i8, i8* %120, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %122 = load i8, i8* %121
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %123 = zext i8 %122 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %124 = shl i32 %123, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %125 = or i32 %118, %124
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %126 = trunc i32 %125 to i16
	movq	%r11, %rax
	movq	$0, %r12
	movw	%ax, %r12w
	# %127 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %128 = getelementptr %struct.mz_zip_archive_file_stat, i8* %127, i32 0, i32 5
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i16 %126, i16* %128
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %129 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %130 = getelementptr i8, i8* %129, i64 12
	movq	%r11, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %131 = getelementptr i8, i8* %130, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %132 = load i8, i8* %131
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %133 = zext i8 %132 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %134 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %135 = getelementptr i8, i8* %134, i64 12
	movq	%r11, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %136 = getelementptr i8, i8* %135, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %137 = load i8, i8* %136
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %138 = zext i8 %137 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %139 = shl i32 %138, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %140 = or i32 %133, %139
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %141 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %142 = getelementptr i8, i8* %141, i64 14
	movq	%r11, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %143 = getelementptr i8, i8* %142, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %144 = load i8, i8* %143
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %145 = zext i8 %144 to i32
	movq	%r11, %rax
	movq	$0, %r13
	movb	%al, %r13b
	# %146 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %147 = getelementptr i8, i8* %146, i64 14
	movq	%r11, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %148 = getelementptr i8, i8* %147, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %149 = load i8, i8* %148
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %150 = zext i8 %149 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %151 = shl i32 %150, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %152 = or i32 %145, %151
	movq	%r13, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %153 = call i64 @mz_zip_dos_to_time_t (i32 %140, i32 %152)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_dos_to_time_t
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r12
	# %154 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %155 = getelementptr %struct.mz_zip_archive_file_stat, i8* %154, i32 0, i32 18
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i64 %153, i64* %155
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %156 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %157 = getelementptr i8, i8* %156, i64 16
	movq	%r11, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %158 = getelementptr i8, i8* %157, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %159 = load i8, i8* %158
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %160 = zext i8 %159 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %161 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %162 = getelementptr i8, i8* %161, i64 16
	movq	%r11, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %163 = getelementptr i8, i8* %162, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %164 = load i8, i8* %163
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %165 = zext i8 %164 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %166 = shl i32 %165, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %167 = or i32 %160, %166
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %168 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %169 = getelementptr i8, i8* %168, i64 16
	movq	%r11, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %170 = getelementptr i8, i8* %169, i64 2
	movq	%r11, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %171 = load i8, i8* %170
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %172 = zext i8 %171 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %173 = shl i32 %172, 16
	movq	%r11, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %174 = or i32 %167, %173
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %175 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %176 = getelementptr i8, i8* %175, i64 16
	movq	%r11, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %177 = getelementptr i8, i8* %176, i64 3
	movq	%r11, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %178 = load i8, i8* %177
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %179 = zext i8 %178 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %180 = shl i32 %179, 24
	movq	%r11, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %181 = or i32 %174, %180
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %182 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %183 = getelementptr %struct.mz_zip_archive_file_stat, i8* %182, i32 0, i32 6
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i32 %181, i32* %183
	movq	%r12, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %184 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %185 = getelementptr i8, i8* %184, i64 20
	movq	%r11, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %186 = getelementptr i8, i8* %185, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %187 = load i8, i8* %186
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %188 = zext i8 %187 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %189 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %190 = getelementptr i8, i8* %189, i64 20
	movq	%r11, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %191 = getelementptr i8, i8* %190, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %192 = load i8, i8* %191
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %193 = zext i8 %192 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %194 = shl i32 %193, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %195 = or i32 %188, %194
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %196 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %197 = getelementptr i8, i8* %196, i64 20
	movq	%r11, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %198 = getelementptr i8, i8* %197, i64 2
	movq	%r11, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %199 = load i8, i8* %198
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %200 = zext i8 %199 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %201 = shl i32 %200, 16
	movq	%r11, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %202 = or i32 %195, %201
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %203 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %204 = getelementptr i8, i8* %203, i64 20
	movq	%r11, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %205 = getelementptr i8, i8* %204, i64 3
	movq	%r11, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %206 = load i8, i8* %205
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %207 = zext i8 %206 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %208 = shl i32 %207, 24
	movq	%r11, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %209 = or i32 %202, %208
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %210 = zext i32 %209 to i64
	movq	%r11, %rax
	movq	$0, %r12
	movl	%eax, %r12d
	# %211 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %212 = getelementptr %struct.mz_zip_archive_file_stat, i8* %211, i32 0, i32 7
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i64 %210, i64* %212
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %213 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %214 = getelementptr i8, i8* %213, i64 24
	movq	%r11, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %215 = getelementptr i8, i8* %214, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %216 = load i8, i8* %215
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %217 = zext i8 %216 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %218 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %219 = getelementptr i8, i8* %218, i64 24
	movq	%r11, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %220 = getelementptr i8, i8* %219, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %221 = load i8, i8* %220
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %222 = zext i8 %221 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %223 = shl i32 %222, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %224 = or i32 %217, %223
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %225 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %226 = getelementptr i8, i8* %225, i64 24
	movq	%r11, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %227 = getelementptr i8, i8* %226, i64 2
	movq	%r11, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %228 = load i8, i8* %227
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %229 = zext i8 %228 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %230 = shl i32 %229, 16
	movq	%r11, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %231 = or i32 %224, %230
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %232 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %233 = getelementptr i8, i8* %232, i64 24
	movq	%r11, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %234 = getelementptr i8, i8* %233, i64 3
	movq	%r11, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %235 = load i8, i8* %234
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %236 = zext i8 %235 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %237 = shl i32 %236, 24
	movq	%r11, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %238 = or i32 %231, %237
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %239 = zext i32 %238 to i64
	movq	%r11, %rax
	movq	$0, %r12
	movl	%eax, %r12d
	# %240 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %241 = getelementptr %struct.mz_zip_archive_file_stat, i8* %240, i32 0, i32 8
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i64 %239, i64* %241
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %242 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %243 = getelementptr i8, i8* %242, i64 36
	movq	%r11, %rcx
	movq	$36, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %244 = getelementptr i8, i8* %243, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %245 = load i8, i8* %244
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %246 = zext i8 %245 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %247 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %248 = getelementptr i8, i8* %247, i64 36
	movq	%r11, %rcx
	movq	$36, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %249 = getelementptr i8, i8* %248, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %250 = load i8, i8* %249
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %251 = zext i8 %250 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %252 = shl i32 %251, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %253 = or i32 %246, %252
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %254 = trunc i32 %253 to i16
	movq	%r11, %rax
	movq	$0, %r12
	movw	%ax, %r12w
	# %255 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %256 = getelementptr %struct.mz_zip_archive_file_stat, i8* %255, i32 0, i32 9
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i16 %254, i16* %256
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %257 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %258 = getelementptr i8, i8* %257, i64 38
	movq	%r11, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %259 = getelementptr i8, i8* %258, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %260 = load i8, i8* %259
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %261 = zext i8 %260 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %262 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %263 = getelementptr i8, i8* %262, i64 38
	movq	%r11, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %264 = getelementptr i8, i8* %263, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %265 = load i8, i8* %264
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %266 = zext i8 %265 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %267 = shl i32 %266, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %268 = or i32 %261, %267
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %269 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %270 = getelementptr i8, i8* %269, i64 38
	movq	%r11, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %271 = getelementptr i8, i8* %270, i64 2
	movq	%r11, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %272 = load i8, i8* %271
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %273 = zext i8 %272 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %274 = shl i32 %273, 16
	movq	%r11, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %275 = or i32 %268, %274
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %276 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %277 = getelementptr i8, i8* %276, i64 38
	movq	%r11, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %278 = getelementptr i8, i8* %277, i64 3
	movq	%r11, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %279 = load i8, i8* %278
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %280 = zext i8 %279 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %281 = shl i32 %280, 24
	movq	%r11, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %282 = or i32 %275, %281
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %283 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %284 = getelementptr %struct.mz_zip_archive_file_stat, i8* %283, i32 0, i32 10
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i32 %282, i32* %284
	movq	%r12, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %285 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %286 = getelementptr i8, i8* %285, i64 42
	movq	%r11, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %287 = getelementptr i8, i8* %286, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %288 = load i8, i8* %287
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %289 = zext i8 %288 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %290 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %291 = getelementptr i8, i8* %290, i64 42
	movq	%r11, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %292 = getelementptr i8, i8* %291, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %293 = load i8, i8* %292
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %294 = zext i8 %293 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %295 = shl i32 %294, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %296 = or i32 %289, %295
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %297 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %298 = getelementptr i8, i8* %297, i64 42
	movq	%r11, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %299 = getelementptr i8, i8* %298, i64 2
	movq	%r11, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %300 = load i8, i8* %299
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %301 = zext i8 %300 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %302 = shl i32 %301, 16
	movq	%r11, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %303 = or i32 %296, %302
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r12
	# %304 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %305 = getelementptr i8, i8* %304, i64 42
	movq	%r11, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %306 = getelementptr i8, i8* %305, i64 3
	movq	%r11, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %307 = load i8, i8* %306
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %308 = zext i8 %307 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %309 = shl i32 %308, 24
	movq	%r11, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %310 = or i32 %303, %309
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# %311 = zext i32 %310 to i64
	movq	%r11, %rax
	movq	$0, %r12
	movl	%eax, %r12d
	# %312 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %313 = getelementptr %struct.mz_zip_archive_file_stat, i8* %312, i32 0, i32 11
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i64 %311, i64* %313
	movq	%r12, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %314 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %315 = getelementptr i8, i8* %314, i64 28
	movq	%r11, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %316 = getelementptr i8, i8* %315, i64 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %317 = load i8, i8* %316
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %318 = zext i8 %317 to i32
	movq	%r11, %rax
	movq	$0, %r12
	movb	%al, %r12b
	# %319 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %320 = getelementptr i8, i8* %319, i64 28
	movq	%r11, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %321 = getelementptr i8, i8* %320, i64 1
	movq	%r11, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %322 = load i8, i8* %321
	movq	%r11, %rax
	movb	(%rax), %al
	movq	$0, %r11
	movb	%al, %r11b
	# %323 = zext i8 %322 to i32
	movq	%r11, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %324 = shl i32 %323, 8
	movq	%r11, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r11
	# %325 = or i32 %318, %324
	movq	%r12, %rax
	movq	%r11, %rcx
	orq	%rcx, %rax
	movq	%rax, %r11
	# store i32 %325, i32* %24
	movq	%r11, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %326 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %327 = icmp ult i32 %326, 511
	movq	%r11, %rax
	movq	$511, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r11
	setb	%r11b
	# br i1 %327, label %328, label %330
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal330
	jmp	mz_zip_file_stat_internal328
	.text
mz_zip_file_stat_internal328:
	# %329 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# br label %331
	jmp	mz_zip_file_stat_internal331
	.text
mz_zip_file_stat_internal330:
	# br label %331
	movq	$511, %r10
	jmp	mz_zip_file_stat_internal331
	.text
mz_zip_file_stat_internal331:
	# %332 = phi i32 [%329, %328], [511, %330]
	# store i32 %332, i32* %24
	movq	%r10, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %333 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %334 = getelementptr %struct.mz_zip_archive_file_stat, i8* %333, i32 0, i32 16
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %335 = getelementptr [512 x i8], i8* %334, i64 0, i64 0
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# %336 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %337 = getelementptr i8, i8* %336, i64 46
	movq	%r10, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %338 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %339 = zext i32 %338 to i64
	movq	%r10, %rax
	movq	$0, %r11
	movl	%eax, %r11d
	# %340 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %341 = getelementptr %struct.mz_zip_archive_file_stat, i8* %340, i32 0, i32 16
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %342 = getelementptr [512 x i8], i8* %341, i64 0, i64 0
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %343 = call i64 @llvm.objectsize.i64.p0 (i8* %342, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r10
	# %344 = call i8* @__memcpy_chk (i8* %335, i8* %337, i64 %339, i64 %343)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r13, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r10
	# %345 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %346 = getelementptr %struct.mz_zip_archive_file_stat, i8* %345, i32 0, i32 16
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %347 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %348 = zext i32 %347 to i64
	movq	%r10, %rax
	movq	$0, %r10
	movl	%eax, %r10d
	# %349 = getelementptr [512 x i8], i8* %346, i64 0, i64 %348
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%r10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# store i8 0, i8* %349
	movq	$0, %rax
	movq	%r10, %rcx
	movb	%al, (%rcx)
	# %350 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %351 = getelementptr i8, i8* %350, i64 32
	movq	%r10, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %352 = getelementptr i8, i8* %351, i64 0
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %353 = load i8, i8* %352
	movq	%r10, %rax
	movb	(%rax), %al
	movq	$0, %r10
	movb	%al, %r10b
	# %354 = zext i8 %353 to i32
	movq	%r10, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# %355 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %356 = getelementptr i8, i8* %355, i64 32
	movq	%r10, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %357 = getelementptr i8, i8* %356, i64 1
	movq	%r10, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %358 = load i8, i8* %357
	movq	%r10, %rax
	movb	(%rax), %al
	movq	$0, %r10
	movb	%al, %r10b
	# %359 = zext i8 %358 to i32
	movq	%r10, %rax
	movq	$0, %r10
	movb	%al, %r10b
	# %360 = shl i32 %359, 8
	movq	%r10, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r10
	# %361 = or i32 %354, %360
	movq	%r11, %rax
	movq	%r10, %rcx
	orq	%rcx, %rax
	movq	%rax, %r10
	# store i32 %361, i32* %24
	movq	%r10, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %362 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %363 = icmp ult i32 %362, 511
	movq	%r10, %rax
	movq	$511, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r10
	setb	%r10b
	# br i1 %363, label %364, label %366
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal366
	jmp	mz_zip_file_stat_internal364
	.text
mz_zip_file_stat_internal364:
	# %365 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# br label %367
	jmp	mz_zip_file_stat_internal367
	.text
mz_zip_file_stat_internal366:
	# br label %367
	movq	$511, %r9
	jmp	mz_zip_file_stat_internal367
	.text
mz_zip_file_stat_internal367:
	# %368 = phi i32 [%365, %364], [511, %366]
	# store i32 %368, i32* %24
	movq	%r9, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %369 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %370 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %371 = getelementptr %struct.mz_zip_archive_file_stat, i8* %370, i32 0, i32 12
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# store i32 %369, i32* %371
	movq	%r10, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %372 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %373 = getelementptr %struct.mz_zip_archive_file_stat, i8* %372, i32 0, i32 17
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %374 = getelementptr [512 x i8], i8* %373, i64 0, i64 0
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %375 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %376 = getelementptr i8, i8* %375, i64 46
	movq	%r9, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %377 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %378 = getelementptr i8, i8* %377, i64 28
	movq	%r9, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %379 = getelementptr i8, i8* %378, i64 0
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %380 = load i8, i8* %379
	movq	%r9, %rax
	movb	(%rax), %al
	movq	$0, %r9
	movb	%al, %r9b
	# %381 = zext i8 %380 to i32
	movq	%r9, %rax
	movq	$0, %r10
	movb	%al, %r10b
	# %382 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %383 = getelementptr i8, i8* %382, i64 28
	movq	%r9, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %384 = getelementptr i8, i8* %383, i64 1
	movq	%r9, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %385 = load i8, i8* %384
	movq	%r9, %rax
	movb	(%rax), %al
	movq	$0, %r9
	movb	%al, %r9b
	# %386 = zext i8 %385 to i32
	movq	%r9, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %387 = shl i32 %386, 8
	movq	%r9, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r9
	# %388 = or i32 %381, %387
	movq	%r10, %rax
	movq	%r9, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %389 = zext i32 %388 to i64
	movq	%r9, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %390 = getelementptr i8, i8* %376, i64 %389
	movq	%r11, %rcx
	movq	%r9, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %391 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %392 = getelementptr i8, i8* %391, i64 30
	movq	%r9, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %393 = getelementptr i8, i8* %392, i64 0
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %394 = load i8, i8* %393
	movq	%r9, %rax
	movb	(%rax), %al
	movq	$0, %r9
	movb	%al, %r9b
	# %395 = zext i8 %394 to i32
	movq	%r9, %rax
	movq	$0, %r10
	movb	%al, %r10b
	# %396 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %397 = getelementptr i8, i8* %396, i64 30
	movq	%r9, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %398 = getelementptr i8, i8* %397, i64 1
	movq	%r9, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %399 = load i8, i8* %398
	movq	%r9, %rax
	movb	(%rax), %al
	movq	$0, %r9
	movb	%al, %r9b
	# %400 = zext i8 %399 to i32
	movq	%r9, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %401 = shl i32 %400, 8
	movq	%r9, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %r9
	# %402 = or i32 %395, %401
	movq	%r10, %rax
	movq	%r9, %rcx
	orq	%rcx, %rax
	movq	%rax, %r9
	# %403 = zext i32 %402 to i64
	movq	%r9, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %404 = getelementptr i8, i8* %390, i64 %403
	movq	%r11, %rcx
	movq	%r9, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %405 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %406 = zext i32 %405 to i64
	movq	%r9, %rax
	movq	$0, %r10
	movl	%eax, %r10d
	# %407 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %408 = getelementptr %struct.mz_zip_archive_file_stat, i8* %407, i32 0, i32 17
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %409 = getelementptr [512 x i8], i8* %408, i64 0, i64 0
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %410 = call i64 @llvm.objectsize.i64.p0 (i8* %409, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r9
	# %411 = call i8* @__memcpy_chk (i8* %374, i8* %404, i64 %406, i64 %410)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r9
	# %412 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %413 = getelementptr %struct.mz_zip_archive_file_stat, i8* %412, i32 0, i32 17
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %414 = load i32, i32* %24
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %415 = zext i32 %414 to i64
	movq	%r9, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %416 = getelementptr [512 x i8], i8* %413, i64 0, i64 %415
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%r9, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# store i8 0, i8* %416
	movq	$0, %rax
	movq	%r9, %rcx
	movb	%al, (%rcx)
	# %417 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %418 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %419 = call i32 @mz_zip_reader_is_file_a_directory (i8* %417, i32 %418)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_is_file_a_directory
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r10
	# %420 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %421 = getelementptr %struct.mz_zip_archive_file_stat, i8* %420, i32 0, i32 13
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# store i32 %419, i32* %421
	movq	%r10, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %422 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %423 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %424 = call i32 @mz_zip_reader_is_file_encrypted (i8* %422, i32 %423)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_is_file_encrypted
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r10
	# %425 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %426 = getelementptr %struct.mz_zip_archive_file_stat, i8* %425, i32 0, i32 14
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# store i32 %424, i32* %426
	movq	%r10, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %427 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %428 = load i32, i32* %20
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %429 = call i32 @mz_zip_reader_is_file_supported (i8* %427, i32 %428)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_is_file_supported
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r10
	# %430 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %431 = getelementptr %struct.mz_zip_archive_file_stat, i8* %430, i32 0, i32 15
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# store i32 %429, i32* %431
	movq	%r10, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %432 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %433 = getelementptr %struct.mz_zip_archive_file_stat, i8* %432, i32 0, i32 7
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %434 = load i64, i64* %433
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %435 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %436 = getelementptr %struct.mz_zip_archive_file_stat, i8* %435, i32 0, i32 8
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %437 = load i64, i64* %436
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %438 = icmp ugt i64 %434, %437
	movq	%r10, %rax
	movq	%r9, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	seta	%r9b
	# br i1 %438, label %439, label %443
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal443
	jmp	mz_zip_file_stat_internal439
	.text
mz_zip_file_stat_internal439:
	# %440 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %441 = getelementptr %struct.mz_zip_archive_file_stat, i8* %440, i32 0, i32 7
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %442 = load i64, i64* %441
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# br label %447
	jmp	mz_zip_file_stat_internal447
	.text
mz_zip_file_stat_internal443:
	# %444 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %445 = getelementptr %struct.mz_zip_archive_file_stat, i8* %444, i32 0, i32 8
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %446 = load i64, i64* %445
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# br label %447
	movq	%rdi, %r8
	jmp	mz_zip_file_stat_internal447
	.text
mz_zip_file_stat_internal447:
	# %448 = phi i64 [%442, %439], [%446, %443]
	# %449 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %450 = getelementptr %struct.mz_zip_archive_file_stat, i8* %449, i32 0, i32 11
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %451 = load i64, i64* %450
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %452 = icmp ugt i64 %448, %451
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	seta	%dil
	# br i1 %452, label %453, label %471
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal471
	jmp	mz_zip_file_stat_internal453
	.text
mz_zip_file_stat_internal453:
	# %454 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %455 = getelementptr %struct.mz_zip_archive_file_stat, i8* %454, i32 0, i32 7
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %456 = load i64, i64* %455
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %457 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %458 = getelementptr %struct.mz_zip_archive_file_stat, i8* %457, i32 0, i32 8
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %459 = load i64, i64* %458
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %460 = icmp ugt i64 %456, %459
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	seta	%dil
	# br i1 %460, label %461, label %465
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal465
	jmp	mz_zip_file_stat_internal461
	.text
mz_zip_file_stat_internal461:
	# %462 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %463 = getelementptr %struct.mz_zip_archive_file_stat, i8* %462, i32 0, i32 7
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %464 = load i64, i64* %463
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# br label %469
	movq	%rsi, %rbx
	jmp	mz_zip_file_stat_internal469
	.text
mz_zip_file_stat_internal465:
	# %466 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %467 = getelementptr %struct.mz_zip_archive_file_stat, i8* %466, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %468 = load i64, i64* %467
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %469
	jmp	mz_zip_file_stat_internal469
	.text
mz_zip_file_stat_internal469:
	# %470 = phi i64 [%464, %461], [%468, %465]
	# br label %475
	movq	%rbx, %rdx
	jmp	mz_zip_file_stat_internal475
	.text
mz_zip_file_stat_internal471:
	# %472 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %473 = getelementptr %struct.mz_zip_archive_file_stat, i8* %472, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %474 = load i64, i64* %473
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %475
	jmp	mz_zip_file_stat_internal475
	.text
mz_zip_file_stat_internal475:
	# %476 = phi i64 [%470, %469], [%474, %471]
	# %477 = icmp eq i64 %476, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %477, label %478, label %828
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal828
	jmp	mz_zip_file_stat_internal478
	.text
mz_zip_file_stat_internal478:
	# %479 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %480 = getelementptr i8, i8* %479, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %481 = getelementptr i8, i8* %480, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %482 = load i8, i8* %481
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %483 = zext i8 %482 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %484 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %485 = getelementptr i8, i8* %484, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %486 = getelementptr i8, i8* %485, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %487 = load i8, i8* %486
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %488 = zext i8 %487 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %489 = shl i32 %488, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %490 = or i32 %483, %489
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %490, i32* %26
	movq	%rdx, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# %491 = load i32, i32* %26
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %492 = icmp ne i32 %491, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %492, label %493, label %827
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal827
	jmp	mz_zip_file_stat_internal493
	.text
mz_zip_file_stat_internal493:
	# %494 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %495 = getelementptr i8, i8* %494, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %496 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %497 = getelementptr i8, i8* %496, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %498 = getelementptr i8, i8* %497, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %499 = load i8, i8* %498
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %500 = zext i8 %499 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %501 = load i8*, i8** %25
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %502 = getelementptr i8, i8* %501, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %503 = getelementptr i8, i8* %502, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %504 = load i8, i8* %503
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %505 = zext i8 %504 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %506 = shl i32 %505, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %507 = or i32 %500, %506
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %508 = zext i32 %507 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %509 = getelementptr i8, i8* %495, i64 %508
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %509, i8** %27
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %510
	jmp	mz_zip_file_stat_internal510
	.text
mz_zip_file_stat_internal510:
	# %511 = load i32, i32* %26
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %512 = zext i32 %511 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %513 = icmp ult i64 %512, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %513, label %514, label %523
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal523
	jmp	mz_zip_file_stat_internal514
	.text
mz_zip_file_stat_internal514:
	# %515 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %515, i8** %8
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %9
	movq	$9, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %516 = load i8*, i8** %8
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %517 = icmp ne i8* %516, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %517, label %518, label %522
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal522
	jmp	mz_zip_file_stat_internal518
	.text
mz_zip_file_stat_internal518:
	# %519 = load i32, i32* %9
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %520 = load i8*, i8** %8
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %521 = getelementptr %struct.mz_zip_archive, i8* %520, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %519, i32* %521
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %522
	jmp	mz_zip_file_stat_internal522
	.text
mz_zip_file_stat_internal522:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %829
	jmp	mz_zip_file_stat_internal829
	.text
mz_zip_file_stat_internal523:
	# %524 = load i8*, i8** %27
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %525 = getelementptr i8, i8* %524, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %526 = load i8, i8* %525
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %527 = zext i8 %526 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %528 = load i8*, i8** %27
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %529 = getelementptr i8, i8* %528, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %530 = load i8, i8* %529
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %531 = zext i8 %530 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %532 = shl i32 %531, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %533 = or i32 %527, %532
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %533, i32* %28
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	# %534 = load i8*, i8** %27
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %535 = getelementptr i8, i8* %534, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %536 = getelementptr i8, i8* %535, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %537 = load i8, i8* %536
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %538 = zext i8 %537 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %539 = load i8*, i8** %27
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %540 = getelementptr i8, i8* %539, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %541 = getelementptr i8, i8* %540, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %542 = load i8, i8* %541
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %543 = zext i8 %542 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %544 = shl i32 %543, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %545 = or i32 %538, %544
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %545, i32* %29
	movq	%rdx, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# %546 = load i32, i32* %29
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %547 = zext i32 %546 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %548 = add i64 %547, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %549 = load i32, i32* %26
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %550 = zext i32 %549 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %551 = icmp ugt i64 %548, %550
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %551, label %552, label %561
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal561
	jmp	mz_zip_file_stat_internal552
	.text
mz_zip_file_stat_internal552:
	# %553 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %553, i8** %10
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %11
	movq	$9, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %554 = load i8*, i8** %10
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %555 = icmp ne i8* %554, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %555, label %556, label %560
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal560
	jmp	mz_zip_file_stat_internal556
	.text
mz_zip_file_stat_internal556:
	# %557 = load i32, i32* %11
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %558 = load i8*, i8** %10
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %559 = getelementptr %struct.mz_zip_archive, i8* %558, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %557, i32* %559
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %560
	jmp	mz_zip_file_stat_internal560
	.text
mz_zip_file_stat_internal560:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %829
	jmp	mz_zip_file_stat_internal829
	.text
mz_zip_file_stat_internal561:
	# %562 = load i32, i32* %28
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %563 = icmp eq i32 %562, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %563, label %564, label %810
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal810
	jmp	mz_zip_file_stat_internal564
	.text
mz_zip_file_stat_internal564:
	# %565 = load i8*, i8** %27
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %566 = getelementptr i8, i8* %565, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %566, i8** %30
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %567 = load i32, i32* %29
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %567, i32* %31
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %568 = load i8*, i8** %23
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %569 = icmp ne i8* %568, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %569, label %570, label %572
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal572
	jmp	mz_zip_file_stat_internal570
	.text
mz_zip_file_stat_internal570:
	# %571 = load i8*, i8** %23
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 1, i32* %571
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %572
	jmp	mz_zip_file_stat_internal572
	.text
mz_zip_file_stat_internal572:
	# %573 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %574 = getelementptr %struct.mz_zip_archive_file_stat, i8* %573, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %575 = load i64, i64* %574
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %576 = icmp eq i64 %575, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %576, label %577, label %651
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal651
	jmp	mz_zip_file_stat_internal577
	.text
mz_zip_file_stat_internal577:
	# %578 = load i32, i32* %31
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %579 = zext i32 %578 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %580 = icmp ult i64 %579, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %580, label %581, label %590
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal590
	jmp	mz_zip_file_stat_internal581
	.text
mz_zip_file_stat_internal581:
	# %582 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %582, i8** %12
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %13
	movq	$9, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %583 = load i8*, i8** %12
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %584 = icmp ne i8* %583, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %584, label %585, label %589
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal589
	jmp	mz_zip_file_stat_internal585
	.text
mz_zip_file_stat_internal585:
	# %586 = load i32, i32* %13
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %587 = load i8*, i8** %12
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %588 = getelementptr %struct.mz_zip_archive, i8* %587, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %586, i32* %588
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %589
	jmp	mz_zip_file_stat_internal589
	.text
mz_zip_file_stat_internal589:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %829
	jmp	mz_zip_file_stat_internal829
	.text
mz_zip_file_stat_internal590:
	# %591 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %592 = getelementptr i8, i8* %591, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %593 = load i8, i8* %592
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %594 = zext i8 %593 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %595 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %596 = getelementptr i8, i8* %595, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %597 = load i8, i8* %596
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %598 = zext i8 %597 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %599 = shl i32 %598, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %600 = or i32 %594, %599
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %601 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %602 = getelementptr i8, i8* %601, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %603 = load i8, i8* %602
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %604 = zext i8 %603 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %605 = shl i32 %604, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %606 = or i32 %600, %605
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %607 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %608 = getelementptr i8, i8* %607, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %609 = load i8, i8* %608
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %610 = zext i8 %609 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %611 = shl i32 %610, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %612 = or i32 %606, %611
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %613 = zext i32 %612 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %614 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %615 = getelementptr i8, i8* %614, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %616 = getelementptr i8, i8* %615, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %617 = load i8, i8* %616
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %618 = zext i8 %617 to i32
	movq	%rdx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %619 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %620 = getelementptr i8, i8* %619, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %621 = getelementptr i8, i8* %620, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %622 = load i8, i8* %621
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %623 = zext i8 %622 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %624 = shl i32 %623, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %625 = or i32 %618, %624
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %626 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %627 = getelementptr i8, i8* %626, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %628 = getelementptr i8, i8* %627, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %629 = load i8, i8* %628
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %630 = zext i8 %629 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %631 = shl i32 %630, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %632 = or i32 %625, %631
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %633 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %634 = getelementptr i8, i8* %633, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %635 = getelementptr i8, i8* %634, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %636 = load i8, i8* %635
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %637 = zext i8 %636 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %638 = shl i32 %637, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %639 = or i32 %632, %638
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %640 = zext i32 %639 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %641 = shl i64 %640, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %642 = or i64 %613, %641
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %643 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %644 = getelementptr %struct.mz_zip_archive_file_stat, i8* %643, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %642, i64* %644
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %645 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %646 = getelementptr i8, i8* %645, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %646, i8** %30
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %647 = load i32, i32* %31
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %648 = zext i32 %647 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %649 = sub i64 %648, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %650 = trunc i64 %649 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %650, i32* %31
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %651
	jmp	mz_zip_file_stat_internal651
	.text
mz_zip_file_stat_internal651:
	# %652 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %653 = getelementptr %struct.mz_zip_archive_file_stat, i8* %652, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %654 = load i64, i64* %653
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %655 = icmp eq i64 %654, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %655, label %656, label %730
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal730
	jmp	mz_zip_file_stat_internal656
	.text
mz_zip_file_stat_internal656:
	# %657 = load i32, i32* %31
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %658 = zext i32 %657 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %659 = icmp ult i64 %658, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %659, label %660, label %669
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal669
	jmp	mz_zip_file_stat_internal660
	.text
mz_zip_file_stat_internal660:
	# %661 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %661, i8** %14
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %15
	movq	$9, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %662 = load i8*, i8** %14
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %663 = icmp ne i8* %662, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %663, label %664, label %668
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal668
	jmp	mz_zip_file_stat_internal664
	.text
mz_zip_file_stat_internal664:
	# %665 = load i32, i32* %15
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %666 = load i8*, i8** %14
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %667 = getelementptr %struct.mz_zip_archive, i8* %666, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %665, i32* %667
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %668
	jmp	mz_zip_file_stat_internal668
	.text
mz_zip_file_stat_internal668:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %829
	jmp	mz_zip_file_stat_internal829
	.text
mz_zip_file_stat_internal669:
	# %670 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %671 = getelementptr i8, i8* %670, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %672 = load i8, i8* %671
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %673 = zext i8 %672 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %674 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %675 = getelementptr i8, i8* %674, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %676 = load i8, i8* %675
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %677 = zext i8 %676 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %678 = shl i32 %677, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %679 = or i32 %673, %678
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %680 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %681 = getelementptr i8, i8* %680, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %682 = load i8, i8* %681
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %683 = zext i8 %682 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %684 = shl i32 %683, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %685 = or i32 %679, %684
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %686 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %687 = getelementptr i8, i8* %686, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %688 = load i8, i8* %687
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %689 = zext i8 %688 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %690 = shl i32 %689, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %691 = or i32 %685, %690
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %692 = zext i32 %691 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %693 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %694 = getelementptr i8, i8* %693, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %695 = getelementptr i8, i8* %694, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %696 = load i8, i8* %695
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %697 = zext i8 %696 to i32
	movq	%rdx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %698 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %699 = getelementptr i8, i8* %698, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %700 = getelementptr i8, i8* %699, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %701 = load i8, i8* %700
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %702 = zext i8 %701 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %703 = shl i32 %702, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %704 = or i32 %697, %703
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %705 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %706 = getelementptr i8, i8* %705, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %707 = getelementptr i8, i8* %706, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %708 = load i8, i8* %707
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %709 = zext i8 %708 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %710 = shl i32 %709, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %711 = or i32 %704, %710
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %712 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %713 = getelementptr i8, i8* %712, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %714 = getelementptr i8, i8* %713, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %715 = load i8, i8* %714
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %716 = zext i8 %715 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %717 = shl i32 %716, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %718 = or i32 %711, %717
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %719 = zext i32 %718 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %720 = shl i64 %719, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %721 = or i64 %692, %720
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %722 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %723 = getelementptr %struct.mz_zip_archive_file_stat, i8* %722, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %721, i64* %723
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %724 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %725 = getelementptr i8, i8* %724, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %725, i8** %30
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %726 = load i32, i32* %31
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %727 = zext i32 %726 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %728 = sub i64 %727, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %729 = trunc i64 %728 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %729, i32* %31
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %730
	jmp	mz_zip_file_stat_internal730
	.text
mz_zip_file_stat_internal730:
	# %731 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %732 = getelementptr %struct.mz_zip_archive_file_stat, i8* %731, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %733 = load i64, i64* %732
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %734 = icmp eq i64 %733, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %734, label %735, label %809
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal809
	jmp	mz_zip_file_stat_internal735
	.text
mz_zip_file_stat_internal735:
	# %736 = load i32, i32* %31
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %737 = zext i32 %736 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %738 = icmp ult i64 %737, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %738, label %739, label %748
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal748
	jmp	mz_zip_file_stat_internal739
	.text
mz_zip_file_stat_internal739:
	# %740 = load i8*, i8** %19
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %740, i8** %16
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %17
	movq	$9, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# %741 = load i8*, i8** %16
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %742 = icmp ne i8* %741, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %742, label %743, label %747
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal747
	jmp	mz_zip_file_stat_internal743
	.text
mz_zip_file_stat_internal743:
	# %744 = load i32, i32* %17
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %745 = load i8*, i8** %16
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %746 = getelementptr %struct.mz_zip_archive, i8* %745, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %744, i32* %746
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %747
	jmp	mz_zip_file_stat_internal747
	.text
mz_zip_file_stat_internal747:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %829
	jmp	mz_zip_file_stat_internal829
	.text
mz_zip_file_stat_internal748:
	# %749 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %750 = getelementptr i8, i8* %749, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %751 = load i8, i8* %750
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %752 = zext i8 %751 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %753 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %754 = getelementptr i8, i8* %753, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %755 = load i8, i8* %754
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %756 = zext i8 %755 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %757 = shl i32 %756, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %758 = or i32 %752, %757
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %759 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %760 = getelementptr i8, i8* %759, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %761 = load i8, i8* %760
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %762 = zext i8 %761 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %763 = shl i32 %762, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %764 = or i32 %758, %763
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %765 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %766 = getelementptr i8, i8* %765, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %767 = load i8, i8* %766
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %768 = zext i8 %767 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %769 = shl i32 %768, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %770 = or i32 %764, %769
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %771 = zext i32 %770 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %772 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %773 = getelementptr i8, i8* %772, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %774 = getelementptr i8, i8* %773, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %775 = load i8, i8* %774
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %776 = zext i8 %775 to i32
	movq	%rdx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %777 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %778 = getelementptr i8, i8* %777, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %779 = getelementptr i8, i8* %778, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %780 = load i8, i8* %779
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %781 = zext i8 %780 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %782 = shl i32 %781, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %783 = or i32 %776, %782
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %784 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %785 = getelementptr i8, i8* %784, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %786 = getelementptr i8, i8* %785, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %787 = load i8, i8* %786
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %788 = zext i8 %787 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %789 = shl i32 %788, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %790 = or i32 %783, %789
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %791 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %792 = getelementptr i8, i8* %791, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %793 = getelementptr i8, i8* %792, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %794 = load i8, i8* %793
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %795 = zext i8 %794 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %796 = shl i32 %795, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %797 = or i32 %790, %796
	movq	%rsi, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %798 = zext i32 %797 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %799 = shl i64 %798, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %800 = or i64 %771, %799
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %801 = load i8*, i8** %22
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %802 = getelementptr %struct.mz_zip_archive_file_stat, i8* %801, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %800, i64* %802
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %803 = load i8*, i8** %30
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %804 = getelementptr i8, i8* %803, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %804, i8** %30
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %805 = load i32, i32* %31
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %806 = zext i32 %805 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %807 = sub i64 %806, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %808 = trunc i64 %807 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %808, i32* %31
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %809
	jmp	mz_zip_file_stat_internal809
	.text
mz_zip_file_stat_internal809:
	# br label %826
	jmp	mz_zip_file_stat_internal826
	.text
mz_zip_file_stat_internal810:
	# %811 = load i32, i32* %29
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %812 = zext i32 %811 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %813 = add i64 4, %812
	movq	$4, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %814 = load i8*, i8** %27
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %815 = getelementptr i8, i8* %814, i64 %813
	movq	%rdx, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %815, i8** %27
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %816 = load i32, i32* %26
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %817 = zext i32 %816 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %818 = sub i64 %817, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %819 = load i32, i32* %29
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %820 = zext i32 %819 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %821 = sub i64 %818, %820
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %822 = trunc i64 %821 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %822, i32* %26
	movq	%rdx, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %823
	jmp	mz_zip_file_stat_internal823
	.text
mz_zip_file_stat_internal823:
	# %824 = load i32, i32* %26
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %825 = icmp ne i32 %824, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %825, label %510, label %826
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_stat_internal826
	jmp	mz_zip_file_stat_internal510
	.text
mz_zip_file_stat_internal826:
	# br label %827
	jmp	mz_zip_file_stat_internal827
	.text
mz_zip_file_stat_internal827:
	# br label %828
	jmp	mz_zip_file_stat_internal828
	.text
mz_zip_file_stat_internal828:
	# store i32 1, i32* %18
	movq	$1, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %829
	jmp	mz_zip_file_stat_internal829
	.text
mz_zip_file_stat_internal829:
	# %830 = load i32, i32* %18
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %830
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_compute_crc32_callback
_mz_zip_compute_crc32_callback:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r10
	popq	%r11
	popq	%r12
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %5
	movq	%r12, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %6
	movq	%r11, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %7
	movq	%r10, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %8
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %10 = load i8*, i8** %5
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %10, i8** %9
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %11 = load i64, i64* %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %12 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = load i32, i32* %12
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %14 = zext i32 %13 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %15 = load i8*, i8** %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %16 = load i64, i64* %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %17 = call i64 @mz_crc32 (i64 %14, i8* %15, i64 %16)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %18 = trunc i64 %17 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %19 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %18, i32* %19
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %20 = load i64, i64* %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %20
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_validate_archive
_mz_zip_validate_archive:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$56, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%r9
	popq	-8(%rbp)
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %19 = alloca %struct.mz_zip_archive_file_stat
	subq	$1102, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %14
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %15
	movq	%r9, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %20 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %21 = icmp ne i8* %20, null
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setne	%r9b
	# br i1 %21, label %22, label %42
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive42
	jmp	mz_zip_validate_archive22
	.text
mz_zip_validate_archive22:
	# %23 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %24 = getelementptr %struct.mz_zip_archive, i8* %23, i32 0, i32 15
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %25 = load i8*, i8** %24
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %26 = icmp ne i8* %25, null
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setne	%r9b
	# br i1 %26, label %27, label %42
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive42
	jmp	mz_zip_validate_archive27
	.text
mz_zip_validate_archive27:
	# %28 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %29 = getelementptr %struct.mz_zip_archive, i8* %28, i32 0, i32 7
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %30 = load i8*, i8** %29
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %31 = icmp ne i8* %30, null
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setne	%r9b
	# br i1 %31, label %32, label %42
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive42
	jmp	mz_zip_validate_archive32
	.text
mz_zip_validate_archive32:
	# %33 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 8
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %35 = load i8*, i8** %34
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %36 = icmp ne i8* %35, null
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setne	%r9b
	# br i1 %36, label %37, label %42
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive42
	jmp	mz_zip_validate_archive37
	.text
mz_zip_validate_archive37:
	# %38 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %39 = getelementptr %struct.mz_zip_archive, i8* %38, i32 0, i32 11
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %40 = load i8*, i8** %39
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %41 = icmp ne i8* %40, null
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r9
	setne	%r9b
	# br i1 %41, label %51, label %42
	movq	%r9, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive42
	jmp	mz_zip_validate_archive51
	.text
mz_zip_validate_archive42:
	# %43 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %43, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %4
	movq	$24, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %44 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %45 = icmp ne i8* %44, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %45, label %46, label %50
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive50
	jmp	mz_zip_validate_archive46
	.text
mz_zip_validate_archive46:
	# %47 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %48 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = getelementptr %struct.mz_zip_archive, i8* %48, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %47, i32* %49
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %50
	jmp	mz_zip_validate_archive50
	.text
mz_zip_validate_archive50:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive51:
	# %52 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = getelementptr %struct.mz_zip_archive, i8* %52, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %54 = load i8*, i8** %53
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %54, i8** %16
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %55 = load i8*, i8** %16
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %56 = getelementptr %struct.mz_zip_internal_state_tag, i8* %55, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %57 = load i32, i32* %56
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %58 = icmp ne i32 %57, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %58, label %88, label %59
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive59
	jmp	mz_zip_validate_archive88
	.text
mz_zip_validate_archive59:
	# %60 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %61 = getelementptr %struct.mz_zip_archive, i8* %60, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %62 = load i32, i32* %61
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %63 = icmp ugt i32 %62, 65535
	movq	%rdx, %rax
	movq	$65535, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %63, label %64, label %73
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive73
	jmp	mz_zip_validate_archive64
	.text
mz_zip_validate_archive64:
	# %65 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %65, i8** %5
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %6
	movq	$29, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %66 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = icmp ne i8* %66, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %67, label %68, label %72
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive72
	jmp	mz_zip_validate_archive68
	.text
mz_zip_validate_archive68:
	# %69 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %70 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = getelementptr %struct.mz_zip_archive, i8* %70, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %69, i32* %71
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %72
	jmp	mz_zip_validate_archive72
	.text
mz_zip_validate_archive72:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive73:
	# %74 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %75 = getelementptr %struct.mz_zip_archive, i8* %74, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %76 = load i64, i64* %75
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = icmp ugt i64 %76, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %77, label %78, label %87
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive87
	jmp	mz_zip_validate_archive78
	.text
mz_zip_validate_archive78:
	# %79 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %79, i8** %7
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %8
	movq	$29, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %80 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %81 = icmp ne i8* %80, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %81, label %82, label %86
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive86
	jmp	mz_zip_validate_archive82
	.text
mz_zip_validate_archive82:
	# %83 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %84 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %85 = getelementptr %struct.mz_zip_archive, i8* %84, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %83, i32* %85
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %86
	jmp	mz_zip_validate_archive86
	.text
mz_zip_validate_archive86:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive87:
	# br label %104
	jmp	mz_zip_validate_archive104
	.text
mz_zip_validate_archive88:
	# %89 = load i8*, i8** %16
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = getelementptr %struct.mz_zip_internal_state_tag, i8* %89, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %91 = getelementptr %struct.mz_zip_array, i8* %90, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %92 = load i64, i64* %91
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %93 = icmp uge i64 %92, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %93, label %94, label %103
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive103
	jmp	mz_zip_validate_archive94
	.text
mz_zip_validate_archive94:
	# %95 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %95, i8** %9
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %10
	movq	$29, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %96 = load i8*, i8** %9
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %97 = icmp ne i8* %96, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %97, label %98, label %102
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive102
	jmp	mz_zip_validate_archive98
	.text
mz_zip_validate_archive98:
	# %99 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %100 = load i8*, i8** %9
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %101 = getelementptr %struct.mz_zip_archive, i8* %100, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %99, i32* %101
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %102
	jmp	mz_zip_validate_archive102
	.text
mz_zip_validate_archive102:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive103:
	# br label %104
	jmp	mz_zip_validate_archive104
	.text
mz_zip_validate_archive104:
	# store i32 0, i32* %17
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %105
	jmp	mz_zip_validate_archive105
	.text
mz_zip_validate_archive105:
	# %106 = load i32, i32* %17
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %107 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %108 = getelementptr %struct.mz_zip_archive, i8* %107, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %109 = load i32, i32* %108
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %110 = icmp ult i32 %106, %109
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %110, label %111, label %153
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive153
	jmp	mz_zip_validate_archive111
	.text
mz_zip_validate_archive111:
	# %112 = load i32, i32* %15
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %113 = and i32 4096, %112
	movq	$4096, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %114 = icmp ne i32 %113, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %114, label %115, label %142
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive142
	jmp	mz_zip_validate_archive115
	.text
mz_zip_validate_archive115:
	# %116 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %117 = load i32, i32* %17
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %118 = call i32 @mz_zip_reader_file_stat (i8* %116, i32 %117, i8* %19)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_file_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %119 = icmp ne i32 %118, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %119, label %121, label %120
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive120
	jmp	mz_zip_validate_archive121
	.text
mz_zip_validate_archive120:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive121:
	# %122 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %123 = getelementptr %struct.mz_zip_archive_file_stat, i8* %19, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %124 = getelementptr [512 x i8], i8* %123, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %125 = call i32 @mz_zip_reader_locate_file_v2 (i8* %122, i8* %124, i8* null, i32 0, i8* %18)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %126 = icmp ne i32 %125, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %126, label %128, label %127
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive127
	jmp	mz_zip_validate_archive128
	.text
mz_zip_validate_archive127:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive128:
	# %129 = load i32, i32* %18
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %130 = load i32, i32* %17
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %131 = icmp ne i32 %129, %130
	movq	%r8, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %131, label %132, label %141
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive141
	jmp	mz_zip_validate_archive132
	.text
mz_zip_validate_archive132:
	# %133 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %133, i8** %11
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 30, i32* %12
	movq	$30, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %134 = load i8*, i8** %11
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %135 = icmp ne i8* %134, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %135, label %136, label %140
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive140
	jmp	mz_zip_validate_archive136
	.text
mz_zip_validate_archive136:
	# %137 = load i32, i32* %12
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %138 = load i8*, i8** %11
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %139 = getelementptr %struct.mz_zip_archive, i8* %138, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %137, i32* %139
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %140
	jmp	mz_zip_validate_archive140
	.text
mz_zip_validate_archive140:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive141:
	# br label %142
	jmp	mz_zip_validate_archive142
	.text
mz_zip_validate_archive142:
	# %143 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %144 = load i32, i32* %17
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %145 = load i32, i32* %15
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %146 = call i32 @mz_zip_validate_file (i8* %143, i32 %144, i32 %145)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_validate_file
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %147 = icmp ne i32 %146, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %147, label %149, label %148
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_archive148
	jmp	mz_zip_validate_archive149
	.text
mz_zip_validate_archive148:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive149:
	# br label %150
	jmp	mz_zip_validate_archive150
	.text
mz_zip_validate_archive150:
	# %151 = load i32, i32* %17
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %152 = add i32 %151, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %152, i32* %17
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %105
	jmp	mz_zip_validate_archive105
	.text
mz_zip_validate_archive153:
	# store i32 1, i32* %13
	movq	$1, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %154
	jmp	mz_zip_validate_archive154
	.text
mz_zip_validate_archive154:
	# %155 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %155
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_validate_mem_archive
_mz_zip_validate_mem_archive:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r13
	popq	%r14
	popq	%r15
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %11 = alloca %struct.mz_zip_archive
	subq	$112, %rsp
	movq	%rsp, %r9
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %6
	movq	%r15, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %7
	movq	%r14, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %8
	movq	%r13, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# store i8* %3, i8** %9
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %10
	movq	$1, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %13 = load i8*, i8** %6
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = icmp ne i8* %13, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %14, label %15, label %18
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive18
	jmp	mz_zip_validate_mem_archive15
	.text
mz_zip_validate_mem_archive15:
	# %16 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %17 = icmp ne i64 %16, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %17, label %24, label %18
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive18
	jmp	mz_zip_validate_mem_archive24
	.text
mz_zip_validate_mem_archive18:
	# %19 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %20 = icmp ne i8* %19, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %20, label %21, label %23
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive23
	jmp	mz_zip_validate_mem_archive21
	.text
mz_zip_validate_mem_archive21:
	# %22 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 24, i32* %22
	movq	$24, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %23
	jmp	mz_zip_validate_mem_archive23
	.text
mz_zip_validate_mem_archive23:
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %64
	jmp	mz_zip_validate_mem_archive64
	.text
mz_zip_validate_mem_archive24:
	# call void @mz_zip_zero_struct (i8* %11)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_zero_struct
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %25 = load i8*, i8** %6
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %26 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %27 = load i32, i32* %8
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %28 = call i32 @mz_zip_reader_init_mem (i8* %11, i8* %25, i64 %26, i32 %27)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_mem
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %29 = icmp ne i32 %28, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %29, label %38, label %30
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive30
	jmp	mz_zip_validate_mem_archive38
	.text
mz_zip_validate_mem_archive30:
	# %31 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = icmp ne i8* %31, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %32, label %33, label %37
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive37
	jmp	mz_zip_validate_mem_archive33
	.text
mz_zip_validate_mem_archive33:
	# %34 = getelementptr %struct.mz_zip_archive, i8* %11, i32 0, i32 5
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %35 = load i32, i32* %34
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %36 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %35, i32* %36
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %37
	jmp	mz_zip_validate_mem_archive37
	.text
mz_zip_validate_mem_archive37:
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %64
	jmp	mz_zip_validate_mem_archive64
	.text
mz_zip_validate_mem_archive38:
	# %39 = load i32, i32* %8
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = call i32 @mz_zip_validate_archive (i8* %11, i32 %39)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_validate_archive
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %41 = icmp ne i32 %40, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %41, label %45, label %42
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive42
	jmp	mz_zip_validate_mem_archive45
	.text
mz_zip_validate_mem_archive42:
	# %43 = getelementptr %struct.mz_zip_archive, i8* %11, i32 0, i32 5
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %44 = load i32, i32* %43
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %44, i32* %12
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %45
	jmp	mz_zip_validate_mem_archive45
	.text
mz_zip_validate_mem_archive45:
	# %46 = load i32, i32* %10
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %47 = call i32 @mz_zip_reader_end_internal (i8* %11, i32 %46)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %48 = icmp ne i32 %47, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %48, label %56, label %49
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive49
	jmp	mz_zip_validate_mem_archive56
	.text
mz_zip_validate_mem_archive49:
	# %50 = load i32, i32* %12
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %51 = icmp ne i32 %50, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %51, label %55, label %52
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive52
	jmp	mz_zip_validate_mem_archive55
	.text
mz_zip_validate_mem_archive52:
	# %53 = getelementptr %struct.mz_zip_archive, i8* %11, i32 0, i32 5
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %54 = load i32, i32* %53
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %54, i32* %12
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %55
	jmp	mz_zip_validate_mem_archive55
	.text
mz_zip_validate_mem_archive55:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	mz_zip_validate_mem_archive56
	.text
mz_zip_validate_mem_archive56:
	# %57 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = icmp ne i8* %57, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %58, label %59, label %62
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_mem_archive62
	jmp	mz_zip_validate_mem_archive59
	.text
mz_zip_validate_mem_archive59:
	# %60 = load i32, i32* %12
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %61 = load i8*, i8** %9
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %60, i32* %61
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %62
	jmp	mz_zip_validate_mem_archive62
	.text
mz_zip_validate_mem_archive62:
	# %63 = load i32, i32* %10
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %63, i32* %5
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %64
	jmp	mz_zip_validate_mem_archive64
	.text
mz_zip_validate_mem_archive64:
	# %65 = load i32, i32* %5
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %65
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_validate_file_archive
_mz_zip_validate_file_archive:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%r12
	popq	%r13
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %9 = alloca %struct.mz_zip_archive
	subq	$112, %rsp
	movq	%rsp, %r9
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %5
	movq	%r13, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %6
	movq	%r12, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %7
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %8
	movq	$1, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %5
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %12 = icmp ne i8* %11, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %12, label %19, label %13
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file_archive13
	jmp	mz_zip_validate_file_archive19
	.text
mz_zip_validate_file_archive13:
	# %14 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %15 = icmp ne i8* %14, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %15, label %16, label %18
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file_archive18
	jmp	mz_zip_validate_file_archive16
	.text
mz_zip_validate_file_archive16:
	# %17 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 24, i32* %17
	movq	$24, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %18
	jmp	mz_zip_validate_file_archive18
	.text
mz_zip_validate_file_archive18:
	# store i32 0, i32* %4
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %58
	jmp	mz_zip_validate_file_archive58
	.text
mz_zip_validate_file_archive19:
	# call void @mz_zip_zero_struct (i8* %9)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_zero_struct
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %20 = load i8*, i8** %5
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %21 = load i32, i32* %6
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %22 = call i32 @mz_zip_reader_init_file_v2 (i8* %9, i8* %20, i32 %21, i64 0, i64 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %23 = icmp ne i32 %22, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %23, label %32, label %24
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file_archive24
	jmp	mz_zip_validate_file_archive32
	.text
mz_zip_validate_file_archive24:
	# %25 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = icmp ne i8* %25, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %26, label %27, label %31
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file_archive31
	jmp	mz_zip_validate_file_archive27
	.text
mz_zip_validate_file_archive27:
	# %28 = getelementptr %struct.mz_zip_archive, i8* %9, i32 0, i32 5
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %29 = load i32, i32* %28
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %30 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %29, i32* %30
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %31
	jmp	mz_zip_validate_file_archive31
	.text
mz_zip_validate_file_archive31:
	# store i32 0, i32* %4
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %58
	jmp	mz_zip_validate_file_archive58
	.text
mz_zip_validate_file_archive32:
	# %33 = load i32, i32* %6
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %34 = call i32 @mz_zip_validate_archive (i8* %9, i32 %33)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_validate_archive
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %35 = icmp ne i32 %34, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %35, label %39, label %36
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file_archive36
	jmp	mz_zip_validate_file_archive39
	.text
mz_zip_validate_file_archive36:
	# %37 = getelementptr %struct.mz_zip_archive, i8* %9, i32 0, i32 5
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %38 = load i32, i32* %37
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %38, i32* %10
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %39
	jmp	mz_zip_validate_file_archive39
	.text
mz_zip_validate_file_archive39:
	# %40 = load i32, i32* %8
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %41 = call i32 @mz_zip_reader_end_internal (i8* %9, i32 %40)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %42 = icmp ne i32 %41, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %42, label %50, label %43
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file_archive43
	jmp	mz_zip_validate_file_archive50
	.text
mz_zip_validate_file_archive43:
	# %44 = load i32, i32* %10
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %45 = icmp ne i32 %44, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %45, label %49, label %46
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file_archive46
	jmp	mz_zip_validate_file_archive49
	.text
mz_zip_validate_file_archive46:
	# %47 = getelementptr %struct.mz_zip_archive, i8* %9, i32 0, i32 5
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %48 = load i32, i32* %47
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %48, i32* %10
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %49
	jmp	mz_zip_validate_file_archive49
	.text
mz_zip_validate_file_archive49:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %50
	jmp	mz_zip_validate_file_archive50
	.text
mz_zip_validate_file_archive50:
	# %51 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %52 = icmp ne i8* %51, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %52, label %53, label %56
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_validate_file_archive56
	jmp	mz_zip_validate_file_archive53
	.text
mz_zip_validate_file_archive53:
	# %54 = load i32, i32* %10
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %55 = load i8*, i8** %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %54, i32* %55
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	mz_zip_validate_file_archive56
	.text
mz_zip_validate_file_archive56:
	# %57 = load i32, i32* %8
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %57, i32* %4
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %58
	jmp	mz_zip_validate_file_archive58
	.text
mz_zip_validate_file_archive58:
	# %59 = load i32, i32* %4
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %59
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init_v2
_mz_zip_writer_init_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$32, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%r13
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %14 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %13
	movq	-8(%rbp), %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %14
	movq	-16(%rbp), %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %15
	movq	%r13, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %17 = load i32, i32* %15
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %r13
	movl	%eax, %r13d
	# %18 = and i32 %17, 16384
	movq	%r13, %rax
	movq	$16384, %rcx
	andq	%rcx, %rax
	movq	%rax, %r13
	# %19 = icmp ne i32 %18, 0
	movq	%r13, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r13
	setne	%r13b
	# %20 = zext i1 %19 to i32
	movq	%r13, %rax
	movq	%rax, %r13
	# store i32 %20, i32* %16
	movq	%r13, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %21 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %22 = icmp ne i8* %21, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %22, label %23, label %38
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v238
	jmp	mz_zip_writer_init_v223
	.text
mz_zip_writer_init_v223:
	# %24 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %25 = getelementptr %struct.mz_zip_archive, i8* %24, i32 0, i32 15
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# %26 = load i8*, i8** %25
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %27 = icmp ne i8* %26, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %27, label %38, label %28
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v228
	jmp	mz_zip_writer_init_v238
	.text
mz_zip_writer_init_v228:
	# %29 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %30 = getelementptr %struct.mz_zip_archive, i8* %29, i32 0, i32 12
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# %31 = load i8*, i8** %30
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %32 = icmp ne i8* %31, null
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r13
	setne	%r13b
	# br i1 %32, label %33, label %38
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v238
	jmp	mz_zip_writer_init_v233
	.text
mz_zip_writer_init_v233:
	# %34 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %35 = getelementptr %struct.mz_zip_archive, i8* %34, i32 0, i32 3
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# %36 = load i32, i32* %35
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %r13
	movl	%eax, %r13d
	# %37 = icmp ne i32 %36, 0
	movq	%r13, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r13
	setne	%r13b
	# br i1 %37, label %38, label %47
	movq	%r13, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v247
	jmp	mz_zip_writer_init_v238
	.text
mz_zip_writer_init_v238:
	# %39 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %39, i8** %4
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %5
	movq	$24, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %40 = load i8*, i8** %4
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = icmp ne i8* %40, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %41, label %42, label %46
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v246
	jmp	mz_zip_writer_init_v242
	.text
mz_zip_writer_init_v242:
	# %43 = load i32, i32* %5
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %44 = load i8*, i8** %4
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = getelementptr %struct.mz_zip_archive, i8* %44, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %43, i32* %45
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	mz_zip_writer_init_v246
	.text
mz_zip_writer_init_v246:
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %180
	jmp	mz_zip_writer_init_v2180
	.text
mz_zip_writer_init_v247:
	# %48 = load i32, i32* %15
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %49 = and i32 %48, 32768
	movq	%rbx, %rax
	movq	$32768, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %50 = icmp ne i32 %49, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %50, label %51, label %66
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v266
	jmp	mz_zip_writer_init_v251
	.text
mz_zip_writer_init_v251:
	# %52 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %53 = getelementptr %struct.mz_zip_archive, i8* %52, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %54 = load i8*, i8** %53
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %55 = icmp ne i8* %54, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %55, label %65, label %56
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v256
	jmp	mz_zip_writer_init_v265
	.text
mz_zip_writer_init_v256:
	# %57 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %57, i8** %6
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %58 = load i8*, i8** %6
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = icmp ne i8* %58, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %59, label %60, label %64
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v264
	jmp	mz_zip_writer_init_v260
	.text
mz_zip_writer_init_v260:
	# %61 = load i32, i32* %7
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %62 = load i8*, i8** %6
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %63 = getelementptr %struct.mz_zip_archive, i8* %62, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %61, i32* %63
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %64
	jmp	mz_zip_writer_init_v264
	.text
mz_zip_writer_init_v264:
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %180
	jmp	mz_zip_writer_init_v2180
	.text
mz_zip_writer_init_v265:
	# br label %66
	jmp	mz_zip_writer_init_v266
	.text
mz_zip_writer_init_v266:
	# %67 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %68 = getelementptr %struct.mz_zip_archive, i8* %67, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %69 = load i64, i64* %68
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %70 = icmp ne i64 %69, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %70, label %71, label %91
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v291
	jmp	mz_zip_writer_init_v271
	.text
mz_zip_writer_init_v271:
	# %72 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %73 = getelementptr %struct.mz_zip_archive, i8* %72, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %74 = load i64, i64* %73
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %75 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %76 = getelementptr %struct.mz_zip_archive, i8* %75, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %77 = load i64, i64* %76
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %78 = sub i64 %77, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %79 = and i64 %74, %78
	movq	%r13, %rax
	movq	%rbx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %80 = icmp ne i64 %79, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %80, label %81, label %90
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v290
	jmp	mz_zip_writer_init_v281
	.text
mz_zip_writer_init_v281:
	# %82 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %82, i8** %8
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %9
	movq	$24, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %83 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %84 = icmp ne i8* %83, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %84, label %85, label %89
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v289
	jmp	mz_zip_writer_init_v285
	.text
mz_zip_writer_init_v285:
	# %86 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %87 = load i8*, i8** %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = getelementptr %struct.mz_zip_archive, i8* %87, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %86, i32* %88
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %89
	jmp	mz_zip_writer_init_v289
	.text
mz_zip_writer_init_v289:
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %180
	jmp	mz_zip_writer_init_v2180
	.text
mz_zip_writer_init_v290:
	# br label %91
	jmp	mz_zip_writer_init_v291
	.text
mz_zip_writer_init_v291:
	# %92 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %93 = getelementptr %struct.mz_zip_archive, i8* %92, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %94 = load i8*, i8** %93
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %95 = icmp ne i8* %94, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %95, label %99, label %96
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v296
	jmp	mz_zip_writer_init_v299
	.text
mz_zip_writer_init_v296:
	# %97 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %98 = getelementptr %struct.mz_zip_archive, i8* %97, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* @miniz_def_alloc_func, i8** %98
	leaq	_miniz_def_alloc_func(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %99
	jmp	mz_zip_writer_init_v299
	.text
mz_zip_writer_init_v299:
	# %100 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %101 = getelementptr %struct.mz_zip_archive, i8* %100, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %102 = load i8*, i8** %101
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %103 = icmp ne i8* %102, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %103, label %107, label %104
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v2104
	jmp	mz_zip_writer_init_v2107
	.text
mz_zip_writer_init_v2104:
	# %105 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %106 = getelementptr %struct.mz_zip_archive, i8* %105, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* @miniz_def_free_func, i8** %106
	leaq	_miniz_def_free_func(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %107
	jmp	mz_zip_writer_init_v2107
	.text
mz_zip_writer_init_v2107:
	# %108 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %109 = getelementptr %struct.mz_zip_archive, i8* %108, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %110 = load i8*, i8** %109
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %111 = icmp ne i8* %110, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %111, label %115, label %112
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v2112
	jmp	mz_zip_writer_init_v2115
	.text
mz_zip_writer_init_v2112:
	# %113 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %114 = getelementptr %struct.mz_zip_archive, i8* %113, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* @miniz_def_realloc_func, i8** %114
	leaq	_miniz_def_realloc_func(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %115
	jmp	mz_zip_writer_init_v2115
	.text
mz_zip_writer_init_v2115:
	# %116 = load i64, i64* %14
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %117 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %118 = getelementptr %struct.mz_zip_archive, i8* %117, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 %116, i64* %118
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %119 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %120 = getelementptr %struct.mz_zip_archive, i8* %119, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i64 0, i64* %120
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %121 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %122 = getelementptr %struct.mz_zip_archive, i8* %121, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 0, i32* %122
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %123 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %124 = getelementptr %struct.mz_zip_archive, i8* %123, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %125 = load i8*, i8** %124
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %126 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %127 = getelementptr %struct.mz_zip_archive, i8* %126, i32 0, i32 10
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %128 = load i8*, i8** %127
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %129 = call i8* %125 (i8* %128, i64 1, i64 152)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$152, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %130 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %131 = getelementptr %struct.mz_zip_archive, i8* %130, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %129, i8** %131
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %132 = icmp eq i8* null, %129
	movq	$0, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	sete	%bl
	# br i1 %132, label %133, label %142
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v2142
	jmp	mz_zip_writer_init_v2133
	.text
mz_zip_writer_init_v2133:
	# %134 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %134, i8** %10
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %11
	movq	$16, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %135 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %136 = icmp ne i8* %135, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %136, label %137, label %141
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_v2141
	jmp	mz_zip_writer_init_v2137
	.text
mz_zip_writer_init_v2137:
	# %138 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %139 = load i8*, i8** %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %140 = getelementptr %struct.mz_zip_archive, i8* %139, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %138, i32* %140
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %141
	jmp	mz_zip_writer_init_v2141
	.text
mz_zip_writer_init_v2141:
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %180
	jmp	mz_zip_writer_init_v2180
	.text
mz_zip_writer_init_v2142:
	# %143 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %144 = getelementptr %struct.mz_zip_archive, i8* %143, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %145 = load i8*, i8** %144
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %146 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %147 = getelementptr %struct.mz_zip_archive, i8* %146, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %148 = load i8*, i8** %147
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %149 = call i64 @llvm.objectsize.i64.p0 (i8* %148, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %150 = call i8* @__memset_chk (i8* %145, i32 0, i64 152, i64 %149)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$152, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %151 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %152 = getelementptr %struct.mz_zip_archive, i8* %151, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %153 = load i8*, i8** %152
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %154 = getelementptr %struct.mz_zip_internal_state_tag, i8* %153, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %155 = getelementptr %struct.mz_zip_array, i8* %154, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 1, i32* %155
	movq	$1, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %156 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %157 = getelementptr %struct.mz_zip_archive, i8* %156, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %158 = load i8*, i8** %157
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %159 = getelementptr %struct.mz_zip_internal_state_tag, i8* %158, i32 0, i32 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %160 = getelementptr %struct.mz_zip_array, i8* %159, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 4, i32* %160
	movq	$4, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %161 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %162 = getelementptr %struct.mz_zip_archive, i8* %161, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %163 = load i8*, i8** %162
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %164 = getelementptr %struct.mz_zip_internal_state_tag, i8* %163, i32 0, i32 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %165 = getelementptr %struct.mz_zip_array, i8* %164, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 4, i32* %165
	movq	$4, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %166 = load i32, i32* %16
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %167 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %168 = getelementptr %struct.mz_zip_archive, i8* %167, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %169 = load i8*, i8** %168
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %170 = getelementptr %struct.mz_zip_internal_state_tag, i8* %169, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %166, i32* %170
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %171 = load i32, i32* %16
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %172 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %173 = getelementptr %struct.mz_zip_archive, i8* %172, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %174 = load i8*, i8** %173
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %175 = getelementptr %struct.mz_zip_internal_state_tag, i8* %174, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %171, i32* %175
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %176 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %177 = getelementptr %struct.mz_zip_archive, i8* %176, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %177
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %178 = load i8*, i8** %13
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %179 = getelementptr %struct.mz_zip_archive, i8* %178, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 2, i32* %179
	movq	$2, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %12
	movq	$1, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %180
	jmp	mz_zip_writer_init_v2180
	.text
mz_zip_writer_init_v2180:
	# %181 = load i32, i32* %12
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %181
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init
_mz_zip_writer_init:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %4
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %5 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %6 = load i64, i64* %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %7 = call i32 @mz_zip_writer_init_v2 (i8* %5, i64 %6, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %7
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init_heap_v2
_mz_zip_writer_init_heap_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r9
	popq	%r12
	popq	%r14
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# store i8* %0, i8** %8
	movq	%r14, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %9
	movq	%r12, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %10
	movq	%r9, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %11
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %12 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %13 = getelementptr %struct.mz_zip_archive, i8* %12, i32 0, i32 12
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# store i8* @mz_zip_heap_write_func, i8** %13
	leaq	_mz_zip_heap_write_func(%rip), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %14 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %15 = getelementptr %struct.mz_zip_archive, i8* %14, i32 0, i32 13
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# store i8* null, i8** %15
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %16 = load i32, i32* %11
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %r12
	movl	%eax, %r12d
	# %17 = and i32 %16, 32768
	movq	%r12, %rax
	movq	$32768, %rcx
	andq	%rcx, %rax
	movq	%rax, %r12
	# %18 = icmp ne i32 %17, 0
	movq	%r12, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r12
	setne	%r12b
	# br i1 %18, label %19, label %22
	movq	%r12, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_heap_v222
	jmp	mz_zip_writer_init_heap_v219
	.text
mz_zip_writer_init_heap_v219:
	# %20 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %21 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 11
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# store i8* @mz_zip_mem_read_func, i8** %21
	leaq	_mz_zip_mem_read_func(%rip), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %22
	jmp	mz_zip_writer_init_heap_v222
	.text
mz_zip_writer_init_heap_v222:
	# %23 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %24 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %25 = getelementptr %struct.mz_zip_archive, i8* %24, i32 0, i32 14
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# store i8* %23, i8** %25
	movq	%r14, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %26 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %27 = load i64, i64* %9
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %28 = load i32, i32* %11
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %29 = call i32 @mz_zip_writer_init_v2 (i8* %26, i64 %27, i32 %28)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r14, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r11
	# %30 = icmp ne i32 %29, 0
	movq	%r11, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r11
	setne	%r11b
	# br i1 %30, label %32, label %31
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_heap_v231
	jmp	mz_zip_writer_init_heap_v232
	.text
mz_zip_writer_init_heap_v231:
	# store i32 0, i32* %7
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %77
	jmp	mz_zip_writer_init_heap_v277
	.text
mz_zip_writer_init_heap_v232:
	# %33 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 4
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# store i32 3, i32* %34
	movq	$3, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %35 = load i64, i64* %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %36 = load i64, i64* %9
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %37 = icmp ugt i64 %35, %36
	movq	%r12, %rax
	movq	%r11, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r11
	seta	%r11b
	# br i1 %37, label %38, label %40
	movq	%r11, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_heap_v240
	jmp	mz_zip_writer_init_heap_v238
	.text
mz_zip_writer_init_heap_v238:
	# %39 = load i64, i64* %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# br label %42
	movq	%r9, %rdx
	jmp	mz_zip_writer_init_heap_v242
	.text
mz_zip_writer_init_heap_v240:
	# %41 = load i64, i64* %9
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %42
	jmp	mz_zip_writer_init_heap_v242
	.text
mz_zip_writer_init_heap_v242:
	# %43 = phi i64 [%39, %38], [%41, %40]
	# store i64 %43, i64* %10
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %44 = icmp ne i64 0, %43
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %44, label %45, label %76
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_heap_v276
	jmp	mz_zip_writer_init_heap_v245
	.text
mz_zip_writer_init_heap_v245:
	# %46 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = getelementptr %struct.mz_zip_archive, i8* %46, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %48 = load i8*, i8** %47
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = getelementptr %struct.mz_zip_archive, i8* %49, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %51 = load i8*, i8** %50
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %52 = load i64, i64* %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = call i8* %48 (i8* %51, i64 1, i64 %52)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r9
	# %54 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = getelementptr %struct.mz_zip_archive, i8* %54, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %56 = load i8*, i8** %55
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %57 = getelementptr %struct.mz_zip_internal_state_tag, i8* %56, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %53, i8** %57
	movq	%r9, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %58 = icmp eq i8* null, %53
	movq	$0, %rax
	movq	%r9, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %58, label %59, label %70
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_heap_v270
	jmp	mz_zip_writer_init_heap_v259
	.text
mz_zip_writer_init_heap_v259:
	# %60 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %61 = call i32 @mz_zip_writer_end_internal (i8* %60, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %62 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %62, i8** %5
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %6
	movq	$16, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %63 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = icmp ne i8* %63, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %64, label %65, label %69
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_heap_v269
	jmp	mz_zip_writer_init_heap_v265
	.text
mz_zip_writer_init_heap_v265:
	# %66 = load i32, i32* %6
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %67 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = getelementptr %struct.mz_zip_archive, i8* %67, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %66, i32* %68
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %69
	jmp	mz_zip_writer_init_heap_v269
	.text
mz_zip_writer_init_heap_v269:
	# store i32 0, i32* %7
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %77
	jmp	mz_zip_writer_init_heap_v277
	.text
mz_zip_writer_init_heap_v270:
	# %71 = load i64, i64* %10
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %72 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %73 = getelementptr %struct.mz_zip_archive, i8* %72, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %74 = load i8*, i8** %73
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %75 = getelementptr %struct.mz_zip_internal_state_tag, i8* %74, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %71, i64* %75
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %76
	jmp	mz_zip_writer_init_heap_v276
	.text
mz_zip_writer_init_heap_v276:
	# store i32 1, i32* %7
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %77
	jmp	mz_zip_writer_init_heap_v277
	.text
mz_zip_writer_init_heap_v277:
	# %78 = load i32, i32* %7
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %78
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_heap_write_func
_mz_zip_heap_write_func:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$32, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	%rsi
	popq	%r8
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %14 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %16 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %8
	movq	%r8, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %9
	movq	%rsi, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %10
	movq	%rbx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %11
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %17 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8* %17, i8** %12
	movq	%rdi, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %18 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %19 = getelementptr %struct.mz_zip_archive, i8* %18, i32 0, i32 15
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %20 = load i8*, i8** %19
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8* %20, i8** %13
	movq	%rdi, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %21 = load i64, i64* %9
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %22 = load i64, i64* %11
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %23 = add i64 %21, %22
	movq	%r8, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %24 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %25 = getelementptr %struct.mz_zip_internal_state_tag, i8* %24, i32 0, i32 9
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %26 = load i64, i64* %25
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %27 = icmp ugt i64 %23, %26
	movq	%r8, %rax
	movq	%rdi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	seta	%dil
	# br i1 %27, label %28, label %32
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_heap_write_func32
	jmp	mz_zip_heap_write_func28
	.text
mz_zip_heap_write_func28:
	# %29 = load i64, i64* %9
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %30 = load i64, i64* %11
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %31 = add i64 %29, %30
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# br label %36
	movq	%rsi, %rbx
	jmp	mz_zip_heap_write_func36
	.text
mz_zip_heap_write_func32:
	# %33 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %34 = getelementptr %struct.mz_zip_internal_state_tag, i8* %33, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %35 = load i64, i64* %34
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %36
	jmp	mz_zip_heap_write_func36
	.text
mz_zip_heap_write_func36:
	# %37 = phi i64 [%31, %28], [%35, %32]
	# store i64 %37, i64* %14
	movq	%rbx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %38 = load i64, i64* %11
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %39 = icmp ne i64 %38, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %39, label %41, label %40
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_heap_write_func40
	jmp	mz_zip_heap_write_func41
	.text
mz_zip_heap_write_func40:
	# store i64 0, i64* %7
	movq	$0, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %114
	jmp	mz_zip_heap_write_func114
	.text
mz_zip_heap_write_func41:
	# %42 = load i64, i64* %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %43 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %44 = getelementptr %struct.mz_zip_internal_state_tag, i8* %43, i32 0, i32 10
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %45 = load i64, i64* %44
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %46 = icmp ugt i64 %42, %45
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	seta	%bl
	# br i1 %46, label %47, label %95
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_heap_write_func95
	jmp	mz_zip_heap_write_func47
	.text
mz_zip_heap_write_func47:
	# %48 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %49 = getelementptr %struct.mz_zip_internal_state_tag, i8* %48, i32 0, i32 10
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %50 = load i64, i64* %49
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %51 = icmp ugt i64 64, %50
	movq	$64, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	seta	%bl
	# br i1 %51, label %52, label %53
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_heap_write_func53
	jmp	mz_zip_heap_write_func52
	.text
mz_zip_heap_write_func52:
	# br label %57
	movq	$64, %rdx
	jmp	mz_zip_heap_write_func57
	.text
mz_zip_heap_write_func53:
	# %54 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = getelementptr %struct.mz_zip_internal_state_tag, i8* %54, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %56 = load i64, i64* %55
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %57
	jmp	mz_zip_heap_write_func57
	.text
mz_zip_heap_write_func57:
	# %58 = phi i64 [64, %52], [%56, %53]
	# store i64 %58, i64* %16
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %59
	jmp	mz_zip_heap_write_func59
	.text
mz_zip_heap_write_func59:
	# %60 = load i64, i64* %16
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %61 = load i64, i64* %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = icmp ult i64 %60, %61
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %62, label %63, label %66
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_heap_write_func66
	jmp	mz_zip_heap_write_func63
	.text
mz_zip_heap_write_func63:
	# %64 = load i64, i64* %16
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = mul i64 %64, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %65, i64* %16
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %59
	jmp	mz_zip_heap_write_func59
	.text
mz_zip_heap_write_func66:
	# %67 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = getelementptr %struct.mz_zip_archive, i8* %67, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %69 = load i8*, i8** %68
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %70 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = getelementptr %struct.mz_zip_archive, i8* %70, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %72 = load i8*, i8** %71
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %73 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %74 = getelementptr %struct.mz_zip_internal_state_tag, i8* %73, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %75 = load i8*, i8** %74
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %76 = load i64, i64* %16
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = call i8* %69 (i8* %72, i8* %75, i64 1, i64 %76)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %77, i8** %15
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %78 = icmp eq i8* null, %77
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %78, label %79, label %88
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_heap_write_func88
	jmp	mz_zip_heap_write_func79
	.text
mz_zip_heap_write_func79:
	# %80 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %80, i8** %5
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %6
	movq	$16, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %81 = load i8*, i8** %5
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %82 = icmp ne i8* %81, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %82, label %83, label %87
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_heap_write_func87
	jmp	mz_zip_heap_write_func83
	.text
mz_zip_heap_write_func83:
	# %84 = load i32, i32* %6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %85 = load i8*, i8** %5
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = getelementptr %struct.mz_zip_archive, i8* %85, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %84, i32* %86
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %87
	jmp	mz_zip_heap_write_func87
	.text
mz_zip_heap_write_func87:
	# store i64 0, i64* %7
	movq	$0, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %114
	jmp	mz_zip_heap_write_func114
	.text
mz_zip_heap_write_func88:
	# %89 = load i8*, i8** %15
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %90 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %91 = getelementptr %struct.mz_zip_internal_state_tag, i8* %90, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %89, i8** %91
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %92 = load i64, i64* %16
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %93 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %94 = getelementptr %struct.mz_zip_internal_state_tag, i8* %93, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %92, i64* %94
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %95
	jmp	mz_zip_heap_write_func95
	.text
mz_zip_heap_write_func95:
	# %96 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %97 = getelementptr %struct.mz_zip_internal_state_tag, i8* %96, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %98 = load i8*, i8** %97
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %99 = load i64, i64* %9
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %100 = getelementptr i8, i8* %98, i64 %99
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %101 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %102 = load i64, i64* %11
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %103 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %104 = getelementptr %struct.mz_zip_internal_state_tag, i8* %103, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %105 = load i8*, i8** %104
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %106 = load i64, i64* %9
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %107 = getelementptr i8, i8* %105, i64 %106
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %108 = call i64 @llvm.objectsize.i64.p0 (i8* %107, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %109 = call i8* @__memcpy_chk (i8* %100, i8* %101, i64 %102, i64 %108)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %110 = load i64, i64* %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %111 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %112 = getelementptr %struct.mz_zip_internal_state_tag, i8* %111, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %110, i64* %112
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %113 = load i64, i64* %11
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %113, i64* %7
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %114
	jmp	mz_zip_heap_write_func114
	.text
mz_zip_heap_write_func114:
	# %115 = load i64, i64* %7
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %115
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_end_internal
_mz_zip_writer_end_internal:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$40, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	-8(%rbp)
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %14
	movq	-8(%rbp), %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %15
	movq	%rbx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %17
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %18 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %19 = icmp ne i8* %18, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %19, label %20, label %45
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal45
	jmp	mz_zip_writer_end_internal20
	.text
mz_zip_writer_end_internal20:
	# %21 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %22 = getelementptr %struct.mz_zip_archive, i8* %21, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %23 = load i8*, i8** %22
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %24 = icmp ne i8* %23, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %24, label %25, label %45
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal45
	jmp	mz_zip_writer_end_internal25
	.text
mz_zip_writer_end_internal25:
	# %26 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %27 = getelementptr %struct.mz_zip_archive, i8* %26, i32 0, i32 7
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %28 = load i8*, i8** %27
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %29 = icmp ne i8* %28, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %29, label %30, label %45
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal45
	jmp	mz_zip_writer_end_internal30
	.text
mz_zip_writer_end_internal30:
	# %31 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %32 = getelementptr %struct.mz_zip_archive, i8* %31, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %33 = load i8*, i8** %32
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %34 = icmp ne i8* %33, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %34, label %35, label %45
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal45
	jmp	mz_zip_writer_end_internal35
	.text
mz_zip_writer_end_internal35:
	# %36 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %37 = getelementptr %struct.mz_zip_archive, i8* %36, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %38 = load i32, i32* %37
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %39 = icmp ne i32 %38, 2
	movq	%rbx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %39, label %40, label %58
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal58
	jmp	mz_zip_writer_end_internal40
	.text
mz_zip_writer_end_internal40:
	# %41 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %42 = getelementptr %struct.mz_zip_archive, i8* %41, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %43 = load i32, i32* %42
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %44 = icmp ne i32 %43, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %44, label %45, label %58
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal58
	jmp	mz_zip_writer_end_internal45
	.text
mz_zip_writer_end_internal45:
	# %46 = load i32, i32* %15
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %47 = icmp ne i32 %46, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %47, label %48, label %57
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal57
	jmp	mz_zip_writer_end_internal48
	.text
mz_zip_writer_end_internal48:
	# %49 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %49, i8** %9
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %10
	movq	$24, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %50 = load i8*, i8** %9
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %51 = icmp ne i8* %50, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %51, label %52, label %56
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal56
	jmp	mz_zip_writer_end_internal52
	.text
mz_zip_writer_end_internal52:
	# %53 = load i32, i32* %10
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %54 = load i8*, i8** %9
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = getelementptr %struct.mz_zip_archive, i8* %54, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %53, i32* %55
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	mz_zip_writer_end_internal56
	.text
mz_zip_writer_end_internal56:
	# br label %57
	jmp	mz_zip_writer_end_internal57
	.text
mz_zip_writer_end_internal57:
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %174
	jmp	mz_zip_writer_end_internal174
	.text
mz_zip_writer_end_internal58:
	# %59 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %60 = getelementptr %struct.mz_zip_archive, i8* %59, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %61 = load i8*, i8** %60
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %61, i8** %16
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %62 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %63 = getelementptr %struct.mz_zip_archive, i8* %62, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* null, i8** %63
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %64 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %65 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %66 = getelementptr %struct.mz_zip_internal_state_tag, i8* %65, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %64, i8** %3
	movq	%r11, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i8* %66, i8** %4
	movq	%rbx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# %67 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %68 = getelementptr %struct.mz_zip_archive, i8* %67, i32 0, i32 8
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %69 = load i8*, i8** %68
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %70 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %71 = getelementptr %struct.mz_zip_archive, i8* %70, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %72 = load i8*, i8** %71
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %73 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %74 = load i8*, i8** %73
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %69 (i8* %72, i8* %74)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %75 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %76 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %77 = call i64 @llvm.objectsize.i64.p0 (i8* %76, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %78 = call i8* @__memset_chk (i8* %75, i32 0, i64 32, i64 %77)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %79 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %80 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %81 = getelementptr %struct.mz_zip_internal_state_tag, i8* %80, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %79, i8** %5
	movq	%rbx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %81, i8** %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# %82 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %83 = getelementptr %struct.mz_zip_archive, i8* %82, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %84 = load i8*, i8** %83
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %85 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = getelementptr %struct.mz_zip_archive, i8* %85, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %87 = load i8*, i8** %86
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %88 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %89 = load i8*, i8** %88
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %84 (i8* %87, i8* %89)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %90 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %91 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = call i64 @llvm.objectsize.i64.p0 (i8* %91, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %93 = call i8* @__memset_chk (i8* %90, i32 0, i64 32, i64 %92)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %94 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %95 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %96 = getelementptr %struct.mz_zip_internal_state_tag, i8* %95, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %94, i8** %7
	movq	%rbx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %96, i8** %8
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %97 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %98 = getelementptr %struct.mz_zip_archive, i8* %97, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %99 = load i8*, i8** %98
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %100 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %101 = getelementptr %struct.mz_zip_archive, i8* %100, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %102 = load i8*, i8** %101
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %103 = load i8*, i8** %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %104 = load i8*, i8** %103
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %99 (i8* %102, i8* %104)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %105 = load i8*, i8** %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %106 = load i8*, i8** %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %107 = call i64 @llvm.objectsize.i64.p0 (i8* %106, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %108 = call i8* @__memset_chk (i8* %105, i32 0, i64 32, i64 %107)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %109 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %110 = getelementptr %struct.mz_zip_internal_state_tag, i8* %109, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %111 = load i8*, i8** %110
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %112 = icmp ne i8* %111, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %112, label %113, label %141
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal141
	jmp	mz_zip_writer_end_internal113
	.text
mz_zip_writer_end_internal113:
	# %114 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = getelementptr %struct.mz_zip_archive, i8* %114, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %116 = load i32, i32* %115
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %117 = icmp eq i32 %116, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %117, label %118, label %138
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal138
	jmp	mz_zip_writer_end_internal118
	.text
mz_zip_writer_end_internal118:
	# %119 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %120 = getelementptr %struct.mz_zip_internal_state_tag, i8* %119, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %121 = load i8*, i8** %120
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %122 = call i32 @fclose (i8* %121)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_fclose
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %123 = icmp eq i32 %122, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %123, label %124, label %137
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal137
	jmp	mz_zip_writer_end_internal124
	.text
mz_zip_writer_end_internal124:
	# %125 = load i32, i32* %15
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %126 = icmp ne i32 %125, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %126, label %127, label %136
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal136
	jmp	mz_zip_writer_end_internal127
	.text
mz_zip_writer_end_internal127:
	# %128 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %128, i8** %11
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 21, i32* %12
	movq	$21, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %129 = load i8*, i8** %11
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %130 = icmp ne i8* %129, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %130, label %131, label %135
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal135
	jmp	mz_zip_writer_end_internal131
	.text
mz_zip_writer_end_internal131:
	# %132 = load i32, i32* %12
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %133 = load i8*, i8** %11
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %134 = getelementptr %struct.mz_zip_archive, i8* %133, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %132, i32* %134
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %135
	jmp	mz_zip_writer_end_internal135
	.text
mz_zip_writer_end_internal135:
	# br label %136
	jmp	mz_zip_writer_end_internal136
	.text
mz_zip_writer_end_internal136:
	# store i32 0, i32* %17
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %137
	jmp	mz_zip_writer_end_internal137
	.text
mz_zip_writer_end_internal137:
	# br label %138
	jmp	mz_zip_writer_end_internal138
	.text
mz_zip_writer_end_internal138:
	# %139 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %140 = getelementptr %struct.mz_zip_internal_state_tag, i8* %139, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %140
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %141
	jmp	mz_zip_writer_end_internal141
	.text
mz_zip_writer_end_internal141:
	# %142 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %143 = getelementptr %struct.mz_zip_archive, i8* %142, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %144 = load i8*, i8** %143
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %145 = icmp eq i8* %144, @mz_zip_heap_write_func
	movq	%rdx, %rax
	leaq	_mz_zip_heap_write_func(%rip), %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %145, label %146, label %163
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal163
	jmp	mz_zip_writer_end_internal146
	.text
mz_zip_writer_end_internal146:
	# %147 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %148 = getelementptr %struct.mz_zip_internal_state_tag, i8* %147, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %149 = load i8*, i8** %148
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %150 = icmp ne i8* %149, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %150, label %151, label %163
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_end_internal163
	jmp	mz_zip_writer_end_internal151
	.text
mz_zip_writer_end_internal151:
	# %152 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %153 = getelementptr %struct.mz_zip_archive, i8* %152, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %154 = load i8*, i8** %153
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %155 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %156 = getelementptr %struct.mz_zip_archive, i8* %155, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %157 = load i8*, i8** %156
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %158 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %159 = getelementptr %struct.mz_zip_internal_state_tag, i8* %158, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %160 = load i8*, i8** %159
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %154 (i8* %157, i8* %160)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %161 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %162 = getelementptr %struct.mz_zip_internal_state_tag, i8* %161, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %162
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %163
	jmp	mz_zip_writer_end_internal163
	.text
mz_zip_writer_end_internal163:
	# %164 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %165 = getelementptr %struct.mz_zip_archive, i8* %164, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %166 = load i8*, i8** %165
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %167 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %168 = getelementptr %struct.mz_zip_archive, i8* %167, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %169 = load i8*, i8** %168
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %170 = load i8*, i8** %16
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %166 (i8* %169, i8* %170)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %171 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %172 = getelementptr %struct.mz_zip_archive, i8* %171, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %172
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %173 = load i32, i32* %17
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %173, i32* %13
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %174
	jmp	mz_zip_writer_end_internal174
	.text
mz_zip_writer_end_internal174:
	# %175 = load i32, i32* %13
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %175
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init_heap
_mz_zip_writer_init_heap:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdi
	popq	%r8
	popq	%r9
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %5 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %4
	movq	%r9, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %5
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %6
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %7 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %8 = load i64, i64* %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %9 = load i64, i64* %6
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %10 = call i32 @mz_zip_writer_init_heap_v2 (i8* %7, i64 %8, i64 %9, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_heap_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %10
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init_file
_mz_zip_writer_init_file:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdi
	popq	%r8
	popq	%r9
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %4
	movq	%r9, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %5
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %6
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %7 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %8 = load i8*, i8** %5
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %9 = load i64, i64* %6
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %10 = call i32 @mz_zip_writer_init_file_v2 (i8* %7, i8* %8, i64 %9, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %10
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init_file_v2
_mz_zip_writer_init_file_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$40, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	%rsi
	popq	%rdi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %12 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %15 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %16 = alloca [4096 x i8]
	subq	$4096, %rsp
	movq	%rsp, %r9
	# %17 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %10
	movq	%rdi, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %11
	movq	%rsi, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %12
	movq	%rbx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %13
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %18 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %19 = getelementptr %struct.mz_zip_archive, i8* %18, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* @mz_zip_file_write_func, i8** %19
	leaq	_mz_zip_file_write_func(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %20 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %21 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 13
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* null, i8** %21
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %22 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %23 = and i32 %22, 32768
	movq	%rbx, %rax
	movq	$32768, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %24 = icmp ne i32 %23, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %24, label %25, label %28
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v228
	jmp	mz_zip_writer_init_file_v225
	.text
mz_zip_writer_init_file_v225:
	# %26 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %27 = getelementptr %struct.mz_zip_archive, i8* %26, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* @mz_zip_file_read_func, i8** %27
	leaq	_mz_zip_file_read_func(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %28
	jmp	mz_zip_writer_init_file_v228
	.text
mz_zip_writer_init_file_v228:
	# %29 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %30 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %31 = getelementptr %struct.mz_zip_archive, i8* %30, i32 0, i32 14
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %29, i8** %31
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %32 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %33 = load i64, i64* %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %34 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %35 = call i32 @mz_zip_writer_init_v2 (i8* %32, i64 %33, i32 %34)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %36 = icmp ne i32 %35, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %36, label %38, label %37
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v237
	jmp	mz_zip_writer_init_file_v238
	.text
mz_zip_writer_init_file_v237:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %113
	jmp	mz_zip_writer_init_file_v2113
	.text
mz_zip_writer_init_file_v238:
	# %39 = load i8*, i8** %11
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %40 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %41 = and i32 %40, 32768
	movq	%rbx, %rax
	movq	$32768, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %42 = icmp ne i32 %41, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %43 = zext i1 %42 to i64
	movq	%rsi, %rax
	movq	%rax, %rbx
	# %44 = select i1 %42, i8* @.str.20, i8* @.str.19
	pushq	%rdx
	movq	%rsi, %rcx
	leaq	_.str.20(%rip), %rax
	leaq	_.str.19(%rip), %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rbx
	popq	%rdx
	# %45 = call i8* @fopen (i8* %39, i8* %44)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fopen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i8* %45, i8** %14
	movq	%rbx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %46 = icmp eq i8* null, %45
	movq	$0, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	sete	%bl
	# br i1 %46, label %47, label %58
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v258
	jmp	mz_zip_writer_init_file_v247
	.text
mz_zip_writer_init_file_v247:
	# %48 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = call i32 @mz_zip_writer_end (i8* %48)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_end
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %50 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %50, i8** %5
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 17, i32* %6
	movq	$17, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %51 = load i8*, i8** %5
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %52 = icmp ne i8* %51, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %52, label %53, label %57
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v257
	jmp	mz_zip_writer_init_file_v253
	.text
mz_zip_writer_init_file_v253:
	# %54 = load i32, i32* %6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %55 = load i8*, i8** %5
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %56 = getelementptr %struct.mz_zip_archive, i8* %55, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %54, i32* %56
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %57
	jmp	mz_zip_writer_init_file_v257
	.text
mz_zip_writer_init_file_v257:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %113
	jmp	mz_zip_writer_init_file_v2113
	.text
mz_zip_writer_init_file_v258:
	# %59 = load i8*, i8** %14
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %60 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %61 = getelementptr %struct.mz_zip_archive, i8* %60, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %62 = load i8*, i8** %61
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %63 = getelementptr %struct.mz_zip_internal_state_tag, i8* %62, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %59, i8** %63
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %64 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %65 = getelementptr %struct.mz_zip_archive, i8* %64, i32 0, i32 4
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 4, i32* %65
	movq	$4, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %66 = load i64, i64* %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %67 = icmp ne i64 %66, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %67, label %68, label %112
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v2112
	jmp	mz_zip_writer_init_file_v268
	.text
mz_zip_writer_init_file_v268:
	# store i64 0, i64* %15
	movq	$0, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %69 = getelementptr [4096 x i8], i8* %16, i64 0, i64 0
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$4096, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# call void @memset (i8* %69, i8 0, i64 4096, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$4096, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %70
	jmp	mz_zip_writer_init_file_v270
	.text
mz_zip_writer_init_file_v270:
	# %71 = load i64, i64* %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %72 = icmp ult i64 4096, %71
	movq	$4096, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %72, label %73, label %74
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v274
	jmp	mz_zip_writer_init_file_v273
	.text
mz_zip_writer_init_file_v273:
	# br label %76
	movq	$4096, %rbx
	jmp	mz_zip_writer_init_file_v276
	.text
mz_zip_writer_init_file_v274:
	# %75 = load i64, i64* %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %76
	movq	%rdx, %rbx
	jmp	mz_zip_writer_init_file_v276
	.text
mz_zip_writer_init_file_v276:
	# %77 = phi i64 [4096, %73], [%75, %74]
	# store i64 %77, i64* %17
	movq	%rbx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %78 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %79 = getelementptr %struct.mz_zip_archive, i8* %78, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %80 = load i8*, i8** %79
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %81 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %82 = getelementptr %struct.mz_zip_archive, i8* %81, i32 0, i32 14
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %83 = load i8*, i8** %82
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %84 = load i64, i64* %15
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %85 = getelementptr [4096 x i8], i8* %16, i64 0, i64 0
	movq	%r9, %rcx
	movq	$0, %rax
	imulq	$4096, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %86 = load i64, i64* %17
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %87 = call i64 %80 (i8* %83, i64 %84, i8* %85, i64 %86)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %88 = load i64, i64* %17
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %89 = icmp ne i64 %87, %88
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %89, label %90, label %101
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v2101
	jmp	mz_zip_writer_init_file_v290
	.text
mz_zip_writer_init_file_v290:
	# %91 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = call i32 @mz_zip_writer_end (i8* %91)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_end
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %93 = load i8*, i8** %10
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %93, i8** %7
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %8
	movq	$19, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %94 = load i8*, i8** %7
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %95 = icmp ne i8* %94, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %95, label %96, label %100
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v2100
	jmp	mz_zip_writer_init_file_v296
	.text
mz_zip_writer_init_file_v296:
	# %97 = load i32, i32* %8
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %98 = load i8*, i8** %7
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = getelementptr %struct.mz_zip_archive, i8* %98, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %97, i32* %99
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %100
	jmp	mz_zip_writer_init_file_v2100
	.text
mz_zip_writer_init_file_v2100:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %113
	jmp	mz_zip_writer_init_file_v2113
	.text
mz_zip_writer_init_file_v2101:
	# %102 = load i64, i64* %17
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %103 = load i64, i64* %15
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %104 = add i64 %103, %102
	movq	%rbx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %104, i64* %15
	movq	%rbx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# %105 = load i64, i64* %17
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %106 = load i64, i64* %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %107 = sub i64 %106, %105
	movq	%rbx, %rax
	movq	%rsi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %107, i64* %12
	movq	%rbx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# br label %108
	jmp	mz_zip_writer_init_file_v2108
	.text
mz_zip_writer_init_file_v2108:
	# %109 = load i64, i64* %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %110 = icmp ne i64 %109, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %110, label %70, label %111
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_file_v2111
	jmp	mz_zip_writer_init_file_v270
	.text
mz_zip_writer_init_file_v2111:
	# br label %112
	jmp	mz_zip_writer_init_file_v2112
	.text
mz_zip_writer_init_file_v2112:
	# store i32 1, i32* %9
	movq	$1, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %113
	jmp	mz_zip_writer_init_file_v2113
	.text
mz_zip_writer_init_file_v2113:
	# %114 = load i32, i32* %9
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %114
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_file_write_func
_mz_zip_file_write_func:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r14
	popq	%r15
	popq	-8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %13 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %8
	movq	-8(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %9
	movq	%r15, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %10
	movq	%r14, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %11
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %14 = load i8*, i8** %8
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %14, i8** %12
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %15 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = getelementptr %struct.mz_zip_archive, i8* %15, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %17 = load i8*, i8** %16
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = getelementptr %struct.mz_zip_internal_state_tag, i8* %17, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %19 = load i8*, i8** %18
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %20 = call i64 @ftello (i8* %19)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_ftello
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %20, i64* %13
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %21 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %22 = getelementptr %struct.mz_zip_archive, i8* %21, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %23 = load i8*, i8** %22
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %24 = getelementptr %struct.mz_zip_internal_state_tag, i8* %23, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %25 = load i64, i64* %24
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %26 = load i64, i64* %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %27 = add i64 %26, %25
	movq	%rdx, %rax
	movq	%r10, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %27, i64* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %28 = load i64, i64* %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = icmp slt i64 %28, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setl	%dl
	# br i1 %29, label %43, label %30
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_write_func30
	jmp	mz_zip_file_write_func43
	.text
mz_zip_file_write_func30:
	# %31 = load i64, i64* %13
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %32 = load i64, i64* %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %33 = icmp ne i64 %31, %32
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %33, label %34, label %52
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_write_func52
	jmp	mz_zip_file_write_func34
	.text
mz_zip_file_write_func34:
	# %35 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = getelementptr %struct.mz_zip_archive, i8* %35, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %37 = load i8*, i8** %36
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = getelementptr %struct.mz_zip_internal_state_tag, i8* %37, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %39 = load i8*, i8** %38
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = load i64, i64* %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = call i32 @fseeko (i8* %39, i64 %40, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fseeko
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %42 = icmp ne i32 %41, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %42, label %43, label %52
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_write_func52
	jmp	mz_zip_file_write_func43
	.text
mz_zip_file_write_func43:
	# %44 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %44, i8** %5
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 22, i32* %6
	movq	$22, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %45 = load i8*, i8** %5
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %46 = icmp ne i8* %45, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %46, label %47, label %51
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_file_write_func51
	jmp	mz_zip_file_write_func47
	.text
mz_zip_file_write_func47:
	# %48 = load i32, i32* %6
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %49 = load i8*, i8** %5
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = getelementptr %struct.mz_zip_archive, i8* %49, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %48, i32* %50
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %51
	jmp	mz_zip_file_write_func51
	.text
mz_zip_file_write_func51:
	# store i64 0, i64* %7
	movq	$0, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# br label %61
	jmp	mz_zip_file_write_func61
	.text
mz_zip_file_write_func52:
	# %53 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %54 = load i64, i64* %11
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %55 = load i8*, i8** %12
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %56 = getelementptr %struct.mz_zip_archive, i8* %55, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %57 = load i8*, i8** %56
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = getelementptr %struct.mz_zip_internal_state_tag, i8* %57, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %59 = load i8*, i8** %58
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = call i64 @fwrite (i8* %53, i64 1, i64 %54, i8* %59)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fwrite
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %60, i64* %7
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# br label %61
	jmp	mz_zip_file_write_func61
	.text
mz_zip_file_write_func61:
	# %62 = load i64, i64* %7
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %62
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_end
_mz_zip_writer_end:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = call i32 @mz_zip_writer_end_internal (i8* %3, i32 1)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %4
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init_cfile
_mz_zip_writer_init_cfile:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%rbx
	popq	%r10
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %5
	movq	%r10, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%rbx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %7
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %8 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %9 = getelementptr %struct.mz_zip_archive, i8* %8, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @mz_zip_file_write_func, i8** %9
	leaq	_mz_zip_file_write_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %10 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %11 = getelementptr %struct.mz_zip_archive, i8* %10, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %11
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %12 = load i32, i32* %7
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %13 = and i32 %12, 32768
	movq	%rdx, %rax
	movq	$32768, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %14 = icmp ne i32 %13, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %14, label %15, label %18
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_cfile18
	jmp	mz_zip_writer_init_cfile15
	.text
mz_zip_writer_init_cfile15:
	# %16 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %17 = getelementptr %struct.mz_zip_archive, i8* %16, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @mz_zip_file_read_func, i8** %17
	leaq	_mz_zip_file_read_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %18
	jmp	mz_zip_writer_init_cfile18
	.text
mz_zip_writer_init_cfile18:
	# %19 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %21 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %19, i8** %21
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %22 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = load i32, i32* %7
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %24 = call i32 @mz_zip_writer_init_v2 (i8* %22, i64 0, i32 %23)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %25 = icmp ne i32 %24, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %25, label %27, label %26
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_cfile26
	jmp	mz_zip_writer_init_cfile27
	.text
mz_zip_writer_init_cfile26:
	# store i32 0, i32* %4
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %45
	jmp	mz_zip_writer_init_cfile45
	.text
mz_zip_writer_init_cfile27:
	# %28 = load i8*, i8** %6
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %29 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %30 = getelementptr %struct.mz_zip_archive, i8* %29, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %31 = load i8*, i8** %30
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = getelementptr %struct.mz_zip_internal_state_tag, i8* %31, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %28, i8** %32
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %33 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %35 = load i8*, i8** %34
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %36 = getelementptr %struct.mz_zip_internal_state_tag, i8* %35, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %37 = load i8*, i8** %36
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = call i64 @ftello (i8* %37)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_ftello
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %39 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %40 = getelementptr %struct.mz_zip_archive, i8* %39, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %41 = load i8*, i8** %40
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %42 = getelementptr %struct.mz_zip_internal_state_tag, i8* %41, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %38, i64* %42
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %43 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %44 = getelementptr %struct.mz_zip_archive, i8* %43, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 5, i32* %44
	movq	$5, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %4
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %45
	jmp	mz_zip_writer_init_cfile45
	.text
mz_zip_writer_init_cfile45:
	# %46 = load i32, i32* %4
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %46
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init_from_reader_v2
_mz_zip_writer_init_from_reader_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$144, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -80(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %27
	movq	-8(%rbp), %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %28
	movq	-16(%rbp), %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %29
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %31 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = icmp ne i8* %31, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %32, label %33, label %43
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v243
	jmp	mz_zip_writer_init_from_reader_v233
	.text
mz_zip_writer_init_from_reader_v233:
	# %34 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %35 = getelementptr %struct.mz_zip_archive, i8* %34, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %36 = load i8*, i8** %35
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %37 = icmp ne i8* %36, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %37, label %38, label %43
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v243
	jmp	mz_zip_writer_init_from_reader_v238
	.text
mz_zip_writer_init_from_reader_v238:
	# %39 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %40 = getelementptr %struct.mz_zip_archive, i8* %39, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %41 = load i32, i32* %40
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %42 = icmp ne i32 %41, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %42, label %43, label %52
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v252
	jmp	mz_zip_writer_init_from_reader_v243
	.text
mz_zip_writer_init_from_reader_v243:
	# %44 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %44, i8** %6
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %45 = load i8*, i8** %6
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %46 = icmp ne i8* %45, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %46, label %47, label %51
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v251
	jmp	mz_zip_writer_init_from_reader_v247
	.text
mz_zip_writer_init_from_reader_v247:
	# %48 = load i32, i32* %7
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %49 = load i8*, i8** %6
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = getelementptr %struct.mz_zip_archive, i8* %49, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %48, i32* %50
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %51
	jmp	mz_zip_writer_init_from_reader_v251
	.text
mz_zip_writer_init_from_reader_v251:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v252:
	# %53 = load i32, i32* %29
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %54 = and i32 %53, 16384
	movq	%rdx, %rax
	movq	$16384, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %55 = icmp ne i32 %54, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %55, label %56, label %73
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v273
	jmp	mz_zip_writer_init_from_reader_v256
	.text
mz_zip_writer_init_from_reader_v256:
	# %57 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = getelementptr %struct.mz_zip_archive, i8* %57, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %59 = load i8*, i8** %58
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = getelementptr %struct.mz_zip_internal_state_tag, i8* %59, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %61 = load i32, i32* %60
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %62 = icmp ne i32 %61, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %62, label %72, label %63
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v263
	jmp	mz_zip_writer_init_from_reader_v272
	.text
mz_zip_writer_init_from_reader_v263:
	# %64 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %64, i8** %8
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %9
	movq	$24, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %65 = load i8*, i8** %8
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %66 = icmp ne i8* %65, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %66, label %67, label %71
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v271
	jmp	mz_zip_writer_init_from_reader_v267
	.text
mz_zip_writer_init_from_reader_v267:
	# %68 = load i32, i32* %9
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %69 = load i8*, i8** %8
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %70 = getelementptr %struct.mz_zip_archive, i8* %69, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %68, i32* %70
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %71
	jmp	mz_zip_writer_init_from_reader_v271
	.text
mz_zip_writer_init_from_reader_v271:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v272:
	# br label %73
	jmp	mz_zip_writer_init_from_reader_v273
	.text
mz_zip_writer_init_from_reader_v273:
	# %74 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %75 = getelementptr %struct.mz_zip_archive, i8* %74, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %76 = load i8*, i8** %75
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = getelementptr %struct.mz_zip_internal_state_tag, i8* %76, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %78 = load i32, i32* %77
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %79 = icmp ne i32 %78, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %79, label %80, label %95
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v295
	jmp	mz_zip_writer_init_from_reader_v280
	.text
mz_zip_writer_init_from_reader_v280:
	# %81 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %82 = getelementptr %struct.mz_zip_archive, i8* %81, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %83 = load i32, i32* %82
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %84 = icmp eq i32 %83, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %84, label %85, label %94
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v294
	jmp	mz_zip_writer_init_from_reader_v285
	.text
mz_zip_writer_init_from_reader_v285:
	# %86 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %86, i8** %10
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %11
	movq	$2, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# %87 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = icmp ne i8* %87, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %88, label %89, label %93
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v293
	jmp	mz_zip_writer_init_from_reader_v289
	.text
mz_zip_writer_init_from_reader_v289:
	# %90 = load i32, i32* %11
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %91 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = getelementptr %struct.mz_zip_archive, i8* %91, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %90, i32* %92
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %93
	jmp	mz_zip_writer_init_from_reader_v293
	.text
mz_zip_writer_init_from_reader_v293:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v294:
	# br label %126
	jmp	mz_zip_writer_init_from_reader_v2126
	.text
mz_zip_writer_init_from_reader_v295:
	# %96 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %97 = getelementptr %struct.mz_zip_archive, i8* %96, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %98 = load i32, i32* %97
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %99 = icmp eq i32 %98, 65535
	movq	%rdx, %rax
	movq	$65535, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %99, label %100, label %109
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2109
	jmp	mz_zip_writer_init_from_reader_v2100
	.text
mz_zip_writer_init_from_reader_v2100:
	# %101 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %101, i8** %12
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %13
	movq	$2, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %102 = load i8*, i8** %12
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %103 = icmp ne i8* %102, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %103, label %104, label %108
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2108
	jmp	mz_zip_writer_init_from_reader_v2104
	.text
mz_zip_writer_init_from_reader_v2104:
	# %105 = load i32, i32* %13
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %106 = load i8*, i8** %12
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %107 = getelementptr %struct.mz_zip_archive, i8* %106, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %105, i32* %107
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %108
	jmp	mz_zip_writer_init_from_reader_v2108
	.text
mz_zip_writer_init_from_reader_v2108:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v2109:
	# %110 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr %struct.mz_zip_archive, i8* %110, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %112 = load i64, i64* %111
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %113 = add i64 %112, 46
	movq	%rdx, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %114 = add i64 %113, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %115 = icmp ugt i64 %114, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %115, label %116, label %125
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2125
	jmp	mz_zip_writer_init_from_reader_v2116
	.text
mz_zip_writer_init_from_reader_v2116:
	# %117 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %117, i8** %14
	movq	%rdx, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 3, i32* %15
	movq	$3, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %118 = load i8*, i8** %14
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %119 = icmp ne i8* %118, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %119, label %120, label %124
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2124
	jmp	mz_zip_writer_init_from_reader_v2120
	.text
mz_zip_writer_init_from_reader_v2120:
	# %121 = load i32, i32* %15
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %122 = load i8*, i8** %14
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = getelementptr %struct.mz_zip_archive, i8* %122, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %121, i32* %123
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %124
	jmp	mz_zip_writer_init_from_reader_v2124
	.text
mz_zip_writer_init_from_reader_v2124:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v2125:
	# br label %126
	jmp	mz_zip_writer_init_from_reader_v2126
	.text
mz_zip_writer_init_from_reader_v2126:
	# %127 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = getelementptr %struct.mz_zip_archive, i8* %127, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %129 = load i8*, i8** %128
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %129, i8** %30
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %130 = load i8*, i8** %30
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %131 = getelementptr %struct.mz_zip_internal_state_tag, i8* %130, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %132 = load i8*, i8** %131
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %133 = icmp ne i8* %132, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %133, label %134, label %192
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2192
	jmp	mz_zip_writer_init_from_reader_v2134
	.text
mz_zip_writer_init_from_reader_v2134:
	# %135 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %136 = getelementptr %struct.mz_zip_archive, i8* %135, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %137 = load i8*, i8** %136
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %138 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %139 = icmp ne i8* %137, %138
	movq	%rsi, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %139, label %140, label %149
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2149
	jmp	mz_zip_writer_init_from_reader_v2140
	.text
mz_zip_writer_init_from_reader_v2140:
	# %141 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %141, i8** %16
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %17
	movq	$24, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %142 = load i8*, i8** %16
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %143 = icmp ne i8* %142, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %143, label %144, label %148
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2148
	jmp	mz_zip_writer_init_from_reader_v2144
	.text
mz_zip_writer_init_from_reader_v2144:
	# %145 = load i32, i32* %17
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %146 = load i8*, i8** %16
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %147 = getelementptr %struct.mz_zip_archive, i8* %146, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %145, i32* %147
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %148
	jmp	mz_zip_writer_init_from_reader_v2148
	.text
mz_zip_writer_init_from_reader_v2148:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v2149:
	# %150 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %151 = getelementptr %struct.mz_zip_archive, i8* %150, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %152 = load i32, i32* %151
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %153 = icmp eq i32 %152, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %153, label %154, label %187
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2187
	jmp	mz_zip_writer_init_from_reader_v2154
	.text
mz_zip_writer_init_from_reader_v2154:
	# %155 = load i8*, i8** %28
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %156 = icmp ne i8* %155, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %156, label %166, label %157
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2157
	jmp	mz_zip_writer_init_from_reader_v2166
	.text
mz_zip_writer_init_from_reader_v2157:
	# %158 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %158, i8** %18
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %19
	movq	$24, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# %159 = load i8*, i8** %18
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %160 = icmp ne i8* %159, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %160, label %161, label %165
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2165
	jmp	mz_zip_writer_init_from_reader_v2161
	.text
mz_zip_writer_init_from_reader_v2161:
	# %162 = load i32, i32* %19
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %163 = load i8*, i8** %18
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %164 = getelementptr %struct.mz_zip_archive, i8* %163, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %162, i32* %164
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %165
	jmp	mz_zip_writer_init_from_reader_v2165
	.text
mz_zip_writer_init_from_reader_v2165:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v2166:
	# %167 = load i8*, i8** %28
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %168 = load i8*, i8** %30
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %169 = getelementptr %struct.mz_zip_internal_state_tag, i8* %168, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %170 = load i8*, i8** %169
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %171 = call i8* @freopen (i8* %167, i8* @.str.21, i8* %170)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	leaq	_.str.21(%rip), %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_freopen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %172 = load i8*, i8** %30
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %173 = getelementptr %struct.mz_zip_internal_state_tag, i8* %172, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %171, i8** %173
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %174 = icmp eq i8* null, %171
	movq	$0, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %174, label %175, label %186
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2186
	jmp	mz_zip_writer_init_from_reader_v2175
	.text
mz_zip_writer_init_from_reader_v2175:
	# %176 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %177 = call i32 @mz_zip_reader_end_internal (i8* %176, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %178 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %178, i8** %20
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i32 17, i32* %21
	movq	$17, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %179 = load i8*, i8** %20
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %180 = icmp ne i8* %179, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %180, label %181, label %185
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2185
	jmp	mz_zip_writer_init_from_reader_v2181
	.text
mz_zip_writer_init_from_reader_v2181:
	# %182 = load i32, i32* %21
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %183 = load i8*, i8** %20
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %184 = getelementptr %struct.mz_zip_archive, i8* %183, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %182, i32* %184
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %185
	jmp	mz_zip_writer_init_from_reader_v2185
	.text
mz_zip_writer_init_from_reader_v2185:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v2186:
	# br label %187
	jmp	mz_zip_writer_init_from_reader_v2187
	.text
mz_zip_writer_init_from_reader_v2187:
	# %188 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %189 = getelementptr %struct.mz_zip_archive, i8* %188, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @mz_zip_file_write_func, i8** %189
	leaq	_mz_zip_file_write_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %190 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %191 = getelementptr %struct.mz_zip_archive, i8* %190, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %191
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %238
	jmp	mz_zip_writer_init_from_reader_v2238
	.text
mz_zip_writer_init_from_reader_v2192:
	# %193 = load i8*, i8** %30
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %194 = getelementptr %struct.mz_zip_internal_state_tag, i8* %193, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %195 = load i8*, i8** %194
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %196 = icmp ne i8* %195, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %196, label %197, label %222
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2222
	jmp	mz_zip_writer_init_from_reader_v2197
	.text
mz_zip_writer_init_from_reader_v2197:
	# %198 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %199 = getelementptr %struct.mz_zip_archive, i8* %198, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %200 = load i8*, i8** %199
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %201 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %202 = icmp ne i8* %200, %201
	movq	%rdx, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %202, label %203, label %212
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2212
	jmp	mz_zip_writer_init_from_reader_v2203
	.text
mz_zip_writer_init_from_reader_v2203:
	# %204 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %204, i8** %22
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %23
	movq	$24, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %205 = load i8*, i8** %22
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %206 = icmp ne i8* %205, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %206, label %207, label %211
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2211
	jmp	mz_zip_writer_init_from_reader_v2207
	.text
mz_zip_writer_init_from_reader_v2207:
	# %208 = load i32, i32* %23
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %209 = load i8*, i8** %22
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %210 = getelementptr %struct.mz_zip_archive, i8* %209, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %208, i32* %210
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %211
	jmp	mz_zip_writer_init_from_reader_v2211
	.text
mz_zip_writer_init_from_reader_v2211:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v2212:
	# %213 = load i8*, i8** %30
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %214 = getelementptr %struct.mz_zip_internal_state_tag, i8* %213, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %215 = load i64, i64* %214
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %216 = load i8*, i8** %30
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %217 = getelementptr %struct.mz_zip_internal_state_tag, i8* %216, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %215, i64* %217
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %218 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %219 = getelementptr %struct.mz_zip_archive, i8* %218, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* @mz_zip_heap_write_func, i8** %219
	leaq	_mz_zip_heap_write_func(%rip), %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %220 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %221 = getelementptr %struct.mz_zip_archive, i8* %220, i32 0, i32 13
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %221
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %237
	jmp	mz_zip_writer_init_from_reader_v2237
	.text
mz_zip_writer_init_from_reader_v2222:
	# %223 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %224 = getelementptr %struct.mz_zip_archive, i8* %223, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %225 = load i8*, i8** %224
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %226 = icmp ne i8* %225, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %226, label %236, label %227
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2227
	jmp	mz_zip_writer_init_from_reader_v2236
	.text
mz_zip_writer_init_from_reader_v2227:
	# %228 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %228, i8** %24
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %25
	movq	$24, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %229 = load i8*, i8** %24
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %230 = icmp ne i8* %229, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %230, label %231, label %235
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_init_from_reader_v2235
	jmp	mz_zip_writer_init_from_reader_v2231
	.text
mz_zip_writer_init_from_reader_v2231:
	# %232 = load i32, i32* %25
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %233 = load i8*, i8** %24
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %234 = getelementptr %struct.mz_zip_archive, i8* %233, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %232, i32* %234
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %235
	jmp	mz_zip_writer_init_from_reader_v2235
	.text
mz_zip_writer_init_from_reader_v2235:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v2236:
	# br label %237
	jmp	mz_zip_writer_init_from_reader_v2237
	.text
mz_zip_writer_init_from_reader_v2237:
	# br label %238
	jmp	mz_zip_writer_init_from_reader_v2238
	.text
mz_zip_writer_init_from_reader_v2238:
	# %239 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %240 = getelementptr %struct.mz_zip_archive, i8* %239, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %241 = load i64, i64* %240
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %242 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %243 = getelementptr %struct.mz_zip_archive, i8* %242, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %241, i64* %243
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %244 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %245 = getelementptr %struct.mz_zip_archive, i8* %244, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %245
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %246 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %247 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %248 = getelementptr %struct.mz_zip_archive, i8* %247, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %249 = load i8*, i8** %248
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %250 = getelementptr %struct.mz_zip_internal_state_tag, i8* %249, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %246, i8** %4
	movq	%rbx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %250, i8** %5
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# %251 = load i8*, i8** %4
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %252 = getelementptr %struct.mz_zip_archive, i8* %251, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %253 = load i8*, i8** %252
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %254 = load i8*, i8** %4
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %255 = getelementptr %struct.mz_zip_archive, i8* %254, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %256 = load i8*, i8** %255
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %257 = load i8*, i8** %5
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %258 = load i8*, i8** %257
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %253 (i8* %256, i8* %258)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %259 = load i8*, i8** %5
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %260 = load i8*, i8** %5
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %261 = call i64 @llvm.objectsize.i64.p0 (i8* %260, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %262 = call i8* @__memset_chk (i8* %259, i32 0, i64 32, i64 %261)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %263 = load i8*, i8** %27
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %264 = getelementptr %struct.mz_zip_archive, i8* %263, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 2, i32* %264
	movq	$2, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %26
	movq	$1, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %265
	jmp	mz_zip_writer_init_from_reader_v2265
	.text
mz_zip_writer_init_from_reader_v2265:
	# %266 = load i32, i32* %26
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %266
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_init_from_reader
_mz_zip_writer_init_from_reader:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %4
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %5 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %6 = load i8*, i8** %4
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %7 = call i32 @mz_zip_writer_init_from_reader_v2 (i8* %5, i8* %6, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_from_reader_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %7
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_mem
_mz_zip_writer_add_mem:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%r10
	popq	%rdx
	popq	%r11
	popq	%r12
	popq	%r13
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %6
	movq	%r13, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %7
	movq	%r12, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%r11, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %9
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %10
	movq	%r10, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %11 = load i8*, i8** %6
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %12 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %13 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %14 = load i64, i64* %9
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = load i32, i32* %10
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %16 = call i32 @mz_zip_writer_add_mem_ex (i8* %11, i8* %12, i8* %13, i64 %14, i8* null, i16 0, i32 %15, i64 0, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_add_mem_ex
	addq	$24, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %16
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_mem_ex
_mz_zip_writer_add_mem_ex:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$48, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	pushq	40(%rbp)
	popq	%r14
	popq	%r15
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %13 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %15 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r8
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %17 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %10
	movq	-8(%rbp), %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %11
	movq	-16(%rbp), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %12
	movq	-24(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %13
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %4, i8** %14
	movq	-32(%rbp), %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i16 %5, i16* %15
	movq	-40(%rbp), %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %6, i32* %16
	movq	-48(%rbp), %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# store i64 %7, i64* %17
	movq	%r15, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 %8, i32* %18
	movq	%r14, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %19 = load i8*, i8** %10
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %20 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %21 = load i8*, i8** %12
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %22 = load i64, i64* %13
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %23 = load i8*, i8** %14
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %24 = load i16, i16* %15
	movq	%r8, %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %25 = load i32, i32* %16
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %26 = load i64, i64* %17
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %27 = load i32, i32* %18
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %28 = call i32 @mz_zip_writer_add_mem_ex_v2 (i8* %19, i8* %20, i8* %21, i64 %22, i8* %23, i16 %24, i32 %25, i64 %26, i32 %27, i8* null, i8* null, i32 0, i8* null, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r13, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	80(%rbp)
	popq	72(%rbp)
	popq	64(%rbp)
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_add_mem_ex_v2
	addq	$64, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %28
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_mem_ex_v2
_mz_zip_writer_add_mem_ex_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$1008, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	pushq	40(%rbp)
	pushq	48(%rbp)
	pushq	56(%rbp)
	pushq	64(%rbp)
	pushq	72(%rbp)
	pushq	80(%rbp)
	popq	%rbx
	popq	-96(%rbp)
	popq	-88(%rbp)
	popq	-80(%rbp)
	popq	-72(%rbp)
	popq	-64(%rbp)
	popq	-56(%rbp)
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %18 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -128(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -136(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %23 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -184(%rbp)
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -192(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -200(%rbp)
	# %28 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -208(%rbp)
	# %29 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -216(%rbp)
	# %30 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %31 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -232(%rbp)
	# %32 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -240(%rbp)
	# %33 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -248(%rbp)
	# %34 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -256(%rbp)
	# %35 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %36 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -280(%rbp)
	# %37 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %38 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -296(%rbp)
	# %39 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %40 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -312(%rbp)
	# %41 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %42 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %43 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -336(%rbp)
	# %44 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -344(%rbp)
	# %45 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %46 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -360(%rbp)
	# %47 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -368(%rbp)
	# %48 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -376(%rbp)
	# %49 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -384(%rbp)
	# %50 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -392(%rbp)
	# %51 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -400(%rbp)
	# %52 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -408(%rbp)
	# %53 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -416(%rbp)
	# %54 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -424(%rbp)
	# %55 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -432(%rbp)
	# %56 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -440(%rbp)
	# %57 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -448(%rbp)
	# %58 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -456(%rbp)
	# %59 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -464(%rbp)
	# %60 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -472(%rbp)
	# %61 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -480(%rbp)
	# %62 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -488(%rbp)
	# %63 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -496(%rbp)
	# %64 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -504(%rbp)
	# %65 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -512(%rbp)
	# %66 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -520(%rbp)
	# %67 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -528(%rbp)
	# %68 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -536(%rbp)
	# %69 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -544(%rbp)
	# %70 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -552(%rbp)
	# %71 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -560(%rbp)
	# %72 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -568(%rbp)
	# %73 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -576(%rbp)
	# %74 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -584(%rbp)
	# %75 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -592(%rbp)
	# %76 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -600(%rbp)
	# %77 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -608(%rbp)
	# %78 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -616(%rbp)
	# %79 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -624(%rbp)
	# %80 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -632(%rbp)
	# %81 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -640(%rbp)
	# %82 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -648(%rbp)
	# %83 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -656(%rbp)
	# %84 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -664(%rbp)
	# %85 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -672(%rbp)
	# %86 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -680(%rbp)
	# %87 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -688(%rbp)
	# %88 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -696(%rbp)
	# %89 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -704(%rbp)
	# %90 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -712(%rbp)
	# %91 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -720(%rbp)
	# %92 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -728(%rbp)
	# %93 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -736(%rbp)
	# %94 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -744(%rbp)
	# %95 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -752(%rbp)
	# %96 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -760(%rbp)
	# %97 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -768(%rbp)
	# %98 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -776(%rbp)
	# %99 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -784(%rbp)
	# %100 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -792(%rbp)
	# %101 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -800(%rbp)
	# %102 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -808(%rbp)
	# %103 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -816(%rbp)
	# %104 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -824(%rbp)
	# %105 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -832(%rbp)
	# %106 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -840(%rbp)
	# %107 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -848(%rbp)
	# %108 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -856(%rbp)
	# %109 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -864(%rbp)
	# %110 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -872(%rbp)
	# %111 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -880(%rbp)
	# %112 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -264(%rbp)
	# %113 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %114 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -888(%rbp)
	# %115 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -896(%rbp)
	# %116 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -904(%rbp)
	# %117 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -912(%rbp)
	# %118 = alloca [30 x i8]
	subq	$30, %rsp
	movq	%rsp, -920(%rbp)
	# %119 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -928(%rbp)
	# %120 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -936(%rbp)
	# %121 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %122 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -944(%rbp)
	# %123 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -952(%rbp)
	# %124 = alloca [28 x i8]
	subq	$28, %rsp
	movq	%rsp, %r15
	# %125 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -960(%rbp)
	# %126 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %127 = alloca %struct.mz_zip_writer_add_state
	subq	$24, %rsp
	movq	%rsp, %r14
	# %128 = alloca [24 x i8]
	subq	$24, %rsp
	movq	%rsp, %r13
	# %129 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# store i8* %0, i8** %94
	movq	-8(%rbp), %rax
	movq	-744(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %95
	movq	-16(%rbp), %rax
	movq	-752(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %96
	movq	-24(%rbp), %rax
	movq	-760(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %97
	movq	%rdx, %rax
	movq	-768(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %4, i8** %98
	movq	-32(%rbp), %rax
	movq	-776(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %5, i16* %99
	movq	-40(%rbp), %rax
	movq	-784(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %6, i32* %100
	movq	-48(%rbp), %rax
	movq	-792(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i64 %7, i64* %101
	movq	-56(%rbp), %rax
	movq	-800(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %8, i32* %102
	movq	-64(%rbp), %rax
	movq	-808(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %9, i8** %103
	movq	-72(%rbp), %rax
	movq	-816(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %10, i8** %104
	movq	-80(%rbp), %rax
	movq	-824(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %11, i32* %105
	movq	-88(%rbp), %rax
	movq	-832(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %12, i8** %106
	movq	-96(%rbp), %rax
	movq	-840(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %13, i32* %107
	movq	%rbx, %rax
	movq	-848(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i16 0, i16* %108
	movq	$0, %rax
	movq	-856(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 0, i16* %109
	movq	$0, %rax
	movq	-864(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 0, i16* %110
	movq	$0, %rax
	movq	-872(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %112
	movq	$0, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# %130 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %131 = getelementptr %struct.mz_zip_archive, i8* %130, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %132 = load i64, i64* %131
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %132, i64* %114
	movq	%rdx, %rax
	movq	-888(%rbp), %rcx
	movq	%rax, (%rcx)
	# %133 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %134 = getelementptr %struct.mz_zip_archive, i8* %133, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %135 = load i64, i64* %134
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %135, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %116
	movq	$0, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %119
	movq	$0, %rax
	movq	-928(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %122
	movq	$0, %rax
	movq	-944(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %123
	movq	$0, %rax
	movq	-952(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i16 0, i16* %125
	movq	$0, %rax
	movq	-960(%rbp), %rcx
	movq	%rax, (%rcx)
	# %136 = load i32, i32* %100
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %137 = icmp slt i32 %136, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %137, label %138, label %139
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2139
	jmp	mz_zip_writer_add_mem_ex_v2138
	.text
mz_zip_writer_add_mem_ex_v2138:
	# store i32 6, i32* %100
	movq	$6, %rax
	movq	-792(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %139
	jmp	mz_zip_writer_add_mem_ex_v2139
	.text
mz_zip_writer_add_mem_ex_v2139:
	# %140 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %141 = icmp ne i64 %140, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %141, label %149, label %142
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2142
	jmp	mz_zip_writer_add_mem_ex_v2149
	.text
mz_zip_writer_add_mem_ex_v2142:
	# %143 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %144 = icmp ne i64 %143, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %144, label %145, label %154
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2154
	jmp	mz_zip_writer_add_mem_ex_v2145
	.text
mz_zip_writer_add_mem_ex_v2145:
	# %146 = load i32, i32* %100
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %147 = and i32 %146, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %148 = icmp ne i32 %147, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %148, label %154, label %149
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2149
	jmp	mz_zip_writer_add_mem_ex_v2154
	.text
mz_zip_writer_add_mem_ex_v2149:
	# %150 = load i16, i16* %125
	movq	-960(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %151 = zext i16 %150 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %152 = or i32 %151, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %153 = trunc i32 %152 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i16 %153, i16* %125
	movq	%rdx, %rax
	movq	-960(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %154
	jmp	mz_zip_writer_add_mem_ex_v2154
	.text
mz_zip_writer_add_mem_ex_v2154:
	# %155 = load i32, i32* %100
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %156 = and i32 %155, 65536
	movq	%rdx, %rax
	movq	$65536, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %157 = icmp ne i32 %156, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %157, label %163, label %158
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2158
	jmp	mz_zip_writer_add_mem_ex_v2163
	.text
mz_zip_writer_add_mem_ex_v2158:
	# %159 = load i16, i16* %125
	movq	-960(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %160 = zext i16 %159 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %161 = or i32 %160, 2048
	movq	%rdx, %rax
	movq	$2048, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %162 = trunc i32 %161 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i16 %162, i16* %125
	movq	%rdx, %rax
	movq	-960(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %163
	jmp	mz_zip_writer_add_mem_ex_v2163
	.text
mz_zip_writer_add_mem_ex_v2163:
	# %164 = load i32, i32* %100
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %165 = and i32 %164, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %165, i32* %111
	movq	%rdx, %rax
	movq	-880(%rbp), %rcx
	movl	%eax, (%rcx)
	# %166 = load i32, i32* %111
	movq	-880(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %167 = icmp ne i32 %166, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %167, label %168, label %172
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$1, %rdx
	je	mz_zip_writer_add_mem_ex_v2172
	jmp	mz_zip_writer_add_mem_ex_v2168
	.text
mz_zip_writer_add_mem_ex_v2168:
	# %169 = load i32, i32* %100
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %170 = and i32 %169, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %171 = icmp ne i32 %170, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br label %172
	movq	%rbx, %rdx
	jmp	mz_zip_writer_add_mem_ex_v2172
	.text
mz_zip_writer_add_mem_ex_v2172:
	# %173 = phi i1 [1, %163], [%171, %168]
	# %174 = zext i1 %173 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %174, i32* %120
	movq	%rdx, %rax
	movq	-936(%rbp), %rcx
	movl	%eax, (%rcx)
	# %175 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %176 = icmp ne i8* %175, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %176, label %177, label %206
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2206
	jmp	mz_zip_writer_add_mem_ex_v2177
	.text
mz_zip_writer_add_mem_ex_v2177:
	# %178 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %179 = getelementptr %struct.mz_zip_archive, i8* %178, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %180 = load i8*, i8** %179
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %181 = icmp ne i8* %180, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %181, label %182, label %206
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2206
	jmp	mz_zip_writer_add_mem_ex_v2182
	.text
mz_zip_writer_add_mem_ex_v2182:
	# %183 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %184 = getelementptr %struct.mz_zip_archive, i8* %183, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %185 = load i32, i32* %184
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %186 = icmp ne i32 %185, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %186, label %206, label %187
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2187
	jmp	mz_zip_writer_add_mem_ex_v2206
	.text
mz_zip_writer_add_mem_ex_v2187:
	# %188 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %189 = icmp ne i64 %188, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %189, label %190, label %193
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2193
	jmp	mz_zip_writer_add_mem_ex_v2190
	.text
mz_zip_writer_add_mem_ex_v2190:
	# %191 = load i8*, i8** %96
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %192 = icmp ne i8* %191, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %192, label %193, label %206
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2206
	jmp	mz_zip_writer_add_mem_ex_v2193
	.text
mz_zip_writer_add_mem_ex_v2193:
	# %194 = load i8*, i8** %95
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %195 = icmp ne i8* %194, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %195, label %196, label %206
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2206
	jmp	mz_zip_writer_add_mem_ex_v2196
	.text
mz_zip_writer_add_mem_ex_v2196:
	# %197 = load i16, i16* %99
	movq	-784(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %198 = zext i16 %197 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %199 = icmp ne i32 %198, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %199, label %200, label %203
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2203
	jmp	mz_zip_writer_add_mem_ex_v2200
	.text
mz_zip_writer_add_mem_ex_v2200:
	# %201 = load i8*, i8** %98
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %202 = icmp ne i8* %201, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %202, label %203, label %206
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2206
	jmp	mz_zip_writer_add_mem_ex_v2203
	.text
mz_zip_writer_add_mem_ex_v2203:
	# %204 = load i32, i32* %111
	movq	-880(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %205 = icmp ugt i32 %204, 10
	movq	%rdx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %205, label %206, label %215
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2215
	jmp	mz_zip_writer_add_mem_ex_v2206
	.text
mz_zip_writer_add_mem_ex_v2206:
	# %207 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %207, i8** %51
	movq	%rdx, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %52
	movq	$24, %rax
	movq	-408(%rbp), %rcx
	movl	%eax, (%rcx)
	# %208 = load i8*, i8** %51
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %209 = icmp ne i8* %208, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %209, label %210, label %214
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2214
	jmp	mz_zip_writer_add_mem_ex_v2210
	.text
mz_zip_writer_add_mem_ex_v2210:
	# %211 = load i32, i32* %52
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %212 = load i8*, i8** %51
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %213 = getelementptr %struct.mz_zip_archive, i8* %212, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %211, i32* %213
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %214
	jmp	mz_zip_writer_add_mem_ex_v2214
	.text
mz_zip_writer_add_mem_ex_v2214:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2215:
	# %216 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %217 = getelementptr %struct.mz_zip_archive, i8* %216, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %218 = load i8*, i8** %217
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %218, i8** %121
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %219 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %220 = getelementptr %struct.mz_zip_internal_state_tag, i8* %219, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %221 = load i32, i32* %220
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %222 = icmp ne i32 %221, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %222, label %223, label %238
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2238
	jmp	mz_zip_writer_add_mem_ex_v2223
	.text
mz_zip_writer_add_mem_ex_v2223:
	# %224 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = getelementptr %struct.mz_zip_archive, i8* %224, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %226 = load i32, i32* %225
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %227 = icmp eq i32 %226, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %227, label %228, label %237
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2237
	jmp	mz_zip_writer_add_mem_ex_v2228
	.text
mz_zip_writer_add_mem_ex_v2228:
	# %229 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %229, i8** %53
	movq	%rdx, %rax
	movq	-416(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %54
	movq	$2, %rax
	movq	-424(%rbp), %rcx
	movl	%eax, (%rcx)
	# %230 = load i8*, i8** %53
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %231 = icmp ne i8* %230, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %231, label %232, label %236
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2236
	jmp	mz_zip_writer_add_mem_ex_v2232
	.text
mz_zip_writer_add_mem_ex_v2232:
	# %233 = load i32, i32* %54
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %234 = load i8*, i8** %53
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %235 = getelementptr %struct.mz_zip_archive, i8* %234, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %233, i32* %235
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %236
	jmp	mz_zip_writer_add_mem_ex_v2236
	.text
mz_zip_writer_add_mem_ex_v2236:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2237:
	# br label %256
	jmp	mz_zip_writer_add_mem_ex_v2256
	.text
mz_zip_writer_add_mem_ex_v2238:
	# %239 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %240 = getelementptr %struct.mz_zip_archive, i8* %239, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %241 = load i32, i32* %240
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %242 = icmp eq i32 %241, 65535
	movq	%rdx, %rax
	movq	$65535, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %242, label %243, label %246
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2246
	jmp	mz_zip_writer_add_mem_ex_v2243
	.text
mz_zip_writer_add_mem_ex_v2243:
	# %244 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %245 = getelementptr %struct.mz_zip_internal_state_tag, i8* %244, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %245
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %246
	jmp	mz_zip_writer_add_mem_ex_v2246
	.text
mz_zip_writer_add_mem_ex_v2246:
	# %247 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %248 = icmp ugt i64 %247, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %248, label %252, label %249
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2249
	jmp	mz_zip_writer_add_mem_ex_v2252
	.text
mz_zip_writer_add_mem_ex_v2249:
	# %250 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %251 = icmp ugt i64 %250, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %251, label %252, label %255
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2255
	jmp	mz_zip_writer_add_mem_ex_v2252
	.text
mz_zip_writer_add_mem_ex_v2252:
	# %253 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %254 = getelementptr %struct.mz_zip_internal_state_tag, i8* %253, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %254
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %255
	jmp	mz_zip_writer_add_mem_ex_v2255
	.text
mz_zip_writer_add_mem_ex_v2255:
	# br label %256
	jmp	mz_zip_writer_add_mem_ex_v2256
	.text
mz_zip_writer_add_mem_ex_v2256:
	# %257 = load i32, i32* %100
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %258 = and i32 %257, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %259 = icmp ne i32 %258, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %259, label %272, label %260
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2260
	jmp	mz_zip_writer_add_mem_ex_v2272
	.text
mz_zip_writer_add_mem_ex_v2260:
	# %261 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %262 = icmp ne i64 %261, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %262, label %263, label %272
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2272
	jmp	mz_zip_writer_add_mem_ex_v2263
	.text
mz_zip_writer_add_mem_ex_v2263:
	# %264 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %264, i8** %55
	movq	%rdx, %rax
	movq	-432(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %56
	movq	$24, %rax
	movq	-440(%rbp), %rcx
	movl	%eax, (%rcx)
	# %265 = load i8*, i8** %55
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %266 = icmp ne i8* %265, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %266, label %267, label %271
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2271
	jmp	mz_zip_writer_add_mem_ex_v2267
	.text
mz_zip_writer_add_mem_ex_v2267:
	# %268 = load i32, i32* %56
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %269 = load i8*, i8** %55
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %270 = getelementptr %struct.mz_zip_archive, i8* %269, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %268, i32* %270
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %271
	jmp	mz_zip_writer_add_mem_ex_v2271
	.text
mz_zip_writer_add_mem_ex_v2271:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2272:
	# %273 = load i8*, i8** %95
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %274 = call i32 @mz_zip_writer_validate_archive_name (i8* %273)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_validate_archive_name
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %275 = icmp ne i32 %274, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %275, label %285, label %276
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2276
	jmp	mz_zip_writer_add_mem_ex_v2285
	.text
mz_zip_writer_add_mem_ex_v2276:
	# %277 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %277, i8** %57
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 25, i32* %58
	movq	$25, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# %278 = load i8*, i8** %57
	movq	-448(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %279 = icmp ne i8* %278, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %279, label %280, label %284
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2284
	jmp	mz_zip_writer_add_mem_ex_v2280
	.text
mz_zip_writer_add_mem_ex_v2280:
	# %281 = load i32, i32* %58
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %282 = load i8*, i8** %57
	movq	-448(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %283 = getelementptr %struct.mz_zip_archive, i8* %282, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %281, i32* %283
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %284
	jmp	mz_zip_writer_add_mem_ex_v2284
	.text
mz_zip_writer_add_mem_ex_v2284:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2285:
	# %286 = load i8*, i8** %103
	movq	-816(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %287 = icmp ne i8* %286, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %287, label %288, label %291
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2291
	jmp	mz_zip_writer_add_mem_ex_v2288
	.text
mz_zip_writer_add_mem_ex_v2288:
	# %289 = load i8*, i8** %103
	movq	-816(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %290 = load i64, i64* %289
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @mz_zip_time_t_to_dos_time (i64 %290, i8* %109, i8* %110)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	-864(%rbp), %rax
	pushq	%rax
	movq	-872(%rbp), %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_time_t_to_dos_time
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %294
	jmp	mz_zip_writer_add_mem_ex_v2294
	.text
mz_zip_writer_add_mem_ex_v2291:
	# %292 = call i64 @time (i8* %126)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_time
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %293 = load i64, i64* %126
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @mz_zip_time_t_to_dos_time (i64 %293, i8* %109, i8* %110)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	-864(%rbp), %rax
	pushq	%rax
	movq	-872(%rbp), %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_time_t_to_dos_time
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %294
	jmp	mz_zip_writer_add_mem_ex_v2294
	.text
mz_zip_writer_add_mem_ex_v2294:
	# %295 = load i32, i32* %100
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %296 = and i32 %295, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %297 = icmp ne i32 %296, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %297, label %308, label %298
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2298
	jmp	mz_zip_writer_add_mem_ex_v2308
	.text
mz_zip_writer_add_mem_ex_v2298:
	# %299 = load i8*, i8** %96
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %300 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %301 = call i64 @mz_crc32 (i64 0, i8* %299, i64 %300)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	$0, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %302 = trunc i64 %301 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %302, i32* %102
	movq	%rdx, %rax
	movq	-808(%rbp), %rcx
	movl	%eax, (%rcx)
	# %303 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %303, i64* %101
	movq	%rdx, %rax
	movq	-800(%rbp), %rcx
	movq	%rax, (%rcx)
	# %304 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %305 = icmp ule i64 %304, 3
	movq	%rdx, %rax
	movq	$3, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %305, label %306, label %307
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2307
	jmp	mz_zip_writer_add_mem_ex_v2306
	.text
mz_zip_writer_add_mem_ex_v2306:
	# store i32 0, i32* %111
	movq	$0, %rax
	movq	-880(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %120
	movq	$1, %rax
	movq	-936(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %307
	jmp	mz_zip_writer_add_mem_ex_v2307
	.text
mz_zip_writer_add_mem_ex_v2307:
	# br label %308
	jmp	mz_zip_writer_add_mem_ex_v2308
	.text
mz_zip_writer_add_mem_ex_v2308:
	# %309 = load i8*, i8** %95
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %310 = call i64 @strlen (i8* %309)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_strlen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %310, i64* %117
	movq	%rdx, %rax
	movq	-912(%rbp), %rcx
	movq	%rax, (%rcx)
	# %311 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %312 = icmp ugt i64 %311, 65535
	movq	%rdx, %rax
	movq	$65535, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %312, label %313, label %322
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2322
	jmp	mz_zip_writer_add_mem_ex_v2313
	.text
mz_zip_writer_add_mem_ex_v2313:
	# %314 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %314, i8** %59
	movq	%rdx, %rax
	movq	-464(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 25, i32* %60
	movq	$25, %rax
	movq	-472(%rbp), %rcx
	movl	%eax, (%rcx)
	# %315 = load i8*, i8** %59
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %316 = icmp ne i8* %315, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %316, label %317, label %321
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2321
	jmp	mz_zip_writer_add_mem_ex_v2317
	.text
mz_zip_writer_add_mem_ex_v2317:
	# %318 = load i32, i32* %60
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %319 = load i8*, i8** %59
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %320 = getelementptr %struct.mz_zip_archive, i8* %319, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %318, i32* %320
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %321
	jmp	mz_zip_writer_add_mem_ex_v2321
	.text
mz_zip_writer_add_mem_ex_v2321:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2322:
	# %323 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %324 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment (i8* %323)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_compute_padding_needed_for_file_alignment
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %324, i32* %113
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %325 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %326 = getelementptr %struct.mz_zip_internal_state_tag, i8* %325, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %327 = getelementptr %struct.mz_zip_array, i8* %326, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %328 = load i64, i64* %327
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %329 = add i64 %328, 46
	movq	%rdx, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %330 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %331 = add i64 %329, %330
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %332 = add i64 %331, 28
	movq	%rdx, %rax
	movq	$28, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %333 = load i16, i16* %99
	movq	-784(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %334 = zext i16 %333 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %335 = add i64 %332, %334
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %336 = icmp uge i64 %335, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %336, label %337, label %346
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2346
	jmp	mz_zip_writer_add_mem_ex_v2337
	.text
mz_zip_writer_add_mem_ex_v2337:
	# %338 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %338, i8** %61
	movq	%rdx, %rax
	movq	-480(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 15, i32* %62
	movq	$15, %rax
	movq	-488(%rbp), %rcx
	movl	%eax, (%rcx)
	# %339 = load i8*, i8** %61
	movq	-480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %340 = icmp ne i8* %339, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %340, label %341, label %345
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2345
	jmp	mz_zip_writer_add_mem_ex_v2341
	.text
mz_zip_writer_add_mem_ex_v2341:
	# %342 = load i32, i32* %62
	movq	-488(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %343 = load i8*, i8** %61
	movq	-480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %344 = getelementptr %struct.mz_zip_archive, i8* %343, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %342, i32* %344
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %345
	jmp	mz_zip_writer_add_mem_ex_v2345
	.text
mz_zip_writer_add_mem_ex_v2345:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2346:
	# %347 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %348 = getelementptr %struct.mz_zip_internal_state_tag, i8* %347, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %349 = load i32, i32* %348
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %350 = icmp ne i32 %349, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %350, label %385, label %351
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2351
	jmp	mz_zip_writer_add_mem_ex_v2385
	.text
mz_zip_writer_add_mem_ex_v2351:
	# %352 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %353 = getelementptr %struct.mz_zip_archive, i8* %352, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %354 = load i64, i64* %353
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %355 = load i32, i32* %113
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %356 = zext i32 %355 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %357 = add i64 %354, %356
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %358 = add i64 %357, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %359 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %360 = add i64 %358, %359
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %361 = add i64 %360, 46
	movq	%rdx, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %362 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %363 = add i64 %361, %362
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %364 = load i16, i16* %99
	movq	-784(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %365 = zext i16 %364 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %366 = add i64 %363, %365
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %367 = load i32, i32* %105
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %368 = zext i32 %367 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %369 = add i64 %366, %368
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %370 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %371 = getelementptr %struct.mz_zip_internal_state_tag, i8* %370, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %372 = getelementptr %struct.mz_zip_array, i8* %371, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %373 = load i64, i64* %372
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %374 = add i64 %369, %373
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %375 = add i64 %374, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %376 = load i32, i32* %107
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %377 = zext i32 %376 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %378 = add i64 %375, %377
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %379 = add i64 %378, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %380 = icmp ugt i64 %379, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %380, label %381, label %384
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2384
	jmp	mz_zip_writer_add_mem_ex_v2381
	.text
mz_zip_writer_add_mem_ex_v2381:
	# %382 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %383 = getelementptr %struct.mz_zip_internal_state_tag, i8* %382, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 1, i32* %383
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %384
	jmp	mz_zip_writer_add_mem_ex_v2384
	.text
mz_zip_writer_add_mem_ex_v2384:
	# br label %385
	jmp	mz_zip_writer_add_mem_ex_v2385
	.text
mz_zip_writer_add_mem_ex_v2385:
	# %386 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %387 = icmp ne i64 %386, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %387, label %388, label %414
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2414
	jmp	mz_zip_writer_add_mem_ex_v2388
	.text
mz_zip_writer_add_mem_ex_v2388:
	# %389 = load i8*, i8** %95
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %390 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %391 = sub i64 %390, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %392 = getelementptr i8, i8* %389, i64 %391
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %393 = load i8, i8* %392
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %394 = sext i8 %393 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %395 = icmp eq i32 %394, 47
	movq	%rdx, %rax
	movq	$47, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %395, label %396, label %414
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2414
	jmp	mz_zip_writer_add_mem_ex_v2396
	.text
mz_zip_writer_add_mem_ex_v2396:
	# %397 = load i32, i32* %112
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %398 = or i32 %397, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %398, i32* %112
	movq	%rdx, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# %399 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %400 = icmp ne i64 %399, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %400, label %404, label %401
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2401
	jmp	mz_zip_writer_add_mem_ex_v2404
	.text
mz_zip_writer_add_mem_ex_v2401:
	# %402 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %403 = icmp ne i64 %402, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %403, label %404, label %413
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2413
	jmp	mz_zip_writer_add_mem_ex_v2404
	.text
mz_zip_writer_add_mem_ex_v2404:
	# %405 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %405, i8** %63
	movq	%rdx, %rax
	movq	-496(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %64
	movq	$24, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# %406 = load i8*, i8** %63
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %407 = icmp ne i8* %406, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %407, label %408, label %412
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2412
	jmp	mz_zip_writer_add_mem_ex_v2408
	.text
mz_zip_writer_add_mem_ex_v2408:
	# %409 = load i32, i32* %64
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %410 = load i8*, i8** %63
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %411 = getelementptr %struct.mz_zip_archive, i8* %410, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %409, i32* %411
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %412
	jmp	mz_zip_writer_add_mem_ex_v2412
	.text
mz_zip_writer_add_mem_ex_v2412:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2413:
	# br label %414
	jmp	mz_zip_writer_add_mem_ex_v2414
	.text
mz_zip_writer_add_mem_ex_v2414:
	# %415 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %416 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %417 = getelementptr %struct.mz_zip_internal_state_tag, i8* %416, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %418 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %419 = add i64 46, %418
	movq	$46, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %420 = load i16, i16* %99
	movq	-784(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %421 = zext i16 %420 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %422 = add i64 %419, %421
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %423 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %424 = getelementptr %struct.mz_zip_internal_state_tag, i8* %423, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %425 = load i32, i32* %424
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %426 = icmp ne i32 %425, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# %427 = zext i1 %426 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %428 = select i1 %426, i64 28, i64 0
	movq	%rbx, %rcx
	movq	$28, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# %429 = add i64 %422, %428
	movq	%rsi, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %415, i8** %45
	movq	%r8, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %417, i8** %46
	movq	%rdi, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %429, i64* %47
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# %430 = load i8*, i8** %45
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %431 = load i8*, i8** %46
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %432 = load i8*, i8** %46
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %433 = getelementptr %struct.mz_zip_array, i8* %432, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %434 = load i64, i64* %433
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %435 = load i64, i64* %47
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %436 = add i64 %434, %435
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %430, i8** %21
	movq	%rdi, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %431, i8** %22
	movq	%rsi, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %436, i64* %23
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %24
	movq	$1, %rax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
	# %437 = load i64, i64* %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %438 = load i8*, i8** %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %439 = getelementptr %struct.mz_zip_array, i8* %438, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %440 = load i64, i64* %439
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %441 = icmp ugt i64 %437, %440
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %441, label %442, label %451
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2451
	jmp	mz_zip_writer_add_mem_ex_v2442
	.text
mz_zip_writer_add_mem_ex_v2442:
	# %443 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %444 = load i8*, i8** %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %445 = load i64, i64* %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %446 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %447 = call i32 @mz_zip_array_ensure_capacity (i8* %443, i8* %444, i64 %445, i32 %446)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %448 = icmp ne i32 %447, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %448, label %450, label %449
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2449
	jmp	mz_zip_writer_add_mem_ex_v2450
	.text
mz_zip_writer_add_mem_ex_v2449:
	# store i32 0, i32* %20
	movq	$0, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %452
	jmp	mz_zip_writer_add_mem_ex_v2452
	.text
mz_zip_writer_add_mem_ex_v2450:
	# br label %451
	jmp	mz_zip_writer_add_mem_ex_v2451
	.text
mz_zip_writer_add_mem_ex_v2451:
	# store i32 1, i32* %20
	movq	$1, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %452
	jmp	mz_zip_writer_add_mem_ex_v2452
	.text
mz_zip_writer_add_mem_ex_v2452:
	# %453 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %454 = icmp ne i32 %453, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %454, label %455, label %484
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2484
	jmp	mz_zip_writer_add_mem_ex_v2455
	.text
mz_zip_writer_add_mem_ex_v2455:
	# %456 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %457 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %458 = getelementptr %struct.mz_zip_internal_state_tag, i8* %457, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %456, i8** %48
	movq	%rbx, %rax
	movq	-376(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %458, i8** %49
	movq	%rdx, %rax
	movq	-384(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 1, i64* %50
	movq	$1, %rax
	movq	-392(%rbp), %rcx
	movq	%rax, (%rcx)
	# %459 = load i8*, i8** %48
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %460 = load i8*, i8** %49
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %461 = load i8*, i8** %49
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %462 = getelementptr %struct.mz_zip_array, i8* %461, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %463 = load i64, i64* %462
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %464 = load i64, i64* %50
	movq	-392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %465 = add i64 %463, %464
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %459, i8** %16
	movq	%rdi, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %460, i8** %17
	movq	%rsi, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %465, i64* %18
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %19
	movq	$1, %rax
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	# %466 = load i64, i64* %18
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %467 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %468 = getelementptr %struct.mz_zip_array, i8* %467, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %469 = load i64, i64* %468
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %470 = icmp ugt i64 %466, %469
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %470, label %471, label %480
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2480
	jmp	mz_zip_writer_add_mem_ex_v2471
	.text
mz_zip_writer_add_mem_ex_v2471:
	# %472 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %473 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %474 = load i64, i64* %18
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %475 = load i32, i32* %19
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %476 = call i32 @mz_zip_array_ensure_capacity (i8* %472, i8* %473, i64 %474, i32 %475)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %477 = icmp ne i32 %476, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %477, label %479, label %478
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2478
	jmp	mz_zip_writer_add_mem_ex_v2479
	.text
mz_zip_writer_add_mem_ex_v2478:
	# store i32 0, i32* %15
	movq	$0, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %481
	jmp	mz_zip_writer_add_mem_ex_v2481
	.text
mz_zip_writer_add_mem_ex_v2479:
	# br label %480
	jmp	mz_zip_writer_add_mem_ex_v2480
	.text
mz_zip_writer_add_mem_ex_v2480:
	# store i32 1, i32* %15
	movq	$1, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %481
	jmp	mz_zip_writer_add_mem_ex_v2481
	.text
mz_zip_writer_add_mem_ex_v2481:
	# %482 = load i32, i32* %15
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %483 = icmp ne i32 %482, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %483, label %493, label %484
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2484
	jmp	mz_zip_writer_add_mem_ex_v2493
	.text
mz_zip_writer_add_mem_ex_v2484:
	# %485 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %485, i8** %65
	movq	%rdx, %rax
	movq	-512(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %66
	movq	$16, %rax
	movq	-520(%rbp), %rcx
	movl	%eax, (%rcx)
	# %486 = load i8*, i8** %65
	movq	-512(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %487 = icmp ne i8* %486, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %487, label %488, label %492
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2492
	jmp	mz_zip_writer_add_mem_ex_v2488
	.text
mz_zip_writer_add_mem_ex_v2488:
	# %489 = load i32, i32* %66
	movq	-520(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %490 = load i8*, i8** %65
	movq	-512(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %491 = getelementptr %struct.mz_zip_archive, i8* %490, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %489, i32* %491
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %492
	jmp	mz_zip_writer_add_mem_ex_v2492
	.text
mz_zip_writer_add_mem_ex_v2492:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2493:
	# %494 = load i32, i32* %120
	movq	-936(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %495 = icmp ne i32 %494, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %495, label %518, label %496
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2496
	jmp	mz_zip_writer_add_mem_ex_v2518
	.text
mz_zip_writer_add_mem_ex_v2496:
	# %497 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %498 = icmp ne i64 %497, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %498, label %499, label %518
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2518
	jmp	mz_zip_writer_add_mem_ex_v2499
	.text
mz_zip_writer_add_mem_ex_v2499:
	# %500 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %501 = getelementptr %struct.mz_zip_archive, i8* %500, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %502 = load i8*, i8** %501
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %503 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %504 = getelementptr %struct.mz_zip_archive, i8* %503, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %505 = load i8*, i8** %504
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %506 = call i8* %502 (i8* %505, i64 1, i64 319352)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$319352, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %506, i8** %119
	movq	%rdx, %rax
	movq	-928(%rbp), %rcx
	movq	%rax, (%rcx)
	# %507 = icmp eq i8* null, %506
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %507, label %508, label %517
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2517
	jmp	mz_zip_writer_add_mem_ex_v2508
	.text
mz_zip_writer_add_mem_ex_v2508:
	# %509 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %509, i8** %67
	movq	%rdx, %rax
	movq	-528(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %68
	movq	$16, %rax
	movq	-536(%rbp), %rcx
	movl	%eax, (%rcx)
	# %510 = load i8*, i8** %67
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %511 = icmp ne i8* %510, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %511, label %512, label %516
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2516
	jmp	mz_zip_writer_add_mem_ex_v2512
	.text
mz_zip_writer_add_mem_ex_v2512:
	# %513 = load i32, i32* %68
	movq	-536(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %514 = load i8*, i8** %67
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %515 = getelementptr %struct.mz_zip_archive, i8* %514, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %513, i32* %515
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %516
	jmp	mz_zip_writer_add_mem_ex_v2516
	.text
mz_zip_writer_add_mem_ex_v2516:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2517:
	# br label %518
	jmp	mz_zip_writer_add_mem_ex_v2518
	.text
mz_zip_writer_add_mem_ex_v2518:
	# %519 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %520 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %521 = load i32, i32* %113
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %522 = call i32 @mz_zip_writer_write_zeros (i8* %519, i64 %520, i32 %521)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_write_zeros
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %523 = icmp ne i32 %522, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %523, label %532, label %524
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2524
	jmp	mz_zip_writer_add_mem_ex_v2532
	.text
mz_zip_writer_add_mem_ex_v2524:
	# %525 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %526 = getelementptr %struct.mz_zip_archive, i8* %525, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %527 = load i8*, i8** %526
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %528 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %529 = getelementptr %struct.mz_zip_archive, i8* %528, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %530 = load i8*, i8** %529
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %531 = load i8*, i8** %119
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %527 (i8* %530, i8* %531)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2532:
	# %533 = load i32, i32* %113
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %534 = zext i32 %533 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %535 = load i64, i64* %114
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %536 = add i64 %535, %534
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %536, i64* %114
	movq	%rdx, %rax
	movq	-888(%rbp), %rcx
	movq	%rax, (%rcx)
	# %537 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %538 = getelementptr %struct.mz_zip_archive, i8* %537, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %539 = load i64, i64* %538
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %540 = icmp ne i64 %539, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %540, label %541, label %557
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2557
	jmp	mz_zip_writer_add_mem_ex_v2541
	.text
mz_zip_writer_add_mem_ex_v2541:
	# %542 = load i64, i64* %114
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %543 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %544 = getelementptr %struct.mz_zip_archive, i8* %543, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %545 = load i64, i64* %544
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %546 = sub i64 %545, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %547 = and i64 %542, %546
	movq	%rbx, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %548 = icmp eq i64 %547, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# %549 = xor i1 %548, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %550 = zext i1 %549 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %551 = sext i32 %550 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %552 = icmp ne i64 %551, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %552, label %553, label %555
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2555
	jmp	mz_zip_writer_add_mem_ex_v2553
	.text
mz_zip_writer_add_mem_ex_v2553:
	# call void @__assert_rtn (i8* @__func__.mz_zip_writer_add_mem_ex_v2, i8* @.str.11, i32 7764, i8* @.str.22)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.mz_zip_writer_add_mem_ex_v2(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$7764, %rax
	pushq	%rax
	leaq	_.str.22(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
mz_zip_writer_add_mem_ex_v2554:
	# br label %556
	jmp	mz_zip_writer_add_mem_ex_v2556
	.text
mz_zip_writer_add_mem_ex_v2555:
	# br label %556
	jmp	mz_zip_writer_add_mem_ex_v2556
	.text
mz_zip_writer_add_mem_ex_v2556:
	# br label %557
	jmp	mz_zip_writer_add_mem_ex_v2557
	.text
mz_zip_writer_add_mem_ex_v2557:
	# %558 = load i32, i32* %113
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %559 = zext i32 %558 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %560 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %561 = add i64 %560, %559
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %561, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# %562 = getelementptr [30 x i8], i8* %118, i64 0, i64 0
	movq	-920(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# call void @memset (i8* %562, i8 0, i64 30, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %563 = load i32, i32* %120
	movq	-936(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %564 = icmp ne i32 %563, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %564, label %565, label %569
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2569
	jmp	mz_zip_writer_add_mem_ex_v2565
	.text
mz_zip_writer_add_mem_ex_v2565:
	# %566 = load i32, i32* %100
	movq	-792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %567 = and i32 %566, 1024
	movq	%rdx, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %568 = icmp ne i32 %567, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %568, label %569, label %570
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2570
	jmp	mz_zip_writer_add_mem_ex_v2569
	.text
mz_zip_writer_add_mem_ex_v2569:
	# store i16 8, i16* %108
	movq	$8, %rax
	movq	-856(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %570
	jmp	mz_zip_writer_add_mem_ex_v2570
	.text
mz_zip_writer_add_mem_ex_v2570:
	# %571 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %572 = getelementptr %struct.mz_zip_internal_state_tag, i8* %571, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %573 = load i32, i32* %572
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %574 = icmp ne i32 %573, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %574, label %575, label %714
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2714
	jmp	mz_zip_writer_add_mem_ex_v2575
	.text
mz_zip_writer_add_mem_ex_v2575:
	# %576 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %577 = icmp uge i64 %576, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %577, label %581, label %578
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2578
	jmp	mz_zip_writer_add_mem_ex_v2581
	.text
mz_zip_writer_add_mem_ex_v2578:
	# %579 = load i64, i64* %114
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %580 = icmp uge i64 %579, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %580, label %581, label %603
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2603
	jmp	mz_zip_writer_add_mem_ex_v2581
	.text
mz_zip_writer_add_mem_ex_v2581:
	# %582 = getelementptr [28 x i8], i8* %124, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %582, i8** %122
	movq	%rdx, %rax
	movq	-944(%rbp), %rcx
	movq	%rax, (%rcx)
	# %583 = getelementptr [28 x i8], i8* %124, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %584 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %585 = icmp uge i64 %584, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %585, label %586, label %587
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2587
	jmp	mz_zip_writer_add_mem_ex_v2586
	.text
mz_zip_writer_add_mem_ex_v2586:
	# br label %588
	movq	-800(%rbp), %rsi
	jmp	mz_zip_writer_add_mem_ex_v2588
	.text
mz_zip_writer_add_mem_ex_v2587:
	# br label %588
	movq	$0, %rsi
	jmp	mz_zip_writer_add_mem_ex_v2588
	.text
mz_zip_writer_add_mem_ex_v2588:
	# %589 = phi i8* [%101, %586], [null, %587]
	# %590 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %591 = icmp uge i64 %590, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %591, label %592, label %593
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2593
	jmp	mz_zip_writer_add_mem_ex_v2592
	.text
mz_zip_writer_add_mem_ex_v2592:
	# br label %594
	movq	-904(%rbp), %rbx
	jmp	mz_zip_writer_add_mem_ex_v2594
	.text
mz_zip_writer_add_mem_ex_v2593:
	# br label %594
	movq	$0, %rbx
	jmp	mz_zip_writer_add_mem_ex_v2594
	.text
mz_zip_writer_add_mem_ex_v2594:
	# %595 = phi i8* [%116, %592], [null, %593]
	# %596 = load i64, i64* %114
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %597 = icmp uge i64 %596, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %597, label %598, label %599
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2599
	jmp	mz_zip_writer_add_mem_ex_v2598
	.text
mz_zip_writer_add_mem_ex_v2598:
	# br label %600
	movq	-888(%rbp), %rdx
	jmp	mz_zip_writer_add_mem_ex_v2600
	.text
mz_zip_writer_add_mem_ex_v2599:
	# br label %600
	movq	$0, %rdx
	jmp	mz_zip_writer_add_mem_ex_v2600
	.text
mz_zip_writer_add_mem_ex_v2600:
	# %601 = phi i8* [%114, %598], [null, %599]
	# %602 = call i32 @mz_zip_writer_create_zip64_extra_data (i8* %583, i8* %589, i8* %595, i8* %601)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_zip64_extra_data
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %602, i32* %123
	movq	%rdx, %rax
	movq	-952(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %603
	jmp	mz_zip_writer_add_mem_ex_v2603
	.text
mz_zip_writer_add_mem_ex_v2603:
	# %604 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %605 = getelementptr [30 x i8], i8* %118, i64 0, i64 0
	movq	-920(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %606 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %607 = trunc i64 %606 to i16
	movq	%rdx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %608 = load i32, i32* %123
	movq	-952(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %609 = load i32, i32* %105
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %610 = add i32 %608, %609
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %611 = trunc i32 %610 to i16
	movq	%rdx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %612 = load i16, i16* %108
	movq	-856(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %613 = load i16, i16* %125
	movq	-960(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %614 = load i16, i16* %109
	movq	-864(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r11
	movw	%ax, %r11w
	# %615 = load i16, i16* %110
	movq	-872(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %616 = call i32 @mz_zip_writer_create_local_dir_header (i8* %604, i8* %605, i16 %607, i16 %611, i64 0, i64 0, i32 0, i16 %612, i16 %613, i16 %614, i16 %615)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_local_dir_header
	addq	$40, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %617 = icmp ne i32 %616, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %617, label %627, label %618
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2618
	jmp	mz_zip_writer_add_mem_ex_v2627
	.text
mz_zip_writer_add_mem_ex_v2618:
	# %619 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %619, i8** %69
	movq	%rdx, %rax
	movq	-544(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 27, i32* %70
	movq	$27, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# %620 = load i8*, i8** %69
	movq	-544(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %621 = icmp ne i8* %620, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %621, label %622, label %626
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2626
	jmp	mz_zip_writer_add_mem_ex_v2622
	.text
mz_zip_writer_add_mem_ex_v2622:
	# %623 = load i32, i32* %70
	movq	-552(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %624 = load i8*, i8** %69
	movq	-544(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %625 = getelementptr %struct.mz_zip_archive, i8* %624, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %623, i32* %625
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %626
	jmp	mz_zip_writer_add_mem_ex_v2626
	.text
mz_zip_writer_add_mem_ex_v2626:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2627:
	# %628 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %629 = getelementptr %struct.mz_zip_archive, i8* %628, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %630 = load i8*, i8** %629
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %631 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %632 = getelementptr %struct.mz_zip_archive, i8* %631, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %633 = load i8*, i8** %632
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %634 = load i64, i64* %114
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %635 = getelementptr [30 x i8], i8* %118, i64 0, i64 0
	movq	-920(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %636 = call i64 %630 (i8* %633, i64 %634, i8* %635, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %637 = icmp ne i64 %636, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %637, label %638, label %647
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2647
	jmp	mz_zip_writer_add_mem_ex_v2638
	.text
mz_zip_writer_add_mem_ex_v2638:
	# %639 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %639, i8** %71
	movq	%rdx, %rax
	movq	-560(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %72
	movq	$19, %rax
	movq	-568(%rbp), %rcx
	movl	%eax, (%rcx)
	# %640 = load i8*, i8** %71
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %641 = icmp ne i8* %640, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %641, label %642, label %646
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2646
	jmp	mz_zip_writer_add_mem_ex_v2642
	.text
mz_zip_writer_add_mem_ex_v2642:
	# %643 = load i32, i32* %72
	movq	-568(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %644 = load i8*, i8** %71
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %645 = getelementptr %struct.mz_zip_archive, i8* %644, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %643, i32* %645
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %646
	jmp	mz_zip_writer_add_mem_ex_v2646
	.text
mz_zip_writer_add_mem_ex_v2646:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2647:
	# %648 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %649 = add i64 %648, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %649, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# %650 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %651 = getelementptr %struct.mz_zip_archive, i8* %650, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %652 = load i8*, i8** %651
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %653 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %654 = getelementptr %struct.mz_zip_archive, i8* %653, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %655 = load i8*, i8** %654
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %656 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %657 = load i8*, i8** %95
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %658 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %659 = call i64 %652 (i8* %655, i64 %656, i8* %657, i64 %658)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %660 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %661 = icmp ne i64 %659, %660
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %661, label %662, label %678
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2678
	jmp	mz_zip_writer_add_mem_ex_v2662
	.text
mz_zip_writer_add_mem_ex_v2662:
	# %663 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %664 = getelementptr %struct.mz_zip_archive, i8* %663, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %665 = load i8*, i8** %664
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %666 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %667 = getelementptr %struct.mz_zip_archive, i8* %666, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %668 = load i8*, i8** %667
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %669 = load i8*, i8** %119
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %665 (i8* %668, i8* %669)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %670 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %670, i8** %73
	movq	%rdx, %rax
	movq	-576(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %74
	movq	$19, %rax
	movq	-584(%rbp), %rcx
	movl	%eax, (%rcx)
	# %671 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %672 = icmp ne i8* %671, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %672, label %673, label %677
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2677
	jmp	mz_zip_writer_add_mem_ex_v2673
	.text
mz_zip_writer_add_mem_ex_v2673:
	# %674 = load i32, i32* %74
	movq	-584(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %675 = load i8*, i8** %73
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %676 = getelementptr %struct.mz_zip_archive, i8* %675, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %674, i32* %676
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %677
	jmp	mz_zip_writer_add_mem_ex_v2677
	.text
mz_zip_writer_add_mem_ex_v2677:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2678:
	# %679 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %680 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %681 = add i64 %680, %679
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %681, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# %682 = load i8*, i8** %122
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %683 = icmp ne i8* %682, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %683, label %684, label %713
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2713
	jmp	mz_zip_writer_add_mem_ex_v2684
	.text
mz_zip_writer_add_mem_ex_v2684:
	# %685 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %686 = getelementptr %struct.mz_zip_archive, i8* %685, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %687 = load i8*, i8** %686
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %688 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %689 = getelementptr %struct.mz_zip_archive, i8* %688, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %690 = load i8*, i8** %689
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %691 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %692 = getelementptr [28 x i8], i8* %124, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %693 = load i32, i32* %123
	movq	-952(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %694 = zext i32 %693 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %695 = call i64 %687 (i8* %690, i64 %691, i8* %692, i64 %694)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %696 = load i32, i32* %123
	movq	-952(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %697 = zext i32 %696 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %698 = icmp ne i64 %695, %697
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %698, label %699, label %708
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2708
	jmp	mz_zip_writer_add_mem_ex_v2699
	.text
mz_zip_writer_add_mem_ex_v2699:
	# %700 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %700, i8** %75
	movq	%rdx, %rax
	movq	-592(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %76
	movq	$19, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# %701 = load i8*, i8** %75
	movq	-592(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %702 = icmp ne i8* %701, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %702, label %703, label %707
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2707
	jmp	mz_zip_writer_add_mem_ex_v2703
	.text
mz_zip_writer_add_mem_ex_v2703:
	# %704 = load i32, i32* %76
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %705 = load i8*, i8** %75
	movq	-592(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %706 = getelementptr %struct.mz_zip_archive, i8* %705, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %704, i32* %706
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %707
	jmp	mz_zip_writer_add_mem_ex_v2707
	.text
mz_zip_writer_add_mem_ex_v2707:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2708:
	# %709 = load i32, i32* %123
	movq	-952(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %710 = zext i32 %709 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %711 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %712 = add i64 %711, %710
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %712, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %713
	jmp	mz_zip_writer_add_mem_ex_v2713
	.text
mz_zip_writer_add_mem_ex_v2713:
	# br label %806
	jmp	mz_zip_writer_add_mem_ex_v2806
	.text
mz_zip_writer_add_mem_ex_v2714:
	# %715 = load i64, i64* %116
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %716 = icmp ugt i64 %715, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %716, label %720, label %717
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2717
	jmp	mz_zip_writer_add_mem_ex_v2720
	.text
mz_zip_writer_add_mem_ex_v2717:
	# %718 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %719 = icmp ugt i64 %718, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %719, label %720, label %729
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2729
	jmp	mz_zip_writer_add_mem_ex_v2720
	.text
mz_zip_writer_add_mem_ex_v2720:
	# %721 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %721, i8** %77
	movq	%rdx, %rax
	movq	-608(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %78
	movq	$29, %rax
	movq	-616(%rbp), %rcx
	movl	%eax, (%rcx)
	# %722 = load i8*, i8** %77
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %723 = icmp ne i8* %722, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %723, label %724, label %728
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2728
	jmp	mz_zip_writer_add_mem_ex_v2724
	.text
mz_zip_writer_add_mem_ex_v2724:
	# %725 = load i32, i32* %78
	movq	-616(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %726 = load i8*, i8** %77
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %727 = getelementptr %struct.mz_zip_archive, i8* %726, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %725, i32* %727
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %728
	jmp	mz_zip_writer_add_mem_ex_v2728
	.text
mz_zip_writer_add_mem_ex_v2728:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2729:
	# %730 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %731 = getelementptr [30 x i8], i8* %118, i64 0, i64 0
	movq	-920(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %732 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %733 = trunc i64 %732 to i16
	movq	%rdx, %rax
	movq	$0, %r9
	movw	%ax, %r9w
	# %734 = load i32, i32* %105
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %735 = trunc i32 %734 to i16
	movq	%rdx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %736 = load i16, i16* %108
	movq	-856(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %737 = load i16, i16* %125
	movq	-960(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %738 = load i16, i16* %109
	movq	-864(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %739 = load i16, i16* %110
	movq	-872(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %740 = call i32 @mz_zip_writer_create_local_dir_header (i8* %730, i8* %731, i16 %733, i16 %735, i64 0, i64 0, i32 0, i16 %736, i16 %737, i16 %738, i16 %739)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_local_dir_header
	addq	$40, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %741 = icmp ne i32 %740, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %741, label %751, label %742
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2742
	jmp	mz_zip_writer_add_mem_ex_v2751
	.text
mz_zip_writer_add_mem_ex_v2742:
	# %743 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %743, i8** %79
	movq	%rdx, %rax
	movq	-624(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 27, i32* %80
	movq	$27, %rax
	movq	-632(%rbp), %rcx
	movl	%eax, (%rcx)
	# %744 = load i8*, i8** %79
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %745 = icmp ne i8* %744, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %745, label %746, label %750
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2750
	jmp	mz_zip_writer_add_mem_ex_v2746
	.text
mz_zip_writer_add_mem_ex_v2746:
	# %747 = load i32, i32* %80
	movq	-632(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %748 = load i8*, i8** %79
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %749 = getelementptr %struct.mz_zip_archive, i8* %748, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %747, i32* %749
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %750
	jmp	mz_zip_writer_add_mem_ex_v2750
	.text
mz_zip_writer_add_mem_ex_v2750:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2751:
	# %752 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %753 = getelementptr %struct.mz_zip_archive, i8* %752, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %754 = load i8*, i8** %753
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %755 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %756 = getelementptr %struct.mz_zip_archive, i8* %755, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %757 = load i8*, i8** %756
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %758 = load i64, i64* %114
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %759 = getelementptr [30 x i8], i8* %118, i64 0, i64 0
	movq	-920(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %760 = call i64 %754 (i8* %757, i64 %758, i8* %759, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %761 = icmp ne i64 %760, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %761, label %762, label %771
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2771
	jmp	mz_zip_writer_add_mem_ex_v2762
	.text
mz_zip_writer_add_mem_ex_v2762:
	# %763 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %763, i8** %81
	movq	%rdx, %rax
	movq	-640(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %82
	movq	$19, %rax
	movq	-648(%rbp), %rcx
	movl	%eax, (%rcx)
	# %764 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %765 = icmp ne i8* %764, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %765, label %766, label %770
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2770
	jmp	mz_zip_writer_add_mem_ex_v2766
	.text
mz_zip_writer_add_mem_ex_v2766:
	# %767 = load i32, i32* %82
	movq	-648(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %768 = load i8*, i8** %81
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %769 = getelementptr %struct.mz_zip_archive, i8* %768, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %767, i32* %769
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %770
	jmp	mz_zip_writer_add_mem_ex_v2770
	.text
mz_zip_writer_add_mem_ex_v2770:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2771:
	# %772 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %773 = add i64 %772, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %773, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# %774 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %775 = getelementptr %struct.mz_zip_archive, i8* %774, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %776 = load i8*, i8** %775
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %777 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %778 = getelementptr %struct.mz_zip_archive, i8* %777, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %779 = load i8*, i8** %778
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %780 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %781 = load i8*, i8** %95
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %782 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %783 = call i64 %776 (i8* %779, i64 %780, i8* %781, i64 %782)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %784 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %785 = icmp ne i64 %783, %784
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %785, label %786, label %802
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2802
	jmp	mz_zip_writer_add_mem_ex_v2786
	.text
mz_zip_writer_add_mem_ex_v2786:
	# %787 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %788 = getelementptr %struct.mz_zip_archive, i8* %787, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %789 = load i8*, i8** %788
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %790 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %791 = getelementptr %struct.mz_zip_archive, i8* %790, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %792 = load i8*, i8** %791
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %793 = load i8*, i8** %119
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %789 (i8* %792, i8* %793)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %794 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %794, i8** %83
	movq	%rdx, %rax
	movq	-656(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %84
	movq	$19, %rax
	movq	-664(%rbp), %rcx
	movl	%eax, (%rcx)
	# %795 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %796 = icmp ne i8* %795, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %796, label %797, label %801
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2801
	jmp	mz_zip_writer_add_mem_ex_v2797
	.text
mz_zip_writer_add_mem_ex_v2797:
	# %798 = load i32, i32* %84
	movq	-664(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %799 = load i8*, i8** %83
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %800 = getelementptr %struct.mz_zip_archive, i8* %799, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %798, i32* %800
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %801
	jmp	mz_zip_writer_add_mem_ex_v2801
	.text
mz_zip_writer_add_mem_ex_v2801:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2802:
	# %803 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %804 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %805 = add i64 %804, %803
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %805, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %806
	jmp	mz_zip_writer_add_mem_ex_v2806
	.text
mz_zip_writer_add_mem_ex_v2806:
	# %807 = load i32, i32* %105
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %808 = icmp ugt i32 %807, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %808, label %809, label %838
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2838
	jmp	mz_zip_writer_add_mem_ex_v2809
	.text
mz_zip_writer_add_mem_ex_v2809:
	# %810 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %811 = getelementptr %struct.mz_zip_archive, i8* %810, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %812 = load i8*, i8** %811
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %813 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %814 = getelementptr %struct.mz_zip_archive, i8* %813, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %815 = load i8*, i8** %814
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %816 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %817 = load i8*, i8** %104
	movq	-824(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %818 = load i32, i32* %105
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %819 = zext i32 %818 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %820 = call i64 %812 (i8* %815, i64 %816, i8* %817, i64 %819)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %821 = load i32, i32* %105
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %822 = zext i32 %821 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %823 = icmp ne i64 %820, %822
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %823, label %824, label %833
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2833
	jmp	mz_zip_writer_add_mem_ex_v2824
	.text
mz_zip_writer_add_mem_ex_v2824:
	# %825 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %825, i8** %85
	movq	%rdx, %rax
	movq	-672(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %86
	movq	$19, %rax
	movq	-680(%rbp), %rcx
	movl	%eax, (%rcx)
	# %826 = load i8*, i8** %85
	movq	-672(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %827 = icmp ne i8* %826, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %827, label %828, label %832
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2832
	jmp	mz_zip_writer_add_mem_ex_v2828
	.text
mz_zip_writer_add_mem_ex_v2828:
	# %829 = load i32, i32* %86
	movq	-680(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %830 = load i8*, i8** %85
	movq	-672(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %831 = getelementptr %struct.mz_zip_archive, i8* %830, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %829, i32* %831
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %832
	jmp	mz_zip_writer_add_mem_ex_v2832
	.text
mz_zip_writer_add_mem_ex_v2832:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2833:
	# %834 = load i32, i32* %105
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %835 = zext i32 %834 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %836 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %837 = add i64 %836, %835
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %837, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %838
	jmp	mz_zip_writer_add_mem_ex_v2838
	.text
mz_zip_writer_add_mem_ex_v2838:
	# %839 = load i32, i32* %120
	movq	-936(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %840 = icmp ne i32 %839, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %840, label %841, label %875
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2875
	jmp	mz_zip_writer_add_mem_ex_v2841
	.text
mz_zip_writer_add_mem_ex_v2841:
	# %842 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %843 = getelementptr %struct.mz_zip_archive, i8* %842, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %844 = load i8*, i8** %843
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %845 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %846 = getelementptr %struct.mz_zip_archive, i8* %845, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %847 = load i8*, i8** %846
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %848 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %849 = load i8*, i8** %96
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %850 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %851 = call i64 %844 (i8* %847, i64 %848, i8* %849, i64 %850)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %852 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %853 = icmp ne i64 %851, %852
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %853, label %854, label %870
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2870
	jmp	mz_zip_writer_add_mem_ex_v2854
	.text
mz_zip_writer_add_mem_ex_v2854:
	# %855 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %856 = getelementptr %struct.mz_zip_archive, i8* %855, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %857 = load i8*, i8** %856
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %858 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %859 = getelementptr %struct.mz_zip_archive, i8* %858, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %860 = load i8*, i8** %859
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %861 = load i8*, i8** %119
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %857 (i8* %860, i8* %861)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %862 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %862, i8** %87
	movq	%rdx, %rax
	movq	-688(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %88
	movq	$19, %rax
	movq	-696(%rbp), %rcx
	movl	%eax, (%rcx)
	# %863 = load i8*, i8** %87
	movq	-688(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %864 = icmp ne i8* %863, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %864, label %865, label %869
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2869
	jmp	mz_zip_writer_add_mem_ex_v2865
	.text
mz_zip_writer_add_mem_ex_v2865:
	# %866 = load i32, i32* %88
	movq	-696(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %867 = load i8*, i8** %87
	movq	-688(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %868 = getelementptr %struct.mz_zip_archive, i8* %867, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %866, i32* %868
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %869
	jmp	mz_zip_writer_add_mem_ex_v2869
	.text
mz_zip_writer_add_mem_ex_v2869:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2870:
	# %871 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %872 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %873 = add i64 %872, %871
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %873, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# %874 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %874, i64* %116
	movq	%rdx, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %917
	jmp	mz_zip_writer_add_mem_ex_v2917
	.text
mz_zip_writer_add_mem_ex_v2875:
	# %876 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %877 = icmp ne i64 %876, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %877, label %878, label %916
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2916
	jmp	mz_zip_writer_add_mem_ex_v2878
	.text
mz_zip_writer_add_mem_ex_v2878:
	# %879 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %880 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %879, i8** %880
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %881 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %882 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 1
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %881, i64* %882
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %883 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 2
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %883
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %884 = load i8*, i8** %119
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %885 = load i32, i32* %111
	movq	-880(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %886 = call i32 @tdefl_create_comp_flags_from_zip_params (i32 %885, i32 -15, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$-15, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_create_comp_flags_from_zip_params
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %887 = call i32 @tdefl_init (i8* %884, i8* @mz_zip_writer_add_put_buf_callback, i8* %127, i32 %886)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	leaq	_mz_zip_writer_add_put_buf_callback(%rip), %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_init
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %888 = icmp ne i32 %887, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %888, label %895, label %889
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2889
	jmp	mz_zip_writer_add_mem_ex_v2895
	.text
mz_zip_writer_add_mem_ex_v2889:
	# %890 = load i8*, i8** %119
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %891 = load i8*, i8** %96
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %892 = load i64, i64* %97
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %893 = call i32 @tdefl_compress_buffer (i8* %890, i8* %891, i64 %892, i32 4)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$4, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_buffer
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %894 = icmp ne i32 %893, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %894, label %895, label %911
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2911
	jmp	mz_zip_writer_add_mem_ex_v2895
	.text
mz_zip_writer_add_mem_ex_v2895:
	# %896 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %897 = getelementptr %struct.mz_zip_archive, i8* %896, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %898 = load i8*, i8** %897
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %899 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %900 = getelementptr %struct.mz_zip_archive, i8* %899, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %901 = load i8*, i8** %900
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %902 = load i8*, i8** %119
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %898 (i8* %901, i8* %902)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %903 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %903, i8** %89
	movq	%rdx, %rax
	movq	-704(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 12, i32* %90
	movq	$12, %rax
	movq	-712(%rbp), %rcx
	movl	%eax, (%rcx)
	# %904 = load i8*, i8** %89
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %905 = icmp ne i8* %904, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %905, label %906, label %910
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2910
	jmp	mz_zip_writer_add_mem_ex_v2906
	.text
mz_zip_writer_add_mem_ex_v2906:
	# %907 = load i32, i32* %90
	movq	-712(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %908 = load i8*, i8** %89
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %909 = getelementptr %struct.mz_zip_archive, i8* %908, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %907, i32* %909
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %910
	jmp	mz_zip_writer_add_mem_ex_v2910
	.text
mz_zip_writer_add_mem_ex_v2910:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2911:
	# %912 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 2
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %913 = load i64, i64* %912
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %913, i64* %116
	movq	%rdx, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# %914 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 1
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %915 = load i64, i64* %914
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %915, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %916
	jmp	mz_zip_writer_add_mem_ex_v2916
	.text
mz_zip_writer_add_mem_ex_v2916:
	# br label %917
	jmp	mz_zip_writer_add_mem_ex_v2917
	.text
mz_zip_writer_add_mem_ex_v2917:
	# %918 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %919 = getelementptr %struct.mz_zip_archive, i8* %918, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %920 = load i8*, i8** %919
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %921 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %922 = getelementptr %struct.mz_zip_archive, i8* %921, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %923 = load i8*, i8** %922
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %924 = load i8*, i8** %119
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %920 (i8* %923, i8* %924)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* null, i8** %119
	movq	$0, %rax
	movq	-928(%rbp), %rcx
	movq	%rax, (%rcx)
	# %925 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %926 = icmp ne i64 %925, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %926, label %927, label %1156
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v21156
	jmp	mz_zip_writer_add_mem_ex_v2927
	.text
mz_zip_writer_add_mem_ex_v2927:
	# store i32 16, i32* %129
	movq	$16, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %928 = load i16, i16* %125
	movq	-960(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %929 = zext i16 %928 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %930 = and i32 %929, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %931 = icmp ne i32 %930, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# %932 = xor i1 %931, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %933 = zext i1 %932 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %934 = sext i32 %933 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %935 = icmp ne i64 %934, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %935, label %936, label %938
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2938
	jmp	mz_zip_writer_add_mem_ex_v2936
	.text
mz_zip_writer_add_mem_ex_v2936:
	# call void @__assert_rtn (i8* @__func__.mz_zip_writer_add_mem_ex_v2, i8* @.str.11, i32 7873, i8* @.str.23)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.mz_zip_writer_add_mem_ex_v2(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$7873, %rax
	pushq	%rax
	leaq	_.str.23(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
mz_zip_writer_add_mem_ex_v2937:
	# br label %939
	jmp	mz_zip_writer_add_mem_ex_v2939
	.text
mz_zip_writer_add_mem_ex_v2938:
	# br label %939
	jmp	mz_zip_writer_add_mem_ex_v2939
	.text
mz_zip_writer_add_mem_ex_v2939:
	# %940 = getelementptr [24 x i8], i8* %128, i64 0, i64 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %941 = getelementptr i8, i8* %940, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %941, i8** %37
	movq	%rdx, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 134695760, i32* %38
	movq	$134695760, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# %942 = load i32, i32* %38
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %943 = trunc i32 %942 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %944 = load i8*, i8** %37
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %943, i8* %944
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %945 = load i32, i32* %38
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %946 = lshr i32 %945, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %947 = trunc i32 %946 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %948 = load i8*, i8** %37
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %949 = getelementptr i8, i8* %948, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %947, i8* %949
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %950 = load i32, i32* %38
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %951 = lshr i32 %950, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %952 = trunc i32 %951 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %953 = load i8*, i8** %37
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %954 = getelementptr i8, i8* %953, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %952, i8* %954
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %955 = load i32, i32* %38
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %956 = lshr i32 %955, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %957 = trunc i32 %956 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %958 = load i8*, i8** %37
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %959 = getelementptr i8, i8* %958, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %957, i8* %959
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %960 = getelementptr [24 x i8], i8* %128, i64 0, i64 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %961 = getelementptr i8, i8* %960, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %962 = load i32, i32* %102
	movq	-808(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %961, i8** %39
	movq	%rbx, %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %962, i32* %40
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movl	%eax, (%rcx)
	# %963 = load i32, i32* %40
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %964 = trunc i32 %963 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %965 = load i8*, i8** %39
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %964, i8* %965
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %966 = load i32, i32* %40
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %967 = lshr i32 %966, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %968 = trunc i32 %967 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %969 = load i8*, i8** %39
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %970 = getelementptr i8, i8* %969, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %968, i8* %970
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %971 = load i32, i32* %40
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %972 = lshr i32 %971, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %973 = trunc i32 %972 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %974 = load i8*, i8** %39
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %975 = getelementptr i8, i8* %974, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %973, i8* %975
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %976 = load i32, i32* %40
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %977 = lshr i32 %976, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %978 = trunc i32 %977 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %979 = load i8*, i8** %39
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %980 = getelementptr i8, i8* %979, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %978, i8* %980
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %981 = load i8*, i8** %122
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %982 = icmp eq i8* %981, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %982, label %983, label %1040
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v21040
	jmp	mz_zip_writer_add_mem_ex_v2983
	.text
mz_zip_writer_add_mem_ex_v2983:
	# %984 = load i64, i64* %116
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %985 = icmp ugt i64 %984, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %985, label %986, label %995
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2995
	jmp	mz_zip_writer_add_mem_ex_v2986
	.text
mz_zip_writer_add_mem_ex_v2986:
	# %987 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %987, i8** %91
	movq	%rdx, %rax
	movq	-720(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %92
	movq	$29, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# %988 = load i8*, i8** %91
	movq	-720(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %989 = icmp ne i8* %988, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %989, label %990, label %994
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v2994
	jmp	mz_zip_writer_add_mem_ex_v2990
	.text
mz_zip_writer_add_mem_ex_v2990:
	# %991 = load i32, i32* %92
	movq	-728(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %992 = load i8*, i8** %91
	movq	-720(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %993 = getelementptr %struct.mz_zip_archive, i8* %992, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %991, i32* %993
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %994
	jmp	mz_zip_writer_add_mem_ex_v2994
	.text
mz_zip_writer_add_mem_ex_v2994:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v2995:
	# %996 = getelementptr [24 x i8], i8* %128, i64 0, i64 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %997 = getelementptr i8, i8* %996, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %998 = load i64, i64* %116
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %999 = trunc i64 %998 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %997, i8** %41
	movq	%rbx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %999, i32* %42
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1000 = load i32, i32* %42
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1001 = trunc i32 %1000 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1002 = load i8*, i8** %41
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1001, i8* %1002
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1003 = load i32, i32* %42
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1004 = lshr i32 %1003, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1005 = trunc i32 %1004 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1006 = load i8*, i8** %41
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1007 = getelementptr i8, i8* %1006, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1005, i8* %1007
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1008 = load i32, i32* %42
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1009 = lshr i32 %1008, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1010 = trunc i32 %1009 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1011 = load i8*, i8** %41
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1012 = getelementptr i8, i8* %1011, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1010, i8* %1012
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1013 = load i32, i32* %42
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1014 = lshr i32 %1013, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1015 = trunc i32 %1014 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1016 = load i8*, i8** %41
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1017 = getelementptr i8, i8* %1016, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1015, i8* %1017
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1018 = getelementptr [24 x i8], i8* %128, i64 0, i64 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1019 = getelementptr i8, i8* %1018, i64 12
	movq	%rdx, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1020 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1021 = trunc i64 %1020 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1019, i8** %43
	movq	%rbx, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1021, i32* %44
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1022 = load i32, i32* %44
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1023 = trunc i32 %1022 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1024 = load i8*, i8** %43
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1023, i8* %1024
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1025 = load i32, i32* %44
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1026 = lshr i32 %1025, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1027 = trunc i32 %1026 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1028 = load i8*, i8** %43
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1029 = getelementptr i8, i8* %1028, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1027, i8* %1029
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1030 = load i32, i32* %44
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1031 = lshr i32 %1030, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1032 = trunc i32 %1031 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1033 = load i8*, i8** %43
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1034 = getelementptr i8, i8* %1033, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1032, i8* %1034
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1035 = load i32, i32* %44
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1036 = lshr i32 %1035, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1037 = trunc i32 %1036 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1038 = load i8*, i8** %43
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1039 = getelementptr i8, i8* %1038, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1037, i8* %1039
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %1135
	jmp	mz_zip_writer_add_mem_ex_v21135
	.text
mz_zip_writer_add_mem_ex_v21040:
	# %1041 = getelementptr [24 x i8], i8* %128, i64 0, i64 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1042 = getelementptr i8, i8* %1041, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1043 = load i64, i64* %116
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1042, i8** %29
	movq	%rbx, %rax
	movq	-216(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1043, i64* %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1044 = load i8*, i8** %29
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1045 = load i64, i64* %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1046 = trunc i64 %1045 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1044, i8** %25
	movq	%rbx, %rax
	movq	-184(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1046, i32* %26
	movq	%rdx, %rax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1047 = load i32, i32* %26
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1048 = trunc i32 %1047 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1049 = load i8*, i8** %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1048, i8* %1049
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1050 = load i32, i32* %26
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1051 = lshr i32 %1050, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1052 = trunc i32 %1051 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1053 = load i8*, i8** %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1054 = getelementptr i8, i8* %1053, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1052, i8* %1054
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1055 = load i32, i32* %26
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1056 = lshr i32 %1055, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1057 = trunc i32 %1056 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1058 = load i8*, i8** %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1059 = getelementptr i8, i8* %1058, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1057, i8* %1059
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1060 = load i32, i32* %26
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1061 = lshr i32 %1060, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1062 = trunc i32 %1061 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1063 = load i8*, i8** %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1064 = getelementptr i8, i8* %1063, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1062, i8* %1064
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1065 = load i8*, i8** %29
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1066 = getelementptr i8, i8* %1065, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1067 = load i64, i64* %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1068 = lshr i64 %1067, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1069 = trunc i64 %1068 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1066, i8** %27
	movq	%rbx, %rax
	movq	-200(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1069, i32* %28
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1070 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1071 = trunc i32 %1070 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1072 = load i8*, i8** %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1071, i8* %1072
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1073 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1074 = lshr i32 %1073, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1075 = trunc i32 %1074 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1076 = load i8*, i8** %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1077 = getelementptr i8, i8* %1076, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1075, i8* %1077
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1078 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1079 = lshr i32 %1078, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1080 = trunc i32 %1079 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1081 = load i8*, i8** %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1082 = getelementptr i8, i8* %1081, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1080, i8* %1082
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1083 = load i32, i32* %28
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1084 = lshr i32 %1083, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1085 = trunc i32 %1084 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1086 = load i8*, i8** %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1087 = getelementptr i8, i8* %1086, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1085, i8* %1087
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1088 = getelementptr [24 x i8], i8* %128, i64 0, i64 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1089 = getelementptr i8, i8* %1088, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1090 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %1089, i8** %35
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1090, i64* %36
	movq	%rbx, %rax
	movq	-280(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1091 = load i8*, i8** %35
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1092 = load i64, i64* %36
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1093 = trunc i64 %1092 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1091, i8** %31
	movq	%rbx, %rax
	movq	-232(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1093, i32* %32
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1094 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1095 = trunc i32 %1094 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1096 = load i8*, i8** %31
	movq	-232(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1095, i8* %1096
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1097 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1098 = lshr i32 %1097, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1099 = trunc i32 %1098 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1100 = load i8*, i8** %31
	movq	-232(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1101 = getelementptr i8, i8* %1100, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1099, i8* %1101
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1102 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1103 = lshr i32 %1102, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1104 = trunc i32 %1103 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1105 = load i8*, i8** %31
	movq	-232(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1106 = getelementptr i8, i8* %1105, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1104, i8* %1106
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1107 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1108 = lshr i32 %1107, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1109 = trunc i32 %1108 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1110 = load i8*, i8** %31
	movq	-232(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1111 = getelementptr i8, i8* %1110, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1109, i8* %1111
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1112 = load i8*, i8** %35
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1113 = getelementptr i8, i8* %1112, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1114 = load i64, i64* %36
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1115 = lshr i64 %1114, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1116 = trunc i64 %1115 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1113, i8** %33
	movq	%rbx, %rax
	movq	-248(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1116, i32* %34
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1117 = load i32, i32* %34
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1118 = trunc i32 %1117 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1119 = load i8*, i8** %33
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1118, i8* %1119
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1120 = load i32, i32* %34
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1121 = lshr i32 %1120, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1122 = trunc i32 %1121 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1123 = load i8*, i8** %33
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1124 = getelementptr i8, i8* %1123, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1122, i8* %1124
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1125 = load i32, i32* %34
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1126 = lshr i32 %1125, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1127 = trunc i32 %1126 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1128 = load i8*, i8** %33
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1129 = getelementptr i8, i8* %1128, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1127, i8* %1129
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1130 = load i32, i32* %34
	movq	-256(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1131 = lshr i32 %1130, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1132 = trunc i32 %1131 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1133 = load i8*, i8** %33
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1134 = getelementptr i8, i8* %1133, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1132, i8* %1134
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# store i32 24, i32* %129
	movq	$24, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %1135
	jmp	mz_zip_writer_add_mem_ex_v21135
	.text
mz_zip_writer_add_mem_ex_v21135:
	# %1136 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1137 = getelementptr %struct.mz_zip_archive, i8* %1136, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1138 = load i8*, i8** %1137
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1139 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1140 = getelementptr %struct.mz_zip_archive, i8* %1139, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1141 = load i8*, i8** %1140
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1142 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1143 = getelementptr [24 x i8], i8* %128, i64 0, i64 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1144 = load i32, i32* %129
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1145 = zext i32 %1144 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1146 = call i64 %1138 (i8* %1141, i64 %1142, i8* %1143, i64 %1145)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %1147 = load i32, i32* %129
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1148 = zext i32 %1147 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1149 = icmp ne i64 %1146, %1148
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1149, label %1150, label %1151
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v21151
	jmp	mz_zip_writer_add_mem_ex_v21150
	.text
mz_zip_writer_add_mem_ex_v21150:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v21151:
	# %1152 = load i32, i32* %129
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1153 = zext i32 %1152 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1154 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1155 = add i64 %1154, %1153
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1155, i64* %115
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1156
	jmp	mz_zip_writer_add_mem_ex_v21156
	.text
mz_zip_writer_add_mem_ex_v21156:
	# %1157 = load i8*, i8** %122
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1158 = icmp ne i8* %1157, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1158, label %1159, label %1180
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v21180
	jmp	mz_zip_writer_add_mem_ex_v21159
	.text
mz_zip_writer_add_mem_ex_v21159:
	# %1160 = getelementptr [28 x i8], i8* %124, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1161 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1162 = icmp uge i64 %1161, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1162, label %1163, label %1164
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v21164
	jmp	mz_zip_writer_add_mem_ex_v21163
	.text
mz_zip_writer_add_mem_ex_v21163:
	# br label %1165
	movq	-800(%rbp), %rsi
	jmp	mz_zip_writer_add_mem_ex_v21165
	.text
mz_zip_writer_add_mem_ex_v21164:
	# br label %1165
	movq	$0, %rsi
	jmp	mz_zip_writer_add_mem_ex_v21165
	.text
mz_zip_writer_add_mem_ex_v21165:
	# %1166 = phi i8* [%101, %1163], [null, %1164]
	# %1167 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1168 = icmp uge i64 %1167, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1168, label %1169, label %1170
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v21170
	jmp	mz_zip_writer_add_mem_ex_v21169
	.text
mz_zip_writer_add_mem_ex_v21169:
	# br label %1171
	movq	-904(%rbp), %rbx
	jmp	mz_zip_writer_add_mem_ex_v21171
	.text
mz_zip_writer_add_mem_ex_v21170:
	# br label %1171
	movq	$0, %rbx
	jmp	mz_zip_writer_add_mem_ex_v21171
	.text
mz_zip_writer_add_mem_ex_v21171:
	# %1172 = phi i8* [%116, %1169], [null, %1170]
	# %1173 = load i64, i64* %114
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1174 = icmp uge i64 %1173, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1174, label %1175, label %1176
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v21176
	jmp	mz_zip_writer_add_mem_ex_v21175
	.text
mz_zip_writer_add_mem_ex_v21175:
	# br label %1177
	movq	-888(%rbp), %rdx
	jmp	mz_zip_writer_add_mem_ex_v21177
	.text
mz_zip_writer_add_mem_ex_v21176:
	# br label %1177
	movq	$0, %rdx
	jmp	mz_zip_writer_add_mem_ex_v21177
	.text
mz_zip_writer_add_mem_ex_v21177:
	# %1178 = phi i8* [%114, %1175], [null, %1176]
	# %1179 = call i32 @mz_zip_writer_create_zip64_extra_data (i8* %1160, i8* %1166, i8* %1172, i8* %1178)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_zip64_extra_data
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %1179, i32* %123
	movq	%rdx, %rax
	movq	-952(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1180
	jmp	mz_zip_writer_add_mem_ex_v21180
	.text
mz_zip_writer_add_mem_ex_v21180:
	# %1181 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -968(%rbp)
	# %1182 = load i8*, i8** %95
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -976(%rbp)
	# %1183 = load i64, i64* %117
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1184 = trunc i64 %1183 to i16
	movq	%rdx, %rax
	movq	$0, -984(%rbp)
	movw	%ax, -984(%rbp)
	# %1185 = load i8*, i8** %122
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -992(%rbp)
	# %1186 = load i32, i32* %123
	movq	-952(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1187 = trunc i32 %1186 to i16
	movq	%rdx, %rax
	movq	$0, -1000(%rbp)
	movw	%ax, -1000(%rbp)
	# %1188 = load i8*, i8** %98
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1008(%rbp)
	# %1189 = load i16, i16* %99
	movq	-784(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r15
	movw	%ax, %r15w
	# %1190 = load i64, i64* %101
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %1191 = load i64, i64* %116
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %1192 = load i32, i32* %102
	movq	-808(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r12
	movl	%eax, %r12d
	# %1193 = load i16, i16* %108
	movq	-856(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r11
	movw	%ax, %r11w
	# %1194 = load i16, i16* %125
	movq	-960(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r10
	movw	%ax, %r10w
	# %1195 = load i16, i16* %109
	movq	-864(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r9
	movw	%ax, %r9w
	# %1196 = load i16, i16* %110
	movq	-872(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %1197 = load i64, i64* %114
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1198 = load i32, i32* %112
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1199 = load i8*, i8** %106
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1200 = load i32, i32* %107
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1201 = call i32 @mz_zip_writer_add_to_central_dir (i8* %1181, i8* %1182, i16 %1184, i8* %1185, i16 %1187, i8* %1188, i16 %1189, i64 %1190, i64 %1191, i32 %1192, i16 %1193, i16 %1194, i16 %1195, i16 %1196, i64 %1197, i32 %1198, i8* %1199, i32 %1200)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	-968(%rbp), %rax
	pushq	%rax
	movq	-976(%rbp), %rax
	pushq	%rax
	movq	-984(%rbp), %rax
	pushq	%rax
	movq	-992(%rbp), %rax
	pushq	%rax
	movq	-1000(%rbp), %rax
	pushq	%rax
	movq	-1008(%rbp), %rax
	pushq	%rax
	movq	%r15, %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	112(%rbp)
	popq	104(%rbp)
	popq	96(%rbp)
	popq	88(%rbp)
	popq	80(%rbp)
	popq	72(%rbp)
	popq	64(%rbp)
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_add_to_central_dir
	addq	$96, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1202 = icmp ne i32 %1201, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1202, label %1204, label %1203
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_mem_ex_v21203
	jmp	mz_zip_writer_add_mem_ex_v21204
	.text
mz_zip_writer_add_mem_ex_v21203:
	# store i32 0, i32* %93
	movq	$0, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v21204:
	# %1205 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1206 = getelementptr %struct.mz_zip_archive, i8* %1205, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1207 = load i32, i32* %1206
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1208 = add i32 %1207, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1208, i32* %1206
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1209 = load i64, i64* %115
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1210 = load i8*, i8** %94
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1211 = getelementptr %struct.mz_zip_archive, i8* %1210, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1209, i64* %1211
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %93
	movq	$1, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1212
	jmp	mz_zip_writer_add_mem_ex_v21212
	.text
mz_zip_writer_add_mem_ex_v21212:
	# %1213 = load i32, i32* %93
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %1213
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_validate_archive_name
_mz_zip_writer_validate_archive_name:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rsi
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %5 = load i8, i8* %4
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %6 = sext i8 %5 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %7 = icmp eq i32 %6, 47
	movq	%rdx, %rax
	movq	$47, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %7, label %8, label %9
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_validate_archive_name9
	jmp	mz_zip_writer_validate_archive_name8
	.text
mz_zip_writer_validate_archive_name8:
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %10
	jmp	mz_zip_writer_validate_archive_name10
	.text
mz_zip_writer_validate_archive_name9:
	# store i32 1, i32* %2
	movq	$1, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %10
	jmp	mz_zip_writer_validate_archive_name10
	.text
mz_zip_writer_validate_archive_name10:
	# %11 = load i32, i32* %2
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %11
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_time_t_to_dos_time
_mz_zip_time_t_to_dos_time:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rbx
	popq	%r9
	popq	%r10
	# %4 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# store i64 %0, i64* %4
	movq	%r10, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %5
	movq	%r9, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %6
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %8 = call i8* @localtime (i8* %4)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_localtime
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %8, i8** %7
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %9 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %10 = getelementptr %struct.tm, i8* %9, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %11 = load i32, i32* %10
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %12 = shl i32 %11, 11
	movq	%rdx, %rax
	movq	$11, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %13 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.tm, i8* %13, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %15 = load i32, i32* %14
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %16 = shl i32 %15, 5
	movq	%rdx, %rax
	movq	$5, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %17 = add i32 %12, %16
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %18 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %19 = getelementptr %struct.tm, i8* %18, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %20 = load i32, i32* %19
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %21 = ashr i32 %20, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %22 = add i32 %17, %21
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %23 = trunc i32 %22 to i16
	movq	%rdx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %24 = load i8*, i8** %5
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i16 %23, i16* %24
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %25 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = getelementptr %struct.tm, i8* %25, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %27 = load i32, i32* %26
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %28 = add i32 %27, 1900
	movq	%rdx, %rax
	movq	$1900, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %29 = sub i32 %28, 1980
	movq	%rdx, %rax
	movq	$1980, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %30 = shl i32 %29, 9
	movq	%rdx, %rax
	movq	$9, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %31 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = getelementptr %struct.tm, i8* %31, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %33 = load i32, i32* %32
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %34 = add i32 %33, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %35 = shl i32 %34, 5
	movq	%rdx, %rax
	movq	$5, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %36 = add i32 %30, %35
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %37 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = getelementptr %struct.tm, i8* %37, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %39 = load i32, i32* %38
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = add i32 %36, %39
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %41 = trunc i32 %40 to i16
	movq	%rdx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %42 = load i8*, i8** %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i16 %41, i16* %42
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_compute_padding_needed_for_file_alignment
_mz_zip_writer_compute_padding_needed_for_file_alignment:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %5 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %6 = getelementptr %struct.mz_zip_archive, i8* %5, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %7 = load i64, i64* %6
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = icmp ne i64 %7, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %8, label %10, label %9
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_compute_padding_needed_for_file_alignment9
	jmp	mz_zip_writer_compute_padding_needed_for_file_alignment10
	.text
mz_zip_writer_compute_padding_needed_for_file_alignment9:
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %32
	jmp	mz_zip_writer_compute_padding_needed_for_file_alignment32
	.text
mz_zip_writer_compute_padding_needed_for_file_alignment10:
	# %11 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %12 = getelementptr %struct.mz_zip_archive, i8* %11, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %13 = load i64, i64* %12
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %14 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %15 = getelementptr %struct.mz_zip_archive, i8* %14, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %16 = load i64, i64* %15
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %17 = sub i64 %16, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %18 = and i64 %13, %17
	movq	%rsi, %rax
	movq	%rbx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %19 = trunc i64 %18 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i32 %19, i32* %4
	movq	%rbx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %20 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %21 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 6
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %22 = load i64, i64* %21
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %23 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %24 = zext i32 %23 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %25 = sub i64 %22, %24
	movq	%rsi, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %26 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %27 = getelementptr %struct.mz_zip_archive, i8* %26, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %28 = load i64, i64* %27
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = sub i64 %28, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %30 = and i64 %25, %29
	movq	%rbx, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %31 = trunc i64 %30 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %31, i32* %2
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %32
	jmp	mz_zip_writer_compute_padding_needed_for_file_alignment32
	.text
mz_zip_writer_compute_padding_needed_for_file_alignment32:
	# %33 = load i32, i32* %2
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %33
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_write_zeros
_mz_zip_writer_write_zeros:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%rbx
	popq	%rsi
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r12
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %10 = alloca [4096 x i8]
	subq	$4096, %rsp
	movq	%rsp, %r10
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %7
	movq	%rsi, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %8
	movq	%rbx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %9
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %12 = getelementptr [4096 x i8], i8* %10, i64 0, i64 0
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$4096, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %13 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %14 = zext i32 %13 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %15 = icmp ult i64 4096, %14
	movq	$4096, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %15, label %16, label %17
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_write_zeros17
	jmp	mz_zip_writer_write_zeros16
	.text
mz_zip_writer_write_zeros16:
	# br label %20
	movq	$4096, %rdx
	jmp	mz_zip_writer_write_zeros20
	.text
mz_zip_writer_write_zeros17:
	# %18 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %19 = zext i32 %18 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# br label %20
	jmp	mz_zip_writer_write_zeros20
	.text
mz_zip_writer_write_zeros20:
	# %21 = phi i64 [4096, %16], [%19, %17]
	# %22 = call i8* @__memset_chk (i8* %12, i32 0, i64 %21, i64 4096)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$4096, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %23
	jmp	mz_zip_writer_write_zeros23
	.text
mz_zip_writer_write_zeros23:
	# %24 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %25 = icmp ne i32 %24, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %25, label %26, label %68
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_write_zeros68
	jmp	mz_zip_writer_write_zeros26
	.text
mz_zip_writer_write_zeros26:
	# %27 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %28 = zext i32 %27 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %29 = icmp ult i64 4096, %28
	movq	$4096, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %29, label %30, label %31
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_write_zeros31
	jmp	mz_zip_writer_write_zeros30
	.text
mz_zip_writer_write_zeros30:
	# br label %34
	movq	$4096, %rdx
	jmp	mz_zip_writer_write_zeros34
	.text
mz_zip_writer_write_zeros31:
	# %32 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %33 = zext i32 %32 to i64
	movq	%rdx, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# br label %34
	movq	%r8, %rdx
	jmp	mz_zip_writer_write_zeros34
	.text
mz_zip_writer_write_zeros34:
	# %35 = phi i64 [4096, %30], [%33, %31]
	# %36 = trunc i64 %35 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %36, i32* %11
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %37 = load i8*, i8** %7
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = getelementptr %struct.mz_zip_archive, i8* %37, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %39 = load i8*, i8** %38
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %40 = load i8*, i8** %7
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = getelementptr %struct.mz_zip_archive, i8* %40, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %42 = load i8*, i8** %41
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %43 = load i64, i64* %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %44 = getelementptr [4096 x i8], i8* %10, i64 0, i64 0
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$4096, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %45 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %46 = zext i32 %45 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %47 = call i64 %39 (i8* %42, i64 %43, i8* %44, i64 %46)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %48 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %49 = zext i32 %48 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %50 = icmp ne i64 %47, %49
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %50, label %51, label %60
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_write_zeros60
	jmp	mz_zip_writer_write_zeros51
	.text
mz_zip_writer_write_zeros51:
	# %52 = load i8*, i8** %7
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %52, i8** %4
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %5
	movq	$19, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %53 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %54 = icmp ne i8* %53, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %54, label %55, label %59
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_write_zeros59
	jmp	mz_zip_writer_write_zeros55
	.text
mz_zip_writer_write_zeros55:
	# %56 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %57 = load i8*, i8** %4
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = getelementptr %struct.mz_zip_archive, i8* %57, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %56, i32* %58
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %59
	jmp	mz_zip_writer_write_zeros59
	.text
mz_zip_writer_write_zeros59:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %69
	jmp	mz_zip_writer_write_zeros69
	.text
mz_zip_writer_write_zeros60:
	# %61 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %62 = zext i32 %61 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %63 = load i64, i64* %8
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = add i64 %63, %62
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %64, i64* %8
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %65 = load i32, i32* %11
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %66 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %67 = sub i32 %66, %65
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %67, i32* %9
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %23
	jmp	mz_zip_writer_write_zeros23
	.text
mz_zip_writer_write_zeros68:
	# store i32 1, i32* %6
	movq	$1, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %69
	jmp	mz_zip_writer_write_zeros69
	.text
mz_zip_writer_write_zeros69:
	# %70 = load i32, i32* %6
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %70
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_create_zip64_extra_data
_mz_zip_writer_create_zip64_extra_data:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$176, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -64(%rbp)
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -80(%rbp)
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %16 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %19 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %22 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %23 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %28 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r12
	# %29 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %31 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %33 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %34 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %29
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %30
	movq	-16(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %31
	movq	%rbx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %32
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %35 = load i8*, i8** %29
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %35, i8** %33
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %34
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %36 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %37 = getelementptr i8, i8* %36, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %37, i8** %5
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 1, i16* %6
	movq	$1, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# %38 = load i16, i16* %6
	movq	-32(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %39 = trunc i16 %38 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %40 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %39, i8* %40
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %41 = load i16, i16* %6
	movq	-32(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %42 = zext i16 %41 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %43 = ashr i32 %42, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %44 = trunc i32 %43 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %45 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %46 = getelementptr i8, i8* %45, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %44, i8* %46
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %47 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %48 = getelementptr i8, i8* %47, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %48, i8** %7
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 0, i16* %8
	movq	$0, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# %49 = load i16, i16* %8
	movq	-48(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %50 = trunc i16 %49 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %51 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %50, i8* %51
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %52 = load i16, i16* %8
	movq	-48(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %53 = zext i16 %52 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %54 = ashr i32 %53, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %55 = trunc i32 %54 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %56 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %57 = getelementptr i8, i8* %56, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %55, i8* %57
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %58 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = getelementptr i8, i8* %58, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %59, i8** %33
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %60 = load i8*, i8** %30
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %61 = icmp ne i8* %60, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %61, label %62, label %116
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_create_zip64_extra_data116
	jmp	mz_zip_writer_create_zip64_extra_data62
	.text
mz_zip_writer_create_zip64_extra_data62:
	# %63 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %64 = load i8*, i8** %30
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = load i64, i64* %64
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %63, i8** %15
	movq	%rbx, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %65, i64* %16
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# %66 = load i8*, i8** %15
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %67 = load i64, i64* %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = trunc i64 %67 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %66, i8** %11
	movq	%rbx, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %68, i32* %12
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# %69 = load i32, i32* %12
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %70 = trunc i32 %69 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %71 = load i8*, i8** %11
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %70, i8* %71
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %72 = load i32, i32* %12
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %73 = lshr i32 %72, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %74 = trunc i32 %73 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %75 = load i8*, i8** %11
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %76 = getelementptr i8, i8* %75, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %74, i8* %76
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %77 = load i32, i32* %12
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %78 = lshr i32 %77, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %79 = trunc i32 %78 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %80 = load i8*, i8** %11
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %81 = getelementptr i8, i8* %80, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %79, i8* %81
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %82 = load i32, i32* %12
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %83 = lshr i32 %82, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %84 = trunc i32 %83 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %85 = load i8*, i8** %11
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = getelementptr i8, i8* %85, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %84, i8* %86
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %87 = load i8*, i8** %15
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = getelementptr i8, i8* %87, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %89 = load i64, i64* %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = lshr i64 %89, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %91 = trunc i64 %90 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %88, i8** %13
	movq	%rbx, %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %91, i32* %14
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %92 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %93 = trunc i32 %92 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %94 = load i8*, i8** %13
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %93, i8* %94
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %95 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %96 = lshr i32 %95, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %97 = trunc i32 %96 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %98 = load i8*, i8** %13
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %99 = getelementptr i8, i8* %98, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %97, i8* %99
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %100 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %101 = lshr i32 %100, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %102 = trunc i32 %101 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %103 = load i8*, i8** %13
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %104 = getelementptr i8, i8* %103, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %102, i8* %104
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %105 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %106 = lshr i32 %105, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %107 = trunc i32 %106 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %108 = load i8*, i8** %13
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %109 = getelementptr i8, i8* %108, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %107, i8* %109
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %110 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %111 = getelementptr i8, i8* %110, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %111, i8** %33
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %112 = load i32, i32* %34
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %113 = zext i32 %112 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %114 = add i64 %113, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %115 = trunc i64 %114 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %115, i32* %34
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %116
	jmp	mz_zip_writer_create_zip64_extra_data116
	.text
mz_zip_writer_create_zip64_extra_data116:
	# %117 = load i8*, i8** %31
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = icmp ne i8* %117, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %118, label %119, label %173
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_create_zip64_extra_data173
	jmp	mz_zip_writer_create_zip64_extra_data119
	.text
mz_zip_writer_create_zip64_extra_data119:
	# %120 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %121 = load i8*, i8** %31
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %122 = load i64, i64* %121
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %120, i8** %21
	movq	%rbx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %122, i64* %22
	movq	%rdx, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# %123 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %124 = load i64, i64* %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = trunc i64 %124 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %123, i8** %17
	movq	%rbx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %125, i32* %18
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %126 = load i32, i32* %18
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %127 = trunc i32 %126 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %128 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %127, i8* %128
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %129 = load i32, i32* %18
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %130 = lshr i32 %129, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %131 = trunc i32 %130 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %132 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %133 = getelementptr i8, i8* %132, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %131, i8* %133
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %134 = load i32, i32* %18
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %135 = lshr i32 %134, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %136 = trunc i32 %135 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %137 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %138 = getelementptr i8, i8* %137, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %136, i8* %138
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %139 = load i32, i32* %18
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %140 = lshr i32 %139, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %141 = trunc i32 %140 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %142 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %143 = getelementptr i8, i8* %142, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %141, i8* %143
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %144 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %145 = getelementptr i8, i8* %144, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %146 = load i64, i64* %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %147 = lshr i64 %146, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %148 = trunc i64 %147 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %145, i8** %19
	movq	%rbx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %148, i32* %20
	movq	%rdx, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# %149 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %150 = trunc i32 %149 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %151 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %150, i8* %151
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %152 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %153 = lshr i32 %152, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %154 = trunc i32 %153 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %155 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %156 = getelementptr i8, i8* %155, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %154, i8* %156
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %157 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %158 = lshr i32 %157, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %159 = trunc i32 %158 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %160 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %161 = getelementptr i8, i8* %160, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %159, i8* %161
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %162 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %163 = lshr i32 %162, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %164 = trunc i32 %163 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %165 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %166 = getelementptr i8, i8* %165, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %164, i8* %166
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %167 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %168 = getelementptr i8, i8* %167, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %168, i8** %33
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %169 = load i32, i32* %34
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %170 = zext i32 %169 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %171 = add i64 %170, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %172 = trunc i64 %171 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %172, i32* %34
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %173
	jmp	mz_zip_writer_create_zip64_extra_data173
	.text
mz_zip_writer_create_zip64_extra_data173:
	# %174 = load i8*, i8** %32
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %175 = icmp ne i8* %174, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %175, label %176, label %230
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_create_zip64_extra_data230
	jmp	mz_zip_writer_create_zip64_extra_data176
	.text
mz_zip_writer_create_zip64_extra_data176:
	# %177 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %178 = load i8*, i8** %32
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %179 = load i64, i64* %178
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %177, i8** %27
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i64 %179, i64* %28
	movq	%rbx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %180 = load i8*, i8** %27
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %181 = load i64, i64* %28
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %182 = trunc i64 %181 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %180, i8** %23
	movq	%rbx, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %182, i32* %24
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
	# %183 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %184 = trunc i32 %183 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %185 = load i8*, i8** %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %184, i8* %185
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %186 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %187 = lshr i32 %186, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %188 = trunc i32 %187 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %189 = load i8*, i8** %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %190 = getelementptr i8, i8* %189, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %188, i8* %190
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %191 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %192 = lshr i32 %191, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %193 = trunc i32 %192 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %194 = load i8*, i8** %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %195 = getelementptr i8, i8* %194, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %193, i8* %195
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %196 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %197 = lshr i32 %196, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %198 = trunc i32 %197 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %199 = load i8*, i8** %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %200 = getelementptr i8, i8* %199, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %198, i8* %200
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %201 = load i8*, i8** %27
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %202 = getelementptr i8, i8* %201, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %203 = load i64, i64* %28
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %204 = lshr i64 %203, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %205 = trunc i64 %204 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %202, i8** %25
	movq	%rbx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i32 %205, i32* %26
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %206 = load i32, i32* %26
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %207 = trunc i32 %206 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %208 = load i8*, i8** %25
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %207, i8* %208
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %209 = load i32, i32* %26
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %210 = lshr i32 %209, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %211 = trunc i32 %210 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %212 = load i8*, i8** %25
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %213 = getelementptr i8, i8* %212, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %211, i8* %213
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %214 = load i32, i32* %26
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %215 = lshr i32 %214, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %216 = trunc i32 %215 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %217 = load i8*, i8** %25
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %218 = getelementptr i8, i8* %217, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %216, i8* %218
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %219 = load i32, i32* %26
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %220 = lshr i32 %219, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %221 = trunc i32 %220 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %222 = load i8*, i8** %25
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %223 = getelementptr i8, i8* %222, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %221, i8* %223
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %224 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = getelementptr i8, i8* %224, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %225, i8** %33
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %226 = load i32, i32* %34
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %227 = zext i32 %226 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %228 = add i64 %227, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %229 = trunc i64 %228 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %229, i32* %34
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %230
	jmp	mz_zip_writer_create_zip64_extra_data230
	.text
mz_zip_writer_create_zip64_extra_data230:
	# %231 = load i8*, i8** %29
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %232 = getelementptr i8, i8* %231, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %233 = load i32, i32* %34
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %234 = trunc i32 %233 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i8* %232, i8** %9
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %234, i16* %10
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# %235 = load i16, i16* %10
	movq	-64(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %236 = trunc i16 %235 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %237 = load i8*, i8** %9
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %236, i8* %237
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %238 = load i16, i16* %10
	movq	-64(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %239 = zext i16 %238 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %240 = ashr i32 %239, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %241 = trunc i32 %240 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %242 = load i8*, i8** %9
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %243 = getelementptr i8, i8* %242, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %241, i8* %243
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %244 = load i8*, i8** %33
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %245 = load i8*, i8** %29
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %246 = ptrtoint i8** %244 to i64
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %247 = ptrtoint i8** %245 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %248 = sub i64 %246, %247
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %249 = trunc i64 %248 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %249
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_create_local_dir_header
_mz_zip_writer_create_local_dir_header:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$256, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	pushq	40(%rbp)
	pushq	48(%rbp)
	pushq	56(%rbp)
	popq	%rbx
	popq	%rdi
	popq	-64(%rbp)
	popq	-56(%rbp)
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %13 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -80(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %15 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -96(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %17 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -112(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %19 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -128(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %21 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -144(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %23 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -152(%rbp)
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %25 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -176(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -184(%rbp)
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %33 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %34 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %35 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %36 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -248(%rbp)
	# %37 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -256(%rbp)
	# %38 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r15
	# %39 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %40 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %41 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r12
	# %42 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r11
	# %43 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r10
	# %44 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %34
	movq	-8(%rbp), %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %35
	movq	-16(%rbp), %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %2, i16* %36
	movq	-24(%rbp), %rax
	movq	-248(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %3, i16* %37
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %4, i64* %38
	movq	-32(%rbp), %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i64 %5, i64* %39
	movq	-40(%rbp), %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 %6, i32* %40
	movq	-48(%rbp), %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# store i16 %7, i16* %41
	movq	-56(%rbp), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i16 %8, i16* %42
	movq	-64(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i16 %9, i16* %43
	movq	%rdi, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i16 %10, i16* %44
	movq	%rbx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %45 = load i8*, i8** %34
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %46 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %47 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %48 = call i64 @llvm.objectsize.i64.p0 (i8* %47, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %49 = call i8* @__memset_chk (i8* %46, i32 0, i64 30, i64 %48)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %50 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %51 = getelementptr i8, i8* %50, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %51, i8** %26
	movq	%rsi, %rax
	movq	-184(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 67324752, i32* %27
	movq	$67324752, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %52 = load i32, i32* %27
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %53 = trunc i32 %52 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %54 = load i8*, i8** %26
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %53, i8* %54
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %55 = load i32, i32* %27
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %56 = lshr i32 %55, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %57 = trunc i32 %56 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %58 = load i8*, i8** %26
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %59 = getelementptr i8, i8* %58, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %57, i8* %59
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %60 = load i32, i32* %27
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %61 = lshr i32 %60, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %62 = trunc i32 %61 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %63 = load i8*, i8** %26
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %64 = getelementptr i8, i8* %63, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %62, i8* %64
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %65 = load i32, i32* %27
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %66 = lshr i32 %65, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %67 = trunc i32 %66 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %68 = load i8*, i8** %26
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %69 = getelementptr i8, i8* %68, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %67, i8* %69
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %70 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %71 = getelementptr i8, i8* %70, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %72 = load i16, i16* %41
	movq	%r12, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %73 = zext i16 %72 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %74 = icmp ne i32 %73, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setne	%dil
	# %75 = zext i1 %74 to i64
	movq	%rdi, %rax
	movq	%rax, %rsi
	# %76 = select i1 %74, i32 20, i32 0
	pushq	%rdx
	movq	%rdi, %rcx
	movq	$20, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rsi
	popq	%rdx
	# %77 = trunc i32 %76 to i16
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# store i8* %71, i8** %12
	movq	%r8, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %77, i16* %13
	movq	%rsi, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# %78 = load i16, i16* %13
	movq	-80(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %79 = trunc i16 %78 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %80 = load i8*, i8** %12
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %79, i8* %80
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %81 = load i16, i16* %13
	movq	-80(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %82 = zext i16 %81 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %83 = ashr i32 %82, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rsi
	# %84 = trunc i32 %83 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %85 = load i8*, i8** %12
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %86 = getelementptr i8, i8* %85, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %84, i8* %86
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %87 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %88 = getelementptr i8, i8* %87, i64 6
	movq	%rsi, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %89 = load i16, i16* %42
	movq	%r11, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# store i8* %88, i8** %14
	movq	%rdi, %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %89, i16* %15
	movq	%rsi, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# %90 = load i16, i16* %15
	movq	-96(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %91 = trunc i16 %90 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %92 = load i8*, i8** %14
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %91, i8* %92
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %93 = load i16, i16* %15
	movq	-96(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %94 = zext i16 %93 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %95 = ashr i32 %94, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rsi
	# %96 = trunc i32 %95 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %97 = load i8*, i8** %14
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %98 = getelementptr i8, i8* %97, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %96, i8* %98
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %99 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %100 = getelementptr i8, i8* %99, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %101 = load i16, i16* %41
	movq	%r12, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# store i8* %100, i8** %16
	movq	%rdi, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %101, i16* %17
	movq	%rsi, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# %102 = load i16, i16* %17
	movq	-112(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %103 = trunc i16 %102 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %104 = load i8*, i8** %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %103, i8* %104
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %105 = load i16, i16* %17
	movq	-112(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %106 = zext i16 %105 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %107 = ashr i32 %106, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rsi
	# %108 = trunc i32 %107 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %109 = load i8*, i8** %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %110 = getelementptr i8, i8* %109, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %108, i8* %110
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %111 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %112 = getelementptr i8, i8* %111, i64 10
	movq	%rsi, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %113 = load i16, i16* %43
	movq	%r10, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# store i8* %112, i8** %18
	movq	%rdi, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %113, i16* %19
	movq	%rsi, %rax
	movq	-128(%rbp), %rcx
	movq	%rax, (%rcx)
	# %114 = load i16, i16* %19
	movq	-128(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %115 = trunc i16 %114 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %116 = load i8*, i8** %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %115, i8* %116
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %117 = load i16, i16* %19
	movq	-128(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %118 = zext i16 %117 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %119 = ashr i32 %118, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rsi
	# %120 = trunc i32 %119 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %121 = load i8*, i8** %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %122 = getelementptr i8, i8* %121, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %120, i8* %122
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %123 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %124 = getelementptr i8, i8* %123, i64 12
	movq	%rsi, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %125 = load i16, i16* %44
	movq	%r9, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# store i8* %124, i8** %20
	movq	%rdi, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %125, i16* %21
	movq	%rsi, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# %126 = load i16, i16* %21
	movq	-144(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %127 = trunc i16 %126 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %128 = load i8*, i8** %20
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %127, i8* %128
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %129 = load i16, i16* %21
	movq	-144(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %130 = zext i16 %129 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %131 = ashr i32 %130, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rsi
	# %132 = trunc i32 %131 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %133 = load i8*, i8** %20
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %134 = getelementptr i8, i8* %133, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %132, i8* %134
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %135 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %136 = getelementptr i8, i8* %135, i64 14
	movq	%rsi, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %137 = load i32, i32* %40
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %136, i8** %28
	movq	%rdi, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %137, i32* %29
	movq	%rsi, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %138 = load i32, i32* %29
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %139 = trunc i32 %138 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %140 = load i8*, i8** %28
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %139, i8* %140
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %141 = load i32, i32* %29
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %142 = lshr i32 %141, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %143 = trunc i32 %142 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %144 = load i8*, i8** %28
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %145 = getelementptr i8, i8* %144, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %143, i8* %145
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %146 = load i32, i32* %29
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %147 = lshr i32 %146, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %148 = trunc i32 %147 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %149 = load i8*, i8** %28
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %150 = getelementptr i8, i8* %149, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %148, i8* %150
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %151 = load i32, i32* %29
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %152 = lshr i32 %151, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %153 = trunc i32 %152 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %154 = load i8*, i8** %28
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %155 = getelementptr i8, i8* %154, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %153, i8* %155
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %156 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %157 = getelementptr i8, i8* %156, i64 18
	movq	%rsi, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %158 = load i64, i64* %39
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %159 = icmp ult i64 %158, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %159, label %160, label %162
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_create_local_dir_header162
	jmp	mz_zip_writer_create_local_dir_header160
	.text
mz_zip_writer_create_local_dir_header160:
	# %161 = load i64, i64* %39
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %163
	jmp	mz_zip_writer_create_local_dir_header163
	.text
mz_zip_writer_create_local_dir_header162:
	# br label %163
	movq	$4294967295, %rbx
	jmp	mz_zip_writer_create_local_dir_header163
	.text
mz_zip_writer_create_local_dir_header163:
	# %164 = phi i64 [%161, %160], [4294967295, %162]
	# %165 = trunc i64 %164 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i8* %157, i8** %30
	movq	%rdi, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %165, i32* %31
	movq	%rbx, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %166 = load i32, i32* %31
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %167 = trunc i32 %166 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %168 = load i8*, i8** %30
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %167, i8* %168
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %169 = load i32, i32* %31
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %170 = lshr i32 %169, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %171 = trunc i32 %170 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %172 = load i8*, i8** %30
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %173 = getelementptr i8, i8* %172, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %171, i8* %173
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %174 = load i32, i32* %31
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %175 = lshr i32 %174, 16
	movq	%rbx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %176 = trunc i32 %175 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %177 = load i8*, i8** %30
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %178 = getelementptr i8, i8* %177, i64 2
	movq	%rbx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %176, i8* %178
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %179 = load i32, i32* %31
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %180 = lshr i32 %179, 24
	movq	%rbx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %181 = trunc i32 %180 to i8
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %182 = load i8*, i8** %30
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %183 = getelementptr i8, i8* %182, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %181, i8* %183
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %184 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %185 = getelementptr i8, i8* %184, i64 22
	movq	%rbx, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %186 = load i64, i64* %38
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %187 = icmp ult i64 %186, 4294967295
	movq	%rbx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %187, label %188, label %190
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_create_local_dir_header190
	jmp	mz_zip_writer_create_local_dir_header188
	.text
mz_zip_writer_create_local_dir_header188:
	# %189 = load i64, i64* %38
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %191
	jmp	mz_zip_writer_create_local_dir_header191
	.text
mz_zip_writer_create_local_dir_header190:
	# br label %191
	movq	$4294967295, %rdx
	jmp	mz_zip_writer_create_local_dir_header191
	.text
mz_zip_writer_create_local_dir_header191:
	# %192 = phi i64 [%189, %188], [4294967295, %190]
	# %193 = trunc i64 %192 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %185, i8** %32
	movq	%rsi, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %193, i32* %33
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %194 = load i32, i32* %33
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %195 = trunc i32 %194 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %196 = load i8*, i8** %32
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %195, i8* %196
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %197 = load i32, i32* %33
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %198 = lshr i32 %197, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %199 = trunc i32 %198 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %200 = load i8*, i8** %32
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %201 = getelementptr i8, i8* %200, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %199, i8* %201
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %202 = load i32, i32* %33
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %203 = lshr i32 %202, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %204 = trunc i32 %203 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %205 = load i8*, i8** %32
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %206 = getelementptr i8, i8* %205, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %204, i8* %206
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %207 = load i32, i32* %33
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %208 = lshr i32 %207, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %209 = trunc i32 %208 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %210 = load i8*, i8** %32
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %211 = getelementptr i8, i8* %210, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %209, i8* %211
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %212 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %213 = getelementptr i8, i8* %212, i64 26
	movq	%rdx, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %214 = load i16, i16* %36
	movq	-248(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i8* %213, i8** %22
	movq	%rbx, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %214, i16* %23
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %215 = load i16, i16* %23
	movq	-152(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %216 = trunc i16 %215 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %217 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %216, i8* %217
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %218 = load i16, i16* %23
	movq	-152(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %219 = zext i16 %218 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %220 = ashr i32 %219, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %221 = trunc i32 %220 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %222 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %223 = getelementptr i8, i8* %222, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %221, i8* %223
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %224 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = getelementptr i8, i8* %224, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %226 = load i16, i16* %37
	movq	-256(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i8* %225, i8** %24
	movq	%rbx, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %226, i16* %25
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# %227 = load i16, i16* %25
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %228 = trunc i16 %227 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %229 = load i8*, i8** %24
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %228, i8* %229
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %230 = load i16, i16* %25
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %231 = zext i16 %230 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %232 = ashr i32 %231, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %233 = trunc i32 %232 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %234 = load i8*, i8** %24
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %235 = getelementptr i8, i8* %234, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %233, i8* %235
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# ret i32 1
	movq	$1, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_put_buf_callback
_mz_zip_writer_add_put_buf_callback:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rbx
	popq	%r10
	popq	%r11
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %6
	movq	%r10, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %7
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %9 = load i8*, i8** %7
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %9, i8** %8
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %10 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %11 = getelementptr %struct.mz_zip_writer_add_state, i8* %10, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %12 = load i8*, i8** %11
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = getelementptr %struct.mz_zip_archive, i8* %12, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %14 = load i8*, i8** %13
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %15 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = getelementptr %struct.mz_zip_writer_add_state, i8* %15, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %17 = load i8*, i8** %16
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = getelementptr %struct.mz_zip_archive, i8* %17, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %19 = load i8*, i8** %18
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %20 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %21 = getelementptr %struct.mz_zip_writer_add_state, i8* %20, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %22 = load i64, i64* %21
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %23 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %24 = load i32, i32* %6
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %25 = sext i32 %24 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %26 = call i64 %14 (i8* %19, i64 %22, i8* %23, i64 %25)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %27 = trunc i64 %26 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %28 = load i32, i32* %6
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %29 = icmp ne i32 %27, %28
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %29, label %30, label %31
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_put_buf_callback31
	jmp	mz_zip_writer_add_put_buf_callback30
	.text
mz_zip_writer_add_put_buf_callback30:
	# store i32 0, i32* %4
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %44
	jmp	mz_zip_writer_add_put_buf_callback44
	.text
mz_zip_writer_add_put_buf_callback31:
	# %32 = load i32, i32* %6
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %33 = sext i32 %32 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %34 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %35 = getelementptr %struct.mz_zip_writer_add_state, i8* %34, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %36 = load i64, i64* %35
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %37 = add i64 %36, %33
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %37, i64* %35
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %38 = load i32, i32* %6
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %39 = sext i32 %38 to i64
	movq	%rdx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %40 = load i8*, i8** %8
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = getelementptr %struct.mz_zip_writer_add_state, i8* %40, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %42 = load i64, i64* %41
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %43 = add i64 %42, %39
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %43, i64* %41
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %4
	movq	$1, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %44
	jmp	mz_zip_writer_add_put_buf_callback44
	.text
mz_zip_writer_add_put_buf_callback44:
	# %45 = load i32, i32* %4
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %45
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_to_central_dir
_mz_zip_writer_add_to_central_dir:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$888, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	pushq	40(%rbp)
	pushq	48(%rbp)
	pushq	56(%rbp)
	pushq	64(%rbp)
	pushq	72(%rbp)
	pushq	80(%rbp)
	pushq	88(%rbp)
	pushq	96(%rbp)
	pushq	104(%rbp)
	pushq	112(%rbp)
	popq	-136(%rbp)
	popq	-128(%rbp)
	popq	-120(%rbp)
	popq	-112(%rbp)
	popq	-104(%rbp)
	popq	-96(%rbp)
	popq	-88(%rbp)
	popq	-80(%rbp)
	popq	-72(%rbp)
	popq	-64(%rbp)
	popq	-56(%rbp)
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %22 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -200(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %28 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -216(%rbp)
	# %29 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %31 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -248(%rbp)
	# %33 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %34 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -264(%rbp)
	# %35 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -280(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %37 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -296(%rbp)
	# %38 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %39 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -312(%rbp)
	# %40 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %42 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -336(%rbp)
	# %43 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -344(%rbp)
	# %44 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -360(%rbp)
	# %46 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -368(%rbp)
	# %47 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -376(%rbp)
	# %48 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -384(%rbp)
	# %49 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -392(%rbp)
	# %50 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -400(%rbp)
	# %51 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -408(%rbp)
	# %52 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -416(%rbp)
	# %53 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -424(%rbp)
	# %54 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -432(%rbp)
	# %55 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -440(%rbp)
	# %56 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -448(%rbp)
	# %57 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -456(%rbp)
	# %58 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -464(%rbp)
	# %59 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -472(%rbp)
	# %60 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -480(%rbp)
	# %61 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -488(%rbp)
	# %62 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -496(%rbp)
	# %63 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -504(%rbp)
	# %64 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -512(%rbp)
	# %65 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -520(%rbp)
	# %66 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -528(%rbp)
	# %67 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -536(%rbp)
	# %68 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -544(%rbp)
	# %69 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -552(%rbp)
	# %70 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -560(%rbp)
	# %71 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -568(%rbp)
	# %72 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -576(%rbp)
	# %73 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -584(%rbp)
	# %74 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -592(%rbp)
	# %75 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -600(%rbp)
	# %76 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -608(%rbp)
	# %77 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -616(%rbp)
	# %78 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -624(%rbp)
	# %79 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -632(%rbp)
	# %80 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -640(%rbp)
	# %81 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -648(%rbp)
	# %82 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -656(%rbp)
	# %83 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -664(%rbp)
	# %84 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -672(%rbp)
	# %85 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -680(%rbp)
	# %86 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -688(%rbp)
	# %87 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -696(%rbp)
	# %88 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -704(%rbp)
	# %89 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -712(%rbp)
	# %90 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %91 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %92 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %93 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %94 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -720(%rbp)
	# %95 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -728(%rbp)
	# %96 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -736(%rbp)
	# %97 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -744(%rbp)
	# %98 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -752(%rbp)
	# %99 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -760(%rbp)
	# %100 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -768(%rbp)
	# %101 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -776(%rbp)
	# %102 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -784(%rbp)
	# %103 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -792(%rbp)
	# %104 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -800(%rbp)
	# %105 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -808(%rbp)
	# %106 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %107 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %108 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %109 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r8
	# %110 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %rdi
	# %111 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %rsi
	# %112 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -272(%rbp)
	# %113 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -816(%rbp)
	# %114 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -824(%rbp)
	# %115 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -832(%rbp)
	# %116 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -840(%rbp)
	# %117 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -848(%rbp)
	# %118 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -856(%rbp)
	# %119 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -864(%rbp)
	# %120 = alloca [46 x i8]
	subq	$46, %rsp
	movq	%rsp, -872(%rbp)
	# store i8* %0, i8** %99
	movq	-8(%rbp), %rax
	movq	-760(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %100
	movq	-16(%rbp), %rax
	movq	-768(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %2, i16* %101
	movq	-24(%rbp), %rax
	movq	-776(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %102
	movq	%rdx, %rax
	movq	-784(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %4, i16* %103
	movq	-32(%rbp), %rax
	movq	-792(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %5, i8** %104
	movq	-40(%rbp), %rax
	movq	-800(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %6, i16* %105
	movq	-48(%rbp), %rax
	movq	-808(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %7, i64* %106
	movq	-56(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i64 %8, i64* %107
	movq	-64(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %9, i32* %108
	movq	-72(%rbp), %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# store i16 %10, i16* %109
	movq	-80(%rbp), %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i16 %11, i16* %110
	movq	-88(%rbp), %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i16 %12, i16* %111
	movq	-96(%rbp), %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i16 %13, i16* %112
	movq	-104(%rbp), %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %14, i64* %113
	movq	-112(%rbp), %rax
	movq	-816(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %15, i32* %114
	movq	-120(%rbp), %rax
	movq	-824(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %16, i8** %115
	movq	-128(%rbp), %rax
	movq	-832(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %17, i32* %116
	movq	-136(%rbp), %rax
	movq	-840(%rbp), %rcx
	movl	%eax, (%rcx)
	# %121 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %122 = getelementptr %struct.mz_zip_archive, i8* %121, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %123 = load i8*, i8** %122
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %123, i8** %117
	movq	%rdx, %rax
	movq	-848(%rbp), %rcx
	movq	%rax, (%rcx)
	# %124 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = getelementptr %struct.mz_zip_internal_state_tag, i8* %124, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %126 = getelementptr %struct.mz_zip_array, i8* %125, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %127 = load i64, i64* %126
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %128 = trunc i64 %127 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %128, i32* %118
	movq	%rdx, %rax
	movq	-856(%rbp), %rcx
	movl	%eax, (%rcx)
	# %129 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %130 = getelementptr %struct.mz_zip_internal_state_tag, i8* %129, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %131 = getelementptr %struct.mz_zip_array, i8* %130, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %132 = load i64, i64* %131
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %132, i64* %119
	movq	%rdx, %rax
	movq	-864(%rbp), %rcx
	movq	%rax, (%rcx)
	# %133 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %134 = getelementptr %struct.mz_zip_archive, i8* %133, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %135 = load i8*, i8** %134
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %136 = getelementptr %struct.mz_zip_internal_state_tag, i8* %135, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %137 = load i32, i32* %136
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %138 = icmp ne i32 %137, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %138, label %152, label %139
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir139
	jmp	mz_zip_writer_add_to_central_dir152
	.text
mz_zip_writer_add_to_central_dir139:
	# %140 = load i64, i64* %113
	movq	-816(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %141 = icmp ugt i64 %140, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %141, label %142, label %151
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir151
	jmp	mz_zip_writer_add_to_central_dir142
	.text
mz_zip_writer_add_to_central_dir142:
	# %143 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %143, i8** %90
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i32 3, i32* %91
	movq	$3, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %144 = load i8*, i8** %90
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %145 = icmp ne i8* %144, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %145, label %146, label %150
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir150
	jmp	mz_zip_writer_add_to_central_dir146
	.text
mz_zip_writer_add_to_central_dir146:
	# %147 = load i32, i32* %91
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %148 = load i8*, i8** %90
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %149 = getelementptr %struct.mz_zip_archive, i8* %148, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %147, i32* %149
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %150
	jmp	mz_zip_writer_add_to_central_dir150
	.text
mz_zip_writer_add_to_central_dir150:
	# store i32 0, i32* %98
	movq	$0, %rax
	movq	-752(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %671
	jmp	mz_zip_writer_add_to_central_dir671
	.text
mz_zip_writer_add_to_central_dir151:
	# br label %152
	jmp	mz_zip_writer_add_to_central_dir152
	.text
mz_zip_writer_add_to_central_dir152:
	# %153 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %154 = getelementptr %struct.mz_zip_internal_state_tag, i8* %153, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %155 = getelementptr %struct.mz_zip_array, i8* %154, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %156 = load i64, i64* %155
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %157 = add i64 %156, 46
	movq	%rdx, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %158 = load i16, i16* %101
	movq	-776(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %159 = zext i16 %158 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %160 = add i64 %157, %159
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %161 = load i16, i16* %103
	movq	-792(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %162 = zext i16 %161 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %163 = add i64 %160, %162
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %164 = load i32, i32* %116
	movq	-840(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %165 = zext i32 %164 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %166 = add i64 %163, %165
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %167 = load i16, i16* %105
	movq	-808(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %168 = zext i16 %167 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %169 = add i64 %166, %168
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %170 = icmp uge i64 %169, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %170, label %171, label %180
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir180
	jmp	mz_zip_writer_add_to_central_dir171
	.text
mz_zip_writer_add_to_central_dir171:
	# %172 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %172, i8** %92
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 15, i32* %93
	movq	$15, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %173 = load i8*, i8** %92
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %174 = icmp ne i8* %173, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %174, label %175, label %179
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir179
	jmp	mz_zip_writer_add_to_central_dir175
	.text
mz_zip_writer_add_to_central_dir175:
	# %176 = load i32, i32* %93
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %177 = load i8*, i8** %92
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %178 = getelementptr %struct.mz_zip_archive, i8* %177, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %176, i32* %178
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %179
	jmp	mz_zip_writer_add_to_central_dir179
	.text
mz_zip_writer_add_to_central_dir179:
	# store i32 0, i32* %98
	movq	$0, %rax
	movq	-752(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %671
	jmp	mz_zip_writer_add_to_central_dir671
	.text
mz_zip_writer_add_to_central_dir180:
	# %181 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -880(%rbp)
	# %182 = getelementptr [46 x i8], i8* %120, i64 0, i64 0
	movq	-872(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, -888(%rbp)
	# %183 = load i16, i16* %101
	movq	-776(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r15
	movw	%ax, %r15w
	# %184 = load i16, i16* %103
	movq	-792(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %185 = zext i16 %184 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %186 = load i32, i32* %116
	movq	-840(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %187 = add i32 %185, %186
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %188 = trunc i32 %187 to i16
	movq	%rdx, %rax
	movq	$0, %r14
	movw	%ax, %r14w
	# %189 = load i16, i16* %105
	movq	-808(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r13
	movw	%ax, %r13w
	# %190 = load i64, i64* %106
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %191 = load i64, i64* %107
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %192 = load i32, i32* %108
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %193 = load i16, i16* %109
	movq	%r8, %rax
	movw	(%rax), %ax
	movq	$0, %r9
	movw	%ax, %r9w
	# %194 = load i16, i16* %110
	movq	%rdi, %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %195 = load i16, i16* %111
	movq	%rsi, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %196 = load i16, i16* %112
	movq	-272(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %197 = load i64, i64* %113
	movq	-816(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %198 = load i32, i32* %114
	movq	-824(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %199 = call i32 @mz_zip_writer_create_central_dir_header (i8* %181, i8* %182, i16 %183, i16 %188, i16 %189, i64 %190, i64 %191, i32 %192, i16 %193, i16 %194, i16 %195, i16 %196, i64 %197, i32 %198)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	-880(%rbp), %rax
	pushq	%rax
	movq	-888(%rbp), %rax
	pushq	%rax
	movq	%r15, %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	80(%rbp)
	popq	72(%rbp)
	popq	64(%rbp)
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_central_dir_header
	addq	$64, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %200 = icmp ne i32 %199, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %200, label %210, label %201
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir201
	jmp	mz_zip_writer_add_to_central_dir210
	.text
mz_zip_writer_add_to_central_dir201:
	# %202 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %202, i8** %94
	movq	%rdx, %rax
	movq	-720(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 27, i32* %95
	movq	$27, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# %203 = load i8*, i8** %94
	movq	-720(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %204 = icmp ne i8* %203, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %204, label %205, label %209
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir209
	jmp	mz_zip_writer_add_to_central_dir205
	.text
mz_zip_writer_add_to_central_dir205:
	# %206 = load i32, i32* %95
	movq	-728(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %207 = load i8*, i8** %94
	movq	-720(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %208 = getelementptr %struct.mz_zip_archive, i8* %207, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %206, i32* %208
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %209
	jmp	mz_zip_writer_add_to_central_dir209
	.text
mz_zip_writer_add_to_central_dir209:
	# store i32 0, i32* %98
	movq	$0, %rax
	movq	-752(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %671
	jmp	mz_zip_writer_add_to_central_dir671
	.text
mz_zip_writer_add_to_central_dir210:
	# %211 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %212 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %213 = getelementptr %struct.mz_zip_internal_state_tag, i8* %212, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %214 = getelementptr [46 x i8], i8* %120, i64 0, i64 0
	movq	-872(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %211, i8** %25
	movq	%rsi, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %213, i8** %26
	movq	%rbx, %rax
	movq	-200(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %214, i8** %27
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 46, i64* %28
	movq	$46, %rax
	movq	-216(%rbp), %rcx
	movq	%rax, (%rcx)
	# %215 = load i8*, i8** %26
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %216 = getelementptr %struct.mz_zip_array, i8* %215, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %217 = load i64, i64* %216
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %217, i64* %29
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# %218 = load i8*, i8** %25
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %219 = load i8*, i8** %26
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %220 = load i64, i64* %29
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %221 = load i64, i64* %28
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %222 = add i64 %220, %221
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %218, i8** %20
	movq	%rdi, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %219, i8** %21
	movq	%rsi, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %222, i64* %22
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %23
	movq	$1, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# %223 = load i64, i64* %22
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %224 = load i8*, i8** %21
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = getelementptr %struct.mz_zip_array, i8* %224, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %226 = load i64, i64* %225
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %227 = icmp ugt i64 %223, %226
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %227, label %228, label %237
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir237
	jmp	mz_zip_writer_add_to_central_dir228
	.text
mz_zip_writer_add_to_central_dir228:
	# %229 = load i8*, i8** %20
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %230 = load i8*, i8** %21
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %231 = load i64, i64* %22
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %232 = load i32, i32* %23
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %233 = call i32 @mz_zip_array_ensure_capacity (i8* %229, i8* %230, i64 %231, i32 %232)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %234 = icmp ne i32 %233, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %234, label %236, label %235
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir235
	jmp	mz_zip_writer_add_to_central_dir236
	.text
mz_zip_writer_add_to_central_dir235:
	# store i32 0, i32* %19
	movq	$0, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %241
	jmp	mz_zip_writer_add_to_central_dir241
	.text
mz_zip_writer_add_to_central_dir236:
	# br label %237
	jmp	mz_zip_writer_add_to_central_dir237
	.text
mz_zip_writer_add_to_central_dir237:
	# %238 = load i64, i64* %22
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %239 = load i8*, i8** %21
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %240 = getelementptr %struct.mz_zip_array, i8* %239, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %238, i64* %240
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %19
	movq	$1, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %241
	jmp	mz_zip_writer_add_to_central_dir241
	.text
mz_zip_writer_add_to_central_dir241:
	# %242 = load i32, i32* %19
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %243 = icmp ne i32 %242, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %243, label %245, label %244
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir244
	jmp	mz_zip_writer_add_to_central_dir245
	.text
mz_zip_writer_add_to_central_dir244:
	# store i32 0, i32* %24
	movq	$0, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %277
	jmp	mz_zip_writer_add_to_central_dir277
	.text
mz_zip_writer_add_to_central_dir245:
	# %246 = load i64, i64* %28
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %247 = icmp ugt i64 %246, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %247, label %248, label %276
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir276
	jmp	mz_zip_writer_add_to_central_dir248
	.text
mz_zip_writer_add_to_central_dir248:
	# %249 = load i8*, i8** %26
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %250 = load i8*, i8** %249
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %251 = load i64, i64* %29
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %252 = load i8*, i8** %26
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %253 = getelementptr %struct.mz_zip_array, i8* %252, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %254 = load i32, i32* %253
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %255 = zext i32 %254 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %256 = mul i64 %251, %255
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %257 = getelementptr i8, i8* %250, i64 %256
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %258 = load i8*, i8** %27
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %259 = load i64, i64* %28
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %260 = load i8*, i8** %26
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %261 = getelementptr %struct.mz_zip_array, i8* %260, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %262 = load i32, i32* %261
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %263 = zext i32 %262 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %264 = mul i64 %259, %263
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %265 = load i8*, i8** %26
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %266 = load i8*, i8** %265
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %267 = load i64, i64* %29
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %268 = load i8*, i8** %26
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %269 = getelementptr %struct.mz_zip_array, i8* %268, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %270 = load i32, i32* %269
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %271 = zext i32 %270 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %272 = mul i64 %267, %271
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %273 = getelementptr i8, i8* %266, i64 %272
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %274 = call i64 @llvm.objectsize.i64.p0 (i8* %273, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %275 = call i8* @__memcpy_chk (i8* %257, i8* %258, i64 %264, i64 %274)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %276
	jmp	mz_zip_writer_add_to_central_dir276
	.text
mz_zip_writer_add_to_central_dir276:
	# store i32 1, i32* %24
	movq	$1, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %277
	jmp	mz_zip_writer_add_to_central_dir277
	.text
mz_zip_writer_add_to_central_dir277:
	# %278 = load i32, i32* %24
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %279 = icmp ne i32 %278, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %279, label %280, label %637
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir637
	jmp	mz_zip_writer_add_to_central_dir280
	.text
mz_zip_writer_add_to_central_dir280:
	# %281 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %282 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %283 = getelementptr %struct.mz_zip_internal_state_tag, i8* %282, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %284 = load i8*, i8** %100
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %285 = load i16, i16* %101
	movq	-776(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %286 = zext i16 %285 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i8* %281, i8** %36
	movq	%rdi, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %283, i8** %37
	movq	%rsi, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %284, i8** %38
	movq	%rbx, %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %286, i64* %39
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %287 = load i8*, i8** %37
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %288 = getelementptr %struct.mz_zip_array, i8* %287, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %289 = load i64, i64* %288
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %289, i64* %40
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# %290 = load i8*, i8** %36
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %291 = load i8*, i8** %37
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %292 = load i64, i64* %40
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %293 = load i64, i64* %39
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %294 = add i64 %292, %293
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %290, i8** %31
	movq	%rdi, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %291, i8** %32
	movq	%rsi, %rax
	movq	-248(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %294, i64* %33
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %34
	movq	$1, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# %295 = load i64, i64* %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %296 = load i8*, i8** %32
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %297 = getelementptr %struct.mz_zip_array, i8* %296, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %298 = load i64, i64* %297
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %299 = icmp ugt i64 %295, %298
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %299, label %300, label %309
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir309
	jmp	mz_zip_writer_add_to_central_dir300
	.text
mz_zip_writer_add_to_central_dir300:
	# %301 = load i8*, i8** %31
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %302 = load i8*, i8** %32
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %303 = load i64, i64* %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %304 = load i32, i32* %34
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %305 = call i32 @mz_zip_array_ensure_capacity (i8* %301, i8* %302, i64 %303, i32 %304)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %306 = icmp ne i32 %305, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %306, label %308, label %307
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir307
	jmp	mz_zip_writer_add_to_central_dir308
	.text
mz_zip_writer_add_to_central_dir307:
	# store i32 0, i32* %30
	movq	$0, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %313
	jmp	mz_zip_writer_add_to_central_dir313
	.text
mz_zip_writer_add_to_central_dir308:
	# br label %309
	jmp	mz_zip_writer_add_to_central_dir309
	.text
mz_zip_writer_add_to_central_dir309:
	# %310 = load i64, i64* %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %311 = load i8*, i8** %32
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %312 = getelementptr %struct.mz_zip_array, i8* %311, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %310, i64* %312
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %30
	movq	$1, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %313
	jmp	mz_zip_writer_add_to_central_dir313
	.text
mz_zip_writer_add_to_central_dir313:
	# %314 = load i32, i32* %30
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %315 = icmp ne i32 %314, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %315, label %317, label %316
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir316
	jmp	mz_zip_writer_add_to_central_dir317
	.text
mz_zip_writer_add_to_central_dir316:
	# store i32 0, i32* %35
	movq	$0, %rax
	movq	-280(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %349
	jmp	mz_zip_writer_add_to_central_dir349
	.text
mz_zip_writer_add_to_central_dir317:
	# %318 = load i64, i64* %39
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %319 = icmp ugt i64 %318, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %319, label %320, label %348
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir348
	jmp	mz_zip_writer_add_to_central_dir320
	.text
mz_zip_writer_add_to_central_dir320:
	# %321 = load i8*, i8** %37
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %322 = load i8*, i8** %321
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %323 = load i64, i64* %40
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %324 = load i8*, i8** %37
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %325 = getelementptr %struct.mz_zip_array, i8* %324, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %326 = load i32, i32* %325
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %327 = zext i32 %326 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %328 = mul i64 %323, %327
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %329 = getelementptr i8, i8* %322, i64 %328
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %330 = load i8*, i8** %38
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %331 = load i64, i64* %39
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %332 = load i8*, i8** %37
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %333 = getelementptr %struct.mz_zip_array, i8* %332, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %334 = load i32, i32* %333
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %335 = zext i32 %334 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %336 = mul i64 %331, %335
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rsi
	# %337 = load i8*, i8** %37
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %338 = load i8*, i8** %337
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %339 = load i64, i64* %40
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %340 = load i8*, i8** %37
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %341 = getelementptr %struct.mz_zip_array, i8* %340, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %342 = load i32, i32* %341
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %343 = zext i32 %342 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %344 = mul i64 %339, %343
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %345 = getelementptr i8, i8* %338, i64 %344
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %346 = call i64 @llvm.objectsize.i64.p0 (i8* %345, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %347 = call i8* @__memcpy_chk (i8* %329, i8* %330, i64 %336, i64 %346)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %348
	jmp	mz_zip_writer_add_to_central_dir348
	.text
mz_zip_writer_add_to_central_dir348:
	# store i32 1, i32* %35
	movq	$1, %rax
	movq	-280(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %349
	jmp	mz_zip_writer_add_to_central_dir349
	.text
mz_zip_writer_add_to_central_dir349:
	# %350 = load i32, i32* %35
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %351 = icmp ne i32 %350, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %351, label %352, label %637
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir637
	jmp	mz_zip_writer_add_to_central_dir352
	.text
mz_zip_writer_add_to_central_dir352:
	# %353 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %354 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %355 = getelementptr %struct.mz_zip_internal_state_tag, i8* %354, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %356 = load i8*, i8** %102
	movq	-784(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %357 = load i16, i16* %103
	movq	-792(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %358 = zext i16 %357 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i8* %353, i8** %47
	movq	%rdi, %rax
	movq	-376(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %355, i8** %48
	movq	%rsi, %rax
	movq	-384(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %356, i8** %49
	movq	%rbx, %rax
	movq	-392(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %358, i64* %50
	movq	%rdx, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# %359 = load i8*, i8** %48
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %360 = getelementptr %struct.mz_zip_array, i8* %359, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %361 = load i64, i64* %360
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %361, i64* %51
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movq	%rax, (%rcx)
	# %362 = load i8*, i8** %47
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %363 = load i8*, i8** %48
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %364 = load i64, i64* %51
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %365 = load i64, i64* %50
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %366 = add i64 %364, %365
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %362, i8** %42
	movq	%rdi, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %363, i8** %43
	movq	%rsi, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %366, i64* %44
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %45
	movq	$1, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %367 = load i64, i64* %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %368 = load i8*, i8** %43
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %369 = getelementptr %struct.mz_zip_array, i8* %368, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %370 = load i64, i64* %369
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %371 = icmp ugt i64 %367, %370
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %371, label %372, label %381
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir381
	jmp	mz_zip_writer_add_to_central_dir372
	.text
mz_zip_writer_add_to_central_dir372:
	# %373 = load i8*, i8** %42
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %374 = load i8*, i8** %43
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %375 = load i64, i64* %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %376 = load i32, i32* %45
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %377 = call i32 @mz_zip_array_ensure_capacity (i8* %373, i8* %374, i64 %375, i32 %376)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %378 = icmp ne i32 %377, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %378, label %380, label %379
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir379
	jmp	mz_zip_writer_add_to_central_dir380
	.text
mz_zip_writer_add_to_central_dir379:
	# store i32 0, i32* %41
	movq	$0, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %385
	jmp	mz_zip_writer_add_to_central_dir385
	.text
mz_zip_writer_add_to_central_dir380:
	# br label %381
	jmp	mz_zip_writer_add_to_central_dir381
	.text
mz_zip_writer_add_to_central_dir381:
	# %382 = load i64, i64* %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %383 = load i8*, i8** %43
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %384 = getelementptr %struct.mz_zip_array, i8* %383, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %382, i64* %384
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %41
	movq	$1, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %385
	jmp	mz_zip_writer_add_to_central_dir385
	.text
mz_zip_writer_add_to_central_dir385:
	# %386 = load i32, i32* %41
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %387 = icmp ne i32 %386, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %387, label %389, label %388
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir388
	jmp	mz_zip_writer_add_to_central_dir389
	.text
mz_zip_writer_add_to_central_dir388:
	# store i32 0, i32* %46
	movq	$0, %rax
	movq	-368(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %421
	jmp	mz_zip_writer_add_to_central_dir421
	.text
mz_zip_writer_add_to_central_dir389:
	# %390 = load i64, i64* %50
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %391 = icmp ugt i64 %390, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %391, label %392, label %420
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir420
	jmp	mz_zip_writer_add_to_central_dir392
	.text
mz_zip_writer_add_to_central_dir392:
	# %393 = load i8*, i8** %48
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %394 = load i8*, i8** %393
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %395 = load i64, i64* %51
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %396 = load i8*, i8** %48
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %397 = getelementptr %struct.mz_zip_array, i8* %396, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %398 = load i32, i32* %397
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %399 = zext i32 %398 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %400 = mul i64 %395, %399
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %401 = getelementptr i8, i8* %394, i64 %400
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %402 = load i8*, i8** %49
	movq	-392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %403 = load i64, i64* %50
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %404 = load i8*, i8** %48
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %405 = getelementptr %struct.mz_zip_array, i8* %404, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %406 = load i32, i32* %405
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %407 = zext i32 %406 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %408 = mul i64 %403, %407
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rsi
	# %409 = load i8*, i8** %48
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %410 = load i8*, i8** %409
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %411 = load i64, i64* %51
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %412 = load i8*, i8** %48
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %413 = getelementptr %struct.mz_zip_array, i8* %412, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %414 = load i32, i32* %413
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %415 = zext i32 %414 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %416 = mul i64 %411, %415
	movq	%rdi, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %417 = getelementptr i8, i8* %410, i64 %416
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %418 = call i64 @llvm.objectsize.i64.p0 (i8* %417, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %419 = call i8* @__memcpy_chk (i8* %401, i8* %402, i64 %408, i64 %418)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %420
	jmp	mz_zip_writer_add_to_central_dir420
	.text
mz_zip_writer_add_to_central_dir420:
	# store i32 1, i32* %46
	movq	$1, %rax
	movq	-368(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %421
	jmp	mz_zip_writer_add_to_central_dir421
	.text
mz_zip_writer_add_to_central_dir421:
	# %422 = load i32, i32* %46
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %423 = icmp ne i32 %422, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %423, label %424, label %637
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir637
	jmp	mz_zip_writer_add_to_central_dir424
	.text
mz_zip_writer_add_to_central_dir424:
	# %425 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %426 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %427 = getelementptr %struct.mz_zip_internal_state_tag, i8* %426, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %428 = load i8*, i8** %115
	movq	-832(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %429 = load i32, i32* %116
	movq	-840(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %430 = zext i32 %429 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %425, i8** %58
	movq	%rdi, %rax
	movq	-464(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %427, i8** %59
	movq	%rsi, %rax
	movq	-472(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %428, i8** %60
	movq	%rbx, %rax
	movq	-480(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %430, i64* %61
	movq	%rdx, %rax
	movq	-488(%rbp), %rcx
	movq	%rax, (%rcx)
	# %431 = load i8*, i8** %59
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %432 = getelementptr %struct.mz_zip_array, i8* %431, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %433 = load i64, i64* %432
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %433, i64* %62
	movq	%rdx, %rax
	movq	-496(%rbp), %rcx
	movq	%rax, (%rcx)
	# %434 = load i8*, i8** %58
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %435 = load i8*, i8** %59
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %436 = load i64, i64* %62
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %437 = load i64, i64* %61
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %438 = add i64 %436, %437
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %434, i8** %53
	movq	%rsi, %rax
	movq	-424(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %435, i8** %54
	movq	%rbx, %rax
	movq	-432(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %438, i64* %55
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %56
	movq	$1, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# %439 = load i64, i64* %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %440 = load i8*, i8** %54
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %441 = getelementptr %struct.mz_zip_array, i8* %440, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %442 = load i64, i64* %441
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %443 = icmp ugt i64 %439, %442
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %443, label %444, label %453
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir453
	jmp	mz_zip_writer_add_to_central_dir444
	.text
mz_zip_writer_add_to_central_dir444:
	# %445 = load i8*, i8** %53
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %446 = load i8*, i8** %54
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %447 = load i64, i64* %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %448 = load i32, i32* %56
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %449 = call i32 @mz_zip_array_ensure_capacity (i8* %445, i8* %446, i64 %447, i32 %448)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %450 = icmp ne i32 %449, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %450, label %452, label %451
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir451
	jmp	mz_zip_writer_add_to_central_dir452
	.text
mz_zip_writer_add_to_central_dir451:
	# store i32 0, i32* %52
	movq	$0, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %457
	jmp	mz_zip_writer_add_to_central_dir457
	.text
mz_zip_writer_add_to_central_dir452:
	# br label %453
	jmp	mz_zip_writer_add_to_central_dir453
	.text
mz_zip_writer_add_to_central_dir453:
	# %454 = load i64, i64* %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %455 = load i8*, i8** %54
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %456 = getelementptr %struct.mz_zip_array, i8* %455, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %454, i64* %456
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %52
	movq	$1, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %457
	jmp	mz_zip_writer_add_to_central_dir457
	.text
mz_zip_writer_add_to_central_dir457:
	# %458 = load i32, i32* %52
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %459 = icmp ne i32 %458, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %459, label %461, label %460
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir460
	jmp	mz_zip_writer_add_to_central_dir461
	.text
mz_zip_writer_add_to_central_dir460:
	# store i32 0, i32* %57
	movq	$0, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %493
	jmp	mz_zip_writer_add_to_central_dir493
	.text
mz_zip_writer_add_to_central_dir461:
	# %462 = load i64, i64* %61
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %463 = icmp ugt i64 %462, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %463, label %464, label %492
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir492
	jmp	mz_zip_writer_add_to_central_dir464
	.text
mz_zip_writer_add_to_central_dir464:
	# %465 = load i8*, i8** %59
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %466 = load i8*, i8** %465
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %467 = load i64, i64* %62
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %468 = load i8*, i8** %59
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %469 = getelementptr %struct.mz_zip_array, i8* %468, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %470 = load i32, i32* %469
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %471 = zext i32 %470 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %472 = mul i64 %467, %471
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %473 = getelementptr i8, i8* %466, i64 %472
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %474 = load i8*, i8** %60
	movq	-480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %475 = load i64, i64* %61
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %476 = load i8*, i8** %59
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %477 = getelementptr %struct.mz_zip_array, i8* %476, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %478 = load i32, i32* %477
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %479 = zext i32 %478 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %480 = mul i64 %475, %479
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %r9
	# %481 = load i8*, i8** %59
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %482 = load i8*, i8** %481
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %483 = load i64, i64* %62
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %484 = load i8*, i8** %59
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %485 = getelementptr %struct.mz_zip_array, i8* %484, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %486 = load i32, i32* %485
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %487 = zext i32 %486 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %488 = mul i64 %483, %487
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %489 = getelementptr i8, i8* %482, i64 %488
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %490 = call i64 @llvm.objectsize.i64.p0 (i8* %489, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %491 = call i8* @__memcpy_chk (i8* %473, i8* %474, i64 %480, i64 %490)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %492
	jmp	mz_zip_writer_add_to_central_dir492
	.text
mz_zip_writer_add_to_central_dir492:
	# store i32 1, i32* %57
	movq	$1, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %493
	jmp	mz_zip_writer_add_to_central_dir493
	.text
mz_zip_writer_add_to_central_dir493:
	# %494 = load i32, i32* %57
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %495 = icmp ne i32 %494, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %495, label %496, label %637
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir637
	jmp	mz_zip_writer_add_to_central_dir496
	.text
mz_zip_writer_add_to_central_dir496:
	# %497 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %498 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %499 = getelementptr %struct.mz_zip_internal_state_tag, i8* %498, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %500 = load i8*, i8** %104
	movq	-800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %501 = load i16, i16* %105
	movq	-808(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %502 = zext i16 %501 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i8* %497, i8** %69
	movq	%rdi, %rax
	movq	-552(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %499, i8** %70
	movq	%rsi, %rax
	movq	-560(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %500, i8** %71
	movq	%rbx, %rax
	movq	-568(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %502, i64* %72
	movq	%rdx, %rax
	movq	-576(%rbp), %rcx
	movq	%rax, (%rcx)
	# %503 = load i8*, i8** %70
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %504 = getelementptr %struct.mz_zip_array, i8* %503, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %505 = load i64, i64* %504
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %505, i64* %73
	movq	%rdx, %rax
	movq	-584(%rbp), %rcx
	movq	%rax, (%rcx)
	# %506 = load i8*, i8** %69
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %507 = load i8*, i8** %70
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %508 = load i64, i64* %73
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %509 = load i64, i64* %72
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %510 = add i64 %508, %509
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %506, i8** %64
	movq	%rsi, %rax
	movq	-512(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %507, i8** %65
	movq	%rdi, %rax
	movq	-520(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %510, i64* %66
	movq	%rdx, %rax
	movq	-528(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %67
	movq	$1, %rax
	movq	-536(%rbp), %rcx
	movl	%eax, (%rcx)
	# %511 = load i64, i64* %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %512 = load i8*, i8** %65
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %513 = getelementptr %struct.mz_zip_array, i8* %512, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %514 = load i64, i64* %513
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %515 = icmp ugt i64 %511, %514
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %515, label %516, label %525
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir525
	jmp	mz_zip_writer_add_to_central_dir516
	.text
mz_zip_writer_add_to_central_dir516:
	# %517 = load i8*, i8** %64
	movq	-512(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %518 = load i8*, i8** %65
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %519 = load i64, i64* %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %520 = load i32, i32* %67
	movq	-536(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %521 = call i32 @mz_zip_array_ensure_capacity (i8* %517, i8* %518, i64 %519, i32 %520)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %522 = icmp ne i32 %521, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %522, label %524, label %523
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir523
	jmp	mz_zip_writer_add_to_central_dir524
	.text
mz_zip_writer_add_to_central_dir523:
	# store i32 0, i32* %63
	movq	$0, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %529
	jmp	mz_zip_writer_add_to_central_dir529
	.text
mz_zip_writer_add_to_central_dir524:
	# br label %525
	jmp	mz_zip_writer_add_to_central_dir525
	.text
mz_zip_writer_add_to_central_dir525:
	# %526 = load i64, i64* %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %527 = load i8*, i8** %65
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %528 = getelementptr %struct.mz_zip_array, i8* %527, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %526, i64* %528
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %63
	movq	$1, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %529
	jmp	mz_zip_writer_add_to_central_dir529
	.text
mz_zip_writer_add_to_central_dir529:
	# %530 = load i32, i32* %63
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %531 = icmp ne i32 %530, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %531, label %533, label %532
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir532
	jmp	mz_zip_writer_add_to_central_dir533
	.text
mz_zip_writer_add_to_central_dir532:
	# store i32 0, i32* %68
	movq	$0, %rax
	movq	-544(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %565
	jmp	mz_zip_writer_add_to_central_dir565
	.text
mz_zip_writer_add_to_central_dir533:
	# %534 = load i64, i64* %72
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %535 = icmp ugt i64 %534, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %535, label %536, label %564
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir564
	jmp	mz_zip_writer_add_to_central_dir536
	.text
mz_zip_writer_add_to_central_dir536:
	# %537 = load i8*, i8** %70
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %538 = load i8*, i8** %537
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %539 = load i64, i64* %73
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %540 = load i8*, i8** %70
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %541 = getelementptr %struct.mz_zip_array, i8* %540, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %542 = load i32, i32* %541
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %543 = zext i32 %542 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %544 = mul i64 %539, %543
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %545 = getelementptr i8, i8* %538, i64 %544
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %546 = load i8*, i8** %71
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %547 = load i64, i64* %72
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %548 = load i8*, i8** %70
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %549 = getelementptr %struct.mz_zip_array, i8* %548, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %550 = load i32, i32* %549
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %551 = zext i32 %550 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %552 = mul i64 %547, %551
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rsi
	# %553 = load i8*, i8** %70
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %554 = load i8*, i8** %553
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %555 = load i64, i64* %73
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %556 = load i8*, i8** %70
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %557 = getelementptr %struct.mz_zip_array, i8* %556, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %558 = load i32, i32* %557
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %559 = zext i32 %558 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %560 = mul i64 %555, %559
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %561 = getelementptr i8, i8* %554, i64 %560
	movq	%rdi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %562 = call i64 @llvm.objectsize.i64.p0 (i8* %561, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %563 = call i8* @__memcpy_chk (i8* %545, i8* %546, i64 %552, i64 %562)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %564
	jmp	mz_zip_writer_add_to_central_dir564
	.text
mz_zip_writer_add_to_central_dir564:
	# store i32 1, i32* %68
	movq	$1, %rax
	movq	-544(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %565
	jmp	mz_zip_writer_add_to_central_dir565
	.text
mz_zip_writer_add_to_central_dir565:
	# %566 = load i32, i32* %68
	movq	-544(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %567 = icmp ne i32 %566, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %567, label %568, label %637
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir637
	jmp	mz_zip_writer_add_to_central_dir568
	.text
mz_zip_writer_add_to_central_dir568:
	# %569 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %570 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %571 = getelementptr %struct.mz_zip_internal_state_tag, i8* %570, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %569, i8** %80
	movq	%rbx, %rax
	movq	-640(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %571, i8** %81
	movq	%rdx, %rax
	movq	-648(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %118, i8** %82
	movq	-856(%rbp), %rax
	movq	-656(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 1, i64* %83
	movq	$1, %rax
	movq	-664(%rbp), %rcx
	movq	%rax, (%rcx)
	# %572 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %573 = getelementptr %struct.mz_zip_array, i8* %572, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %574 = load i64, i64* %573
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %574, i64* %84
	movq	%rdx, %rax
	movq	-672(%rbp), %rcx
	movq	%rax, (%rcx)
	# %575 = load i8*, i8** %80
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %576 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %577 = load i64, i64* %84
	movq	-672(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %578 = load i64, i64* %83
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %579 = add i64 %577, %578
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %575, i8** %75
	movq	%rbx, %rax
	movq	-600(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %576, i8** %76
	movq	%rdi, %rax
	movq	-608(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %579, i64* %77
	movq	%rdx, %rax
	movq	-616(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %78
	movq	$1, %rax
	movq	-624(%rbp), %rcx
	movl	%eax, (%rcx)
	# %580 = load i64, i64* %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %581 = load i8*, i8** %76
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %582 = getelementptr %struct.mz_zip_array, i8* %581, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %583 = load i64, i64* %582
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %584 = icmp ugt i64 %580, %583
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %584, label %585, label %594
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir594
	jmp	mz_zip_writer_add_to_central_dir585
	.text
mz_zip_writer_add_to_central_dir585:
	# %586 = load i8*, i8** %75
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %587 = load i8*, i8** %76
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %588 = load i64, i64* %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %589 = load i32, i32* %78
	movq	-624(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %590 = call i32 @mz_zip_array_ensure_capacity (i8* %586, i8* %587, i64 %588, i32 %589)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %591 = icmp ne i32 %590, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %591, label %593, label %592
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir592
	jmp	mz_zip_writer_add_to_central_dir593
	.text
mz_zip_writer_add_to_central_dir592:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %598
	jmp	mz_zip_writer_add_to_central_dir598
	.text
mz_zip_writer_add_to_central_dir593:
	# br label %594
	jmp	mz_zip_writer_add_to_central_dir594
	.text
mz_zip_writer_add_to_central_dir594:
	# %595 = load i64, i64* %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %596 = load i8*, i8** %76
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %597 = getelementptr %struct.mz_zip_array, i8* %596, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %595, i64* %597
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %74
	movq	$1, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %598
	jmp	mz_zip_writer_add_to_central_dir598
	.text
mz_zip_writer_add_to_central_dir598:
	# %599 = load i32, i32* %74
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %600 = icmp ne i32 %599, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %600, label %602, label %601
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir601
	jmp	mz_zip_writer_add_to_central_dir602
	.text
mz_zip_writer_add_to_central_dir601:
	# store i32 0, i32* %79
	movq	$0, %rax
	movq	-632(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %634
	jmp	mz_zip_writer_add_to_central_dir634
	.text
mz_zip_writer_add_to_central_dir602:
	# %603 = load i64, i64* %83
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %604 = icmp ugt i64 %603, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %604, label %605, label %633
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir633
	jmp	mz_zip_writer_add_to_central_dir605
	.text
mz_zip_writer_add_to_central_dir605:
	# %606 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %607 = load i8*, i8** %606
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %608 = load i64, i64* %84
	movq	-672(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %609 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %610 = getelementptr %struct.mz_zip_array, i8* %609, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %611 = load i32, i32* %610
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %612 = zext i32 %611 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %613 = mul i64 %608, %612
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %614 = getelementptr i8, i8* %607, i64 %613
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %615 = load i8*, i8** %82
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %616 = load i64, i64* %83
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %617 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %618 = getelementptr %struct.mz_zip_array, i8* %617, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %619 = load i32, i32* %618
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %620 = zext i32 %619 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %621 = mul i64 %616, %620
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rsi
	# %622 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %623 = load i8*, i8** %622
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %624 = load i64, i64* %84
	movq	-672(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %625 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %626 = getelementptr %struct.mz_zip_array, i8* %625, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %627 = load i32, i32* %626
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %628 = zext i32 %627 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %629 = mul i64 %624, %628
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %630 = getelementptr i8, i8* %623, i64 %629
	movq	%r8, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %631 = call i64 @llvm.objectsize.i64.p0 (i8* %630, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %632 = call i8* @__memcpy_chk (i8* %614, i8* %615, i64 %621, i64 %631)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %633
	jmp	mz_zip_writer_add_to_central_dir633
	.text
mz_zip_writer_add_to_central_dir633:
	# store i32 1, i32* %79
	movq	$1, %rax
	movq	-632(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %634
	jmp	mz_zip_writer_add_to_central_dir634
	.text
mz_zip_writer_add_to_central_dir634:
	# %635 = load i32, i32* %79
	movq	-632(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %636 = icmp ne i32 %635, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %636, label %670, label %637
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir637
	jmp	mz_zip_writer_add_to_central_dir670
	.text
mz_zip_writer_add_to_central_dir637:
	# %638 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %639 = load i8*, i8** %117
	movq	-848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %640 = getelementptr %struct.mz_zip_internal_state_tag, i8* %639, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %641 = load i64, i64* %119
	movq	-864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %638, i8** %86
	movq	%rdx, %rax
	movq	-688(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %640, i8** %87
	movq	%rbx, %rax
	movq	-696(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %641, i64* %88
	movq	%rsi, %rax
	movq	-704(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %89
	movq	$0, %rax
	movq	-712(%rbp), %rcx
	movl	%eax, (%rcx)
	# %642 = load i64, i64* %88
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %643 = load i8*, i8** %87
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %644 = getelementptr %struct.mz_zip_array, i8* %643, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %645 = load i64, i64* %644
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %646 = icmp ugt i64 %642, %645
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %646, label %647, label %656
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir656
	jmp	mz_zip_writer_add_to_central_dir647
	.text
mz_zip_writer_add_to_central_dir647:
	# %648 = load i8*, i8** %86
	movq	-688(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %649 = load i8*, i8** %87
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %650 = load i64, i64* %88
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %651 = load i32, i32* %89
	movq	-712(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %652 = call i32 @mz_zip_array_ensure_capacity (i8* %648, i8* %649, i64 %650, i32 %651)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %653 = icmp ne i32 %652, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %653, label %655, label %654
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir654
	jmp	mz_zip_writer_add_to_central_dir655
	.text
mz_zip_writer_add_to_central_dir654:
	# store i32 0, i32* %85
	movq	$0, %rax
	movq	-680(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %660
	jmp	mz_zip_writer_add_to_central_dir660
	.text
mz_zip_writer_add_to_central_dir655:
	# br label %656
	jmp	mz_zip_writer_add_to_central_dir656
	.text
mz_zip_writer_add_to_central_dir656:
	# %657 = load i64, i64* %88
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %658 = load i8*, i8** %87
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %659 = getelementptr %struct.mz_zip_array, i8* %658, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %657, i64* %659
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %85
	movq	$1, %rax
	movq	-680(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %660
	jmp	mz_zip_writer_add_to_central_dir660
	.text
mz_zip_writer_add_to_central_dir660:
	# %661 = load i32, i32* %85
	movq	-680(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %662 = load i8*, i8** %99
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %662, i8** %96
	movq	%rdx, %rax
	movq	-736(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %97
	movq	$16, %rax
	movq	-744(%rbp), %rcx
	movl	%eax, (%rcx)
	# %663 = load i8*, i8** %96
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %664 = icmp ne i8* %663, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %664, label %665, label %669
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_to_central_dir669
	jmp	mz_zip_writer_add_to_central_dir665
	.text
mz_zip_writer_add_to_central_dir665:
	# %666 = load i32, i32* %97
	movq	-744(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %667 = load i8*, i8** %96
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %668 = getelementptr %struct.mz_zip_archive, i8* %667, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %666, i32* %668
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %669
	jmp	mz_zip_writer_add_to_central_dir669
	.text
mz_zip_writer_add_to_central_dir669:
	# store i32 0, i32* %98
	movq	$0, %rax
	movq	-752(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %671
	jmp	mz_zip_writer_add_to_central_dir671
	.text
mz_zip_writer_add_to_central_dir670:
	# store i32 1, i32* %98
	movq	$1, %rax
	movq	-752(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %671
	jmp	mz_zip_writer_add_to_central_dir671
	.text
mz_zip_writer_add_to_central_dir671:
	# %672 = load i32, i32* %98
	movq	-752(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %672
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_read_buf_callback
_mz_zip_writer_add_read_buf_callback:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$1088, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	pushq	40(%rbp)
	pushq	48(%rbp)
	pushq	56(%rbp)
	pushq	64(%rbp)
	pushq	72(%rbp)
	popq	-96(%rbp)
	popq	-88(%rbp)
	popq	-80(%rbp)
	popq	-72(%rbp)
	popq	-64(%rbp)
	popq	-56(%rbp)
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %19 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -144(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -160(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %25 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -200(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %33 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -264(%rbp)
	# %34 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %35 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -288(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -296(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -304(%rbp)
	# %38 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -312(%rbp)
	# %39 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -320(%rbp)
	# %40 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -328(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -336(%rbp)
	# %42 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -344(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -352(%rbp)
	# %44 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -360(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -368(%rbp)
	# %46 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -376(%rbp)
	# %47 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -384(%rbp)
	# %48 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -392(%rbp)
	# %49 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -400(%rbp)
	# %50 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -408(%rbp)
	# %51 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -416(%rbp)
	# %52 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -424(%rbp)
	# %53 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -432(%rbp)
	# %54 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -440(%rbp)
	# %55 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -448(%rbp)
	# %56 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -456(%rbp)
	# %57 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -464(%rbp)
	# %58 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -472(%rbp)
	# %59 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -480(%rbp)
	# %60 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -488(%rbp)
	# %61 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -496(%rbp)
	# %62 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -504(%rbp)
	# %63 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -512(%rbp)
	# %64 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -520(%rbp)
	# %65 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -528(%rbp)
	# %66 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -536(%rbp)
	# %67 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -544(%rbp)
	# %68 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -552(%rbp)
	# %69 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -560(%rbp)
	# %70 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -568(%rbp)
	# %71 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -576(%rbp)
	# %72 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -584(%rbp)
	# %73 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -592(%rbp)
	# %74 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -600(%rbp)
	# %75 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -608(%rbp)
	# %76 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -616(%rbp)
	# %77 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -624(%rbp)
	# %78 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -632(%rbp)
	# %79 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -640(%rbp)
	# %80 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -648(%rbp)
	# %81 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -656(%rbp)
	# %82 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -664(%rbp)
	# %83 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -672(%rbp)
	# %84 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -680(%rbp)
	# %85 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -688(%rbp)
	# %86 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -696(%rbp)
	# %87 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -704(%rbp)
	# %88 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -712(%rbp)
	# %89 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -720(%rbp)
	# %90 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -728(%rbp)
	# %91 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -736(%rbp)
	# %92 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -744(%rbp)
	# %93 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -752(%rbp)
	# %94 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -760(%rbp)
	# %95 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -768(%rbp)
	# %96 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -776(%rbp)
	# %97 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -784(%rbp)
	# %98 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -792(%rbp)
	# %99 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -800(%rbp)
	# %100 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -808(%rbp)
	# %101 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -816(%rbp)
	# %102 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -824(%rbp)
	# %103 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -832(%rbp)
	# %104 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -840(%rbp)
	# %105 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -848(%rbp)
	# %106 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -856(%rbp)
	# %107 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -864(%rbp)
	# %108 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -872(%rbp)
	# %109 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -880(%rbp)
	# %110 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -888(%rbp)
	# %111 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -896(%rbp)
	# %112 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -280(%rbp)
	# %113 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -904(%rbp)
	# %114 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -912(%rbp)
	# %115 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -920(%rbp)
	# %116 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -928(%rbp)
	# %117 = alloca [30 x i8]
	subq	$30, %rsp
	movq	%rsp, -936(%rbp)
	# %118 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -944(%rbp)
	# %119 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -960(%rbp)
	# %120 = alloca [28 x i8]
	subq	$28, %rsp
	movq	%rsp, -968(%rbp)
	# %121 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %122 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -976(%rbp)
	# %123 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -984(%rbp)
	# %124 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -992(%rbp)
	# %125 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1000(%rbp)
	# %126 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1008(%rbp)
	# %127 = alloca %struct.mz_zip_writer_add_state
	subq	$24, %rsp
	movq	%rsp, -1016(%rbp)
	# %128 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1024(%rbp)
	# %129 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1032(%rbp)
	# %130 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1040(%rbp)
	# %131 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -952(%rbp)
	# %132 = alloca [24 x i8]
	subq	$24, %rsp
	movq	%rsp, %r15
	# %133 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# store i8* %0, i8** %91
	movq	-8(%rbp), %rax
	movq	-736(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %92
	movq	-16(%rbp), %rax
	movq	-744(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %93
	movq	-24(%rbp), %rax
	movq	-752(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %94
	movq	%rdx, %rax
	movq	-760(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %4, i64* %95
	movq	-32(%rbp), %rax
	movq	-768(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %5, i8** %96
	movq	-40(%rbp), %rax
	movq	-776(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %6, i8** %97
	movq	-48(%rbp), %rax
	movq	-784(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %7, i16* %98
	movq	-56(%rbp), %rax
	movq	-792(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %8, i32* %99
	movq	-64(%rbp), %rax
	movq	-800(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %9, i8** %100
	movq	-72(%rbp), %rax
	movq	-808(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %10, i32* %101
	movq	-80(%rbp), %rax
	movq	-816(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %11, i8** %102
	movq	-88(%rbp), %rax
	movq	-824(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %12, i32* %103
	movq	-96(%rbp), %rax
	movq	-832(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %105
	movq	$0, %rax
	movq	-848(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i16 0, i16* %108
	movq	$0, %rax
	movq	-872(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 0, i16* %109
	movq	$0, %rax
	movq	-880(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 0, i16* %110
	movq	$0, %rax
	movq	-888(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 0, i16* %111
	movq	$0, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# %134 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %135 = getelementptr %struct.mz_zip_archive, i8* %134, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %136 = load i64, i64* %135
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %136, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %114
	movq	$0, %rax
	movq	-912(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %115
	movq	$0, %rax
	movq	-920(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %118
	movq	$0, %rax
	movq	-944(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %119
	movq	$0, %rax
	movq	-960(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i64 0, i64* %122
	movq	$0, %rax
	movq	-976(%rbp), %rcx
	movq	%rax, (%rcx)
	# %137 = load i32, i32* %99
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %138 = icmp slt i32 %137, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setl	%sil
	# br i1 %138, label %139, label %140
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback140
	jmp	mz_zip_writer_add_read_buf_callback139
	.text
mz_zip_writer_add_read_buf_callback139:
	# store i32 6, i32* %99
	movq	$6, %rax
	movq	-800(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %140
	jmp	mz_zip_writer_add_read_buf_callback140
	.text
mz_zip_writer_add_read_buf_callback140:
	# %141 = load i32, i32* %99
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %142 = and i32 %141, 15
	movq	%rsi, %rax
	movq	$15, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %142, i32* %106
	movq	%rsi, %rax
	movq	-856(%rbp), %rcx
	movl	%eax, (%rcx)
	# %143 = load i32, i32* %99
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %144 = and i32 %143, 131072
	movq	%rsi, %rax
	movq	$131072, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %145 = icmp ne i32 %144, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, -184(%rbp)
	setne	-184(%rbp)
	# %146 = zext i1 %145 to i64
	movq	-184(%rbp), %rax
	movq	%rax, %rsi
	# %147 = select i1 %145, i32 0, i32 8
	pushq	%rdx
	movq	-184(%rbp), %rcx
	movq	$0, %rax
	movq	$8, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rsi
	popq	%rdx
	# %148 = trunc i32 %147 to i16
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# store i16 %148, i16* %104
	movq	%rsi, %rax
	movq	-840(%rbp), %rcx
	movq	%rax, (%rcx)
	# %149 = load i32, i32* %99
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %150 = and i32 %149, 65536
	movq	%rsi, %rax
	movq	$65536, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %151 = icmp ne i32 %150, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %151, label %157, label %152
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback152
	jmp	mz_zip_writer_add_read_buf_callback157
	.text
mz_zip_writer_add_read_buf_callback152:
	# %153 = load i16, i16* %104
	movq	-840(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %154 = zext i16 %153 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %155 = or i32 %154, 2048
	movq	%rsi, %rax
	movq	$2048, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %156 = trunc i32 %155 to i16
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# store i16 %156, i16* %104
	movq	%rsi, %rax
	movq	-840(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %157
	jmp	mz_zip_writer_add_read_buf_callback157
	.text
mz_zip_writer_add_read_buf_callback157:
	# %158 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %159 = icmp ne i8* %158, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %159, label %160, label %183
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback183
	jmp	mz_zip_writer_add_read_buf_callback160
	.text
mz_zip_writer_add_read_buf_callback160:
	# %161 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %162 = getelementptr %struct.mz_zip_archive, i8* %161, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %163 = load i8*, i8** %162
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %164 = icmp ne i8* %163, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %164, label %165, label %183
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback183
	jmp	mz_zip_writer_add_read_buf_callback165
	.text
mz_zip_writer_add_read_buf_callback165:
	# %166 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %167 = getelementptr %struct.mz_zip_archive, i8* %166, i32 0, i32 3
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %168 = load i32, i32* %167
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %169 = icmp ne i32 %168, 2
	movq	%rsi, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %169, label %183, label %170
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback170
	jmp	mz_zip_writer_add_read_buf_callback183
	.text
mz_zip_writer_add_read_buf_callback170:
	# %171 = load i8*, i8** %92
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %172 = icmp ne i8* %171, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %172, label %173, label %183
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback183
	jmp	mz_zip_writer_add_read_buf_callback173
	.text
mz_zip_writer_add_read_buf_callback173:
	# %174 = load i16, i16* %98
	movq	-792(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %175 = zext i16 %174 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %176 = icmp ne i32 %175, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %176, label %177, label %180
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback180
	jmp	mz_zip_writer_add_read_buf_callback177
	.text
mz_zip_writer_add_read_buf_callback177:
	# %178 = load i8*, i8** %97
	movq	-784(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %179 = icmp ne i8* %178, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %179, label %180, label %183
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback183
	jmp	mz_zip_writer_add_read_buf_callback180
	.text
mz_zip_writer_add_read_buf_callback180:
	# %181 = load i32, i32* %106
	movq	-856(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %182 = icmp ugt i32 %181, 10
	movq	%rsi, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	seta	%sil
	# br i1 %182, label %183, label %192
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback192
	jmp	mz_zip_writer_add_read_buf_callback183
	.text
mz_zip_writer_add_read_buf_callback183:
	# %184 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %184, i8** %34
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %35
	movq	$24, %rax
	movq	-288(%rbp), %rcx
	movl	%eax, (%rcx)
	# %185 = load i8*, i8** %34
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %186 = icmp ne i8* %185, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %186, label %187, label %191
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback191
	jmp	mz_zip_writer_add_read_buf_callback187
	.text
mz_zip_writer_add_read_buf_callback187:
	# %188 = load i32, i32* %35
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %189 = load i8*, i8** %34
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %190 = getelementptr %struct.mz_zip_archive, i8* %189, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %188, i32* %190
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %191
	jmp	mz_zip_writer_add_read_buf_callback191
	.text
mz_zip_writer_add_read_buf_callback191:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback192:
	# %193 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %194 = getelementptr %struct.mz_zip_archive, i8* %193, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %195 = load i8*, i8** %194
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %195, i8** %121
	movq	%rsi, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %196 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %197 = getelementptr %struct.mz_zip_internal_state_tag, i8* %196, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %198 = load i32, i32* %197
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %199 = icmp ne i32 %198, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %199, label %206, label %200
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback200
	jmp	mz_zip_writer_add_read_buf_callback206
	.text
mz_zip_writer_add_read_buf_callback200:
	# %201 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %202 = icmp ugt i64 %201, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %202, label %203, label %206
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback206
	jmp	mz_zip_writer_add_read_buf_callback203
	.text
mz_zip_writer_add_read_buf_callback203:
	# %204 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %205 = getelementptr %struct.mz_zip_internal_state_tag, i8* %204, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 1, i32* %205
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %206
	jmp	mz_zip_writer_add_read_buf_callback206
	.text
mz_zip_writer_add_read_buf_callback206:
	# %207 = load i32, i32* %99
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %208 = and i32 %207, 1024
	movq	%rsi, %rax
	movq	$1024, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %209 = icmp ne i32 %208, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %209, label %210, label %219
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback219
	jmp	mz_zip_writer_add_read_buf_callback210
	.text
mz_zip_writer_add_read_buf_callback210:
	# %211 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %211, i8** %36
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %37
	movq	$24, %rax
	movq	-304(%rbp), %rcx
	movl	%eax, (%rcx)
	# %212 = load i8*, i8** %36
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %213 = icmp ne i8* %212, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %213, label %214, label %218
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback218
	jmp	mz_zip_writer_add_read_buf_callback214
	.text
mz_zip_writer_add_read_buf_callback214:
	# %215 = load i32, i32* %37
	movq	-304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %216 = load i8*, i8** %36
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %217 = getelementptr %struct.mz_zip_archive, i8* %216, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %215, i32* %217
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %218
	jmp	mz_zip_writer_add_read_buf_callback218
	.text
mz_zip_writer_add_read_buf_callback218:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback219:
	# %220 = load i8*, i8** %92
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %221 = call i32 @mz_zip_writer_validate_archive_name (i8* %220)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_validate_archive_name
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %222 = icmp ne i32 %221, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %222, label %232, label %223
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback223
	jmp	mz_zip_writer_add_read_buf_callback232
	.text
mz_zip_writer_add_read_buf_callback223:
	# %224 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %224, i8** %38
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 25, i32* %39
	movq	$25, %rax
	movq	-320(%rbp), %rcx
	movl	%eax, (%rcx)
	# %225 = load i8*, i8** %38
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %226 = icmp ne i8* %225, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %226, label %227, label %231
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback231
	jmp	mz_zip_writer_add_read_buf_callback227
	.text
mz_zip_writer_add_read_buf_callback227:
	# %228 = load i32, i32* %39
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %229 = load i8*, i8** %38
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %230 = getelementptr %struct.mz_zip_archive, i8* %229, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %228, i32* %230
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %231
	jmp	mz_zip_writer_add_read_buf_callback231
	.text
mz_zip_writer_add_read_buf_callback231:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback232:
	# %233 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %234 = getelementptr %struct.mz_zip_internal_state_tag, i8* %233, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %235 = load i32, i32* %234
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %236 = icmp ne i32 %235, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %236, label %237, label %252
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback252
	jmp	mz_zip_writer_add_read_buf_callback237
	.text
mz_zip_writer_add_read_buf_callback237:
	# %238 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %239 = getelementptr %struct.mz_zip_archive, i8* %238, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %240 = load i32, i32* %239
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %241 = icmp eq i32 %240, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %241, label %242, label %251
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback251
	jmp	mz_zip_writer_add_read_buf_callback242
	.text
mz_zip_writer_add_read_buf_callback242:
	# %243 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %243, i8** %40
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %41
	movq	$2, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# %244 = load i8*, i8** %40
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %245 = icmp ne i8* %244, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %245, label %246, label %250
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback250
	jmp	mz_zip_writer_add_read_buf_callback246
	.text
mz_zip_writer_add_read_buf_callback246:
	# %247 = load i32, i32* %41
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %248 = load i8*, i8** %40
	movq	-328(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %249 = getelementptr %struct.mz_zip_archive, i8* %248, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %247, i32* %249
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %250
	jmp	mz_zip_writer_add_read_buf_callback250
	.text
mz_zip_writer_add_read_buf_callback250:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback251:
	# br label %261
	jmp	mz_zip_writer_add_read_buf_callback261
	.text
mz_zip_writer_add_read_buf_callback252:
	# %253 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %254 = getelementptr %struct.mz_zip_archive, i8* %253, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %255 = load i32, i32* %254
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %256 = icmp eq i32 %255, 65535
	movq	%rsi, %rax
	movq	$65535, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %256, label %257, label %260
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback260
	jmp	mz_zip_writer_add_read_buf_callback257
	.text
mz_zip_writer_add_read_buf_callback257:
	# %258 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %259 = getelementptr %struct.mz_zip_internal_state_tag, i8* %258, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 1, i32* %259
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %260
	jmp	mz_zip_writer_add_read_buf_callback260
	.text
mz_zip_writer_add_read_buf_callback260:
	# br label %261
	jmp	mz_zip_writer_add_read_buf_callback261
	.text
mz_zip_writer_add_read_buf_callback261:
	# %262 = load i8*, i8** %92
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %263 = call i64 @strlen (i8* %262)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_strlen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i64 %263, i64* %116
	movq	%rsi, %rax
	movq	-928(%rbp), %rcx
	movq	%rax, (%rcx)
	# %264 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %265 = icmp ugt i64 %264, 65535
	movq	%rsi, %rax
	movq	$65535, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %265, label %266, label %275
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback275
	jmp	mz_zip_writer_add_read_buf_callback266
	.text
mz_zip_writer_add_read_buf_callback266:
	# %267 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %267, i8** %42
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 25, i32* %43
	movq	$25, %rax
	movq	-352(%rbp), %rcx
	movl	%eax, (%rcx)
	# %268 = load i8*, i8** %42
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %269 = icmp ne i8* %268, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %269, label %270, label %274
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback274
	jmp	mz_zip_writer_add_read_buf_callback270
	.text
mz_zip_writer_add_read_buf_callback270:
	# %271 = load i32, i32* %43
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %272 = load i8*, i8** %42
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %273 = getelementptr %struct.mz_zip_archive, i8* %272, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %271, i32* %273
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %274
	jmp	mz_zip_writer_add_read_buf_callback274
	.text
mz_zip_writer_add_read_buf_callback274:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback275:
	# %276 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %277 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment (i8* %276)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_compute_padding_needed_for_file_alignment
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i32 %277, i32* %107
	movq	%rsi, %rax
	movq	-864(%rbp), %rcx
	movl	%eax, (%rcx)
	# %278 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %279 = getelementptr %struct.mz_zip_internal_state_tag, i8* %278, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %280 = getelementptr %struct.mz_zip_array, i8* %279, i32 0, i32 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %281 = load i64, i64* %280
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %282 = add i64 %281, 46
	movq	%rsi, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %283 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %284 = add i64 %282, %283
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %285 = add i64 %284, 28
	movq	%rsi, %rax
	movq	$28, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %286 = load i16, i16* %98
	movq	-792(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %287 = zext i16 %286 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %288 = add i64 %285, %287
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %289 = icmp uge i64 %288, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %289, label %290, label %299
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback299
	jmp	mz_zip_writer_add_read_buf_callback290
	.text
mz_zip_writer_add_read_buf_callback290:
	# %291 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %291, i8** %44
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 15, i32* %45
	movq	$15, %rax
	movq	-368(%rbp), %rcx
	movl	%eax, (%rcx)
	# %292 = load i8*, i8** %44
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %293 = icmp ne i8* %292, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %293, label %294, label %298
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback298
	jmp	mz_zip_writer_add_read_buf_callback294
	.text
mz_zip_writer_add_read_buf_callback294:
	# %295 = load i32, i32* %45
	movq	-368(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %296 = load i8*, i8** %44
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %297 = getelementptr %struct.mz_zip_archive, i8* %296, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %295, i32* %297
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %298
	jmp	mz_zip_writer_add_read_buf_callback298
	.text
mz_zip_writer_add_read_buf_callback298:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback299:
	# %300 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %301 = getelementptr %struct.mz_zip_internal_state_tag, i8* %300, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %302 = load i32, i32* %301
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %303 = icmp ne i32 %302, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %303, label %339, label %304
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback304
	jmp	mz_zip_writer_add_read_buf_callback339
	.text
mz_zip_writer_add_read_buf_callback304:
	# %305 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %306 = getelementptr %struct.mz_zip_archive, i8* %305, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %307 = load i64, i64* %306
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %308 = load i32, i32* %107
	movq	-864(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %309 = zext i32 %308 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %310 = add i64 %307, %309
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %311 = add i64 %310, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %312 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %313 = add i64 %311, %312
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %314 = add i64 %313, 46
	movq	%rsi, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %315 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %316 = add i64 %314, %315
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %317 = load i16, i16* %98
	movq	-792(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %318 = zext i16 %317 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %319 = add i64 %316, %318
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %320 = load i32, i32* %101
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %321 = zext i32 %320 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %322 = add i64 %319, %321
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %323 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %324 = getelementptr %struct.mz_zip_internal_state_tag, i8* %323, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %325 = getelementptr %struct.mz_zip_array, i8* %324, i32 0, i32 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %326 = load i64, i64* %325
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %327 = add i64 %322, %326
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %328 = add i64 %327, 22
	movq	%rsi, %rax
	movq	$22, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %329 = add i64 %328, 1024
	movq	%rsi, %rax
	movq	$1024, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %330 = add i64 %329, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %331 = load i32, i32* %103
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %332 = zext i32 %331 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %333 = add i64 %330, %332
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %334 = icmp ugt i64 %333, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %334, label %335, label %338
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback338
	jmp	mz_zip_writer_add_read_buf_callback335
	.text
mz_zip_writer_add_read_buf_callback335:
	# %336 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %337 = getelementptr %struct.mz_zip_internal_state_tag, i8* %336, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 1, i32* %337
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %338
	jmp	mz_zip_writer_add_read_buf_callback338
	.text
mz_zip_writer_add_read_buf_callback338:
	# br label %339
	jmp	mz_zip_writer_add_read_buf_callback339
	.text
mz_zip_writer_add_read_buf_callback339:
	# %340 = load i8*, i8** %96
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %341 = icmp ne i8* %340, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %341, label %342, label %345
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback345
	jmp	mz_zip_writer_add_read_buf_callback342
	.text
mz_zip_writer_add_read_buf_callback342:
	# %343 = load i8*, i8** %96
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %344 = load i64, i64* %343
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# call void @mz_zip_time_t_to_dos_time (i64 %344, i8* %109, i8* %110)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	-880(%rbp), %rax
	pushq	%rax
	movq	-888(%rbp), %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_time_t_to_dos_time
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %345
	jmp	mz_zip_writer_add_read_buf_callback345
	.text
mz_zip_writer_add_read_buf_callback345:
	# %346 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %347 = icmp ule i64 %346, 3
	movq	%rsi, %rax
	movq	$3, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setbe	%sil
	# br i1 %347, label %348, label %349
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback349
	jmp	mz_zip_writer_add_read_buf_callback348
	.text
mz_zip_writer_add_read_buf_callback348:
	# store i32 0, i32* %106
	movq	$0, %rax
	movq	-856(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %349
	jmp	mz_zip_writer_add_read_buf_callback349
	.text
mz_zip_writer_add_read_buf_callback349:
	# %350 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %351 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %352 = load i32, i32* %107
	movq	-864(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %353 = call i32 @mz_zip_writer_write_zeros (i8* %350, i64 %351, i32 %352)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_write_zeros
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %354 = icmp ne i32 %353, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %354, label %364, label %355
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback355
	jmp	mz_zip_writer_add_read_buf_callback364
	.text
mz_zip_writer_add_read_buf_callback355:
	# %356 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %356, i8** %46
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %47
	movq	$19, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# %357 = load i8*, i8** %46
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %358 = icmp ne i8* %357, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %358, label %359, label %363
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback363
	jmp	mz_zip_writer_add_read_buf_callback359
	.text
mz_zip_writer_add_read_buf_callback359:
	# %360 = load i32, i32* %47
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %361 = load i8*, i8** %46
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %362 = getelementptr %struct.mz_zip_archive, i8* %361, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %360, i32* %362
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %363
	jmp	mz_zip_writer_add_read_buf_callback363
	.text
mz_zip_writer_add_read_buf_callback363:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback364:
	# %365 = load i32, i32* %107
	movq	-864(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %366 = zext i32 %365 to i64
	movq	%rsi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %367 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %368 = add i64 %367, %366
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %368, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# %369 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %369, i64* %112
	movq	%rsi, %rax
	movq	-280(%rbp), %rcx
	movq	%rax, (%rcx)
	# %370 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %371 = getelementptr %struct.mz_zip_archive, i8* %370, i32 0, i32 6
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %372 = load i64, i64* %371
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %373 = icmp ne i64 %372, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %373, label %374, label %390
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback390
	jmp	mz_zip_writer_add_read_buf_callback374
	.text
mz_zip_writer_add_read_buf_callback374:
	# %375 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %376 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %377 = getelementptr %struct.mz_zip_archive, i8* %376, i32 0, i32 6
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %378 = load i64, i64* %377
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %379 = sub i64 %378, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %380 = and i64 %375, %379
	movq	%rdi, %rax
	movq	%rsi, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %381 = icmp eq i64 %380, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# %382 = xor i1 %381, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %383 = zext i1 %382 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %384 = sext i32 %383 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %385 = icmp ne i64 %384, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %385, label %386, label %388
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback388
	jmp	mz_zip_writer_add_read_buf_callback386
	.text
mz_zip_writer_add_read_buf_callback386:
	# call void @__assert_rtn (i8* @__func__.mz_zip_writer_add_read_buf_callback, i8* @.str.11, i32 8015, i8* @.str.24)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.mz_zip_writer_add_read_buf_callback(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$8015, %rax
	pushq	%rax
	leaq	_.str.24(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
mz_zip_writer_add_read_buf_callback387:
	# br label %389
	jmp	mz_zip_writer_add_read_buf_callback389
	.text
mz_zip_writer_add_read_buf_callback388:
	# br label %389
	jmp	mz_zip_writer_add_read_buf_callback389
	.text
mz_zip_writer_add_read_buf_callback389:
	# br label %390
	jmp	mz_zip_writer_add_read_buf_callback390
	.text
mz_zip_writer_add_read_buf_callback390:
	# %391 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %392 = icmp ne i64 %391, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %392, label %393, label %397
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback397
	jmp	mz_zip_writer_add_read_buf_callback393
	.text
mz_zip_writer_add_read_buf_callback393:
	# %394 = load i32, i32* %106
	movq	-856(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %395 = icmp ne i32 %394, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %395, label %396, label %397
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback397
	jmp	mz_zip_writer_add_read_buf_callback396
	.text
mz_zip_writer_add_read_buf_callback396:
	# store i16 8, i16* %108
	movq	$8, %rax
	movq	-872(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %397
	jmp	mz_zip_writer_add_read_buf_callback397
	.text
mz_zip_writer_add_read_buf_callback397:
	# %398 = getelementptr [30 x i8], i8* %117, i64 0, i64 0
	movq	-936(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# call void @memset (i8* %398, i8 0, i64 30, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %399 = load i8*, i8** %121
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %400 = getelementptr %struct.mz_zip_internal_state_tag, i8* %399, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %401 = load i32, i32* %400
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %402 = icmp ne i32 %401, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %402, label %403, label %545
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback545
	jmp	mz_zip_writer_add_read_buf_callback403
	.text
mz_zip_writer_add_read_buf_callback403:
	# %404 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %405 = icmp uge i64 %404, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %405, label %409, label %406
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback406
	jmp	mz_zip_writer_add_read_buf_callback409
	.text
mz_zip_writer_add_read_buf_callback406:
	# %407 = load i64, i64* %112
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %408 = icmp uge i64 %407, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %408, label %409, label %445
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback445
	jmp	mz_zip_writer_add_read_buf_callback409
	.text
mz_zip_writer_add_read_buf_callback409:
	# %410 = getelementptr [28 x i8], i8* %120, i64 0, i64 0
	movq	-968(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %410, i8** %118
	movq	%rsi, %rax
	movq	-944(%rbp), %rcx
	movq	%rax, (%rcx)
	# %411 = load i32, i32* %99
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %412 = and i32 %411, 131072
	movq	%rsi, %rax
	movq	$131072, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %413 = icmp ne i32 %412, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %413, label %414, label %435
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback435
	jmp	mz_zip_writer_add_read_buf_callback414
	.text
mz_zip_writer_add_read_buf_callback414:
	# %415 = getelementptr [28 x i8], i8* %120, i64 0, i64 0
	movq	-968(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %416 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %417 = icmp uge i64 %416, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %417, label %418, label %419
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback419
	jmp	mz_zip_writer_add_read_buf_callback418
	.text
mz_zip_writer_add_read_buf_callback418:
	# br label %420
	movq	-912(%rbp), %r8
	jmp	mz_zip_writer_add_read_buf_callback420
	.text
mz_zip_writer_add_read_buf_callback419:
	# br label %420
	movq	$0, %r8
	jmp	mz_zip_writer_add_read_buf_callback420
	.text
mz_zip_writer_add_read_buf_callback420:
	# %421 = phi i8* [%114, %418], [null, %419]
	# %422 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %423 = icmp uge i64 %422, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %423, label %424, label %425
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback425
	jmp	mz_zip_writer_add_read_buf_callback424
	.text
mz_zip_writer_add_read_buf_callback424:
	# br label %426
	movq	-920(%rbp), %rdi
	jmp	mz_zip_writer_add_read_buf_callback426
	.text
mz_zip_writer_add_read_buf_callback425:
	# br label %426
	movq	$0, %rdi
	jmp	mz_zip_writer_add_read_buf_callback426
	.text
mz_zip_writer_add_read_buf_callback426:
	# %427 = phi i8* [%115, %424], [null, %425]
	# %428 = load i64, i64* %112
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %429 = icmp uge i64 %428, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %429, label %430, label %431
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback431
	jmp	mz_zip_writer_add_read_buf_callback430
	.text
mz_zip_writer_add_read_buf_callback430:
	# br label %432
	movq	-280(%rbp), %rsi
	jmp	mz_zip_writer_add_read_buf_callback432
	.text
mz_zip_writer_add_read_buf_callback431:
	# br label %432
	movq	$0, %rsi
	jmp	mz_zip_writer_add_read_buf_callback432
	.text
mz_zip_writer_add_read_buf_callback432:
	# %433 = phi i8* [%112, %430], [null, %431]
	# %434 = call i32 @mz_zip_writer_create_zip64_extra_data (i8* %415, i8* %421, i8* %427, i8* %433)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_zip64_extra_data
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i32 %434, i32* %119
	movq	%rsi, %rax
	movq	-960(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %444
	jmp	mz_zip_writer_add_read_buf_callback444
	.text
mz_zip_writer_add_read_buf_callback435:
	# %436 = getelementptr [28 x i8], i8* %120, i64 0, i64 0
	movq	-968(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %437 = load i64, i64* %112
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %438 = icmp uge i64 %437, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %438, label %439, label %440
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback440
	jmp	mz_zip_writer_add_read_buf_callback439
	.text
mz_zip_writer_add_read_buf_callback439:
	# br label %441
	movq	-280(%rbp), %rsi
	jmp	mz_zip_writer_add_read_buf_callback441
	.text
mz_zip_writer_add_read_buf_callback440:
	# br label %441
	movq	$0, %rsi
	jmp	mz_zip_writer_add_read_buf_callback441
	.text
mz_zip_writer_add_read_buf_callback441:
	# %442 = phi i8* [%112, %439], [null, %440]
	# %443 = call i32 @mz_zip_writer_create_zip64_extra_data (i8* %436, i8* null, i8* null, i8* %442)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_zip64_extra_data
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i32 %443, i32* %119
	movq	%rsi, %rax
	movq	-960(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %444
	jmp	mz_zip_writer_add_read_buf_callback444
	.text
mz_zip_writer_add_read_buf_callback444:
	# br label %445
	jmp	mz_zip_writer_add_read_buf_callback445
	.text
mz_zip_writer_add_read_buf_callback445:
	# %446 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %447 = getelementptr [30 x i8], i8* %117, i64 0, i64 0
	movq	-936(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r11
	# %448 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %449 = trunc i64 %448 to i16
	movq	%rsi, %rax
	movq	$0, %r10
	movw	%ax, %r10w
	# %450 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %451 = load i32, i32* %101
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %452 = add i32 %450, %451
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %453 = trunc i32 %452 to i16
	movq	%rsi, %rax
	movq	$0, %r9
	movw	%ax, %r9w
	# %454 = load i16, i16* %108
	movq	-872(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %455 = load i16, i16* %104
	movq	-840(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r13
	movw	%ax, %r13w
	# %456 = load i16, i16* %109
	movq	-880(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %457 = load i16, i16* %110
	movq	-888(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %458 = call i32 @mz_zip_writer_create_local_dir_header (i8* %446, i8* %447, i16 %449, i16 %453, i64 0, i64 0, i32 0, i16 %454, i16 %455, i16 %456, i16 %457)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_local_dir_header
	addq	$40, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %459 = icmp ne i32 %458, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %459, label %469, label %460
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback460
	jmp	mz_zip_writer_add_read_buf_callback469
	.text
mz_zip_writer_add_read_buf_callback460:
	# %461 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %461, i8** %48
	movq	%rdx, %rax
	movq	-392(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 27, i32* %49
	movq	$27, %rax
	movq	-400(%rbp), %rcx
	movl	%eax, (%rcx)
	# %462 = load i8*, i8** %48
	movq	-392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %463 = icmp ne i8* %462, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %463, label %464, label %468
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback468
	jmp	mz_zip_writer_add_read_buf_callback464
	.text
mz_zip_writer_add_read_buf_callback464:
	# %465 = load i32, i32* %49
	movq	-400(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %466 = load i8*, i8** %48
	movq	-392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %467 = getelementptr %struct.mz_zip_archive, i8* %466, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %465, i32* %467
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %468
	jmp	mz_zip_writer_add_read_buf_callback468
	.text
mz_zip_writer_add_read_buf_callback468:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback469:
	# %470 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %471 = getelementptr %struct.mz_zip_archive, i8* %470, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %472 = load i8*, i8** %471
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %473 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %474 = getelementptr %struct.mz_zip_archive, i8* %473, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %475 = load i8*, i8** %474
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %476 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %477 = getelementptr [30 x i8], i8* %117, i64 0, i64 0
	movq	-936(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %478 = call i64 %472 (i8* %475, i64 %476, i8* %477, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %479 = icmp ne i64 %478, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %479, label %480, label %489
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback489
	jmp	mz_zip_writer_add_read_buf_callback480
	.text
mz_zip_writer_add_read_buf_callback480:
	# %481 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %481, i8** %50
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %51
	movq	$19, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %482 = load i8*, i8** %50
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %483 = icmp ne i8* %482, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %483, label %484, label %488
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback488
	jmp	mz_zip_writer_add_read_buf_callback484
	.text
mz_zip_writer_add_read_buf_callback484:
	# %485 = load i32, i32* %51
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %486 = load i8*, i8** %50
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %487 = getelementptr %struct.mz_zip_archive, i8* %486, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %485, i32* %487
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %488
	jmp	mz_zip_writer_add_read_buf_callback488
	.text
mz_zip_writer_add_read_buf_callback488:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback489:
	# %490 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %491 = add i64 %490, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %491, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# %492 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %493 = getelementptr %struct.mz_zip_archive, i8* %492, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %494 = load i8*, i8** %493
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %495 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %496 = getelementptr %struct.mz_zip_archive, i8* %495, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %497 = load i8*, i8** %496
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %498 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %499 = load i8*, i8** %92
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %500 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %501 = call i64 %494 (i8* %497, i64 %498, i8* %499, i64 %500)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %502 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %503 = icmp ne i64 %501, %502
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %503, label %504, label %513
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback513
	jmp	mz_zip_writer_add_read_buf_callback504
	.text
mz_zip_writer_add_read_buf_callback504:
	# %505 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %505, i8** %52
	movq	%rdx, %rax
	movq	-424(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %53
	movq	$19, %rax
	movq	-432(%rbp), %rcx
	movl	%eax, (%rcx)
	# %506 = load i8*, i8** %52
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %507 = icmp ne i8* %506, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %507, label %508, label %512
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback512
	jmp	mz_zip_writer_add_read_buf_callback508
	.text
mz_zip_writer_add_read_buf_callback508:
	# %509 = load i32, i32* %53
	movq	-432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %510 = load i8*, i8** %52
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %511 = getelementptr %struct.mz_zip_archive, i8* %510, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %509, i32* %511
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %512
	jmp	mz_zip_writer_add_read_buf_callback512
	.text
mz_zip_writer_add_read_buf_callback512:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback513:
	# %514 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %515 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %516 = add i64 %515, %514
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %516, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# %517 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %518 = getelementptr %struct.mz_zip_archive, i8* %517, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %519 = load i8*, i8** %518
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %520 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %521 = getelementptr %struct.mz_zip_archive, i8* %520, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %522 = load i8*, i8** %521
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %523 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %524 = getelementptr [28 x i8], i8* %120, i64 0, i64 0
	movq	-968(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %525 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %526 = zext i32 %525 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %527 = call i64 %519 (i8* %522, i64 %523, i8* %524, i64 %526)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %528 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %529 = zext i32 %528 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %530 = icmp ne i64 %527, %529
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %530, label %531, label %540
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback540
	jmp	mz_zip_writer_add_read_buf_callback531
	.text
mz_zip_writer_add_read_buf_callback531:
	# %532 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %532, i8** %54
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %55
	movq	$19, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# %533 = load i8*, i8** %54
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %534 = icmp ne i8* %533, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %534, label %535, label %539
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback539
	jmp	mz_zip_writer_add_read_buf_callback535
	.text
mz_zip_writer_add_read_buf_callback535:
	# %536 = load i32, i32* %55
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %537 = load i8*, i8** %54
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %538 = getelementptr %struct.mz_zip_archive, i8* %537, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %536, i32* %538
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %539
	jmp	mz_zip_writer_add_read_buf_callback539
	.text
mz_zip_writer_add_read_buf_callback539:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback540:
	# %541 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %542 = zext i32 %541 to i64
	movq	%rsi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %543 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %544 = add i64 %543, %542
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %544, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %630
	jmp	mz_zip_writer_add_read_buf_callback630
	.text
mz_zip_writer_add_read_buf_callback545:
	# %546 = load i64, i64* %115
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %547 = icmp ugt i64 %546, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %547, label %551, label %548
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback548
	jmp	mz_zip_writer_add_read_buf_callback551
	.text
mz_zip_writer_add_read_buf_callback548:
	# %549 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %550 = icmp ugt i64 %549, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %550, label %551, label %560
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback560
	jmp	mz_zip_writer_add_read_buf_callback551
	.text
mz_zip_writer_add_read_buf_callback551:
	# %552 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %552, i8** %56
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %57
	movq	$29, %rax
	movq	-464(%rbp), %rcx
	movl	%eax, (%rcx)
	# %553 = load i8*, i8** %56
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %554 = icmp ne i8* %553, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %554, label %555, label %559
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback559
	jmp	mz_zip_writer_add_read_buf_callback555
	.text
mz_zip_writer_add_read_buf_callback555:
	# %556 = load i32, i32* %57
	movq	-464(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %557 = load i8*, i8** %56
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %558 = getelementptr %struct.mz_zip_archive, i8* %557, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %556, i32* %558
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %559
	jmp	mz_zip_writer_add_read_buf_callback559
	.text
mz_zip_writer_add_read_buf_callback559:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback560:
	# %561 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %562 = getelementptr [30 x i8], i8* %117, i64 0, i64 0
	movq	-936(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %563 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %564 = trunc i64 %563 to i16
	movq	%rsi, %rax
	movq	$0, %r11
	movw	%ax, %r11w
	# %565 = load i32, i32* %101
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %566 = trunc i32 %565 to i16
	movq	%rsi, %rax
	movq	$0, %r10
	movw	%ax, %r10w
	# %567 = load i16, i16* %108
	movq	-872(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r9
	movw	%ax, %r9w
	# %568 = load i16, i16* %104
	movq	-840(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %569 = load i16, i16* %109
	movq	-880(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %570 = load i16, i16* %110
	movq	-888(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %571 = call i32 @mz_zip_writer_create_local_dir_header (i8* %561, i8* %562, i16 %564, i16 %566, i64 0, i64 0, i32 0, i16 %567, i16 %568, i16 %569, i16 %570)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r13, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_local_dir_header
	addq	$40, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %572 = icmp ne i32 %571, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %572, label %582, label %573
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback573
	jmp	mz_zip_writer_add_read_buf_callback582
	.text
mz_zip_writer_add_read_buf_callback573:
	# %574 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %574, i8** %58
	movq	%rdx, %rax
	movq	-472(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 27, i32* %59
	movq	$27, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# %575 = load i8*, i8** %58
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %576 = icmp ne i8* %575, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %576, label %577, label %581
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback581
	jmp	mz_zip_writer_add_read_buf_callback577
	.text
mz_zip_writer_add_read_buf_callback577:
	# %578 = load i32, i32* %59
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %579 = load i8*, i8** %58
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %580 = getelementptr %struct.mz_zip_archive, i8* %579, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %578, i32* %580
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %581
	jmp	mz_zip_writer_add_read_buf_callback581
	.text
mz_zip_writer_add_read_buf_callback581:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback582:
	# %583 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %584 = getelementptr %struct.mz_zip_archive, i8* %583, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %585 = load i8*, i8** %584
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %586 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %587 = getelementptr %struct.mz_zip_archive, i8* %586, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %588 = load i8*, i8** %587
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %589 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %590 = getelementptr [30 x i8], i8* %117, i64 0, i64 0
	movq	-936(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %591 = call i64 %585 (i8* %588, i64 %589, i8* %590, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %592 = icmp ne i64 %591, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %592, label %593, label %602
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback602
	jmp	mz_zip_writer_add_read_buf_callback593
	.text
mz_zip_writer_add_read_buf_callback593:
	# %594 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %594, i8** %60
	movq	%rdx, %rax
	movq	-488(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %61
	movq	$19, %rax
	movq	-496(%rbp), %rcx
	movl	%eax, (%rcx)
	# %595 = load i8*, i8** %60
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %596 = icmp ne i8* %595, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %596, label %597, label %601
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback601
	jmp	mz_zip_writer_add_read_buf_callback597
	.text
mz_zip_writer_add_read_buf_callback597:
	# %598 = load i32, i32* %61
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %599 = load i8*, i8** %60
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %600 = getelementptr %struct.mz_zip_archive, i8* %599, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %598, i32* %600
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %601
	jmp	mz_zip_writer_add_read_buf_callback601
	.text
mz_zip_writer_add_read_buf_callback601:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback602:
	# %603 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %604 = add i64 %603, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %604, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# %605 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %606 = getelementptr %struct.mz_zip_archive, i8* %605, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %607 = load i8*, i8** %606
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %608 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %609 = getelementptr %struct.mz_zip_archive, i8* %608, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %610 = load i8*, i8** %609
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %611 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %612 = load i8*, i8** %92
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %613 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %614 = call i64 %607 (i8* %610, i64 %611, i8* %612, i64 %613)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %615 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %616 = icmp ne i64 %614, %615
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %616, label %617, label %626
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback626
	jmp	mz_zip_writer_add_read_buf_callback617
	.text
mz_zip_writer_add_read_buf_callback617:
	# %618 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %618, i8** %62
	movq	%rdx, %rax
	movq	-504(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %63
	movq	$19, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %619 = load i8*, i8** %62
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %620 = icmp ne i8* %619, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %620, label %621, label %625
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback625
	jmp	mz_zip_writer_add_read_buf_callback621
	.text
mz_zip_writer_add_read_buf_callback621:
	# %622 = load i32, i32* %63
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %623 = load i8*, i8** %62
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %624 = getelementptr %struct.mz_zip_archive, i8* %623, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %622, i32* %624
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %625
	jmp	mz_zip_writer_add_read_buf_callback625
	.text
mz_zip_writer_add_read_buf_callback625:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback626:
	# %627 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %628 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %629 = add i64 %628, %627
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %629, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %630
	jmp	mz_zip_writer_add_read_buf_callback630
	.text
mz_zip_writer_add_read_buf_callback630:
	# %631 = load i32, i32* %101
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %632 = icmp ugt i32 %631, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	seta	%sil
	# br i1 %632, label %633, label %662
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback662
	jmp	mz_zip_writer_add_read_buf_callback633
	.text
mz_zip_writer_add_read_buf_callback633:
	# %634 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %635 = getelementptr %struct.mz_zip_archive, i8* %634, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %636 = load i8*, i8** %635
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %637 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %638 = getelementptr %struct.mz_zip_archive, i8* %637, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %639 = load i8*, i8** %638
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %640 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %641 = load i8*, i8** %100
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %642 = load i32, i32* %101
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %643 = zext i32 %642 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %644 = call i64 %636 (i8* %639, i64 %640, i8* %641, i64 %643)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %645 = load i32, i32* %101
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %646 = zext i32 %645 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %647 = icmp ne i64 %644, %646
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %647, label %648, label %657
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback657
	jmp	mz_zip_writer_add_read_buf_callback648
	.text
mz_zip_writer_add_read_buf_callback648:
	# %649 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %649, i8** %64
	movq	%rdx, %rax
	movq	-520(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %65
	movq	$19, %rax
	movq	-528(%rbp), %rcx
	movl	%eax, (%rcx)
	# %650 = load i8*, i8** %64
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %651 = icmp ne i8* %650, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %651, label %652, label %656
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback656
	jmp	mz_zip_writer_add_read_buf_callback652
	.text
mz_zip_writer_add_read_buf_callback652:
	# %653 = load i32, i32* %65
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %654 = load i8*, i8** %64
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %655 = getelementptr %struct.mz_zip_archive, i8* %654, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %653, i32* %655
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %656
	jmp	mz_zip_writer_add_read_buf_callback656
	.text
mz_zip_writer_add_read_buf_callback656:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback657:
	# %658 = load i32, i32* %101
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %659 = zext i32 %658 to i64
	movq	%rsi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %660 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %661 = add i64 %660, %659
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %661, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %662
	jmp	mz_zip_writer_add_read_buf_callback662
	.text
mz_zip_writer_add_read_buf_callback662:
	# %663 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %664 = icmp ne i64 %663, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %664, label %665, label %934
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback934
	jmp	mz_zip_writer_add_read_buf_callback665
	.text
mz_zip_writer_add_read_buf_callback665:
	# %666 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %667 = getelementptr %struct.mz_zip_archive, i8* %666, i32 0, i32 7
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %668 = load i8*, i8** %667
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %669 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %670 = getelementptr %struct.mz_zip_archive, i8* %669, i32 0, i32 10
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %671 = load i8*, i8** %670
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %672 = call i8* %668 (i8* %671, i64 1, i64 65536)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$65536, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i8* %672, i8** %124
	movq	%rsi, %rax
	movq	-992(%rbp), %rcx
	movq	%rax, (%rcx)
	# %673 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %674 = icmp ne i8* %673, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %674, label %684, label %675
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback675
	jmp	mz_zip_writer_add_read_buf_callback684
	.text
mz_zip_writer_add_read_buf_callback675:
	# %676 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %676, i8** %66
	movq	%rdx, %rax
	movq	-536(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %67
	movq	$16, %rax
	movq	-544(%rbp), %rcx
	movl	%eax, (%rcx)
	# %677 = load i8*, i8** %66
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %678 = icmp ne i8* %677, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %678, label %679, label %683
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback683
	jmp	mz_zip_writer_add_read_buf_callback679
	.text
mz_zip_writer_add_read_buf_callback679:
	# %680 = load i32, i32* %67
	movq	-544(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %681 = load i8*, i8** %66
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %682 = getelementptr %struct.mz_zip_archive, i8* %681, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %680, i32* %682
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %683
	jmp	mz_zip_writer_add_read_buf_callback683
	.text
mz_zip_writer_add_read_buf_callback683:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback684:
	# %685 = load i32, i32* %106
	movq	-856(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %686 = icmp ne i32 %685, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %686, label %767, label %687
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback687
	jmp	mz_zip_writer_add_read_buf_callback767
	.text
mz_zip_writer_add_read_buf_callback687:
	# br label %688
	jmp	mz_zip_writer_add_read_buf_callback688
	.text
mz_zip_writer_add_read_buf_callback688:
	# %689 = load i8*, i8** %93
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %690 = load i8*, i8** %94
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %691 = load i64, i64* %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %692 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %693 = call i64 %689 (i8* %690, i64 %691, i8* %692, i64 65536)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	$65536, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i64 %693, i64* %125
	movq	%rsi, %rax
	movq	-1000(%rbp), %rcx
	movq	%rax, (%rcx)
	# %694 = load i64, i64* %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %695 = icmp eq i64 %694, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# br i1 %695, label %696, label %697
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback697
	jmp	mz_zip_writer_add_read_buf_callback696
	.text
mz_zip_writer_add_read_buf_callback696:
	# br label %764
	jmp	mz_zip_writer_add_read_buf_callback764
	.text
mz_zip_writer_add_read_buf_callback697:
	# %698 = load i64, i64* %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %699 = icmp ugt i64 %698, 65536
	movq	%rsi, %rax
	movq	$65536, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %699, label %706, label %700
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback700
	jmp	mz_zip_writer_add_read_buf_callback706
	.text
mz_zip_writer_add_read_buf_callback700:
	# %701 = load i64, i64* %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %702 = load i64, i64* %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %703 = add i64 %701, %702
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %704 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %705 = icmp ugt i64 %703, %704
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %705, label %706, label %722
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback722
	jmp	mz_zip_writer_add_read_buf_callback706
	.text
mz_zip_writer_add_read_buf_callback706:
	# %707 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %708 = getelementptr %struct.mz_zip_archive, i8* %707, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %709 = load i8*, i8** %708
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %710 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %711 = getelementptr %struct.mz_zip_archive, i8* %710, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %712 = load i8*, i8** %711
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %713 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %709 (i8* %712, i8* %713)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %714 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %714, i8** %68
	movq	%rdx, %rax
	movq	-552(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %69
	movq	$20, %rax
	movq	-560(%rbp), %rcx
	movl	%eax, (%rcx)
	# %715 = load i8*, i8** %68
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %716 = icmp ne i8* %715, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %716, label %717, label %721
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback721
	jmp	mz_zip_writer_add_read_buf_callback717
	.text
mz_zip_writer_add_read_buf_callback717:
	# %718 = load i32, i32* %69
	movq	-560(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %719 = load i8*, i8** %68
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %720 = getelementptr %struct.mz_zip_archive, i8* %719, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %718, i32* %720
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %721
	jmp	mz_zip_writer_add_read_buf_callback721
	.text
mz_zip_writer_add_read_buf_callback721:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback722:
	# %723 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %724 = getelementptr %struct.mz_zip_archive, i8* %723, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %725 = load i8*, i8** %724
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %726 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %727 = getelementptr %struct.mz_zip_archive, i8* %726, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %728 = load i8*, i8** %727
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %729 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %730 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %731 = load i64, i64* %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %732 = call i64 %725 (i8* %728, i64 %729, i8* %730, i64 %731)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %733 = load i64, i64* %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %734 = icmp ne i64 %732, %733
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %734, label %735, label %751
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback751
	jmp	mz_zip_writer_add_read_buf_callback735
	.text
mz_zip_writer_add_read_buf_callback735:
	# %736 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %737 = getelementptr %struct.mz_zip_archive, i8* %736, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %738 = load i8*, i8** %737
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %739 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %740 = getelementptr %struct.mz_zip_archive, i8* %739, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %741 = load i8*, i8** %740
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %742 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void %738 (i8* %741, i8* %742)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %743 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %743, i8** %70
	movq	%rdx, %rax
	movq	-568(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %71
	movq	$19, %rax
	movq	-576(%rbp), %rcx
	movl	%eax, (%rcx)
	# %744 = load i8*, i8** %70
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %745 = icmp ne i8* %744, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %745, label %746, label %750
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback750
	jmp	mz_zip_writer_add_read_buf_callback746
	.text
mz_zip_writer_add_read_buf_callback746:
	# %747 = load i32, i32* %71
	movq	-576(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %748 = load i8*, i8** %70
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %749 = getelementptr %struct.mz_zip_archive, i8* %748, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %747, i32* %749
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %750
	jmp	mz_zip_writer_add_read_buf_callback750
	.text
mz_zip_writer_add_read_buf_callback750:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback751:
	# %752 = load i64, i64* %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %753 = load i64, i64* %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %754 = add i64 %753, %752
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %754, i64* %122
	movq	%rsi, %rax
	movq	-976(%rbp), %rcx
	movq	%rax, (%rcx)
	# %755 = load i32, i32* %105
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %756 = zext i32 %755 to i64
	movq	%rsi, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %757 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %758 = load i64, i64* %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %759 = call i64 @mz_crc32 (i64 %756, i8* %757, i64 %758)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %760 = trunc i64 %759 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i32 %760, i32* %105
	movq	%rsi, %rax
	movq	-848(%rbp), %rcx
	movl	%eax, (%rcx)
	# %761 = load i64, i64* %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %762 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %763 = add i64 %762, %761
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %763, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %688
	jmp	mz_zip_writer_add_read_buf_callback688
	.text
mz_zip_writer_add_read_buf_callback764:
	# %765 = load i64, i64* %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %765, i64* %114
	movq	%rsi, %rax
	movq	-912(%rbp), %rcx
	movq	%rax, (%rcx)
	# %766 = load i64, i64* %114
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %766, i64* %115
	movq	%rsi, %rax
	movq	-920(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %926
	jmp	mz_zip_writer_add_read_buf_callback926
	.text
mz_zip_writer_add_read_buf_callback767:
	# store i32 0, i32* %126
	movq	$0, %rax
	movq	-1008(%rbp), %rcx
	movl	%eax, (%rcx)
	# %768 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %769 = getelementptr %struct.mz_zip_archive, i8* %768, i32 0, i32 7
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %770 = load i8*, i8** %769
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %771 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %772 = getelementptr %struct.mz_zip_archive, i8* %771, i32 0, i32 10
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %773 = load i8*, i8** %772
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %774 = call i8* %770 (i8* %773, i64 1, i64 319352)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$319352, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i8* %774, i8** %128
	movq	%rsi, %rax
	movq	-1024(%rbp), %rcx
	movq	%rax, (%rcx)
	# %775 = load i8*, i8** %128
	movq	-1024(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %776 = icmp ne i8* %775, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %776, label %793, label %777
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback777
	jmp	mz_zip_writer_add_read_buf_callback793
	.text
mz_zip_writer_add_read_buf_callback777:
	# %778 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %779 = getelementptr %struct.mz_zip_archive, i8* %778, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %780 = load i8*, i8** %779
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %781 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %782 = getelementptr %struct.mz_zip_archive, i8* %781, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %783 = load i8*, i8** %782
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %784 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %780 (i8* %783, i8* %784)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %785 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %785, i8** %72
	movq	%rdx, %rax
	movq	-584(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %73
	movq	$16, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %786 = load i8*, i8** %72
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %787 = icmp ne i8* %786, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %787, label %788, label %792
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback792
	jmp	mz_zip_writer_add_read_buf_callback788
	.text
mz_zip_writer_add_read_buf_callback788:
	# %789 = load i32, i32* %73
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %790 = load i8*, i8** %72
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %791 = getelementptr %struct.mz_zip_archive, i8* %790, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %789, i32* %791
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %792
	jmp	mz_zip_writer_add_read_buf_callback792
	.text
mz_zip_writer_add_read_buf_callback792:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback793:
	# %794 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %795 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 0
	movq	-1016(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %794, i8** %795
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %796 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %797 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 1
	movq	-1016(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i64 %796, i64* %797
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %798 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 2
	movq	-1016(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i64 0, i64* %798
	movq	$0, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %799 = load i8*, i8** %128
	movq	-1024(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %800 = load i32, i32* %106
	movq	-856(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %801 = call i32 @tdefl_create_comp_flags_from_zip_params (i32 %800, i32 -15, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$-15, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_create_comp_flags_from_zip_params
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %802 = call i32 @tdefl_init (i8* %799, i8* @mz_zip_writer_add_put_buf_callback, i8* %127, i32 %801)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	leaq	_mz_zip_writer_add_put_buf_callback(%rip), %rax
	pushq	%rax
	movq	-1016(%rbp), %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_init
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %803 = icmp ne i32 %802, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %803, label %804, label %827
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback827
	jmp	mz_zip_writer_add_read_buf_callback804
	.text
mz_zip_writer_add_read_buf_callback804:
	# %805 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %806 = getelementptr %struct.mz_zip_archive, i8* %805, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %807 = load i8*, i8** %806
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %808 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %809 = getelementptr %struct.mz_zip_archive, i8* %808, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %810 = load i8*, i8** %809
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %811 = load i8*, i8** %128
	movq	-1024(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %807 (i8* %810, i8* %811)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %812 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %813 = getelementptr %struct.mz_zip_archive, i8* %812, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %814 = load i8*, i8** %813
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %815 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %816 = getelementptr %struct.mz_zip_archive, i8* %815, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %817 = load i8*, i8** %816
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %818 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %814 (i8* %817, i8* %818)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %819 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %819, i8** %74
	movq	%rdx, %rax
	movq	-600(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 27, i32* %75
	movq	$27, %rax
	movq	-608(%rbp), %rcx
	movl	%eax, (%rcx)
	# %820 = load i8*, i8** %74
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %821 = icmp ne i8* %820, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %821, label %822, label %826
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback826
	jmp	mz_zip_writer_add_read_buf_callback822
	.text
mz_zip_writer_add_read_buf_callback822:
	# %823 = load i32, i32* %75
	movq	-608(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %824 = load i8*, i8** %74
	movq	-600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %825 = getelementptr %struct.mz_zip_archive, i8* %824, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %823, i32* %825
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %826
	jmp	mz_zip_writer_add_read_buf_callback826
	.text
mz_zip_writer_add_read_buf_callback826:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback827:
	# br label %828
	jmp	mz_zip_writer_add_read_buf_callback828
	.text
mz_zip_writer_add_read_buf_callback828:
	# store i32 0, i32* %130
	movq	$0, %rax
	movq	-1040(%rbp), %rcx
	movl	%eax, (%rcx)
	# %829 = load i8*, i8** %93
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %830 = load i8*, i8** %94
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %831 = load i64, i64* %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %832 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %833 = call i64 %829 (i8* %830, i64 %831, i8* %832, i64 65536)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	$65536, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i64 %833, i64* %131
	movq	%rsi, %rax
	movq	-952(%rbp), %rcx
	movq	%rax, (%rcx)
	# %834 = load i64, i64* %131
	movq	-952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %835 = icmp ugt i64 %834, 65536
	movq	%rsi, %rax
	movq	$65536, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %835, label %842, label %836
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback836
	jmp	mz_zip_writer_add_read_buf_callback842
	.text
mz_zip_writer_add_read_buf_callback836:
	# %837 = load i64, i64* %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %838 = load i64, i64* %131
	movq	-952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %839 = add i64 %837, %838
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %840 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %841 = icmp ugt i64 %839, %840
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %841, label %842, label %851
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback851
	jmp	mz_zip_writer_add_read_buf_callback842
	.text
mz_zip_writer_add_read_buf_callback842:
	# %843 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %843, i8** %76
	movq	%rsi, %rax
	movq	-616(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %77
	movq	$20, %rax
	movq	-624(%rbp), %rcx
	movl	%eax, (%rcx)
	# %844 = load i8*, i8** %76
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %845 = icmp ne i8* %844, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %845, label %846, label %850
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback850
	jmp	mz_zip_writer_add_read_buf_callback846
	.text
mz_zip_writer_add_read_buf_callback846:
	# %847 = load i32, i32* %77
	movq	-624(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %848 = load i8*, i8** %76
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %849 = getelementptr %struct.mz_zip_archive, i8* %848, i32 0, i32 5
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 %847, i32* %849
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %850
	jmp	mz_zip_writer_add_read_buf_callback850
	.text
mz_zip_writer_add_read_buf_callback850:
	# br label %902
	jmp	mz_zip_writer_add_read_buf_callback902
	.text
mz_zip_writer_add_read_buf_callback851:
	# %852 = load i64, i64* %131
	movq	-952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %853 = load i64, i64* %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %854 = add i64 %853, %852
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %854, i64* %122
	movq	%rsi, %rax
	movq	-976(%rbp), %rcx
	movq	%rax, (%rcx)
	# %855 = load i32, i32* %105
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %856 = zext i32 %855 to i64
	movq	%rsi, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# %857 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %858 = load i64, i64* %131
	movq	-952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %859 = call i64 @mz_crc32 (i64 %856, i8* %857, i64 %858)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_crc32
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %860 = trunc i64 %859 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i32 %860, i32* %105
	movq	%rsi, %rax
	movq	-848(%rbp), %rcx
	movl	%eax, (%rcx)
	# %861 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %862 = getelementptr %struct.mz_zip_archive, i8* %861, i32 0, i32 13
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %863 = load i8*, i8** %862
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %864 = icmp ne i8* %863, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %864, label %865, label %875
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback875
	jmp	mz_zip_writer_add_read_buf_callback865
	.text
mz_zip_writer_add_read_buf_callback865:
	# %866 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %867 = getelementptr %struct.mz_zip_archive, i8* %866, i32 0, i32 13
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$13, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %868 = load i8*, i8** %867
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %869 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %870 = getelementptr %struct.mz_zip_archive, i8* %869, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %871 = load i8*, i8** %870
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %872 = call i32 %868 (i8* %871)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %873 = icmp ne i32 %872, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %873, label %874, label %875
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback875
	jmp	mz_zip_writer_add_read_buf_callback874
	.text
mz_zip_writer_add_read_buf_callback874:
	# store i32 3, i32* %130
	movq	$3, %rax
	movq	-1040(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %875
	jmp	mz_zip_writer_add_read_buf_callback875
	.text
mz_zip_writer_add_read_buf_callback875:
	# %876 = load i64, i64* %131
	movq	-952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %877 = icmp eq i64 %876, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# br i1 %877, label %878, label %879
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback879
	jmp	mz_zip_writer_add_read_buf_callback878
	.text
mz_zip_writer_add_read_buf_callback878:
	# store i32 4, i32* %130
	movq	$4, %rax
	movq	-1040(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %879
	jmp	mz_zip_writer_add_read_buf_callback879
	.text
mz_zip_writer_add_read_buf_callback879:
	# %880 = load i8*, i8** %128
	movq	-1024(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %881 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %882 = load i64, i64* %131
	movq	-952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %883 = load i32, i32* %130
	movq	-1040(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %884 = call i32 @tdefl_compress_buffer (i8* %880, i8* %881, i64 %882, i32 %883)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_buffer
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i32 %884, i32* %129
	movq	%rsi, %rax
	movq	-1032(%rbp), %rcx
	movl	%eax, (%rcx)
	# %885 = load i32, i32* %129
	movq	-1032(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %886 = icmp eq i32 %885, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %886, label %887, label %888
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback888
	jmp	mz_zip_writer_add_read_buf_callback887
	.text
mz_zip_writer_add_read_buf_callback887:
	# store i32 1, i32* %126
	movq	$1, %rax
	movq	-1008(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %902
	jmp	mz_zip_writer_add_read_buf_callback902
	.text
mz_zip_writer_add_read_buf_callback888:
	# %889 = load i32, i32* %129
	movq	-1032(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %890 = icmp ne i32 %889, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %890, label %891, label %900
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback900
	jmp	mz_zip_writer_add_read_buf_callback891
	.text
mz_zip_writer_add_read_buf_callback891:
	# %892 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %892, i8** %78
	movq	%rsi, %rax
	movq	-632(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 12, i32* %79
	movq	$12, %rax
	movq	-640(%rbp), %rcx
	movl	%eax, (%rcx)
	# %893 = load i8*, i8** %78
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %894 = icmp ne i8* %893, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %894, label %895, label %899
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback899
	jmp	mz_zip_writer_add_read_buf_callback895
	.text
mz_zip_writer_add_read_buf_callback895:
	# %896 = load i32, i32* %79
	movq	-640(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %897 = load i8*, i8** %78
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %898 = getelementptr %struct.mz_zip_archive, i8* %897, i32 0, i32 5
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 %896, i32* %898
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %899
	jmp	mz_zip_writer_add_read_buf_callback899
	.text
mz_zip_writer_add_read_buf_callback899:
	# br label %902
	jmp	mz_zip_writer_add_read_buf_callback902
	.text
mz_zip_writer_add_read_buf_callback900:
	# br label %901
	jmp	mz_zip_writer_add_read_buf_callback901
	.text
mz_zip_writer_add_read_buf_callback901:
	# br label %828
	jmp	mz_zip_writer_add_read_buf_callback828
	.text
mz_zip_writer_add_read_buf_callback902:
	# %903 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %904 = getelementptr %struct.mz_zip_archive, i8* %903, i32 0, i32 8
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %905 = load i8*, i8** %904
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %906 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %907 = getelementptr %struct.mz_zip_archive, i8* %906, i32 0, i32 10
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %908 = load i8*, i8** %907
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %909 = load i8*, i8** %128
	movq	-1024(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# call void %905 (i8* %908, i8* %909)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %910 = load i32, i32* %126
	movq	-1008(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %911 = icmp ne i32 %910, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %911, label %920, label %912
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback912
	jmp	mz_zip_writer_add_read_buf_callback920
	.text
mz_zip_writer_add_read_buf_callback912:
	# %913 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %914 = getelementptr %struct.mz_zip_archive, i8* %913, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %915 = load i8*, i8** %914
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %916 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %917 = getelementptr %struct.mz_zip_archive, i8* %916, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %918 = load i8*, i8** %917
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %919 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %915 (i8* %918, i8* %919)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback920:
	# %921 = load i64, i64* %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %921, i64* %114
	movq	%rsi, %rax
	movq	-912(%rbp), %rcx
	movq	%rax, (%rcx)
	# %922 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 2
	movq	-1016(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %923 = load i64, i64* %922
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %923, i64* %115
	movq	%rsi, %rax
	movq	-920(%rbp), %rcx
	movq	%rax, (%rcx)
	# %924 = getelementptr %struct.mz_zip_writer_add_state, i8* %127, i32 0, i32 1
	movq	-1016(%rbp), %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %925 = load i64, i64* %924
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %925, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %926
	jmp	mz_zip_writer_add_read_buf_callback926
	.text
mz_zip_writer_add_read_buf_callback926:
	# %927 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %928 = getelementptr %struct.mz_zip_archive, i8* %927, i32 0, i32 8
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %929 = load i8*, i8** %928
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %930 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %931 = getelementptr %struct.mz_zip_archive, i8* %930, i32 0, i32 10
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %932 = load i8*, i8** %931
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %933 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# call void %929 (i8* %932, i8* %933)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %934
	jmp	mz_zip_writer_add_read_buf_callback934
	.text
mz_zip_writer_add_read_buf_callback934:
	# %935 = load i32, i32* %99
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %936 = and i32 %935, 131072
	movq	%rsi, %rax
	movq	$131072, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %937 = icmp ne i32 %936, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %937, label %1155, label %938
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback938
	jmp	mz_zip_writer_add_read_buf_callback1155
	.text
mz_zip_writer_add_read_buf_callback938:
	# store i32 16, i32* %133
	movq	$16, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %939 = getelementptr [24 x i8], i8* %132, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %940 = getelementptr i8, i8* %939, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %940, i8** %26
	movq	%rsi, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 134695760, i32* %27
	movq	$134695760, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %941 = load i32, i32* %27
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %942 = trunc i32 %941 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %943 = load i8*, i8** %26
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %942, i8* %943
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %944 = load i32, i32* %27
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %945 = lshr i32 %944, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %946 = trunc i32 %945 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %947 = load i8*, i8** %26
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %948 = getelementptr i8, i8* %947, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %946, i8* %948
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %949 = load i32, i32* %27
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %950 = lshr i32 %949, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %951 = trunc i32 %950 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %952 = load i8*, i8** %26
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %953 = getelementptr i8, i8* %952, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %951, i8* %953
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %954 = load i32, i32* %27
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %955 = lshr i32 %954, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %956 = trunc i32 %955 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %957 = load i8*, i8** %26
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %958 = getelementptr i8, i8* %957, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %956, i8* %958
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %959 = getelementptr [24 x i8], i8* %132, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %960 = getelementptr i8, i8* %959, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %961 = load i32, i32* %105
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %960, i8** %28
	movq	%rdi, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %961, i32* %29
	movq	%rsi, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %962 = load i32, i32* %29
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %963 = trunc i32 %962 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %964 = load i8*, i8** %28
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %963, i8* %964
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %965 = load i32, i32* %29
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %966 = lshr i32 %965, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %967 = trunc i32 %966 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %968 = load i8*, i8** %28
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %969 = getelementptr i8, i8* %968, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %967, i8* %969
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %970 = load i32, i32* %29
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %971 = lshr i32 %970, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %972 = trunc i32 %971 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %973 = load i8*, i8** %28
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %974 = getelementptr i8, i8* %973, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %972, i8* %974
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %975 = load i32, i32* %29
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %976 = lshr i32 %975, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %977 = trunc i32 %976 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %978 = load i8*, i8** %28
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %979 = getelementptr i8, i8* %978, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %977, i8* %979
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %980 = load i8*, i8** %118
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %981 = icmp eq i8* %980, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# br i1 %981, label %982, label %1039
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1039
	jmp	mz_zip_writer_add_read_buf_callback982
	.text
mz_zip_writer_add_read_buf_callback982:
	# %983 = load i64, i64* %115
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %984 = icmp ugt i64 %983, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %984, label %985, label %994
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback994
	jmp	mz_zip_writer_add_read_buf_callback985
	.text
mz_zip_writer_add_read_buf_callback985:
	# %986 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %986, i8** %80
	movq	%rdx, %rax
	movq	-648(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %81
	movq	$29, %rax
	movq	-656(%rbp), %rcx
	movl	%eax, (%rcx)
	# %987 = load i8*, i8** %80
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %988 = icmp ne i8* %987, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %988, label %989, label %993
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback993
	jmp	mz_zip_writer_add_read_buf_callback989
	.text
mz_zip_writer_add_read_buf_callback989:
	# %990 = load i32, i32* %81
	movq	-656(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %991 = load i8*, i8** %80
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %992 = getelementptr %struct.mz_zip_archive, i8* %991, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %990, i32* %992
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %993
	jmp	mz_zip_writer_add_read_buf_callback993
	.text
mz_zip_writer_add_read_buf_callback993:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback994:
	# %995 = getelementptr [24 x i8], i8* %132, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %996 = getelementptr i8, i8* %995, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %997 = load i64, i64* %115
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %998 = trunc i64 %997 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %996, i8** %30
	movq	%rdi, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %998, i32* %31
	movq	%rsi, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %999 = load i32, i32* %31
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1000 = trunc i32 %999 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1001 = load i8*, i8** %30
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %1000, i8* %1001
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1002 = load i32, i32* %31
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1003 = lshr i32 %1002, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1004 = trunc i32 %1003 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1005 = load i8*, i8** %30
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1006 = getelementptr i8, i8* %1005, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1004, i8* %1006
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1007 = load i32, i32* %31
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1008 = lshr i32 %1007, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1009 = trunc i32 %1008 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1010 = load i8*, i8** %30
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1011 = getelementptr i8, i8* %1010, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1009, i8* %1011
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1012 = load i32, i32* %31
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1013 = lshr i32 %1012, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1014 = trunc i32 %1013 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1015 = load i8*, i8** %30
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1016 = getelementptr i8, i8* %1015, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1014, i8* %1016
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1017 = getelementptr [24 x i8], i8* %132, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1018 = getelementptr i8, i8* %1017, i64 12
	movq	%rsi, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1019 = load i64, i64* %114
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1020 = trunc i64 %1019 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %1018, i8** %32
	movq	%rdi, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1020, i32* %33
	movq	%rsi, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1021 = load i32, i32* %33
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1022 = trunc i32 %1021 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1023 = load i8*, i8** %32
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %1022, i8* %1023
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1024 = load i32, i32* %33
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1025 = lshr i32 %1024, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1026 = trunc i32 %1025 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1027 = load i8*, i8** %32
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1028 = getelementptr i8, i8* %1027, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1026, i8* %1028
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1029 = load i32, i32* %33
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1030 = lshr i32 %1029, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1031 = trunc i32 %1030 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1032 = load i8*, i8** %32
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1033 = getelementptr i8, i8* %1032, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1031, i8* %1033
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1034 = load i32, i32* %33
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1035 = lshr i32 %1034, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1036 = trunc i32 %1035 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1037 = load i8*, i8** %32
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1038 = getelementptr i8, i8* %1037, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1036, i8* %1038
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# br label %1134
	jmp	mz_zip_writer_add_read_buf_callback1134
	.text
mz_zip_writer_add_read_buf_callback1039:
	# %1040 = getelementptr [24 x i8], i8* %132, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1041 = getelementptr i8, i8* %1040, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1042 = load i64, i64* %115
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %1041, i8** %18
	movq	%rdi, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1042, i64* %19
	movq	%rsi, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1043 = load i8*, i8** %18
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1044 = load i64, i64* %19
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1045 = trunc i64 %1044 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %1043, i8** %14
	movq	%rdi, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1045, i32* %15
	movq	%rsi, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1046 = load i32, i32* %15
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1047 = trunc i32 %1046 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1048 = load i8*, i8** %14
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %1047, i8* %1048
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1049 = load i32, i32* %15
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1050 = lshr i32 %1049, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1051 = trunc i32 %1050 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1052 = load i8*, i8** %14
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1053 = getelementptr i8, i8* %1052, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1051, i8* %1053
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1054 = load i32, i32* %15
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1055 = lshr i32 %1054, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1056 = trunc i32 %1055 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1057 = load i8*, i8** %14
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1058 = getelementptr i8, i8* %1057, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1056, i8* %1058
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1059 = load i32, i32* %15
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1060 = lshr i32 %1059, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1061 = trunc i32 %1060 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1062 = load i8*, i8** %14
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1063 = getelementptr i8, i8* %1062, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1061, i8* %1063
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1064 = load i8*, i8** %18
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1065 = getelementptr i8, i8* %1064, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1066 = load i64, i64* %19
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1067 = lshr i64 %1066, 32
	movq	%rsi, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rsi
	# %1068 = trunc i64 %1067 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %1065, i8** %16
	movq	%rdi, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1068, i32* %17
	movq	%rsi, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1069 = load i32, i32* %17
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1070 = trunc i32 %1069 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1071 = load i8*, i8** %16
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %1070, i8* %1071
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1072 = load i32, i32* %17
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1073 = lshr i32 %1072, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1074 = trunc i32 %1073 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1075 = load i8*, i8** %16
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1076 = getelementptr i8, i8* %1075, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1074, i8* %1076
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1077 = load i32, i32* %17
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1078 = lshr i32 %1077, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1079 = trunc i32 %1078 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1080 = load i8*, i8** %16
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1081 = getelementptr i8, i8* %1080, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1079, i8* %1081
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1082 = load i32, i32* %17
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1083 = lshr i32 %1082, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1084 = trunc i32 %1083 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1085 = load i8*, i8** %16
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1086 = getelementptr i8, i8* %1085, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1084, i8* %1086
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1087 = getelementptr [24 x i8], i8* %132, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1088 = getelementptr i8, i8* %1087, i64 16
	movq	%rsi, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1089 = load i64, i64* %114
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %1088, i8** %24
	movq	%rdi, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1089, i64* %25
	movq	%rsi, %rax
	movq	-200(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1090 = load i8*, i8** %24
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1091 = load i64, i64* %25
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1092 = trunc i64 %1091 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %1090, i8** %20
	movq	%rdi, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1092, i32* %21
	movq	%rsi, %rax
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1093 = load i32, i32* %21
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1094 = trunc i32 %1093 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1095 = load i8*, i8** %20
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %1094, i8* %1095
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1096 = load i32, i32* %21
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1097 = lshr i32 %1096, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1098 = trunc i32 %1097 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1099 = load i8*, i8** %20
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1100 = getelementptr i8, i8* %1099, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1098, i8* %1100
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1101 = load i32, i32* %21
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1102 = lshr i32 %1101, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1103 = trunc i32 %1102 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1104 = load i8*, i8** %20
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1105 = getelementptr i8, i8* %1104, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1103, i8* %1105
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1106 = load i32, i32* %21
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1107 = lshr i32 %1106, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1108 = trunc i32 %1107 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1109 = load i8*, i8** %20
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1110 = getelementptr i8, i8* %1109, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1108, i8* %1110
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1111 = load i8*, i8** %24
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1112 = getelementptr i8, i8* %1111, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1113 = load i64, i64* %25
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1114 = lshr i64 %1113, 32
	movq	%rsi, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rsi
	# %1115 = trunc i64 %1114 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %1112, i8** %22
	movq	%rdi, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1115, i32* %23
	movq	%rsi, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1116 = load i32, i32* %23
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1117 = trunc i32 %1116 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1118 = load i8*, i8** %22
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %1117, i8* %1118
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1119 = load i32, i32* %23
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1120 = lshr i32 %1119, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1121 = trunc i32 %1120 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1122 = load i8*, i8** %22
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1123 = getelementptr i8, i8* %1122, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1121, i8* %1123
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1124 = load i32, i32* %23
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1125 = lshr i32 %1124, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1126 = trunc i32 %1125 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1127 = load i8*, i8** %22
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1128 = getelementptr i8, i8* %1127, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1126, i8* %1128
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %1129 = load i32, i32* %23
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1130 = lshr i32 %1129, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rsi
	# %1131 = trunc i32 %1130 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1132 = load i8*, i8** %22
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1133 = getelementptr i8, i8* %1132, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %1131, i8* %1133
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# store i32 24, i32* %133
	movq	$24, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %1134
	jmp	mz_zip_writer_add_read_buf_callback1134
	.text
mz_zip_writer_add_read_buf_callback1134:
	# %1135 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1136 = getelementptr %struct.mz_zip_archive, i8* %1135, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1137 = load i8*, i8** %1136
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1138 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1139 = getelementptr %struct.mz_zip_archive, i8* %1138, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1140 = load i8*, i8** %1139
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %1141 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1142 = getelementptr [24 x i8], i8* %132, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$24, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1143 = load i32, i32* %133
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1144 = zext i32 %1143 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1145 = call i64 %1137 (i8* %1140, i64 %1141, i8* %1142, i64 %1144)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %1146 = load i32, i32* %133
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1147 = zext i32 %1146 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1148 = icmp ne i64 %1145, %1147
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1148, label %1149, label %1150
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1150
	jmp	mz_zip_writer_add_read_buf_callback1149
	.text
mz_zip_writer_add_read_buf_callback1149:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback1150:
	# %1151 = load i32, i32* %133
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1152 = zext i32 %1151 to i64
	movq	%rsi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1153 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1154 = add i64 %1153, %1152
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %1154, i64* %113
	movq	%rsi, %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1155
	jmp	mz_zip_writer_add_read_buf_callback1155
	.text
mz_zip_writer_add_read_buf_callback1155:
	# %1156 = load i32, i32* %99
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1157 = and i32 %1156, 131072
	movq	%rsi, %rax
	movq	$131072, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %1158 = icmp ne i32 %1157, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1158, label %1159, label %1303
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1303
	jmp	mz_zip_writer_add_read_buf_callback1159
	.text
mz_zip_writer_add_read_buf_callback1159:
	# %1160 = load i8*, i8** %118
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1161 = icmp ne i8* %1160, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1161, label %1162, label %1183
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1183
	jmp	mz_zip_writer_add_read_buf_callback1162
	.text
mz_zip_writer_add_read_buf_callback1162:
	# %1163 = getelementptr [28 x i8], i8* %120, i64 0, i64 0
	movq	-968(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %1164 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1165 = icmp uge i64 %1164, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %1165, label %1166, label %1167
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1167
	jmp	mz_zip_writer_add_read_buf_callback1166
	.text
mz_zip_writer_add_read_buf_callback1166:
	# br label %1168
	movq	-912(%rbp), %r8
	jmp	mz_zip_writer_add_read_buf_callback1168
	.text
mz_zip_writer_add_read_buf_callback1167:
	# br label %1168
	movq	$0, %r8
	jmp	mz_zip_writer_add_read_buf_callback1168
	.text
mz_zip_writer_add_read_buf_callback1168:
	# %1169 = phi i8* [%114, %1166], [null, %1167]
	# %1170 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1171 = icmp uge i64 %1170, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %1171, label %1172, label %1173
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1173
	jmp	mz_zip_writer_add_read_buf_callback1172
	.text
mz_zip_writer_add_read_buf_callback1172:
	# br label %1174
	movq	-920(%rbp), %rdi
	jmp	mz_zip_writer_add_read_buf_callback1174
	.text
mz_zip_writer_add_read_buf_callback1173:
	# br label %1174
	movq	$0, %rdi
	jmp	mz_zip_writer_add_read_buf_callback1174
	.text
mz_zip_writer_add_read_buf_callback1174:
	# %1175 = phi i8* [%115, %1172], [null, %1173]
	# %1176 = load i64, i64* %112
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1177 = icmp uge i64 %1176, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %1177, label %1178, label %1179
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1179
	jmp	mz_zip_writer_add_read_buf_callback1178
	.text
mz_zip_writer_add_read_buf_callback1178:
	# br label %1180
	movq	-280(%rbp), %rsi
	jmp	mz_zip_writer_add_read_buf_callback1180
	.text
mz_zip_writer_add_read_buf_callback1179:
	# br label %1180
	movq	$0, %rsi
	jmp	mz_zip_writer_add_read_buf_callback1180
	.text
mz_zip_writer_add_read_buf_callback1180:
	# %1181 = phi i8* [%112, %1178], [null, %1179]
	# %1182 = call i32 @mz_zip_writer_create_zip64_extra_data (i8* %1163, i8* %1169, i8* %1175, i8* %1181)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_zip64_extra_data
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i32 %1182, i32* %119
	movq	%rsi, %rax
	movq	-960(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1183
	jmp	mz_zip_writer_add_read_buf_callback1183
	.text
mz_zip_writer_add_read_buf_callback1183:
	# %1184 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %1185 = getelementptr [30 x i8], i8* %117, i64 0, i64 0
	movq	-936(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r13
	# %1186 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1187 = trunc i64 %1186 to i16
	movq	%rsi, %rax
	movq	$0, %r12
	movw	%ax, %r12w
	# %1188 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1189 = load i32, i32* %101
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1190 = add i32 %1188, %1189
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1191 = trunc i32 %1190 to i16
	movq	%rsi, %rax
	movq	$0, %r11
	movw	%ax, %r11w
	# %1192 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1193 = icmp uge i64 %1192, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %1193, label %1194, label %1195
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1195
	jmp	mz_zip_writer_add_read_buf_callback1194
	.text
mz_zip_writer_add_read_buf_callback1194:
	# br label %1197
	movq	$4294967295, %r10
	jmp	mz_zip_writer_add_read_buf_callback1197
	.text
mz_zip_writer_add_read_buf_callback1195:
	# %1196 = load i64, i64* %114
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %1197
	movq	%rbx, %r10
	jmp	mz_zip_writer_add_read_buf_callback1197
	.text
mz_zip_writer_add_read_buf_callback1197:
	# %1198 = phi i64 [4294967295, %1194], [%1196, %1195]
	# %1199 = load i64, i64* %95
	movq	-768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1200 = icmp uge i64 %1199, 4294967295
	movq	%rbx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setnb	%bl
	# br i1 %1200, label %1201, label %1202
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1202
	jmp	mz_zip_writer_add_read_buf_callback1201
	.text
mz_zip_writer_add_read_buf_callback1201:
	# br label %1204
	movq	$4294967295, %r9
	jmp	mz_zip_writer_add_read_buf_callback1204
	.text
mz_zip_writer_add_read_buf_callback1202:
	# %1203 = load i64, i64* %115
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %1204
	movq	%rdx, %r9
	jmp	mz_zip_writer_add_read_buf_callback1204
	.text
mz_zip_writer_add_read_buf_callback1204:
	# %1205 = phi i64 [4294967295, %1201], [%1203, %1202]
	# %1206 = load i32, i32* %105
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %1207 = load i16, i16* %108
	movq	-872(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %1208 = load i16, i16* %104
	movq	-840(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %1209 = load i16, i16* %109
	movq	-880(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %1210 = load i16, i16* %110
	movq	-888(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1211 = call i32 @mz_zip_writer_create_local_dir_header (i8* %1184, i8* %1185, i16 %1187, i16 %1191, i64 %1198, i64 %1205, i32 %1206, i16 %1207, i16 %1208, i16 %1209, i16 %1210)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r14, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_local_dir_header
	addq	$40, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1212 = icmp ne i32 %1211, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1212, label %1222, label %1213
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1213
	jmp	mz_zip_writer_add_read_buf_callback1222
	.text
mz_zip_writer_add_read_buf_callback1213:
	# %1214 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1214, i8** %82
	movq	%rdx, %rax
	movq	-664(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 27, i32* %83
	movq	$27, %rax
	movq	-672(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1215 = load i8*, i8** %82
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1216 = icmp ne i8* %1215, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1216, label %1217, label %1221
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1221
	jmp	mz_zip_writer_add_read_buf_callback1217
	.text
mz_zip_writer_add_read_buf_callback1217:
	# %1218 = load i32, i32* %83
	movq	-672(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1219 = load i8*, i8** %82
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1220 = getelementptr %struct.mz_zip_archive, i8* %1219, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1218, i32* %1220
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1221
	jmp	mz_zip_writer_add_read_buf_callback1221
	.text
mz_zip_writer_add_read_buf_callback1221:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback1222:
	# %1223 = load i64, i64* %112
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %1223, i64* %123
	movq	%rdx, %rax
	movq	-984(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1224 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1225 = getelementptr %struct.mz_zip_archive, i8* %1224, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1226 = load i8*, i8** %1225
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1227 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1228 = getelementptr %struct.mz_zip_archive, i8* %1227, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1229 = load i8*, i8** %1228
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1230 = load i64, i64* %123
	movq	-984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1231 = getelementptr [30 x i8], i8* %117, i64 0, i64 0
	movq	-936(%rbp), %rcx
	movq	$0, %rax
	imulq	$30, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1232 = call i64 %1226 (i8* %1229, i64 %1230, i8* %1231, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1233 = icmp ne i64 %1232, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1233, label %1234, label %1243
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1243
	jmp	mz_zip_writer_add_read_buf_callback1234
	.text
mz_zip_writer_add_read_buf_callback1234:
	# %1235 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1235, i8** %84
	movq	%rdx, %rax
	movq	-680(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %85
	movq	$19, %rax
	movq	-688(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1236 = load i8*, i8** %84
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1237 = icmp ne i8* %1236, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1237, label %1238, label %1242
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1242
	jmp	mz_zip_writer_add_read_buf_callback1238
	.text
mz_zip_writer_add_read_buf_callback1238:
	# %1239 = load i32, i32* %85
	movq	-688(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1240 = load i8*, i8** %84
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1241 = getelementptr %struct.mz_zip_archive, i8* %1240, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1239, i32* %1241
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1242
	jmp	mz_zip_writer_add_read_buf_callback1242
	.text
mz_zip_writer_add_read_buf_callback1242:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback1243:
	# %1244 = load i8*, i8** %118
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1245 = icmp ne i8* %1244, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1245, label %1246, label %1302
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1302
	jmp	mz_zip_writer_add_read_buf_callback1246
	.text
mz_zip_writer_add_read_buf_callback1246:
	# %1247 = load i64, i64* %123
	movq	-984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1248 = add i64 %1247, 30
	movq	%rdx, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1248, i64* %123
	movq	%rdx, %rax
	movq	-984(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1249 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1250 = getelementptr %struct.mz_zip_archive, i8* %1249, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1251 = load i8*, i8** %1250
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1252 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1253 = getelementptr %struct.mz_zip_archive, i8* %1252, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1254 = load i8*, i8** %1253
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1255 = load i64, i64* %123
	movq	-984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1256 = load i8*, i8** %92
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1257 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1258 = call i64 %1251 (i8* %1254, i64 %1255, i8* %1256, i64 %1257)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %1259 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1260 = icmp ne i64 %1258, %1259
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1260, label %1261, label %1270
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1270
	jmp	mz_zip_writer_add_read_buf_callback1261
	.text
mz_zip_writer_add_read_buf_callback1261:
	# %1262 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1262, i8** %86
	movq	%rdx, %rax
	movq	-696(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %87
	movq	$19, %rax
	movq	-704(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1263 = load i8*, i8** %86
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1264 = icmp ne i8* %1263, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1264, label %1265, label %1269
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1269
	jmp	mz_zip_writer_add_read_buf_callback1265
	.text
mz_zip_writer_add_read_buf_callback1265:
	# %1266 = load i32, i32* %87
	movq	-704(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1267 = load i8*, i8** %86
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1268 = getelementptr %struct.mz_zip_archive, i8* %1267, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1266, i32* %1268
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1269
	jmp	mz_zip_writer_add_read_buf_callback1269
	.text
mz_zip_writer_add_read_buf_callback1269:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback1270:
	# %1271 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1272 = load i64, i64* %123
	movq	-984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1273 = add i64 %1272, %1271
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1273, i64* %123
	movq	%rdx, %rax
	movq	-984(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1274 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1275 = getelementptr %struct.mz_zip_archive, i8* %1274, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1276 = load i8*, i8** %1275
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1277 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1278 = getelementptr %struct.mz_zip_archive, i8* %1277, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1279 = load i8*, i8** %1278
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1280 = load i64, i64* %123
	movq	-984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1281 = getelementptr [28 x i8], i8* %120, i64 0, i64 0
	movq	-968(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1282 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1283 = zext i32 %1282 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1284 = call i64 %1276 (i8* %1279, i64 %1280, i8* %1281, i64 %1283)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %1285 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1286 = zext i32 %1285 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1287 = icmp ne i64 %1284, %1286
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1287, label %1288, label %1297
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1297
	jmp	mz_zip_writer_add_read_buf_callback1288
	.text
mz_zip_writer_add_read_buf_callback1288:
	# %1289 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1289, i8** %88
	movq	%rdx, %rax
	movq	-712(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %89
	movq	$19, %rax
	movq	-720(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1290 = load i8*, i8** %88
	movq	-712(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1291 = icmp ne i8* %1290, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1291, label %1292, label %1296
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1296
	jmp	mz_zip_writer_add_read_buf_callback1292
	.text
mz_zip_writer_add_read_buf_callback1292:
	# %1293 = load i32, i32* %89
	movq	-720(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1294 = load i8*, i8** %88
	movq	-712(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1295 = getelementptr %struct.mz_zip_archive, i8* %1294, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1293, i32* %1295
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1296
	jmp	mz_zip_writer_add_read_buf_callback1296
	.text
mz_zip_writer_add_read_buf_callback1296:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback1297:
	# %1298 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1299 = zext i32 %1298 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1300 = load i64, i64* %123
	movq	-984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1301 = add i64 %1300, %1299
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1301, i64* %123
	movq	%rdx, %rax
	movq	-984(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1302
	jmp	mz_zip_writer_add_read_buf_callback1302
	.text
mz_zip_writer_add_read_buf_callback1302:
	# br label %1303
	jmp	mz_zip_writer_add_read_buf_callback1303
	.text
mz_zip_writer_add_read_buf_callback1303:
	# %1304 = load i8*, i8** %118
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1305 = icmp ne i8* %1304, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1305, label %1306, label %1327
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1327
	jmp	mz_zip_writer_add_read_buf_callback1306
	.text
mz_zip_writer_add_read_buf_callback1306:
	# %1307 = getelementptr [28 x i8], i8* %120, i64 0, i64 0
	movq	-968(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %1308 = load i64, i64* %114
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1309 = icmp uge i64 %1308, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1309, label %1310, label %1311
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1311
	jmp	mz_zip_writer_add_read_buf_callback1310
	.text
mz_zip_writer_add_read_buf_callback1310:
	# br label %1312
	movq	-912(%rbp), %rsi
	jmp	mz_zip_writer_add_read_buf_callback1312
	.text
mz_zip_writer_add_read_buf_callback1311:
	# br label %1312
	movq	$0, %rsi
	jmp	mz_zip_writer_add_read_buf_callback1312
	.text
mz_zip_writer_add_read_buf_callback1312:
	# %1313 = phi i8* [%114, %1310], [null, %1311]
	# %1314 = load i64, i64* %114
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1315 = icmp uge i64 %1314, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1315, label %1316, label %1317
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1317
	jmp	mz_zip_writer_add_read_buf_callback1316
	.text
mz_zip_writer_add_read_buf_callback1316:
	# br label %1318
	movq	-920(%rbp), %rbx
	jmp	mz_zip_writer_add_read_buf_callback1318
	.text
mz_zip_writer_add_read_buf_callback1317:
	# br label %1318
	movq	$0, %rbx
	jmp	mz_zip_writer_add_read_buf_callback1318
	.text
mz_zip_writer_add_read_buf_callback1318:
	# %1319 = phi i8* [%115, %1316], [null, %1317]
	# %1320 = load i64, i64* %112
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1321 = icmp uge i64 %1320, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1321, label %1322, label %1323
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1323
	jmp	mz_zip_writer_add_read_buf_callback1322
	.text
mz_zip_writer_add_read_buf_callback1322:
	# br label %1324
	movq	-280(%rbp), %rdx
	jmp	mz_zip_writer_add_read_buf_callback1324
	.text
mz_zip_writer_add_read_buf_callback1323:
	# br label %1324
	movq	$0, %rdx
	jmp	mz_zip_writer_add_read_buf_callback1324
	.text
mz_zip_writer_add_read_buf_callback1324:
	# %1325 = phi i8* [%112, %1322], [null, %1323]
	# %1326 = call i32 @mz_zip_writer_create_zip64_extra_data (i8* %1307, i8* %1313, i8* %1319, i8* %1325)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_create_zip64_extra_data
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %1326, i32* %119
	movq	%rdx, %rax
	movq	-960(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1327
	jmp	mz_zip_writer_add_read_buf_callback1327
	.text
mz_zip_writer_add_read_buf_callback1327:
	# %1328 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1056(%rbp)
	# %1329 = load i8*, i8** %92
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1048(%rbp)
	# %1330 = load i64, i64* %116
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1331 = trunc i64 %1330 to i16
	movq	%rdx, %rax
	movq	$0, -1064(%rbp)
	movw	%ax, -1064(%rbp)
	# %1332 = load i8*, i8** %118
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1072(%rbp)
	# %1333 = load i32, i32* %119
	movq	-960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1334 = trunc i32 %1333 to i16
	movq	%rdx, %rax
	movq	$0, -1080(%rbp)
	movw	%ax, -1080(%rbp)
	# %1335 = load i8*, i8** %97
	movq	-784(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -1088(%rbp)
	# %1336 = load i16, i16* %98
	movq	-792(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r15
	movw	%ax, %r15w
	# %1337 = load i64, i64* %114
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %1338 = load i64, i64* %115
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %1339 = load i32, i32* %105
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %1340 = load i16, i16* %108
	movq	-872(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r10
	movw	%ax, %r10w
	# %1341 = load i16, i16* %104
	movq	-840(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r9
	movw	%ax, %r9w
	# %1342 = load i16, i16* %109
	movq	-880(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %1343 = load i16, i16* %110
	movq	-888(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %1344 = load i64, i64* %112
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1345 = load i16, i16* %111
	movq	-896(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1346 = zext i16 %1345 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1347 = load i8*, i8** %102
	movq	-824(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %1348 = load i32, i32* %103
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1349 = call i32 @mz_zip_writer_add_to_central_dir (i8* %1328, i8* %1329, i16 %1331, i8* %1332, i16 %1334, i8* %1335, i16 %1336, i64 %1337, i64 %1338, i32 %1339, i16 %1340, i16 %1341, i16 %1342, i16 %1343, i64 %1344, i32 %1346, i8* %1347, i32 %1348)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	-1056(%rbp), %rax
	pushq	%rax
	movq	-1048(%rbp), %rax
	pushq	%rax
	movq	-1064(%rbp), %rax
	pushq	%rax
	movq	-1072(%rbp), %rax
	pushq	%rax
	movq	-1080(%rbp), %rax
	pushq	%rax
	movq	-1088(%rbp), %rax
	pushq	%rax
	movq	%r15, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	112(%rbp)
	popq	104(%rbp)
	popq	96(%rbp)
	popq	88(%rbp)
	popq	80(%rbp)
	popq	72(%rbp)
	popq	64(%rbp)
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_add_to_central_dir
	addq	$96, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1350 = icmp ne i32 %1349, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1350, label %1352, label %1351
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_read_buf_callback1351
	jmp	mz_zip_writer_add_read_buf_callback1352
	.text
mz_zip_writer_add_read_buf_callback1351:
	# store i32 0, i32* %90
	movq	$0, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback1352:
	# %1353 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1354 = getelementptr %struct.mz_zip_archive, i8* %1353, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1355 = load i32, i32* %1354
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1356 = add i32 %1355, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1356, i32* %1354
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1357 = load i64, i64* %113
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1358 = load i8*, i8** %91
	movq	-736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1359 = getelementptr %struct.mz_zip_archive, i8* %1358, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1357, i64* %1359
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %90
	movq	$1, %rax
	movq	-728(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1360
	jmp	mz_zip_writer_add_read_buf_callback1360
	.text
mz_zip_writer_add_read_buf_callback1360:
	# %1361 = load i32, i32* %90
	movq	-728(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %1361
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_cfile
_mz_zip_writer_add_cfile:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$96, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	pushq	40(%rbp)
	pushq	48(%rbp)
	pushq	56(%rbp)
	pushq	64(%rbp)
	popq	-88(%rbp)
	popq	-80(%rbp)
	popq	-72(%rbp)
	popq	-64(%rbp)
	popq	-56(%rbp)
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %16 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %19 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r10
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %23 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %13
	movq	-8(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %14
	movq	-16(%rbp), %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %15
	movq	-24(%rbp), %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %16
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i8* %4, i8** %17
	movq	-32(%rbp), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i8* %5, i8** %18
	movq	-40(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i16 %6, i16* %19
	movq	-48(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %7, i32* %20
	movq	-56(%rbp), %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# store i8* %8, i8** %21
	movq	-64(%rbp), %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %9, i32* %22
	movq	-72(%rbp), %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# store i8* %10, i8** %23
	movq	-80(%rbp), %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 %11, i32* %24
	movq	-88(%rbp), %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %25 = load i8*, i8** %13
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = load i8*, i8** %14
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %r15
	# %27 = load i8*, i8** %15
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %28 = load i64, i64* %16
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %29 = load i8*, i8** %17
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %30 = load i8*, i8** %18
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %31 = load i16, i16* %19
	movq	%r10, %rax
	movw	(%rax), %ax
	movq	$0, %r10
	movw	%ax, %r10w
	# %32 = load i32, i32* %20
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %r9
	movl	%eax, %r9d
	# %33 = load i8*, i8** %21
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %34 = load i32, i32* %22
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %35 = load i8*, i8** %23
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %36 = load i32, i32* %24
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %37 = call i32 @mz_zip_writer_add_read_buf_callback (i8* %25, i8* %26, i8* @mz_file_read_func_stdio, i8* %27, i64 %28, i8* %29, i8* %30, i16 %31, i32 %32, i8* %33, i32 %34, i8* %35, i32 %36)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	%r15, %rax
	pushq	%rax
	leaq	_mz_file_read_func_stdio(%rip), %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	72(%rbp)
	popq	64(%rbp)
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_add_read_buf_callback
	addq	$56, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %37
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_file_read_func_stdio
_mz_file_read_func_stdio:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r12
	popq	%r13
	popq	%r14
	# %5 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r10
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %6
	movq	%r14, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %7
	movq	%r13, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %8
	movq	%r12, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %9
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %12 = load i8*, i8** %6
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %12, i8** %10
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %13 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = call i64 @ftello (i8* %13)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_ftello
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %14, i64* %11
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %15 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = icmp slt i64 %15, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setl	%dl
	# br i1 %16, label %26, label %17
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_file_read_func_stdio17
	jmp	mz_file_read_func_stdio26
	.text
mz_file_read_func_stdio17:
	# %18 = load i64, i64* %11
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %19 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %20 = icmp ne i64 %18, %19
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %20, label %21, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_file_read_func_stdio27
	jmp	mz_file_read_func_stdio21
	.text
mz_file_read_func_stdio21:
	# %22 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = load i64, i64* %7
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %24 = call i32 @fseeko (i8* %22, i64 %23, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fseeko
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %25 = icmp ne i32 %24, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %25, label %26, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_file_read_func_stdio27
	jmp	mz_file_read_func_stdio26
	.text
mz_file_read_func_stdio26:
	# store i64 0, i64* %5
	movq	$0, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %32
	jmp	mz_file_read_func_stdio32
	.text
mz_file_read_func_stdio27:
	# %28 = load i8*, i8** %8
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %29 = load i64, i64* %9
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %30 = load i8*, i8** %10
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %31 = call i64 @fread (i8* %28, i64 1, i64 %29, i8* %30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fread
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %31, i64* %5
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# br label %32
	jmp	mz_file_read_func_stdio32
	.text
mz_file_read_func_stdio32:
	# %33 = load i64, i64* %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %33
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_file
_mz_zip_writer_add_file:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$80, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -80(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %16 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r11
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %19 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# %20 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %12
	movq	-8(%rbp), %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %13
	movq	-16(%rbp), %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %14
	movq	-24(%rbp), %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %15
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i16 %4, i16* %16
	movq	-32(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %5, i32* %17
	movq	-40(%rbp), %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i8* null, i8** %18
	movq	$0, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %19
	movq	$0, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %21
	movq	$0, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# call void @memset (i8* %20, i8 0, i64 8, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i8* %20, i8** %21
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %23 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %24 = call i32 @mz_zip_get_file_modified_time (i8* %23, i8* %20)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_get_file_modified_time
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %25 = icmp ne i32 %24, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %25, label %35, label %26
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_file26
	jmp	mz_zip_writer_add_file35
	.text
mz_zip_writer_add_file26:
	# %27 = load i8*, i8** %12
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %27, i8** %7
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 23, i32* %8
	movq	$23, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %28 = load i8*, i8** %7
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = icmp ne i8* %28, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %29, label %30, label %34
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_file34
	jmp	mz_zip_writer_add_file30
	.text
mz_zip_writer_add_file30:
	# %31 = load i32, i32* %8
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %32 = load i8*, i8** %7
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %33 = getelementptr %struct.mz_zip_archive, i8* %32, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %31, i32* %33
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %34
	jmp	mz_zip_writer_add_file34
	.text
mz_zip_writer_add_file34:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %68
	jmp	mz_zip_writer_add_file68
	.text
mz_zip_writer_add_file35:
	# %36 = load i8*, i8** %14
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %37 = call i8* @fopen (i8* %36, i8* @.str.18)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	leaq	_.str.18(%rip), %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fopen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %37, i8** %18
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %38 = load i8*, i8** %18
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %39 = icmp ne i8* %38, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %39, label %49, label %40
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_file40
	jmp	mz_zip_writer_add_file49
	.text
mz_zip_writer_add_file40:
	# %41 = load i8*, i8** %12
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %41, i8** %9
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 17, i32* %10
	movq	$17, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %42 = load i8*, i8** %9
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %43 = icmp ne i8* %42, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %43, label %44, label %48
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_file48
	jmp	mz_zip_writer_add_file44
	.text
mz_zip_writer_add_file44:
	# %45 = load i32, i32* %10
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %46 = load i8*, i8** %9
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = getelementptr %struct.mz_zip_archive, i8* %46, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %45, i32* %47
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %48
	jmp	mz_zip_writer_add_file48
	.text
mz_zip_writer_add_file48:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %68
	jmp	mz_zip_writer_add_file68
	.text
mz_zip_writer_add_file49:
	# %50 = load i8*, i8** %18
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %51 = call i32 @fseeko (i8* %50, i64 0, i32 2)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$2, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fseeko
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %52 = load i8*, i8** %18
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %53 = call i64 @ftello (i8* %52)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_ftello
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %53, i64* %19
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %54 = load i8*, i8** %18
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = call i32 @fseeko (i8* %54, i64 0, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_fseeko
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %56 = load i8*, i8** %12
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %57 = load i8*, i8** %13
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %58 = load i8*, i8** %18
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %59 = load i64, i64* %19
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %60 = load i8*, i8** %21
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %61 = load i8*, i8** %15
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %62 = load i16, i16* %16
	movq	%r11, %rax
	movw	(%rax), %ax
	movq	$0, %r11
	movw	%ax, %r11w
	# %63 = load i32, i32* %17
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %64 = call i32 @mz_zip_writer_add_cfile (i8* %56, i8* %57, i8* %58, i64 %59, i8* %60, i8* %61, i16 %62, i32 %63, i8* null, i32 0, i8* null, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r13, %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	64(%rbp)
	popq	56(%rbp)
	popq	48(%rbp)
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_add_cfile
	addq	$48, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %64, i32* %22
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %65 = load i8*, i8** %18
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %66 = call i32 @fclose (i8* %65)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_fclose
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %67 = load i32, i32* %22
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %67, i32* %11
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %68
	jmp	mz_zip_writer_add_file68
	.text
mz_zip_writer_add_file68:
	# %69 = load i32, i32* %11
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %69
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_file_modified_time
_mz_zip_get_file_modified_time:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%r8
	popq	%r9
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %6 = alloca %struct.stat
	subq	$140, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %4
	movq	%r9, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %5
	movq	%r8, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# %7 = load i8*, i8** %4
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = call i32 @stat (i8* %7, i8* %6)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %9 = icmp ne i32 %8, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %9, label %10, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_file_modified_time11
	jmp	mz_zip_get_file_modified_time10
	.text
mz_zip_get_file_modified_time10:
	# store i32 0, i32* %3
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %16
	jmp	mz_zip_get_file_modified_time16
	.text
mz_zip_get_file_modified_time11:
	# %12 = getelementptr %struct.stat, i8* %6, i32 0, i32 8
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$140, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %13 = getelementptr %struct.timespec, i8* %12, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$16, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %14 = load i64, i64* %13
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %15 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i64 %14, i64* %15
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %3
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %16
	jmp	mz_zip_get_file_modified_time16
	.text
mz_zip_get_file_modified_time16:
	# %17 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %17
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_add_from_zip_reader
_mz_zip_writer_add_from_zip_reader:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$2120, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%rbx
	popq	%r8
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -56(%rbp)
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %13 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %14 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %18 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -136(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -144(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %23 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %24 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -184(%rbp)
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -192(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -200(%rbp)
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -216(%rbp)
	# %29 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -240(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -248(%rbp)
	# %33 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %34 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -264(%rbp)
	# %35 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -280(%rbp)
	# %36 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -296(%rbp)
	# %38 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %39 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -312(%rbp)
	# %40 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %42 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -336(%rbp)
	# %43 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -344(%rbp)
	# %44 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %45 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -360(%rbp)
	# %46 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -368(%rbp)
	# %47 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -376(%rbp)
	# %48 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -384(%rbp)
	# %49 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -392(%rbp)
	# %50 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -400(%rbp)
	# %51 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -408(%rbp)
	# %52 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -416(%rbp)
	# %53 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -424(%rbp)
	# %54 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -432(%rbp)
	# %55 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -440(%rbp)
	# %56 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -448(%rbp)
	# %57 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -456(%rbp)
	# %58 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -464(%rbp)
	# %59 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -472(%rbp)
	# %60 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -480(%rbp)
	# %61 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -488(%rbp)
	# %62 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -496(%rbp)
	# %63 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -504(%rbp)
	# %64 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -512(%rbp)
	# %65 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -520(%rbp)
	# %66 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -528(%rbp)
	# %67 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -536(%rbp)
	# %68 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -544(%rbp)
	# %69 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -552(%rbp)
	# %70 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -560(%rbp)
	# %71 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -568(%rbp)
	# %72 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -576(%rbp)
	# %73 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -584(%rbp)
	# %74 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -592(%rbp)
	# %75 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -600(%rbp)
	# %76 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -608(%rbp)
	# %77 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -616(%rbp)
	# %78 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -624(%rbp)
	# %79 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -632(%rbp)
	# %80 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -640(%rbp)
	# %81 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -648(%rbp)
	# %82 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -656(%rbp)
	# %83 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -664(%rbp)
	# %84 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -672(%rbp)
	# %85 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -680(%rbp)
	# %86 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -688(%rbp)
	# %87 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -696(%rbp)
	# %88 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -704(%rbp)
	# %89 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -712(%rbp)
	# %90 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -720(%rbp)
	# %91 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -728(%rbp)
	# %92 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -736(%rbp)
	# %93 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -744(%rbp)
	# %94 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -752(%rbp)
	# %95 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -760(%rbp)
	# %96 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -768(%rbp)
	# %97 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -776(%rbp)
	# %98 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -784(%rbp)
	# %99 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -792(%rbp)
	# %100 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -800(%rbp)
	# %101 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -808(%rbp)
	# %102 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -816(%rbp)
	# %103 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -824(%rbp)
	# %104 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -832(%rbp)
	# %105 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -840(%rbp)
	# %106 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -848(%rbp)
	# %107 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -856(%rbp)
	# %108 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -864(%rbp)
	# %109 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -872(%rbp)
	# %110 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -880(%rbp)
	# %111 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -888(%rbp)
	# %112 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %113 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -896(%rbp)
	# %114 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -904(%rbp)
	# %115 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -912(%rbp)
	# %116 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -920(%rbp)
	# %117 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -928(%rbp)
	# %118 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -936(%rbp)
	# %119 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -952(%rbp)
	# %120 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -960(%rbp)
	# %121 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -968(%rbp)
	# %122 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -976(%rbp)
	# %123 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -984(%rbp)
	# %124 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -992(%rbp)
	# %125 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1000(%rbp)
	# %126 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1008(%rbp)
	# %127 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1016(%rbp)
	# %128 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1024(%rbp)
	# %129 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1032(%rbp)
	# %130 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1040(%rbp)
	# %131 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -944(%rbp)
	# %132 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1048(%rbp)
	# %133 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1056(%rbp)
	# %134 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1064(%rbp)
	# %135 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1072(%rbp)
	# %136 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1080(%rbp)
	# %137 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1088(%rbp)
	# %138 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1096(%rbp)
	# %139 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -208(%rbp)
	# %140 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1104(%rbp)
	# %141 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1112(%rbp)
	# %142 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1120(%rbp)
	# %143 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1128(%rbp)
	# %144 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1136(%rbp)
	# %145 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %146 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1144(%rbp)
	# %147 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1152(%rbp)
	# %148 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1160(%rbp)
	# %149 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1168(%rbp)
	# %150 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1176(%rbp)
	# %151 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1184(%rbp)
	# %152 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1192(%rbp)
	# %153 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1200(%rbp)
	# %154 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1208(%rbp)
	# %155 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1216(%rbp)
	# %156 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1224(%rbp)
	# %157 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1232(%rbp)
	# %158 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1240(%rbp)
	# %159 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1248(%rbp)
	# %160 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1256(%rbp)
	# %161 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1264(%rbp)
	# %162 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1272(%rbp)
	# %163 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1304(%rbp)
	# %164 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1312(%rbp)
	# %165 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1296(%rbp)
	# %166 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1320(%rbp)
	# %167 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1328(%rbp)
	# %168 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1336(%rbp)
	# %169 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1288(%rbp)
	# %170 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1344(%rbp)
	# %171 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1280(%rbp)
	# %172 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1352(%rbp)
	# %173 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %174 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %175 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1368(%rbp)
	# %176 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1376(%rbp)
	# %177 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1384(%rbp)
	# %178 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1400(%rbp)
	# %179 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1408(%rbp)
	# %180 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1416(%rbp)
	# %181 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1424(%rbp)
	# %182 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1432(%rbp)
	# %183 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1440(%rbp)
	# %184 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1448(%rbp)
	# %185 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1456(%rbp)
	# %186 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1464(%rbp)
	# %187 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1472(%rbp)
	# %188 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1480(%rbp)
	# %189 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1488(%rbp)
	# %190 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1496(%rbp)
	# %191 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1504(%rbp)
	# %192 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1512(%rbp)
	# %193 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1520(%rbp)
	# %194 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1528(%rbp)
	# %195 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1536(%rbp)
	# %196 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1544(%rbp)
	# %197 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1552(%rbp)
	# %198 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1568(%rbp)
	# %199 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1576(%rbp)
	# %200 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1584(%rbp)
	# %201 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1560(%rbp)
	# %202 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1592(%rbp)
	# %203 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1600(%rbp)
	# %204 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1608(%rbp)
	# %205 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1616(%rbp)
	# %206 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1624(%rbp)
	# %207 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1632(%rbp)
	# %208 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1640(%rbp)
	# %209 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1648(%rbp)
	# %210 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1664(%rbp)
	# %211 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1672(%rbp)
	# %212 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1680(%rbp)
	# %213 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1688(%rbp)
	# %214 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1696(%rbp)
	# %215 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1704(%rbp)
	# %216 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1712(%rbp)
	# %217 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1720(%rbp)
	# %218 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1728(%rbp)
	# %219 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1736(%rbp)
	# %220 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1744(%rbp)
	# %221 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1752(%rbp)
	# %222 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1760(%rbp)
	# %223 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1768(%rbp)
	# %224 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1776(%rbp)
	# %225 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1784(%rbp)
	# %226 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1792(%rbp)
	# %227 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1800(%rbp)
	# %228 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1656(%rbp)
	# %229 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1392(%rbp)
	# %230 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1808(%rbp)
	# %231 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1816(%rbp)
	# %232 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1824(%rbp)
	# %233 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1832(%rbp)
	# %234 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1360(%rbp)
	# %235 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1840(%rbp)
	# %236 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1856(%rbp)
	# %237 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1864(%rbp)
	# %238 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %239 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1872(%rbp)
	# %240 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1880(%rbp)
	# %241 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1888(%rbp)
	# %242 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1896(%rbp)
	# %243 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1904(%rbp)
	# %244 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1912(%rbp)
	# %245 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1920(%rbp)
	# %246 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1928(%rbp)
	# %247 = alloca [8 x i32]
	subq	$32, %rsp
	movq	%rsp, %rsi
	# %248 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1936(%rbp)
	# %249 = alloca [46 x i8]
	subq	$46, %rsp
	movq	%rsp, -1944(%rbp)
	# %250 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1952(%rbp)
	# %251 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1968(%rbp)
	# %252 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1976(%rbp)
	# %253 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -1984(%rbp)
	# %254 = alloca %struct.mz_zip_archive_file_stat
	subq	$1102, %rsp
	movq	%rsp, -1992(%rbp)
	# %255 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2000(%rbp)
	# %256 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -1960(%rbp)
	# %257 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2008(%rbp)
	# %258 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2016(%rbp)
	# %259 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2024(%rbp)
	# %260 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -1848(%rbp)
	# %261 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -2032(%rbp)
	# %262 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2040(%rbp)
	# %263 = alloca %struct.mz_zip_array
	subq	$28, %rsp
	movq	%rsp, -2048(%rbp)
	# %264 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -2056(%rbp)
	# %265 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2064(%rbp)
	# %266 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2072(%rbp)
	# %267 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2080(%rbp)
	# %268 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2088(%rbp)
	# %269 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -2096(%rbp)
	# %270 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -2104(%rbp)
	# %271 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -2112(%rbp)
	# %272 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -2120(%rbp)
	# %273 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %274 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %275 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %276 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %277 = alloca %struct.mz_zip_array
	subq	$28, %rsp
	movq	%rsp, %r11
	# store i8* %0, i8** %236
	movq	%r8, %rax
	movq	-1856(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %237
	movq	%rbx, %rax
	movq	-1864(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %2, i32* %238
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %278 = getelementptr [8 x i32], i8* %247, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$32, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %278, i8** %248
	movq	%rsi, %rax
	movq	-1936(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %262
	movq	$0, %rax
	movq	-2040(%rbp), %rcx
	movl	%eax, (%rcx)
	# %279 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %280 = icmp ne i8* %279, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %280, label %281, label %296
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader296
	jmp	mz_zip_writer_add_from_zip_reader281
	.text
mz_zip_writer_add_from_zip_reader281:
	# %282 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %283 = getelementptr %struct.mz_zip_archive, i8* %282, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %284 = load i8*, i8** %283
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %285 = icmp ne i8* %284, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %285, label %286, label %296
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader296
	jmp	mz_zip_writer_add_from_zip_reader286
	.text
mz_zip_writer_add_from_zip_reader286:
	# %287 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %288 = getelementptr %struct.mz_zip_archive, i8* %287, i32 0, i32 3
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %289 = load i32, i32* %288
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %290 = icmp ne i32 %289, 2
	movq	%rsi, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %290, label %296, label %291
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader291
	jmp	mz_zip_writer_add_from_zip_reader296
	.text
mz_zip_writer_add_from_zip_reader291:
	# %292 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %293 = getelementptr %struct.mz_zip_archive, i8* %292, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %294 = load i8*, i8** %293
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %295 = icmp ne i8* %294, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %295, label %305, label %296
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader296
	jmp	mz_zip_writer_add_from_zip_reader305
	.text
mz_zip_writer_add_from_zip_reader296:
	# %297 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %297, i8** %171
	movq	%rdx, %rax
	movq	-1280(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %172
	movq	$24, %rax
	movq	-1352(%rbp), %rcx
	movl	%eax, (%rcx)
	# %298 = load i8*, i8** %171
	movq	-1280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %299 = icmp ne i8* %298, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %299, label %300, label %304
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader304
	jmp	mz_zip_writer_add_from_zip_reader300
	.text
mz_zip_writer_add_from_zip_reader300:
	# %301 = load i32, i32* %172
	movq	-1352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %302 = load i8*, i8** %171
	movq	-1280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %303 = getelementptr %struct.mz_zip_archive, i8* %302, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %301, i32* %303
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %304
	jmp	mz_zip_writer_add_from_zip_reader304
	.text
mz_zip_writer_add_from_zip_reader304:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader305:
	# %306 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %307 = getelementptr %struct.mz_zip_archive, i8* %306, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %308 = load i8*, i8** %307
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %308, i8** %251
	movq	%rsi, %rax
	movq	-1968(%rbp), %rcx
	movq	%rax, (%rcx)
	# %309 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %310 = getelementptr %struct.mz_zip_archive, i8* %309, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %311 = load i8*, i8** %310
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %312 = getelementptr %struct.mz_zip_internal_state_tag, i8* %311, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %313 = load i32, i32* %312
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %314 = icmp ne i32 %313, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %314, label %315, label %331
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader331
	jmp	mz_zip_writer_add_from_zip_reader315
	.text
mz_zip_writer_add_from_zip_reader315:
	# %316 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %317 = getelementptr %struct.mz_zip_archive, i8* %316, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %318 = load i8*, i8** %317
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %319 = getelementptr %struct.mz_zip_internal_state_tag, i8* %318, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %320 = load i32, i32* %319
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %321 = icmp ne i32 %320, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %321, label %331, label %322
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader322
	jmp	mz_zip_writer_add_from_zip_reader331
	.text
mz_zip_writer_add_from_zip_reader322:
	# %323 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %323, i8** %173
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %174
	movq	$24, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %324 = load i8*, i8** %173
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %325 = icmp ne i8* %324, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %325, label %326, label %330
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader330
	jmp	mz_zip_writer_add_from_zip_reader326
	.text
mz_zip_writer_add_from_zip_reader326:
	# %327 = load i32, i32* %174
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %328 = load i8*, i8** %173
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %329 = getelementptr %struct.mz_zip_archive, i8* %328, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %327, i32* %329
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %330
	jmp	mz_zip_writer_add_from_zip_reader330
	.text
mz_zip_writer_add_from_zip_reader330:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader331:
	# %332 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %333 = load i32, i32* %238
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %332, i8** %169
	movq	%rdi, %rax
	movq	-1288(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %333, i32* %170
	movq	%rsi, %rax
	movq	-1344(%rbp), %rcx
	movl	%eax, (%rcx)
	# %334 = load i8*, i8** %169
	movq	-1288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %335 = icmp ne i8* %334, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %335, label %336, label %347
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader347
	jmp	mz_zip_writer_add_from_zip_reader336
	.text
mz_zip_writer_add_from_zip_reader336:
	# %337 = load i8*, i8** %169
	movq	-1288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %338 = getelementptr %struct.mz_zip_archive, i8* %337, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %339 = load i8*, i8** %338
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %340 = icmp ne i8* %339, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %340, label %341, label %347
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader347
	jmp	mz_zip_writer_add_from_zip_reader341
	.text
mz_zip_writer_add_from_zip_reader341:
	# %342 = load i32, i32* %170
	movq	-1344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %343 = load i8*, i8** %169
	movq	-1288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %344 = getelementptr %struct.mz_zip_archive, i8* %343, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %345 = load i32, i32* %344
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %346 = icmp uge i32 %342, %345
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %346, label %347, label %348
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader348
	jmp	mz_zip_writer_add_from_zip_reader347
	.text
mz_zip_writer_add_from_zip_reader347:
	# store i8* null, i8** %168
	movq	$0, %rax
	movq	-1336(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %364
	jmp	mz_zip_writer_add_from_zip_reader364
	.text
mz_zip_writer_add_from_zip_reader348:
	# %349 = load i8*, i8** %169
	movq	-1288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %350 = getelementptr %struct.mz_zip_archive, i8* %349, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %351 = load i8*, i8** %350
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %352 = load i8*, i8** %351
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %353 = load i8*, i8** %169
	movq	-1288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %354 = getelementptr %struct.mz_zip_archive, i8* %353, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %355 = load i8*, i8** %354
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %356 = getelementptr %struct.mz_zip_internal_state_tag, i8* %355, i32 0, i32 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %357 = load i8*, i8** %356
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %358 = load i32, i32* %170
	movq	-1344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %359 = zext i32 %358 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %360 = getelementptr i32, i8* %357, i64 %359
	movq	%rdi, %rcx
	movq	%rsi, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %361 = load i32, i32* %360
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %362 = zext i32 %361 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %363 = getelementptr i8, i8* %352, i64 %362
	movq	%r9, %rcx
	movq	%rsi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %363, i8** %168
	movq	%rsi, %rax
	movq	-1336(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %364
	jmp	mz_zip_writer_add_from_zip_reader364
	.text
mz_zip_writer_add_from_zip_reader364:
	# %365 = load i8*, i8** %168
	movq	-1336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %365, i8** %253
	movq	%rsi, %rax
	movq	-1984(%rbp), %rcx
	movq	%rax, (%rcx)
	# %366 = icmp eq i8* null, %365
	movq	$0, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# br i1 %366, label %367, label %376
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader376
	jmp	mz_zip_writer_add_from_zip_reader367
	.text
mz_zip_writer_add_from_zip_reader367:
	# %368 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %368, i8** %175
	movq	%rdx, %rax
	movq	-1368(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %176
	movq	$24, %rax
	movq	-1376(%rbp), %rcx
	movl	%eax, (%rcx)
	# %369 = load i8*, i8** %175
	movq	-1368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %370 = icmp ne i8* %369, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %370, label %371, label %375
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader375
	jmp	mz_zip_writer_add_from_zip_reader371
	.text
mz_zip_writer_add_from_zip_reader371:
	# %372 = load i32, i32* %176
	movq	-1376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %373 = load i8*, i8** %175
	movq	-1368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %374 = getelementptr %struct.mz_zip_archive, i8* %373, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %372, i32* %374
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %375
	jmp	mz_zip_writer_add_from_zip_reader375
	.text
mz_zip_writer_add_from_zip_reader375:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader376:
	# %377 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %378 = getelementptr i8, i8* %377, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %379 = getelementptr i8, i8* %378, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %380 = load i8, i8* %379
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %381 = zext i8 %380 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %382 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %383 = getelementptr i8, i8* %382, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %384 = getelementptr i8, i8* %383, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %385 = load i8, i8* %384
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %386 = zext i8 %385 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %387 = shl i32 %386, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %388 = or i32 %381, %387
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %389 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %390 = getelementptr i8, i8* %389, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %391 = getelementptr i8, i8* %390, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %392 = load i8, i8* %391
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %393 = zext i8 %392 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %394 = shl i32 %393, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %395 = or i32 %388, %394
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %396 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %397 = getelementptr i8, i8* %396, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %398 = getelementptr i8, i8* %397, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %399 = load i8, i8* %398
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %400 = zext i8 %399 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %401 = shl i32 %400, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %402 = or i32 %395, %401
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %403 = icmp ne i32 %402, 33639248
	movq	%rsi, %rax
	movq	$33639248, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %403, label %404, label %413
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader413
	jmp	mz_zip_writer_add_from_zip_reader404
	.text
mz_zip_writer_add_from_zip_reader404:
	# %405 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %405, i8** %177
	movq	%rdx, %rax
	movq	-1384(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %178
	movq	$9, %rax
	movq	-1400(%rbp), %rcx
	movl	%eax, (%rcx)
	# %406 = load i8*, i8** %177
	movq	-1384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %407 = icmp ne i8* %406, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %407, label %408, label %412
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader412
	jmp	mz_zip_writer_add_from_zip_reader408
	.text
mz_zip_writer_add_from_zip_reader408:
	# %409 = load i32, i32* %178
	movq	-1400(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %410 = load i8*, i8** %177
	movq	-1384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %411 = getelementptr %struct.mz_zip_archive, i8* %410, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %409, i32* %411
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %412
	jmp	mz_zip_writer_add_from_zip_reader412
	.text
mz_zip_writer_add_from_zip_reader412:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader413:
	# %414 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %415 = getelementptr i8, i8* %414, i64 28
	movq	%rsi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %416 = getelementptr i8, i8* %415, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %417 = load i8, i8* %416
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %418 = zext i8 %417 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %419 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %420 = getelementptr i8, i8* %419, i64 28
	movq	%rsi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %421 = getelementptr i8, i8* %420, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %422 = load i8, i8* %421
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %423 = zext i8 %422 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %424 = shl i32 %423, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %425 = or i32 %418, %424
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %425, i32* %255
	movq	%rsi, %rax
	movq	-2000(%rbp), %rcx
	movl	%eax, (%rcx)
	# %426 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %427 = getelementptr i8, i8* %426, i64 32
	movq	%rsi, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %428 = getelementptr i8, i8* %427, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %429 = load i8, i8* %428
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %430 = zext i8 %429 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %431 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %432 = getelementptr i8, i8* %431, i64 32
	movq	%rsi, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %433 = getelementptr i8, i8* %432, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %434 = load i8, i8* %433
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %435 = zext i8 %434 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %436 = shl i32 %435, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %437 = or i32 %430, %436
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %437, i32* %256
	movq	%rsi, %rax
	movq	-1960(%rbp), %rcx
	movl	%eax, (%rcx)
	# %438 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %439 = getelementptr i8, i8* %438, i64 30
	movq	%rsi, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %440 = getelementptr i8, i8* %439, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %441 = load i8, i8* %440
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %442 = zext i8 %441 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %443 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %444 = getelementptr i8, i8* %443, i64 30
	movq	%rsi, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %445 = getelementptr i8, i8* %444, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %446 = load i8, i8* %445
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %447 = zext i8 %446 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %448 = shl i32 %447, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %449 = or i32 %442, %448
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %449, i32* %257
	movq	%rsi, %rax
	movq	-2008(%rbp), %rcx
	movl	%eax, (%rcx)
	# %450 = load i32, i32* %255
	movq	-2000(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %451 = load i32, i32* %257
	movq	-2008(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %452 = add i32 %450, %451
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %453 = load i32, i32* %256
	movq	-1960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %454 = add i32 %452, %453
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %454, i32* %242
	movq	%rsi, %rax
	movq	-1896(%rbp), %rcx
	movl	%eax, (%rcx)
	# %455 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %456 = getelementptr %struct.mz_zip_internal_state_tag, i8* %455, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %457 = getelementptr %struct.mz_zip_array, i8* %456, i32 0, i32 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %458 = load i64, i64* %457
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %459 = add i64 %458, 46
	movq	%rsi, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %460 = load i32, i32* %242
	movq	-1896(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %461 = zext i32 %460 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %462 = add i64 %459, %461
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %463 = add i64 %462, 32
	movq	%rsi, %rax
	movq	$32, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %464 = icmp uge i64 %463, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %464, label %465, label %474
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader474
	jmp	mz_zip_writer_add_from_zip_reader465
	.text
mz_zip_writer_add_from_zip_reader465:
	# %466 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %466, i8** %179
	movq	%rdx, %rax
	movq	-1408(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 15, i32* %180
	movq	$15, %rax
	movq	-1416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %467 = load i8*, i8** %179
	movq	-1408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %468 = icmp ne i8* %467, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %468, label %469, label %473
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader473
	jmp	mz_zip_writer_add_from_zip_reader469
	.text
mz_zip_writer_add_from_zip_reader469:
	# %470 = load i32, i32* %180
	movq	-1416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %471 = load i8*, i8** %179
	movq	-1408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %472 = getelementptr %struct.mz_zip_archive, i8* %471, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %470, i32* %472
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %473
	jmp	mz_zip_writer_add_from_zip_reader473
	.text
mz_zip_writer_add_from_zip_reader473:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader474:
	# %475 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %476 = call i32 @mz_zip_writer_compute_padding_needed_for_file_alignment (i8* %475)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_compute_padding_needed_for_file_alignment
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# store i32 %476, i32* %241
	movq	%rsi, %rax
	movq	-1888(%rbp), %rcx
	movl	%eax, (%rcx)
	# %477 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %478 = getelementptr %struct.mz_zip_internal_state_tag, i8* %477, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %479 = load i32, i32* %478
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %480 = icmp ne i32 %479, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %480, label %496, label %481
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader481
	jmp	mz_zip_writer_add_from_zip_reader496
	.text
mz_zip_writer_add_from_zip_reader481:
	# %482 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %483 = getelementptr %struct.mz_zip_archive, i8* %482, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %484 = load i32, i32* %483
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %485 = icmp eq i32 %484, 65535
	movq	%rsi, %rax
	movq	$65535, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %485, label %486, label %495
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader495
	jmp	mz_zip_writer_add_from_zip_reader486
	.text
mz_zip_writer_add_from_zip_reader486:
	# %487 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %487, i8** %181
	movq	%rdx, %rax
	movq	-1424(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %182
	movq	$2, %rax
	movq	-1432(%rbp), %rcx
	movl	%eax, (%rcx)
	# %488 = load i8*, i8** %181
	movq	-1424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %489 = icmp ne i8* %488, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %489, label %490, label %494
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader494
	jmp	mz_zip_writer_add_from_zip_reader490
	.text
mz_zip_writer_add_from_zip_reader490:
	# %491 = load i32, i32* %182
	movq	-1432(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %492 = load i8*, i8** %181
	movq	-1424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %493 = getelementptr %struct.mz_zip_archive, i8* %492, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %491, i32* %493
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %494
	jmp	mz_zip_writer_add_from_zip_reader494
	.text
mz_zip_writer_add_from_zip_reader494:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader495:
	# br label %511
	jmp	mz_zip_writer_add_from_zip_reader511
	.text
mz_zip_writer_add_from_zip_reader496:
	# %497 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %498 = getelementptr %struct.mz_zip_archive, i8* %497, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %499 = load i32, i32* %498
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %500 = icmp eq i32 %499, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %500, label %501, label %510
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader510
	jmp	mz_zip_writer_add_from_zip_reader501
	.text
mz_zip_writer_add_from_zip_reader501:
	# %502 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %502, i8** %183
	movq	%rdx, %rax
	movq	-1440(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %184
	movq	$2, %rax
	movq	-1448(%rbp), %rcx
	movl	%eax, (%rcx)
	# %503 = load i8*, i8** %183
	movq	-1440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %504 = icmp ne i8* %503, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %504, label %505, label %509
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader509
	jmp	mz_zip_writer_add_from_zip_reader505
	.text
mz_zip_writer_add_from_zip_reader505:
	# %506 = load i32, i32* %184
	movq	-1448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %507 = load i8*, i8** %183
	movq	-1440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %508 = getelementptr %struct.mz_zip_archive, i8* %507, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %506, i32* %508
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %509
	jmp	mz_zip_writer_add_from_zip_reader509
	.text
mz_zip_writer_add_from_zip_reader509:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader510:
	# br label %511
	jmp	mz_zip_writer_add_from_zip_reader511
	.text
mz_zip_writer_add_from_zip_reader511:
	# %512 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %513 = load i32, i32* %238
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %514 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %515 = call i32 @mz_zip_file_stat_internal (i8* %512, i32 %513, i8* %514, i8* %254, i8* null)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	-1992(%rbp), %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_file_stat_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %516 = icmp ne i32 %515, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %516, label %518, label %517
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader517
	jmp	mz_zip_writer_add_from_zip_reader518
	.text
mz_zip_writer_add_from_zip_reader517:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader518:
	# %519 = getelementptr %struct.mz_zip_archive_file_stat, i8* %254, i32 0, i32 11
	movq	-1992(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %520 = load i64, i64* %519
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %520, i64* %245
	movq	%rsi, %rax
	movq	-1920(%rbp), %rcx
	movq	%rax, (%rcx)
	# %521 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %522 = getelementptr %struct.mz_zip_archive, i8* %521, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %523 = load i64, i64* %522
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %523, i64* %246
	movq	%rsi, %rax
	movq	-1928(%rbp), %rcx
	movq	%rax, (%rcx)
	# %524 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %525 = getelementptr %struct.mz_zip_archive, i8* %524, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %526 = load i8*, i8** %525
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %527 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %528 = getelementptr %struct.mz_zip_archive, i8* %527, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %529 = load i8*, i8** %528
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %530 = load i64, i64* %245
	movq	-1920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %531 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %532 = call i64 %526 (i8* %529, i64 %530, i8* %531, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %533 = icmp ne i64 %532, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %533, label %534, label %543
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader543
	jmp	mz_zip_writer_add_from_zip_reader534
	.text
mz_zip_writer_add_from_zip_reader534:
	# %535 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %535, i8** %185
	movq	%rdx, %rax
	movq	-1456(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %186
	movq	$20, %rax
	movq	-1464(%rbp), %rcx
	movl	%eax, (%rcx)
	# %536 = load i8*, i8** %185
	movq	-1456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %537 = icmp ne i8* %536, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %537, label %538, label %542
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader542
	jmp	mz_zip_writer_add_from_zip_reader538
	.text
mz_zip_writer_add_from_zip_reader538:
	# %539 = load i32, i32* %186
	movq	-1464(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %540 = load i8*, i8** %185
	movq	-1456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %541 = getelementptr %struct.mz_zip_archive, i8* %540, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %539, i32* %541
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %542
	jmp	mz_zip_writer_add_from_zip_reader542
	.text
mz_zip_writer_add_from_zip_reader542:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader543:
	# %544 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %545 = getelementptr i8, i8* %544, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %546 = load i8, i8* %545
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %547 = zext i8 %546 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %548 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %549 = getelementptr i8, i8* %548, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %550 = load i8, i8* %549
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %551 = zext i8 %550 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %552 = shl i32 %551, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %553 = or i32 %547, %552
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %554 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %555 = getelementptr i8, i8* %554, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %556 = load i8, i8* %555
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %557 = zext i8 %556 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %558 = shl i32 %557, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %559 = or i32 %553, %558
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %560 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %561 = getelementptr i8, i8* %560, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %562 = load i8, i8* %561
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %563 = zext i8 %562 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %564 = shl i32 %563, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %565 = or i32 %559, %564
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %566 = icmp ne i32 %565, 67324752
	movq	%rsi, %rax
	movq	$67324752, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %566, label %567, label %576
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader576
	jmp	mz_zip_writer_add_from_zip_reader567
	.text
mz_zip_writer_add_from_zip_reader567:
	# %568 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %568, i8** %187
	movq	%rdx, %rax
	movq	-1472(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %188
	movq	$9, %rax
	movq	-1480(%rbp), %rcx
	movl	%eax, (%rcx)
	# %569 = load i8*, i8** %187
	movq	-1472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %570 = icmp ne i8* %569, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %570, label %571, label %575
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader575
	jmp	mz_zip_writer_add_from_zip_reader571
	.text
mz_zip_writer_add_from_zip_reader571:
	# %572 = load i32, i32* %188
	movq	-1480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %573 = load i8*, i8** %187
	movq	-1472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %574 = getelementptr %struct.mz_zip_archive, i8* %573, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %572, i32* %574
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %575
	jmp	mz_zip_writer_add_from_zip_reader575
	.text
mz_zip_writer_add_from_zip_reader575:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader576:
	# %577 = load i64, i64* %245
	movq	-1920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %578 = add i64 %577, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %578, i64* %245
	movq	%rsi, %rax
	movq	-1920(%rbp), %rcx
	movq	%rax, (%rcx)
	# %579 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %580 = getelementptr i8, i8* %579, i64 26
	movq	%rsi, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %581 = getelementptr i8, i8* %580, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %582 = load i8, i8* %581
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %583 = zext i8 %582 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %584 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %585 = getelementptr i8, i8* %584, i64 26
	movq	%rsi, %rcx
	movq	$26, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %586 = getelementptr i8, i8* %585, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %587 = load i8, i8* %586
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %588 = zext i8 %587 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %589 = shl i32 %588, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %590 = or i32 %583, %589
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %590, i32* %258
	movq	%rsi, %rax
	movq	-2016(%rbp), %rcx
	movl	%eax, (%rcx)
	# %591 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %592 = getelementptr i8, i8* %591, i64 28
	movq	%rsi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %593 = getelementptr i8, i8* %592, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %594 = load i8, i8* %593
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %595 = zext i8 %594 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %596 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %597 = getelementptr i8, i8* %596, i64 28
	movq	%rsi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %598 = getelementptr i8, i8* %597, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %599 = load i8, i8* %598
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %600 = zext i8 %599 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %601 = shl i32 %600, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %602 = or i32 %595, %601
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %602, i32* %259
	movq	%rsi, %rax
	movq	-2024(%rbp), %rcx
	movl	%eax, (%rcx)
	# %603 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %604 = getelementptr i8, i8* %603, i64 18
	movq	%rsi, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %605 = getelementptr i8, i8* %604, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %606 = load i8, i8* %605
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %607 = zext i8 %606 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %608 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %609 = getelementptr i8, i8* %608, i64 18
	movq	%rsi, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %610 = getelementptr i8, i8* %609, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %611 = load i8, i8* %610
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %612 = zext i8 %611 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %613 = shl i32 %612, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %614 = or i32 %607, %613
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %615 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %616 = getelementptr i8, i8* %615, i64 18
	movq	%rsi, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %617 = getelementptr i8, i8* %616, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %618 = load i8, i8* %617
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %619 = zext i8 %618 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %620 = shl i32 %619, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %621 = or i32 %614, %620
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %622 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %623 = getelementptr i8, i8* %622, i64 18
	movq	%rsi, %rcx
	movq	$18, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %624 = getelementptr i8, i8* %623, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %625 = load i8, i8* %624
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %626 = zext i8 %625 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %627 = shl i32 %626, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %628 = or i32 %621, %627
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %629 = zext i32 %628 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i64 %629, i64* %260
	movq	%rsi, %rax
	movq	-1848(%rbp), %rcx
	movq	%rax, (%rcx)
	# %630 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %631 = getelementptr i8, i8* %630, i64 22
	movq	%rsi, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %632 = getelementptr i8, i8* %631, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %633 = load i8, i8* %632
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %634 = zext i8 %633 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %635 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %636 = getelementptr i8, i8* %635, i64 22
	movq	%rsi, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %637 = getelementptr i8, i8* %636, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %638 = load i8, i8* %637
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %639 = zext i8 %638 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %640 = shl i32 %639, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %641 = or i32 %634, %640
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %642 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %643 = getelementptr i8, i8* %642, i64 22
	movq	%rsi, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %644 = getelementptr i8, i8* %643, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %645 = load i8, i8* %644
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %646 = zext i8 %645 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %647 = shl i32 %646, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %648 = or i32 %641, %647
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %649 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %650 = getelementptr i8, i8* %649, i64 22
	movq	%rsi, %rcx
	movq	$22, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %651 = getelementptr i8, i8* %650, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %652 = load i8, i8* %651
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %653 = zext i8 %652 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %654 = shl i32 %653, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %655 = or i32 %648, %654
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %656 = zext i32 %655 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i64 %656, i64* %261
	movq	%rsi, %rax
	movq	-2032(%rbp), %rcx
	movq	%rax, (%rcx)
	# %657 = load i32, i32* %258
	movq	-2016(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %658 = load i32, i32* %259
	movq	-2024(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %659 = add i32 %657, %658
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %660 = zext i32 %659 to i64
	movq	%rsi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %661 = getelementptr %struct.mz_zip_archive_file_stat, i8* %254, i32 0, i32 7
	movq	-1992(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %662 = load i64, i64* %661
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %663 = add i64 %660, %662
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %663, i64* %243
	movq	%rsi, %rax
	movq	-1904(%rbp), %rcx
	movq	%rax, (%rcx)
	# %664 = load i32, i32* %259
	movq	-2024(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %665 = icmp ne i32 %664, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %665, label %666, label %1007
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1007
	jmp	mz_zip_writer_add_from_zip_reader666
	.text
mz_zip_writer_add_from_zip_reader666:
	# %667 = load i64, i64* %260
	movq	-1848(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %668 = icmp eq i64 %667, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# br i1 %668, label %672, label %669
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader669
	jmp	mz_zip_writer_add_from_zip_reader672
	.text
mz_zip_writer_add_from_zip_reader669:
	# %670 = load i64, i64* %261
	movq	-2032(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %671 = icmp eq i64 %670, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# br i1 %671, label %672, label %1007
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1007
	jmp	mz_zip_writer_add_from_zip_reader672
	.text
mz_zip_writer_add_from_zip_reader672:
	# %673 = load i32, i32* %259
	movq	-2024(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i32 %673, i32* %265
	movq	%rsi, %rax
	movq	-2064(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %263, i8** %164
	movq	-2048(%rbp), %rax
	movq	-1312(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %165
	movq	$1, %rax
	movq	-1296(%rbp), %rcx
	movl	%eax, (%rcx)
	# %674 = load i8*, i8** %164
	movq	-1312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %675 = load i8*, i8** %164
	movq	-1312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %676 = call i64 @llvm.objectsize.i64.p0 (i8* %675, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %677 = call i8* @__memset_chk (i8* %674, i32 0, i64 32, i64 %676)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %678 = load i32, i32* %165
	movq	-1296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %679 = load i8*, i8** %164
	movq	-1312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %680 = getelementptr %struct.mz_zip_array, i8* %679, i32 0, i32 3
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i32 %678, i32* %680
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %681 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %682 = load i32, i32* %259
	movq	-2024(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %683 = zext i32 %682 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %681, i8** %130
	movq	%rdi, %rax
	movq	-1040(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %263, i8** %131
	movq	-2048(%rbp), %rax
	movq	-944(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %683, i64* %132
	movq	%rsi, %rax
	movq	-1048(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %133
	movq	$0, %rax
	movq	-1056(%rbp), %rcx
	movl	%eax, (%rcx)
	# %684 = load i64, i64* %132
	movq	-1048(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %685 = load i8*, i8** %131
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %686 = getelementptr %struct.mz_zip_array, i8* %685, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %687 = load i64, i64* %686
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %688 = icmp ugt i64 %684, %687
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	seta	%sil
	# br i1 %688, label %689, label %698
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader698
	jmp	mz_zip_writer_add_from_zip_reader689
	.text
mz_zip_writer_add_from_zip_reader689:
	# %690 = load i8*, i8** %130
	movq	-1040(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %691 = load i8*, i8** %131
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %692 = load i64, i64* %132
	movq	-1048(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %693 = load i32, i32* %133
	movq	-1056(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %694 = call i32 @mz_zip_array_ensure_capacity (i8* %690, i8* %691, i64 %692, i32 %693)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %695 = icmp ne i32 %694, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %695, label %697, label %696
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader696
	jmp	mz_zip_writer_add_from_zip_reader697
	.text
mz_zip_writer_add_from_zip_reader696:
	# store i32 0, i32* %129
	movq	$0, %rax
	movq	-1032(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %702
	jmp	mz_zip_writer_add_from_zip_reader702
	.text
mz_zip_writer_add_from_zip_reader697:
	# br label %698
	jmp	mz_zip_writer_add_from_zip_reader698
	.text
mz_zip_writer_add_from_zip_reader698:
	# %699 = load i64, i64* %132
	movq	-1048(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %700 = load i8*, i8** %131
	movq	-944(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %701 = getelementptr %struct.mz_zip_array, i8* %700, i32 0, i32 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i64 %699, i64* %701
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %129
	movq	$1, %rax
	movq	-1032(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %702
	jmp	mz_zip_writer_add_from_zip_reader702
	.text
mz_zip_writer_add_from_zip_reader702:
	# %703 = load i32, i32* %129
	movq	-1032(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %704 = icmp ne i32 %703, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %704, label %714, label %705
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader705
	jmp	mz_zip_writer_add_from_zip_reader714
	.text
mz_zip_writer_add_from_zip_reader705:
	# %706 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %706, i8** %189
	movq	%rdx, %rax
	movq	-1488(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %190
	movq	$16, %rax
	movq	-1496(%rbp), %rcx
	movl	%eax, (%rcx)
	# %707 = load i8*, i8** %189
	movq	-1488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %708 = icmp ne i8* %707, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %708, label %709, label %713
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader713
	jmp	mz_zip_writer_add_from_zip_reader709
	.text
mz_zip_writer_add_from_zip_reader709:
	# %710 = load i32, i32* %190
	movq	-1496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %711 = load i8*, i8** %189
	movq	-1488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %712 = getelementptr %struct.mz_zip_archive, i8* %711, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %710, i32* %712
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %713
	jmp	mz_zip_writer_add_from_zip_reader713
	.text
mz_zip_writer_add_from_zip_reader713:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader714:
	# %715 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %716 = getelementptr %struct.mz_zip_archive, i8* %715, i32 0, i32 11
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %717 = load i8*, i8** %716
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %718 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %719 = getelementptr %struct.mz_zip_archive, i8* %718, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %720 = load i8*, i8** %719
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %721 = getelementptr %struct.mz_zip_archive_file_stat, i8* %254, i32 0, i32 11
	movq	-1992(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %722 = load i64, i64* %721
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %723 = add i64 %722, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %724 = load i32, i32* %258
	movq	-2016(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %725 = zext i32 %724 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %726 = add i64 %723, %725
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# %727 = getelementptr %struct.mz_zip_array, i8* %263, i32 0, i32 0
	movq	-2048(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %728 = load i8*, i8** %727
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %729 = load i32, i32* %259
	movq	-2024(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %730 = zext i32 %729 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %731 = call i64 %717 (i8* %720, i64 %726, i8* %728, i64 %730)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %732 = load i32, i32* %259
	movq	-2024(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %733 = zext i32 %732 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %734 = icmp ne i64 %731, %733
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %734, label %735, label %757
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader757
	jmp	mz_zip_writer_add_from_zip_reader735
	.text
mz_zip_writer_add_from_zip_reader735:
	# %736 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %736, i8** %107
	movq	%rdx, %rax
	movq	-856(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %263, i8** %108
	movq	-2048(%rbp), %rax
	movq	-864(%rbp), %rcx
	movq	%rax, (%rcx)
	# %737 = load i8*, i8** %107
	movq	-856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %738 = getelementptr %struct.mz_zip_archive, i8* %737, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %739 = load i8*, i8** %738
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %740 = load i8*, i8** %107
	movq	-856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %741 = getelementptr %struct.mz_zip_archive, i8* %740, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %742 = load i8*, i8** %741
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %743 = load i8*, i8** %108
	movq	-864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %744 = load i8*, i8** %743
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %739 (i8* %742, i8* %744)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %745 = load i8*, i8** %108
	movq	-864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %746 = load i8*, i8** %108
	movq	-864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %747 = call i64 @llvm.objectsize.i64.p0 (i8* %746, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %748 = call i8* @__memset_chk (i8* %745, i32 0, i64 32, i64 %747)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %749 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %749, i8** %191
	movq	%rdx, %rax
	movq	-1504(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %192
	movq	$20, %rax
	movq	-1512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %750 = load i8*, i8** %191
	movq	-1504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %751 = icmp ne i8* %750, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %751, label %752, label %756
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader756
	jmp	mz_zip_writer_add_from_zip_reader752
	.text
mz_zip_writer_add_from_zip_reader752:
	# %753 = load i32, i32* %192
	movq	-1512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %754 = load i8*, i8** %191
	movq	-1504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %755 = getelementptr %struct.mz_zip_archive, i8* %754, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %753, i32* %755
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %756
	jmp	mz_zip_writer_add_from_zip_reader756
	.text
mz_zip_writer_add_from_zip_reader756:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader757:
	# %758 = getelementptr %struct.mz_zip_array, i8* %263, i32 0, i32 0
	movq	-2048(%rbp), %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %759 = load i8*, i8** %758
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %759, i8** %264
	movq	%rsi, %rax
	movq	-2056(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %760
	jmp	mz_zip_writer_add_from_zip_reader760
	.text
mz_zip_writer_add_from_zip_reader760:
	# %761 = load i32, i32* %265
	movq	-2064(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %762 = zext i32 %761 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %763 = icmp ult i64 %762, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %763, label %764, label %786
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader786
	jmp	mz_zip_writer_add_from_zip_reader764
	.text
mz_zip_writer_add_from_zip_reader764:
	# %765 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %765, i8** %109
	movq	%rdx, %rax
	movq	-872(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %263, i8** %110
	movq	-2048(%rbp), %rax
	movq	-880(%rbp), %rcx
	movq	%rax, (%rcx)
	# %766 = load i8*, i8** %109
	movq	-872(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %767 = getelementptr %struct.mz_zip_archive, i8* %766, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %768 = load i8*, i8** %767
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %769 = load i8*, i8** %109
	movq	-872(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %770 = getelementptr %struct.mz_zip_archive, i8* %769, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %771 = load i8*, i8** %770
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %772 = load i8*, i8** %110
	movq	-880(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %773 = load i8*, i8** %772
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %768 (i8* %771, i8* %773)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %774 = load i8*, i8** %110
	movq	-880(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %775 = load i8*, i8** %110
	movq	-880(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %776 = call i64 @llvm.objectsize.i64.p0 (i8* %775, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %777 = call i8* @__memset_chk (i8* %774, i32 0, i64 32, i64 %776)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %778 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %778, i8** %193
	movq	%rdx, %rax
	movq	-1520(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %194
	movq	$9, %rax
	movq	-1528(%rbp), %rcx
	movl	%eax, (%rcx)
	# %779 = load i8*, i8** %193
	movq	-1520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %780 = icmp ne i8* %779, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %780, label %781, label %785
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader785
	jmp	mz_zip_writer_add_from_zip_reader781
	.text
mz_zip_writer_add_from_zip_reader781:
	# %782 = load i32, i32* %194
	movq	-1528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %783 = load i8*, i8** %193
	movq	-1520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %784 = getelementptr %struct.mz_zip_archive, i8* %783, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %782, i32* %784
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %785
	jmp	mz_zip_writer_add_from_zip_reader785
	.text
mz_zip_writer_add_from_zip_reader785:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader786:
	# %787 = load i8*, i8** %264
	movq	-2056(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %788 = getelementptr i8, i8* %787, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %789 = load i8, i8* %788
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %790 = zext i8 %789 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %791 = load i8*, i8** %264
	movq	-2056(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %792 = getelementptr i8, i8* %791, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %793 = load i8, i8* %792
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %794 = zext i8 %793 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %795 = shl i32 %794, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %796 = or i32 %790, %795
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %796, i32* %266
	movq	%rsi, %rax
	movq	-2072(%rbp), %rcx
	movl	%eax, (%rcx)
	# %797 = load i8*, i8** %264
	movq	-2056(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %798 = getelementptr i8, i8* %797, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %799 = getelementptr i8, i8* %798, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %800 = load i8, i8* %799
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %801 = zext i8 %800 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %802 = load i8*, i8** %264
	movq	-2056(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %803 = getelementptr i8, i8* %802, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %804 = getelementptr i8, i8* %803, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %805 = load i8, i8* %804
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %806 = zext i8 %805 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %807 = shl i32 %806, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %808 = or i32 %801, %807
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %808, i32* %267
	movq	%rsi, %rax
	movq	-2080(%rbp), %rcx
	movl	%eax, (%rcx)
	# %809 = load i32, i32* %267
	movq	-2080(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %810 = zext i32 %809 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %811 = add i64 %810, 4
	movq	%rsi, %rax
	movq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %812 = trunc i64 %811 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i32 %812, i32* %268
	movq	%rsi, %rax
	movq	-2088(%rbp), %rcx
	movl	%eax, (%rcx)
	# %813 = load i32, i32* %268
	movq	-2088(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %814 = load i32, i32* %265
	movq	-2064(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %815 = icmp ugt i32 %813, %814
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	seta	%sil
	# br i1 %815, label %816, label %838
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader838
	jmp	mz_zip_writer_add_from_zip_reader816
	.text
mz_zip_writer_add_from_zip_reader816:
	# %817 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %817, i8** %111
	movq	%rdx, %rax
	movq	-888(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %263, i8** %112
	movq	-2048(%rbp), %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# %818 = load i8*, i8** %111
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %819 = getelementptr %struct.mz_zip_archive, i8* %818, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %820 = load i8*, i8** %819
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %821 = load i8*, i8** %111
	movq	-888(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %822 = getelementptr %struct.mz_zip_archive, i8* %821, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %823 = load i8*, i8** %822
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %824 = load i8*, i8** %112
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %825 = load i8*, i8** %824
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %820 (i8* %823, i8* %825)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %826 = load i8*, i8** %112
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %827 = load i8*, i8** %112
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %828 = call i64 @llvm.objectsize.i64.p0 (i8* %827, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %829 = call i8* @__memset_chk (i8* %826, i32 0, i64 32, i64 %828)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %830 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %830, i8** %195
	movq	%rdx, %rax
	movq	-1536(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %196
	movq	$9, %rax
	movq	-1544(%rbp), %rcx
	movl	%eax, (%rcx)
	# %831 = load i8*, i8** %195
	movq	-1536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %832 = icmp ne i8* %831, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %832, label %833, label %837
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader837
	jmp	mz_zip_writer_add_from_zip_reader833
	.text
mz_zip_writer_add_from_zip_reader833:
	# %834 = load i32, i32* %196
	movq	-1544(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %835 = load i8*, i8** %195
	movq	-1536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %836 = getelementptr %struct.mz_zip_archive, i8* %835, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %834, i32* %836
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %837
	jmp	mz_zip_writer_add_from_zip_reader837
	.text
mz_zip_writer_add_from_zip_reader837:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader838:
	# %839 = load i32, i32* %266
	movq	-2072(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %840 = icmp eq i32 %839, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	sete	%sil
	# br i1 %840, label %841, label %982
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader982
	jmp	mz_zip_writer_add_from_zip_reader841
	.text
mz_zip_writer_add_from_zip_reader841:
	# %842 = load i8*, i8** %264
	movq	-2056(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %843 = getelementptr i8, i8* %842, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %843, i8** %269
	movq	%rsi, %rax
	movq	-2096(%rbp), %rcx
	movq	%rax, (%rcx)
	# %844 = load i32, i32* %267
	movq	-2080(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %845 = zext i32 %844 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %846 = icmp ult i64 %845, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %846, label %847, label %869
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader869
	jmp	mz_zip_writer_add_from_zip_reader847
	.text
mz_zip_writer_add_from_zip_reader847:
	# %848 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %848, i8** %113
	movq	%rdx, %rax
	movq	-896(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %263, i8** %114
	movq	-2048(%rbp), %rax
	movq	-904(%rbp), %rcx
	movq	%rax, (%rcx)
	# %849 = load i8*, i8** %113
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %850 = getelementptr %struct.mz_zip_archive, i8* %849, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %851 = load i8*, i8** %850
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %852 = load i8*, i8** %113
	movq	-896(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %853 = getelementptr %struct.mz_zip_archive, i8* %852, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %854 = load i8*, i8** %853
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %855 = load i8*, i8** %114
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %856 = load i8*, i8** %855
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %851 (i8* %854, i8* %856)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %857 = load i8*, i8** %114
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %858 = load i8*, i8** %114
	movq	-904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %859 = call i64 @llvm.objectsize.i64.p0 (i8* %858, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %860 = call i8* @__memset_chk (i8* %857, i32 0, i64 32, i64 %859)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %861 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %861, i8** %197
	movq	%rdx, %rax
	movq	-1552(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %198
	movq	$9, %rax
	movq	-1568(%rbp), %rcx
	movl	%eax, (%rcx)
	# %862 = load i8*, i8** %197
	movq	-1552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %863 = icmp ne i8* %862, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %863, label %864, label %868
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader868
	jmp	mz_zip_writer_add_from_zip_reader864
	.text
mz_zip_writer_add_from_zip_reader864:
	# %865 = load i32, i32* %198
	movq	-1568(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %866 = load i8*, i8** %197
	movq	-1552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %867 = getelementptr %struct.mz_zip_archive, i8* %866, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %865, i32* %867
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %868
	jmp	mz_zip_writer_add_from_zip_reader868
	.text
mz_zip_writer_add_from_zip_reader868:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader869:
	# %870 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %871 = getelementptr i8, i8* %870, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %872 = load i8, i8* %871
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %873 = zext i8 %872 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %874 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %875 = getelementptr i8, i8* %874, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %876 = load i8, i8* %875
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %877 = zext i8 %876 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %878 = shl i32 %877, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %879 = or i32 %873, %878
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %880 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %881 = getelementptr i8, i8* %880, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %882 = load i8, i8* %881
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %883 = zext i8 %882 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %884 = shl i32 %883, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %885 = or i32 %879, %884
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %886 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %887 = getelementptr i8, i8* %886, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %888 = load i8, i8* %887
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %889 = zext i8 %888 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %890 = shl i32 %889, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %891 = or i32 %885, %890
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %892 = zext i32 %891 to i64
	movq	%rsi, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %893 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %894 = getelementptr i8, i8* %893, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %895 = getelementptr i8, i8* %894, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %896 = load i8, i8* %895
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %897 = zext i8 %896 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %898 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %899 = getelementptr i8, i8* %898, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %900 = getelementptr i8, i8* %899, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %901 = load i8, i8* %900
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %902 = zext i8 %901 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %903 = shl i32 %902, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %904 = or i32 %897, %903
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %905 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %906 = getelementptr i8, i8* %905, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %907 = getelementptr i8, i8* %906, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %908 = load i8, i8* %907
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %909 = zext i8 %908 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %910 = shl i32 %909, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %911 = or i32 %904, %910
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %912 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %913 = getelementptr i8, i8* %912, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %914 = getelementptr i8, i8* %913, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %915 = load i8, i8* %914
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %916 = zext i8 %915 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %917 = shl i32 %916, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %918 = or i32 %911, %917
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %919 = zext i32 %918 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %920 = shl i64 %919, 32
	movq	%rsi, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %921 = or i64 %892, %920
	movq	%r9, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %921, i64* %261
	movq	%rsi, %rax
	movq	-2032(%rbp), %rcx
	movq	%rax, (%rcx)
	# %922 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %923 = getelementptr i8, i8* %922, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %924 = getelementptr i8, i8* %923, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %925 = load i8, i8* %924
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %926 = zext i8 %925 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %927 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %928 = getelementptr i8, i8* %927, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %929 = getelementptr i8, i8* %928, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %930 = load i8, i8* %929
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %931 = zext i8 %930 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %932 = shl i32 %931, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %933 = or i32 %926, %932
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %934 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %935 = getelementptr i8, i8* %934, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %936 = getelementptr i8, i8* %935, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %937 = load i8, i8* %936
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %938 = zext i8 %937 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %939 = shl i32 %938, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %940 = or i32 %933, %939
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %941 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %942 = getelementptr i8, i8* %941, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %943 = getelementptr i8, i8* %942, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %944 = load i8, i8* %943
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %945 = zext i8 %944 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %946 = shl i32 %945, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %947 = or i32 %940, %946
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %948 = zext i32 %947 to i64
	movq	%rsi, %rax
	movq	$0, %r9
	movl	%eax, %r9d
	# %949 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %950 = getelementptr i8, i8* %949, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %951 = getelementptr i8, i8* %950, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %952 = getelementptr i8, i8* %951, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %953 = load i8, i8* %952
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %954 = zext i8 %953 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %955 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %956 = getelementptr i8, i8* %955, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %957 = getelementptr i8, i8* %956, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %958 = getelementptr i8, i8* %957, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %959 = load i8, i8* %958
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %960 = zext i8 %959 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %961 = shl i32 %960, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %962 = or i32 %954, %961
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %963 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %964 = getelementptr i8, i8* %963, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %965 = getelementptr i8, i8* %964, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %966 = getelementptr i8, i8* %965, i64 2
	movq	%rsi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %967 = load i8, i8* %966
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %968 = zext i8 %967 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %969 = shl i32 %968, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %970 = or i32 %962, %969
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %971 = load i8*, i8** %269
	movq	-2096(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %972 = getelementptr i8, i8* %971, i64 8
	movq	%rsi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %973 = getelementptr i8, i8* %972, i64 4
	movq	%rsi, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %974 = getelementptr i8, i8* %973, i64 3
	movq	%rsi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %975 = load i8, i8* %974
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %976 = zext i8 %975 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %977 = shl i32 %976, 24
	movq	%rsi, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %978 = or i32 %970, %977
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# %979 = zext i32 %978 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %980 = shl i64 %979, 32
	movq	%rsi, %rax
	movq	$32, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %981 = or i64 %948, %980
	movq	%r9, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %981, i64* %260
	movq	%rsi, %rax
	movq	-1848(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %262
	movq	$1, %rax
	movq	-2040(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %993
	jmp	mz_zip_writer_add_from_zip_reader993
	.text
mz_zip_writer_add_from_zip_reader982:
	# %983 = load i32, i32* %268
	movq	-2088(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %984 = load i8*, i8** %264
	movq	-2056(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %985 = zext i32 %983 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %986 = getelementptr i8, i8* %984, i64 %985
	movq	%rdi, %rcx
	movq	%rsi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %986, i8** %264
	movq	%rsi, %rax
	movq	-2056(%rbp), %rcx
	movq	%rax, (%rcx)
	# %987 = load i32, i32* %268
	movq	-2088(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %988 = load i32, i32* %265
	movq	-2064(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %989 = sub i32 %988, %987
	movq	%rsi, %rax
	movq	%rdi, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %989, i32* %265
	movq	%rsi, %rax
	movq	-2064(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %990
	jmp	mz_zip_writer_add_from_zip_reader990
	.text
mz_zip_writer_add_from_zip_reader990:
	# %991 = load i32, i32* %265
	movq	-2064(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %992 = icmp ne i32 %991, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %992, label %760, label %993
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader993
	jmp	mz_zip_writer_add_from_zip_reader760
	.text
mz_zip_writer_add_from_zip_reader993:
	# %994 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %994, i8** %115
	movq	%rsi, %rax
	movq	-912(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %263, i8** %116
	movq	-2048(%rbp), %rax
	movq	-920(%rbp), %rcx
	movq	%rax, (%rcx)
	# %995 = load i8*, i8** %115
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %996 = getelementptr %struct.mz_zip_archive, i8* %995, i32 0, i32 8
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %997 = load i8*, i8** %996
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %998 = load i8*, i8** %115
	movq	-912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %999 = getelementptr %struct.mz_zip_archive, i8* %998, i32 0, i32 10
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1000 = load i8*, i8** %999
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1001 = load i8*, i8** %116
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1002 = load i8*, i8** %1001
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# call void %997 (i8* %1000, i8* %1002)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1003 = load i8*, i8** %116
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1004 = load i8*, i8** %116
	movq	-920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1005 = call i64 @llvm.objectsize.i64.p0 (i8* %1004, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %1006 = call i8* @__memset_chk (i8* %1003, i32 0, i64 32, i64 %1005)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# br label %1007
	jmp	mz_zip_writer_add_from_zip_reader1007
	.text
mz_zip_writer_add_from_zip_reader1007:
	# %1008 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1009 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1008, i32 0, i32 4
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1010 = load i32, i32* %1009
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1011 = icmp ne i32 %1010, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1011, label %1044, label %1012
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1012
	jmp	mz_zip_writer_add_from_zip_reader1044
	.text
mz_zip_writer_add_from_zip_reader1012:
	# %1013 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1014 = load i32, i32* %241
	movq	-1888(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1015 = zext i32 %1014 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1016 = add i64 %1013, %1015
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1017 = add i64 %1016, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %1018 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1019 = add i64 %1017, %1018
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1020 = add i64 %1019, 16
	movq	%rsi, %rax
	movq	$16, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %1021 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1022 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1021, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1023 = getelementptr %struct.mz_zip_array, i8* %1022, i32 0, i32 1
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1024 = load i64, i64* %1023
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1025 = add i64 %1020, %1024
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1026 = add i64 %1025, 46
	movq	%rsi, %rax
	movq	$46, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# %1027 = load i32, i32* %242
	movq	-1896(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1028 = zext i32 %1027 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1029 = add i64 %1026, %1028
	movq	%rdi, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1030 = add i64 %1029, 22
	movq	%rsi, %rax
	movq	$22, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# %1031 = add i64 %1030, 64
	movq	%rsi, %rax
	movq	$64, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %1031, i64* %270
	movq	%rsi, %rax
	movq	-2104(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1032 = load i64, i64* %270
	movq	-2104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1033 = icmp uge i64 %1032, 4294967295
	movq	%rsi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %1033, label %1034, label %1043
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1043
	jmp	mz_zip_writer_add_from_zip_reader1034
	.text
mz_zip_writer_add_from_zip_reader1034:
	# %1035 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1035, i8** %199
	movq	%rdx, %rax
	movq	-1576(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %200
	movq	$29, %rax
	movq	-1584(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1036 = load i8*, i8** %199
	movq	-1576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1037 = icmp ne i8* %1036, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1037, label %1038, label %1042
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1042
	jmp	mz_zip_writer_add_from_zip_reader1038
	.text
mz_zip_writer_add_from_zip_reader1038:
	# %1039 = load i32, i32* %200
	movq	-1584(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1040 = load i8*, i8** %199
	movq	-1576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1041 = getelementptr %struct.mz_zip_archive, i8* %1040, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1039, i32* %1041
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1042
	jmp	mz_zip_writer_add_from_zip_reader1042
	.text
mz_zip_writer_add_from_zip_reader1042:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1043:
	# br label %1044
	jmp	mz_zip_writer_add_from_zip_reader1044
	.text
mz_zip_writer_add_from_zip_reader1044:
	# %1045 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %1046 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1047 = load i32, i32* %241
	movq	-1888(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1048 = call i32 @mz_zip_writer_write_zeros (i8* %1045, i64 %1046, i32 %1047)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_write_zeros
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %1049 = icmp ne i32 %1048, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1049, label %1051, label %1050
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1050
	jmp	mz_zip_writer_add_from_zip_reader1051
	.text
mz_zip_writer_add_from_zip_reader1050:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1051:
	# %1052 = load i32, i32* %241
	movq	-1888(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1053 = zext i32 %1052 to i64
	movq	%rsi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %1054 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1055 = add i64 %1054, %1053
	movq	%rsi, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %1055, i64* %246
	movq	%rsi, %rax
	movq	-1928(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1056 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i64 %1056, i64* %244
	movq	%rsi, %rax
	movq	-1912(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1057 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1058 = getelementptr %struct.mz_zip_archive, i8* %1057, i32 0, i32 6
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1059 = load i64, i64* %1058
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1060 = icmp ne i64 %1059, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1060, label %1061, label %1077
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1077
	jmp	mz_zip_writer_add_from_zip_reader1061
	.text
mz_zip_writer_add_from_zip_reader1061:
	# %1062 = load i64, i64* %244
	movq	-1912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1063 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1064 = getelementptr %struct.mz_zip_archive, i8* %1063, i32 0, i32 6
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1065 = load i64, i64* %1064
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1066 = sub i64 %1065, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %1067 = and i64 %1062, %1066
	movq	%rdi, %rax
	movq	%rsi, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %1068 = icmp eq i64 %1067, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	sete	%sil
	# %1069 = xor i1 %1068, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rsi
	# %1070 = zext i1 %1069 to i32
	movq	%rsi, %rax
	movq	%rax, %rsi
	# %1071 = sext i32 %1070 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1072 = icmp ne i64 %1071, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1072, label %1073, label %1075
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1075
	jmp	mz_zip_writer_add_from_zip_reader1073
	.text
mz_zip_writer_add_from_zip_reader1073:
	# call void @__assert_rtn (i8* @__func__.mz_zip_writer_add_from_zip_reader, i8* @.str.11, i32 8572, i8* @.str.22)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.mz_zip_writer_add_from_zip_reader(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$8572, %rax
	pushq	%rax
	leaq	_.str.22(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
mz_zip_writer_add_from_zip_reader1074:
	# br label %1076
	jmp	mz_zip_writer_add_from_zip_reader1076
	.text
mz_zip_writer_add_from_zip_reader1075:
	# br label %1076
	jmp	mz_zip_writer_add_from_zip_reader1076
	.text
mz_zip_writer_add_from_zip_reader1076:
	# br label %1077
	jmp	mz_zip_writer_add_from_zip_reader1077
	.text
mz_zip_writer_add_from_zip_reader1077:
	# %1078 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1079 = getelementptr %struct.mz_zip_archive, i8* %1078, i32 0, i32 12
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1080 = load i8*, i8** %1079
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1081 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1082 = getelementptr %struct.mz_zip_archive, i8* %1081, i32 0, i32 14
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1083 = load i8*, i8** %1082
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %1084 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1085 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1086 = call i64 %1080 (i8* %1083, i64 %1084, i8* %1085, i64 30)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	$30, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %1087 = icmp ne i64 %1086, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %1087, label %1088, label %1097
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1097
	jmp	mz_zip_writer_add_from_zip_reader1088
	.text
mz_zip_writer_add_from_zip_reader1088:
	# %1089 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1089, i8** %201
	movq	%rdx, %rax
	movq	-1560(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %202
	movq	$19, %rax
	movq	-1592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1090 = load i8*, i8** %201
	movq	-1560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1091 = icmp ne i8* %1090, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1091, label %1092, label %1096
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1096
	jmp	mz_zip_writer_add_from_zip_reader1092
	.text
mz_zip_writer_add_from_zip_reader1092:
	# %1093 = load i32, i32* %202
	movq	-1592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1094 = load i8*, i8** %201
	movq	-1560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1095 = getelementptr %struct.mz_zip_archive, i8* %1094, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1093, i32* %1095
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1096
	jmp	mz_zip_writer_add_from_zip_reader1096
	.text
mz_zip_writer_add_from_zip_reader1096:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1097:
	# %1098 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1099 = add i64 %1098, 30
	movq	%rsi, %rax
	movq	$30, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i64 %1099, i64* %246
	movq	%rsi, %rax
	movq	-1928(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1100 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1101 = getelementptr %struct.mz_zip_archive, i8* %1100, i32 0, i32 7
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1102 = load i8*, i8** %1101
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1103 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1104 = getelementptr %struct.mz_zip_archive, i8* %1103, i32 0, i32 10
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1105 = load i8*, i8** %1104
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1106 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1107 = icmp ult i64 65536, %1106
	movq	$65536, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %1107, label %1108, label %1109
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1109
	jmp	mz_zip_writer_add_from_zip_reader1108
	.text
mz_zip_writer_add_from_zip_reader1108:
	# br label %1111
	movq	$65536, %rbx
	jmp	mz_zip_writer_add_from_zip_reader1111
	.text
mz_zip_writer_add_from_zip_reader1109:
	# %1110 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %1111
	jmp	mz_zip_writer_add_from_zip_reader1111
	.text
mz_zip_writer_add_from_zip_reader1111:
	# %1112 = phi i64 [65536, %1108], [%1110, %1109]
	# %1113 = icmp ugt i64 32, %1112
	movq	$32, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	seta	%bl
	# br i1 %1113, label %1114, label %1115
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1115
	jmp	mz_zip_writer_add_from_zip_reader1114
	.text
mz_zip_writer_add_from_zip_reader1114:
	# br label %1123
	movq	$32, %rdx
	jmp	mz_zip_writer_add_from_zip_reader1123
	.text
mz_zip_writer_add_from_zip_reader1115:
	# %1116 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1117 = icmp ult i64 65536, %1116
	movq	$65536, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %1117, label %1118, label %1119
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1119
	jmp	mz_zip_writer_add_from_zip_reader1118
	.text
mz_zip_writer_add_from_zip_reader1118:
	# br label %1121
	movq	$65536, %rdx
	jmp	mz_zip_writer_add_from_zip_reader1121
	.text
mz_zip_writer_add_from_zip_reader1119:
	# %1120 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %1121
	jmp	mz_zip_writer_add_from_zip_reader1121
	.text
mz_zip_writer_add_from_zip_reader1121:
	# %1122 = phi i64 [65536, %1118], [%1120, %1119]
	# br label %1123
	jmp	mz_zip_writer_add_from_zip_reader1123
	.text
mz_zip_writer_add_from_zip_reader1123:
	# %1124 = phi i64 [32, %1114], [%1122, %1121]
	# %1125 = call i8* %1102 (i8* %1105, i64 1, i64 %1124)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rsi, %rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %1125, i8** %252
	movq	%rdx, %rax
	movq	-1976(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1126 = icmp eq i8* null, %1125
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %1126, label %1127, label %1136
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1136
	jmp	mz_zip_writer_add_from_zip_reader1127
	.text
mz_zip_writer_add_from_zip_reader1127:
	# %1128 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1128, i8** %203
	movq	%rdx, %rax
	movq	-1600(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %204
	movq	$16, %rax
	movq	-1608(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1129 = load i8*, i8** %203
	movq	-1600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1130 = icmp ne i8* %1129, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1130, label %1131, label %1135
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1135
	jmp	mz_zip_writer_add_from_zip_reader1131
	.text
mz_zip_writer_add_from_zip_reader1131:
	# %1132 = load i32, i32* %204
	movq	-1608(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1133 = load i8*, i8** %203
	movq	-1600(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1134 = getelementptr %struct.mz_zip_archive, i8* %1133, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1132, i32* %1134
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1135
	jmp	mz_zip_writer_add_from_zip_reader1135
	.text
mz_zip_writer_add_from_zip_reader1135:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1136:
	# br label %1137
	jmp	mz_zip_writer_add_from_zip_reader1137
	.text
mz_zip_writer_add_from_zip_reader1137:
	# %1138 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1139 = icmp ne i64 %1138, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1139, label %1140, label %1223
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1223
	jmp	mz_zip_writer_add_from_zip_reader1140
	.text
mz_zip_writer_add_from_zip_reader1140:
	# %1141 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1142 = icmp ult i64 65536, %1141
	movq	$65536, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1142, label %1143, label %1144
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1144
	jmp	mz_zip_writer_add_from_zip_reader1143
	.text
mz_zip_writer_add_from_zip_reader1143:
	# br label %1146
	movq	$65536, %rdx
	jmp	mz_zip_writer_add_from_zip_reader1146
	.text
mz_zip_writer_add_from_zip_reader1144:
	# %1145 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# br label %1146
	movq	%r8, %rdx
	jmp	mz_zip_writer_add_from_zip_reader1146
	.text
mz_zip_writer_add_from_zip_reader1146:
	# %1147 = phi i64 [65536, %1143], [%1145, %1144]
	# %1148 = trunc i64 %1147 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1148, i32* %239
	movq	%rdx, %rax
	movq	-1872(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1149 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1150 = getelementptr %struct.mz_zip_archive, i8* %1149, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1151 = load i8*, i8** %1150
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1152 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1153 = getelementptr %struct.mz_zip_archive, i8* %1152, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1154 = load i8*, i8** %1153
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1155 = load i64, i64* %245
	movq	-1920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1156 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1157 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1158 = zext i32 %1157 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1159 = call i64 %1151 (i8* %1154, i64 %1155, i8* %1156, i64 %1158)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %1160 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1161 = zext i32 %1160 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1162 = icmp ne i64 %1159, %1161
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1162, label %1163, label %1179
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1179
	jmp	mz_zip_writer_add_from_zip_reader1163
	.text
mz_zip_writer_add_from_zip_reader1163:
	# %1164 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1165 = getelementptr %struct.mz_zip_archive, i8* %1164, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1166 = load i8*, i8** %1165
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1167 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1168 = getelementptr %struct.mz_zip_archive, i8* %1167, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1169 = load i8*, i8** %1168
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1170 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1166 (i8* %1169, i8* %1170)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1171 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1171, i8** %205
	movq	%rdx, %rax
	movq	-1616(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %206
	movq	$20, %rax
	movq	-1624(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1172 = load i8*, i8** %205
	movq	-1616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1173 = icmp ne i8* %1172, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1173, label %1174, label %1178
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1178
	jmp	mz_zip_writer_add_from_zip_reader1174
	.text
mz_zip_writer_add_from_zip_reader1174:
	# %1175 = load i32, i32* %206
	movq	-1624(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1176 = load i8*, i8** %205
	movq	-1616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1177 = getelementptr %struct.mz_zip_archive, i8* %1176, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1175, i32* %1177
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1178
	jmp	mz_zip_writer_add_from_zip_reader1178
	.text
mz_zip_writer_add_from_zip_reader1178:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1179:
	# %1180 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1181 = zext i32 %1180 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1182 = load i64, i64* %245
	movq	-1920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1183 = add i64 %1182, %1181
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1183, i64* %245
	movq	%rdx, %rax
	movq	-1920(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1184 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1185 = getelementptr %struct.mz_zip_archive, i8* %1184, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1186 = load i8*, i8** %1185
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1187 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1188 = getelementptr %struct.mz_zip_archive, i8* %1187, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1189 = load i8*, i8** %1188
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1190 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1191 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1192 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1193 = zext i32 %1192 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1194 = call i64 %1186 (i8* %1189, i64 %1190, i8* %1191, i64 %1193)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %1195 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1196 = zext i32 %1195 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1197 = icmp ne i64 %1194, %1196
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1197, label %1198, label %1214
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1214
	jmp	mz_zip_writer_add_from_zip_reader1198
	.text
mz_zip_writer_add_from_zip_reader1198:
	# %1199 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1200 = getelementptr %struct.mz_zip_archive, i8* %1199, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1201 = load i8*, i8** %1200
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1202 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1203 = getelementptr %struct.mz_zip_archive, i8* %1202, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1204 = load i8*, i8** %1203
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1205 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1201 (i8* %1204, i8* %1205)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1206 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1206, i8** %207
	movq	%rdx, %rax
	movq	-1632(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %208
	movq	$19, %rax
	movq	-1640(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1207 = load i8*, i8** %207
	movq	-1632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1208 = icmp ne i8* %1207, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1208, label %1209, label %1213
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1213
	jmp	mz_zip_writer_add_from_zip_reader1209
	.text
mz_zip_writer_add_from_zip_reader1209:
	# %1210 = load i32, i32* %208
	movq	-1640(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1211 = load i8*, i8** %207
	movq	-1632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1212 = getelementptr %struct.mz_zip_archive, i8* %1211, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1210, i32* %1212
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1213
	jmp	mz_zip_writer_add_from_zip_reader1213
	.text
mz_zip_writer_add_from_zip_reader1213:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1214:
	# %1215 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1216 = zext i32 %1215 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1217 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1218 = add i64 %1217, %1216
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1218, i64* %246
	movq	%rdx, %rax
	movq	-1928(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1219 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1220 = zext i32 %1219 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1221 = load i64, i64* %243
	movq	-1904(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1222 = sub i64 %1221, %1220
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1222, i64* %243
	movq	%rdx, %rax
	movq	-1904(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1137
	jmp	mz_zip_writer_add_from_zip_reader1137
	.text
mz_zip_writer_add_from_zip_reader1223:
	# %1224 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1225 = getelementptr i8, i8* %1224, i64 6
	movq	%rdx, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1226 = getelementptr i8, i8* %1225, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1227 = load i8, i8* %1226
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1228 = zext i8 %1227 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1229 = load i8*, i8** %248
	movq	-1936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1230 = getelementptr i8, i8* %1229, i64 6
	movq	%rdx, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1231 = getelementptr i8, i8* %1230, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1232 = load i8, i8* %1231
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1233 = zext i8 %1232 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1234 = shl i32 %1233, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1235 = or i32 %1228, %1234
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1235, i32* %240
	movq	%rdx, %rax
	movq	-1880(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1236 = load i32, i32* %240
	movq	-1880(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1237 = and i32 %1236, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %1238 = icmp ne i32 %1237, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1238, label %1239, label %1629
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1629
	jmp	mz_zip_writer_add_from_zip_reader1239
	.text
mz_zip_writer_add_from_zip_reader1239:
	# %1240 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1241 = getelementptr %struct.mz_zip_archive, i8* %1240, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1242 = load i8*, i8** %1241
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1243 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1242, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1244 = load i32, i32* %1243
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1245 = icmp ne i32 %1244, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1245, label %1249, label %1246
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1246
	jmp	mz_zip_writer_add_from_zip_reader1249
	.text
mz_zip_writer_add_from_zip_reader1246:
	# %1247 = load i32, i32* %262
	movq	-2040(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1248 = icmp ne i32 %1247, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1248, label %1249, label %1305
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1305
	jmp	mz_zip_writer_add_from_zip_reader1249
	.text
mz_zip_writer_add_from_zip_reader1249:
	# %1250 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1251 = getelementptr %struct.mz_zip_archive, i8* %1250, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1252 = load i8*, i8** %1251
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1253 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1254 = getelementptr %struct.mz_zip_archive, i8* %1253, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1255 = load i8*, i8** %1254
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1256 = load i64, i64* %245
	movq	-1920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1257 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1258 = call i64 %1252 (i8* %1255, i64 %1256, i8* %1257, i64 24)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$24, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1259 = icmp ne i64 %1258, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1259, label %1260, label %1276
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1276
	jmp	mz_zip_writer_add_from_zip_reader1260
	.text
mz_zip_writer_add_from_zip_reader1260:
	# %1261 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1262 = getelementptr %struct.mz_zip_archive, i8* %1261, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1263 = load i8*, i8** %1262
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1264 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1265 = getelementptr %struct.mz_zip_archive, i8* %1264, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1266 = load i8*, i8** %1265
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1267 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1263 (i8* %1266, i8* %1267)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1268 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1268, i8** %209
	movq	%rdx, %rax
	movq	-1648(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %210
	movq	$20, %rax
	movq	-1664(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1269 = load i8*, i8** %209
	movq	-1648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1270 = icmp ne i8* %1269, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1270, label %1271, label %1275
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1275
	jmp	mz_zip_writer_add_from_zip_reader1271
	.text
mz_zip_writer_add_from_zip_reader1271:
	# %1272 = load i32, i32* %210
	movq	-1664(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1273 = load i8*, i8** %209
	movq	-1648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1274 = getelementptr %struct.mz_zip_archive, i8* %1273, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1272, i32* %1274
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1275
	jmp	mz_zip_writer_add_from_zip_reader1275
	.text
mz_zip_writer_add_from_zip_reader1275:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1276:
	# %1277 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1278 = getelementptr i8, i8* %1277, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1279 = load i8, i8* %1278
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1280 = zext i8 %1279 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1281 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1282 = getelementptr i8, i8* %1281, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1283 = load i8, i8* %1282
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1284 = zext i8 %1283 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1285 = shl i32 %1284, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1286 = or i32 %1280, %1285
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1287 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1288 = getelementptr i8, i8* %1287, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1289 = load i8, i8* %1288
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1290 = zext i8 %1289 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1291 = shl i32 %1290, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1292 = or i32 %1286, %1291
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1293 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1294 = getelementptr i8, i8* %1293, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1295 = load i8, i8* %1294
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1296 = zext i8 %1295 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1297 = shl i32 %1296, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1298 = or i32 %1292, %1297
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1299 = icmp eq i32 %1298, 134695760
	movq	%rdx, %rax
	movq	$134695760, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# %1300 = zext i1 %1299 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %1301 = select i1 %1299, i32 6, i32 5
	movq	%rbx, %rcx
	movq	$6, %rax
	movq	$5, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# %1302 = sext i32 %1301 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1303 = mul i64 4, %1302
	movq	$4, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %1304 = trunc i64 %1303 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1304, i32* %239
	movq	%rdx, %rax
	movq	-1872(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1589
	jmp	mz_zip_writer_add_from_zip_reader1589
	.text
mz_zip_writer_add_from_zip_reader1305:
	# %1306 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1307 = getelementptr %struct.mz_zip_archive, i8* %1306, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1308 = load i8*, i8** %1307
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1309 = load i8*, i8** %237
	movq	-1864(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1310 = getelementptr %struct.mz_zip_archive, i8* %1309, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1311 = load i8*, i8** %1310
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1312 = load i64, i64* %245
	movq	-1920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1313 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1314 = call i64 %1308 (i8* %1311, i64 %1312, i8* %1313, i64 16)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$16, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1315 = icmp ne i64 %1314, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1315, label %1316, label %1332
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1332
	jmp	mz_zip_writer_add_from_zip_reader1316
	.text
mz_zip_writer_add_from_zip_reader1316:
	# %1317 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1318 = getelementptr %struct.mz_zip_archive, i8* %1317, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1319 = load i8*, i8** %1318
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1320 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1321 = getelementptr %struct.mz_zip_archive, i8* %1320, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1322 = load i8*, i8** %1321
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1323 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1319 (i8* %1322, i8* %1323)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1324 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1324, i8** %211
	movq	%rdx, %rax
	movq	-1672(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 20, i32* %212
	movq	$20, %rax
	movq	-1680(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1325 = load i8*, i8** %211
	movq	-1672(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1326 = icmp ne i8* %1325, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1326, label %1327, label %1331
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1331
	jmp	mz_zip_writer_add_from_zip_reader1327
	.text
mz_zip_writer_add_from_zip_reader1327:
	# %1328 = load i32, i32* %212
	movq	-1680(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1329 = load i8*, i8** %211
	movq	-1672(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1330 = getelementptr %struct.mz_zip_archive, i8* %1329, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %1328, i32* %1330
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %1331
	jmp	mz_zip_writer_add_from_zip_reader1331
	.text
mz_zip_writer_add_from_zip_reader1331:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1332:
	# %1333 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1334 = getelementptr i8, i8* %1333, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1335 = load i8, i8* %1334
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1336 = zext i8 %1335 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1337 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1338 = getelementptr i8, i8* %1337, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1339 = load i8, i8* %1338
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1340 = zext i8 %1339 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1341 = shl i32 %1340, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1342 = or i32 %1336, %1341
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1343 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1344 = getelementptr i8, i8* %1343, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1345 = load i8, i8* %1344
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1346 = zext i8 %1345 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1347 = shl i32 %1346, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1348 = or i32 %1342, %1347
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1349 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1350 = getelementptr i8, i8* %1349, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1351 = load i8, i8* %1350
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1352 = zext i8 %1351 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1353 = shl i32 %1352, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1354 = or i32 %1348, %1353
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1355 = icmp eq i32 %1354, 134695760
	movq	%rdx, %rax
	movq	$134695760, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# %1356 = zext i1 %1355 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# store i32 %1356, i32* %271
	movq	%rdx, %rax
	movq	-2112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1357 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1358 = getelementptr %struct.mz_zip_archive, i8* %1357, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1359 = load i8*, i8** %1358
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1360 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1359, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1361 = load i32, i32* %1360
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1362 = icmp ne i32 %1361, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1362, label %1363, label %1580
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1580
	jmp	mz_zip_writer_add_from_zip_reader1363
	.text
mz_zip_writer_add_from_zip_reader1363:
	# %1364 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1365 = load i32, i32* %271
	movq	-2112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1366 = icmp ne i32 %1365, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# %1367 = zext i1 %1366 to i64
	movq	%rsi, %rax
	movq	%rax, %rdx
	# %1368 = select i1 %1366, i64 4, i64 0
	movq	%rsi, %rcx
	movq	$4, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# %1369 = getelementptr i8, i8* %1364, i64 %1368
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1369, i8** %272
	movq	%rdx, %rax
	movq	-2120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1370 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1371 = getelementptr i8, i8* %1370, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1372 = load i8, i8* %1371
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1373 = zext i8 %1372 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1374 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1375 = getelementptr i8, i8* %1374, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1376 = load i8, i8* %1375
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1377 = zext i8 %1376 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1378 = shl i32 %1377, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1379 = or i32 %1373, %1378
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1380 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1381 = getelementptr i8, i8* %1380, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1382 = load i8, i8* %1381
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1383 = zext i8 %1382 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1384 = shl i32 %1383, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1385 = or i32 %1379, %1384
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1386 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1387 = getelementptr i8, i8* %1386, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1388 = load i8, i8* %1387
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1389 = zext i8 %1388 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1390 = shl i32 %1389, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1391 = or i32 %1385, %1390
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1391, i32* %273
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %1392 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1393 = getelementptr i8, i8* %1392, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1394 = getelementptr i8, i8* %1393, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1395 = load i8, i8* %1394
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1396 = zext i8 %1395 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1397 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1398 = getelementptr i8, i8* %1397, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1399 = getelementptr i8, i8* %1398, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1400 = load i8, i8* %1399
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1401 = zext i8 %1400 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1402 = shl i32 %1401, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1403 = or i32 %1396, %1402
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1404 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1405 = getelementptr i8, i8* %1404, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1406 = getelementptr i8, i8* %1405, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1407 = load i8, i8* %1406
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1408 = zext i8 %1407 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1409 = shl i32 %1408, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1410 = or i32 %1403, %1409
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1411 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1412 = getelementptr i8, i8* %1411, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1413 = getelementptr i8, i8* %1412, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1414 = load i8, i8* %1413
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1415 = zext i8 %1414 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1416 = shl i32 %1415, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1417 = or i32 %1410, %1416
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1418 = zext i32 %1417 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %1418, i64* %274
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %1419 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1420 = getelementptr i8, i8* %1419, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1421 = getelementptr i8, i8* %1420, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1422 = load i8, i8* %1421
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1423 = zext i8 %1422 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1424 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1425 = getelementptr i8, i8* %1424, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1426 = getelementptr i8, i8* %1425, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1427 = load i8, i8* %1426
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1428 = zext i8 %1427 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1429 = shl i32 %1428, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1430 = or i32 %1423, %1429
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1431 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1432 = getelementptr i8, i8* %1431, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1433 = getelementptr i8, i8* %1432, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1434 = load i8, i8* %1433
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1435 = zext i8 %1434 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1436 = shl i32 %1435, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1437 = or i32 %1430, %1436
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# %1438 = load i8*, i8** %272
	movq	-2120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1439 = getelementptr i8, i8* %1438, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1440 = getelementptr i8, i8* %1439, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1441 = load i8, i8* %1440
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1442 = zext i8 %1441 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1443 = shl i32 %1442, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1444 = or i32 %1437, %1443
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %1445 = zext i32 %1444 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %1445, i64* %275
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %1446 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1446, i8** %95
	movq	%rdx, %rax
	movq	-760(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 134695760, i32* %96
	movq	$134695760, %rax
	movq	-768(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1447 = load i32, i32* %96
	movq	-768(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1448 = trunc i32 %1447 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1449 = load i8*, i8** %95
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1448, i8* %1449
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1450 = load i32, i32* %96
	movq	-768(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1451 = lshr i32 %1450, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1452 = trunc i32 %1451 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1453 = load i8*, i8** %95
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1454 = getelementptr i8, i8* %1453, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1452, i8* %1454
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1455 = load i32, i32* %96
	movq	-768(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1456 = lshr i32 %1455, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1457 = trunc i32 %1456 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1458 = load i8*, i8** %95
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1459 = getelementptr i8, i8* %1458, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1457, i8* %1459
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1460 = load i32, i32* %96
	movq	-768(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1461 = lshr i32 %1460, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1462 = trunc i32 %1461 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1463 = load i8*, i8** %95
	movq	-760(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1464 = getelementptr i8, i8* %1463, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1462, i8* %1464
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1465 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1466 = getelementptr i8, i8* %1465, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1467 = load i32, i32* %273
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1466, i8** %97
	movq	%rbx, %rax
	movq	-776(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1467, i32* %98
	movq	%rdx, %rax
	movq	-784(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1468 = load i32, i32* %98
	movq	-784(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1469 = trunc i32 %1468 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1470 = load i8*, i8** %97
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1469, i8* %1470
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1471 = load i32, i32* %98
	movq	-784(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1472 = lshr i32 %1471, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1473 = trunc i32 %1472 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1474 = load i8*, i8** %97
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1475 = getelementptr i8, i8* %1474, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1473, i8* %1475
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1476 = load i32, i32* %98
	movq	-784(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1477 = lshr i32 %1476, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1478 = trunc i32 %1477 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1479 = load i8*, i8** %97
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1480 = getelementptr i8, i8* %1479, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1478, i8* %1480
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1481 = load i32, i32* %98
	movq	-784(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1482 = lshr i32 %1481, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1483 = trunc i32 %1482 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1484 = load i8*, i8** %97
	movq	-776(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1485 = getelementptr i8, i8* %1484, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1483, i8* %1485
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1486 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1487 = getelementptr i8, i8* %1486, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1488 = load i64, i64* %274
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1487, i8** %87
	movq	%rbx, %rax
	movq	-696(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1488, i64* %88
	movq	%rdx, %rax
	movq	-704(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1489 = load i8*, i8** %87
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1490 = load i64, i64* %88
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1491 = trunc i64 %1490 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1489, i8** %83
	movq	%rbx, %rax
	movq	-664(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1491, i32* %84
	movq	%rdx, %rax
	movq	-672(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1492 = load i32, i32* %84
	movq	-672(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1493 = trunc i32 %1492 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1494 = load i8*, i8** %83
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1493, i8* %1494
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1495 = load i32, i32* %84
	movq	-672(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1496 = lshr i32 %1495, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1497 = trunc i32 %1496 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1498 = load i8*, i8** %83
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1499 = getelementptr i8, i8* %1498, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1497, i8* %1499
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1500 = load i32, i32* %84
	movq	-672(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1501 = lshr i32 %1500, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1502 = trunc i32 %1501 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1503 = load i8*, i8** %83
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1504 = getelementptr i8, i8* %1503, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1502, i8* %1504
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1505 = load i32, i32* %84
	movq	-672(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1506 = lshr i32 %1505, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1507 = trunc i32 %1506 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1508 = load i8*, i8** %83
	movq	-664(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1509 = getelementptr i8, i8* %1508, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1507, i8* %1509
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1510 = load i8*, i8** %87
	movq	-696(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1511 = getelementptr i8, i8* %1510, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1512 = load i64, i64* %88
	movq	-704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1513 = lshr i64 %1512, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1514 = trunc i64 %1513 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1511, i8** %85
	movq	%rbx, %rax
	movq	-680(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1514, i32* %86
	movq	%rdx, %rax
	movq	-688(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1515 = load i32, i32* %86
	movq	-688(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1516 = trunc i32 %1515 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1517 = load i8*, i8** %85
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1516, i8* %1517
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1518 = load i32, i32* %86
	movq	-688(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1519 = lshr i32 %1518, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1520 = trunc i32 %1519 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1521 = load i8*, i8** %85
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1522 = getelementptr i8, i8* %1521, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1520, i8* %1522
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1523 = load i32, i32* %86
	movq	-688(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1524 = lshr i32 %1523, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1525 = trunc i32 %1524 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1526 = load i8*, i8** %85
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1527 = getelementptr i8, i8* %1526, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1525, i8* %1527
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1528 = load i32, i32* %86
	movq	-688(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1529 = lshr i32 %1528, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1530 = trunc i32 %1529 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1531 = load i8*, i8** %85
	movq	-680(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1532 = getelementptr i8, i8* %1531, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1530, i8* %1532
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1533 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1534 = getelementptr i8, i8* %1533, i64 16
	movq	%rdx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1535 = load i64, i64* %275
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1534, i8** %93
	movq	%rbx, %rax
	movq	-744(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1535, i64* %94
	movq	%rdx, %rax
	movq	-752(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1536 = load i8*, i8** %93
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1537 = load i64, i64* %94
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1538 = trunc i64 %1537 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1536, i8** %89
	movq	%rbx, %rax
	movq	-712(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1538, i32* %90
	movq	%rdx, %rax
	movq	-720(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1539 = load i32, i32* %90
	movq	-720(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1540 = trunc i32 %1539 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1541 = load i8*, i8** %89
	movq	-712(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1540, i8* %1541
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1542 = load i32, i32* %90
	movq	-720(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1543 = lshr i32 %1542, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1544 = trunc i32 %1543 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1545 = load i8*, i8** %89
	movq	-712(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1546 = getelementptr i8, i8* %1545, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1544, i8* %1546
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1547 = load i32, i32* %90
	movq	-720(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1548 = lshr i32 %1547, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1549 = trunc i32 %1548 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1550 = load i8*, i8** %89
	movq	-712(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1551 = getelementptr i8, i8* %1550, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1549, i8* %1551
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1552 = load i32, i32* %90
	movq	-720(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1553 = lshr i32 %1552, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1554 = trunc i32 %1553 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1555 = load i8*, i8** %89
	movq	-712(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1556 = getelementptr i8, i8* %1555, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1554, i8* %1556
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1557 = load i8*, i8** %93
	movq	-744(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1558 = getelementptr i8, i8* %1557, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1559 = load i64, i64* %94
	movq	-752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1560 = lshr i64 %1559, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %1561 = trunc i64 %1560 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1558, i8** %91
	movq	%rbx, %rax
	movq	-728(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1561, i32* %92
	movq	%rdx, %rax
	movq	-736(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1562 = load i32, i32* %92
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1563 = trunc i32 %1562 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1564 = load i8*, i8** %91
	movq	-728(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1563, i8* %1564
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1565 = load i32, i32* %92
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1566 = lshr i32 %1565, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1567 = trunc i32 %1566 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1568 = load i8*, i8** %91
	movq	-728(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1569 = getelementptr i8, i8* %1568, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1567, i8* %1569
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1570 = load i32, i32* %92
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1571 = lshr i32 %1570, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1572 = trunc i32 %1571 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1573 = load i8*, i8** %91
	movq	-728(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1574 = getelementptr i8, i8* %1573, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1572, i8* %1574
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1575 = load i32, i32* %92
	movq	-736(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1576 = lshr i32 %1575, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1577 = trunc i32 %1576 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1578 = load i8*, i8** %91
	movq	-728(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1579 = getelementptr i8, i8* %1578, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1577, i8* %1579
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# store i32 24, i32* %239
	movq	$24, %rax
	movq	-1872(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1588
	jmp	mz_zip_writer_add_from_zip_reader1588
	.text
mz_zip_writer_add_from_zip_reader1580:
	# %1581 = load i32, i32* %271
	movq	-2112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1582 = icmp ne i32 %1581, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# %1583 = zext i1 %1582 to i64
	movq	%rbx, %rax
	movq	%rax, %rdx
	# %1584 = select i1 %1582, i32 4, i32 3
	movq	%rbx, %rcx
	movq	$4, %rax
	movq	$3, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdx
	# %1585 = sext i32 %1584 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1586 = mul i64 4, %1585
	movq	$4, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %1587 = trunc i64 %1586 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %1587, i32* %239
	movq	%rdx, %rax
	movq	-1872(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1588
	jmp	mz_zip_writer_add_from_zip_reader1588
	.text
mz_zip_writer_add_from_zip_reader1588:
	# br label %1589
	jmp	mz_zip_writer_add_from_zip_reader1589
	.text
mz_zip_writer_add_from_zip_reader1589:
	# %1590 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1591 = getelementptr %struct.mz_zip_archive, i8* %1590, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1592 = load i8*, i8** %1591
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1593 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1594 = getelementptr %struct.mz_zip_archive, i8* %1593, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1595 = load i8*, i8** %1594
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1596 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1597 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1598 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1599 = zext i32 %1598 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1600 = call i64 %1592 (i8* %1595, i64 %1596, i8* %1597, i64 %1599)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %1601 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1602 = zext i32 %1601 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1603 = icmp ne i64 %1600, %1602
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1603, label %1604, label %1620
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1620
	jmp	mz_zip_writer_add_from_zip_reader1604
	.text
mz_zip_writer_add_from_zip_reader1604:
	# %1605 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1606 = getelementptr %struct.mz_zip_archive, i8* %1605, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1607 = load i8*, i8** %1606
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1608 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1609 = getelementptr %struct.mz_zip_archive, i8* %1608, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1610 = load i8*, i8** %1609
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1611 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1607 (i8* %1610, i8* %1611)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1612 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1612, i8** %213
	movq	%rdx, %rax
	movq	-1688(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %214
	movq	$19, %rax
	movq	-1696(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1613 = load i8*, i8** %213
	movq	-1688(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1614 = icmp ne i8* %1613, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1614, label %1615, label %1619
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1619
	jmp	mz_zip_writer_add_from_zip_reader1615
	.text
mz_zip_writer_add_from_zip_reader1615:
	# %1616 = load i32, i32* %214
	movq	-1696(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1617 = load i8*, i8** %213
	movq	-1688(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1618 = getelementptr %struct.mz_zip_archive, i8* %1617, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1616, i32* %1618
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1619
	jmp	mz_zip_writer_add_from_zip_reader1619
	.text
mz_zip_writer_add_from_zip_reader1619:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1620:
	# %1621 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1622 = zext i32 %1621 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1623 = load i64, i64* %245
	movq	-1920(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1624 = add i64 %1623, %1622
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1624, i64* %245
	movq	%rdx, %rax
	movq	-1920(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1625 = load i32, i32* %239
	movq	-1872(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1626 = zext i32 %1625 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1627 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1628 = add i64 %1627, %1626
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %1628, i64* %246
	movq	%rdx, %rax
	movq	-1928(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %1629
	jmp	mz_zip_writer_add_from_zip_reader1629
	.text
mz_zip_writer_add_from_zip_reader1629:
	# %1630 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1631 = getelementptr %struct.mz_zip_archive, i8* %1630, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1632 = load i8*, i8** %1631
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1633 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1634 = getelementptr %struct.mz_zip_archive, i8* %1633, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1635 = load i8*, i8** %1634
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1636 = load i8*, i8** %252
	movq	-1976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1632 (i8* %1635, i8* %1636)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1637 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1638 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1637, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1639 = getelementptr %struct.mz_zip_array, i8* %1638, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1640 = load i64, i64* %1639
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %1640, i64* %250
	movq	%rdx, %rax
	movq	-1952(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1641 = getelementptr [46 x i8], i8* %249, i64 0, i64 0
	movq	-1944(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1642 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @memcpy (i8* %1641, i8* %1642, i64 46, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$46, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memcpy
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1643 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1644 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1643, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1645 = load i32, i32* %1644
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1646 = icmp ne i32 %1645, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1646, label %1647, label %2224
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2224
	jmp	mz_zip_writer_add_from_zip_reader1647
	.text
mz_zip_writer_add_from_zip_reader1647:
	# %1648 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1649 = getelementptr i8, i8* %1648, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1650 = load i32, i32* %255
	movq	-2000(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1651 = zext i32 %1650 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1652 = getelementptr i8, i8* %1649, i64 %1651
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1652, i8** %276
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i8* %277, i8** %166
	movq	%r11, %rax
	movq	-1320(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %167
	movq	$1, %rax
	movq	-1328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1653 = load i8*, i8** %166
	movq	-1320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1654 = load i8*, i8** %166
	movq	-1320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1655 = call i64 @llvm.objectsize.i64.p0 (i8* %1654, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1656 = call i8* @__memset_chk (i8* %1653, i32 0, i64 32, i64 %1655)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1657 = load i32, i32* %167
	movq	-1328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1658 = load i8*, i8** %166
	movq	-1320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1659 = getelementptr %struct.mz_zip_array, i8* %1658, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1657, i32* %1659
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %1660 = getelementptr [46 x i8], i8* %249, i64 0, i64 0
	movq	-1944(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1661 = getelementptr i8, i8* %1660, i64 20
	movq	%rdx, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1661, i8** %99
	movq	%rdx, %rax
	movq	-792(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 -1, i32* %100
	movq	$-1, %rax
	movq	-800(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1662 = load i32, i32* %100
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1663 = trunc i32 %1662 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1664 = load i8*, i8** %99
	movq	-792(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1663, i8* %1664
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1665 = load i32, i32* %100
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1666 = lshr i32 %1665, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1667 = trunc i32 %1666 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1668 = load i8*, i8** %99
	movq	-792(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1669 = getelementptr i8, i8* %1668, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1667, i8* %1669
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1670 = load i32, i32* %100
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1671 = lshr i32 %1670, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1672 = trunc i32 %1671 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1673 = load i8*, i8** %99
	movq	-792(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1674 = getelementptr i8, i8* %1673, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1672, i8* %1674
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1675 = load i32, i32* %100
	movq	-800(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1676 = lshr i32 %1675, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1677 = trunc i32 %1676 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1678 = load i8*, i8** %99
	movq	-792(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1679 = getelementptr i8, i8* %1678, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1677, i8* %1679
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1680 = getelementptr [46 x i8], i8* %249, i64 0, i64 0
	movq	-1944(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1681 = getelementptr i8, i8* %1680, i64 24
	movq	%rdx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1681, i8** %101
	movq	%rdx, %rax
	movq	-808(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 -1, i32* %102
	movq	$-1, %rax
	movq	-816(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1682 = load i32, i32* %102
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1683 = trunc i32 %1682 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %1684 = load i8*, i8** %101
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %1683, i8* %1684
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %1685 = load i32, i32* %102
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1686 = lshr i32 %1685, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1687 = trunc i32 %1686 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1688 = load i8*, i8** %101
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1689 = getelementptr i8, i8* %1688, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1687, i8* %1689
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1690 = load i32, i32* %102
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1691 = lshr i32 %1690, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1692 = trunc i32 %1691 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1693 = load i8*, i8** %101
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1694 = getelementptr i8, i8* %1693, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1692, i8* %1694
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1695 = load i32, i32* %102
	movq	-816(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1696 = lshr i32 %1695, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1697 = trunc i32 %1696 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1698 = load i8*, i8** %101
	movq	-808(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1699 = getelementptr i8, i8* %1698, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1697, i8* %1699
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1700 = getelementptr [46 x i8], i8* %249, i64 0, i64 0
	movq	-1944(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1701 = getelementptr i8, i8* %1700, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1701, i8** %103
	movq	%rdx, %rax
	movq	-824(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 -1, i32* %104
	movq	$-1, %rax
	movq	-832(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1702 = load i32, i32* %104
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1703 = trunc i32 %1702 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1704 = load i8*, i8** %103
	movq	-824(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1703, i8* %1704
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1705 = load i32, i32* %104
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1706 = lshr i32 %1705, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1707 = trunc i32 %1706 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1708 = load i8*, i8** %103
	movq	-824(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1709 = getelementptr i8, i8* %1708, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1707, i8* %1709
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1710 = load i32, i32* %104
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1711 = lshr i32 %1710, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1712 = trunc i32 %1711 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1713 = load i8*, i8** %103
	movq	-824(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1714 = getelementptr i8, i8* %1713, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1712, i8* %1714
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1715 = load i32, i32* %104
	movq	-832(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1716 = lshr i32 %1715, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %1717 = trunc i32 %1716 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1718 = load i8*, i8** %103
	movq	-824(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1719 = getelementptr i8, i8* %1718, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1717, i8* %1719
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1720 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1721 = load i8*, i8** %276
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1722 = load i32, i32* %257
	movq	-2008(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1723 = getelementptr %struct.mz_zip_archive_file_stat, i8* %254, i32 0, i32 7
	movq	-1992(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1724 = getelementptr %struct.mz_zip_archive_file_stat, i8* %254, i32 0, i32 8
	movq	-1992(%rbp), %rcx
	movq	$0, %rax
	imulq	$1102, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1725 = call i32 @mz_zip_writer_update_zip64_extension_block (i8* %277, i8* %1720, i8* %1721, i32 %1722, i8* %1723, i8* %1724, i8* %244, i8* null)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	-1912(%rbp), %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_update_zip64_extension_block
	addq	$16, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1726 = icmp ne i32 %1725, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1726, label %1741, label %1727
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1727
	jmp	mz_zip_writer_add_from_zip_reader1741
	.text
mz_zip_writer_add_from_zip_reader1727:
	# %1728 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1728, i8** %117
	movq	%rdx, %rax
	movq	-928(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %277, i8** %118
	movq	%r11, %rax
	movq	-936(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1729 = load i8*, i8** %117
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1730 = getelementptr %struct.mz_zip_archive, i8* %1729, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1731 = load i8*, i8** %1730
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1732 = load i8*, i8** %117
	movq	-928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1733 = getelementptr %struct.mz_zip_archive, i8* %1732, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1734 = load i8*, i8** %1733
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1735 = load i8*, i8** %118
	movq	-936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1736 = load i8*, i8** %1735
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1731 (i8* %1734, i8* %1736)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1737 = load i8*, i8** %118
	movq	-936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1738 = load i8*, i8** %118
	movq	-936(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1739 = call i64 @llvm.objectsize.i64.p0 (i8* %1738, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1740 = call i8* @__memset_chk (i8* %1737, i32 0, i64 32, i64 %1739)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1741:
	# %1742 = getelementptr [46 x i8], i8* %249, i64 0, i64 0
	movq	-1944(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1743 = getelementptr i8, i8* %1742, i64 30
	movq	%rdx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1744 = getelementptr %struct.mz_zip_array, i8* %277, i32 0, i32 1
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1745 = load i64, i64* %1744
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1746 = trunc i64 %1745 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i8* %1743, i8** %81
	movq	%rbx, %rax
	movq	-648(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %1746, i16* %82
	movq	%rdx, %rax
	movq	-656(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1747 = load i16, i16* %82
	movq	-656(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1748 = trunc i16 %1747 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1749 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %1748, i8* %1749
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1750 = load i16, i16* %82
	movq	-656(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1751 = zext i16 %1750 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1752 = ashr i32 %1751, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %1753 = trunc i32 %1752 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %1754 = load i8*, i8** %81
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1755 = getelementptr i8, i8* %1754, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %1753, i8* %1755
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %1756 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1757 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1758 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1757, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1759 = getelementptr [46 x i8], i8* %249, i64 0, i64 0
	movq	-1944(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1756, i8** %10
	movq	%rsi, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1758, i8** %11
	movq	%rbx, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1759, i8** %12
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 46, i64* %13
	movq	$46, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1760 = load i8*, i8** %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1761 = getelementptr %struct.mz_zip_array, i8* %1760, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1762 = load i64, i64* %1761
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %1762, i64* %14
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1763 = load i8*, i8** %10
	movq	-56(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1764 = load i8*, i8** %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1765 = load i64, i64* %14
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1766 = load i64, i64* %13
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1767 = add i64 %1765, %1766
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %1763, i8** %5
	movq	%rdi, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1764, i8** %6
	movq	%rsi, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1767, i64* %7
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %8
	movq	$1, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1768 = load i64, i64* %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1769 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1770 = getelementptr %struct.mz_zip_array, i8* %1769, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1771 = load i64, i64* %1770
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1772 = icmp ugt i64 %1768, %1771
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1772, label %1773, label %1782
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1782
	jmp	mz_zip_writer_add_from_zip_reader1773
	.text
mz_zip_writer_add_from_zip_reader1773:
	# %1774 = load i8*, i8** %5
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1775 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1776 = load i64, i64* %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1777 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1778 = call i32 @mz_zip_array_ensure_capacity (i8* %1774, i8* %1775, i64 %1776, i32 %1777)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1779 = icmp ne i32 %1778, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1779, label %1781, label %1780
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1780
	jmp	mz_zip_writer_add_from_zip_reader1781
	.text
mz_zip_writer_add_from_zip_reader1780:
	# store i32 0, i32* %4
	movq	$0, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1786
	jmp	mz_zip_writer_add_from_zip_reader1786
	.text
mz_zip_writer_add_from_zip_reader1781:
	# br label %1782
	jmp	mz_zip_writer_add_from_zip_reader1782
	.text
mz_zip_writer_add_from_zip_reader1782:
	# %1783 = load i64, i64* %7
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1784 = load i8*, i8** %6
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1785 = getelementptr %struct.mz_zip_array, i8* %1784, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1783, i64* %1785
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %4
	movq	$1, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1786
	jmp	mz_zip_writer_add_from_zip_reader1786
	.text
mz_zip_writer_add_from_zip_reader1786:
	# %1787 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1788 = icmp ne i32 %1787, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1788, label %1790, label %1789
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1789
	jmp	mz_zip_writer_add_from_zip_reader1790
	.text
mz_zip_writer_add_from_zip_reader1789:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1822
	jmp	mz_zip_writer_add_from_zip_reader1822
	.text
mz_zip_writer_add_from_zip_reader1790:
	# %1791 = load i64, i64* %13
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1792 = icmp ugt i64 %1791, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1792, label %1793, label %1821
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1821
	jmp	mz_zip_writer_add_from_zip_reader1793
	.text
mz_zip_writer_add_from_zip_reader1793:
	# %1794 = load i8*, i8** %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1795 = load i8*, i8** %1794
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1796 = load i64, i64* %14
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1797 = load i8*, i8** %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1798 = getelementptr %struct.mz_zip_array, i8* %1797, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1799 = load i32, i32* %1798
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1800 = zext i32 %1799 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1801 = mul i64 %1796, %1800
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %1802 = getelementptr i8, i8* %1795, i64 %1801
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %1803 = load i8*, i8** %12
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1804 = load i64, i64* %13
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1805 = load i8*, i8** %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1806 = getelementptr %struct.mz_zip_array, i8* %1805, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1807 = load i32, i32* %1806
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1808 = zext i32 %1807 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1809 = mul i64 %1804, %1808
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %1810 = load i8*, i8** %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1811 = load i8*, i8** %1810
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1812 = load i64, i64* %14
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1813 = load i8*, i8** %11
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1814 = getelementptr %struct.mz_zip_array, i8* %1813, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1815 = load i32, i32* %1814
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1816 = zext i32 %1815 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1817 = mul i64 %1812, %1816
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %1818 = getelementptr i8, i8* %1811, i64 %1817
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1819 = call i64 @llvm.objectsize.i64.p0 (i8* %1818, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1820 = call i8* @__memcpy_chk (i8* %1802, i8* %1803, i64 %1809, i64 %1819)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %1821
	jmp	mz_zip_writer_add_from_zip_reader1821
	.text
mz_zip_writer_add_from_zip_reader1821:
	# store i32 1, i32* %9
	movq	$1, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1822
	jmp	mz_zip_writer_add_from_zip_reader1822
	.text
mz_zip_writer_add_from_zip_reader1822:
	# %1823 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1824 = icmp ne i32 %1823, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1824, label %1847, label %1825
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1825
	jmp	mz_zip_writer_add_from_zip_reader1847
	.text
mz_zip_writer_add_from_zip_reader1825:
	# %1826 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1826, i8** %119
	movq	%rdx, %rax
	movq	-952(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %277, i8** %120
	movq	%r11, %rax
	movq	-960(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1827 = load i8*, i8** %119
	movq	-952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1828 = getelementptr %struct.mz_zip_archive, i8* %1827, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1829 = load i8*, i8** %1828
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1830 = load i8*, i8** %119
	movq	-952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1831 = getelementptr %struct.mz_zip_archive, i8* %1830, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1832 = load i8*, i8** %1831
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1833 = load i8*, i8** %120
	movq	-960(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1834 = load i8*, i8** %1833
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1829 (i8* %1832, i8* %1834)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1835 = load i8*, i8** %120
	movq	-960(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1836 = load i8*, i8** %120
	movq	-960(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1837 = call i64 @llvm.objectsize.i64.p0 (i8* %1836, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1838 = call i8* @__memset_chk (i8* %1835, i32 0, i64 32, i64 %1837)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1839 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1839, i8** %215
	movq	%rdx, %rax
	movq	-1704(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %216
	movq	$16, %rax
	movq	-1712(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1840 = load i8*, i8** %215
	movq	-1704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1841 = icmp ne i8* %1840, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1841, label %1842, label %1846
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1846
	jmp	mz_zip_writer_add_from_zip_reader1842
	.text
mz_zip_writer_add_from_zip_reader1842:
	# %1843 = load i32, i32* %216
	movq	-1712(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1844 = load i8*, i8** %215
	movq	-1704(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1845 = getelementptr %struct.mz_zip_archive, i8* %1844, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1843, i32* %1845
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1846
	jmp	mz_zip_writer_add_from_zip_reader1846
	.text
mz_zip_writer_add_from_zip_reader1846:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1847:
	# %1848 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1849 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1850 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1849, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1851 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1852 = getelementptr i8, i8* %1851, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1853 = load i32, i32* %255
	movq	-2000(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1854 = zext i32 %1853 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %1848, i8** %21
	movq	%rdi, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1850, i8** %22
	movq	%rsi, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1852, i8** %23
	movq	%rbx, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1854, i64* %24
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1855 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1856 = getelementptr %struct.mz_zip_array, i8* %1855, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1857 = load i64, i64* %1856
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %1857, i64* %25
	movq	%rdx, %rax
	movq	-184(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1858 = load i8*, i8** %21
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1859 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1860 = load i64, i64* %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1861 = load i64, i64* %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1862 = add i64 %1860, %1861
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %1858, i8** %16
	movq	%rdi, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1859, i8** %17
	movq	%rsi, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1862, i64* %18
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %19
	movq	$1, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1863 = load i64, i64* %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1864 = load i8*, i8** %17
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1865 = getelementptr %struct.mz_zip_array, i8* %1864, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1866 = load i64, i64* %1865
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1867 = icmp ugt i64 %1863, %1866
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1867, label %1868, label %1877
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1877
	jmp	mz_zip_writer_add_from_zip_reader1868
	.text
mz_zip_writer_add_from_zip_reader1868:
	# %1869 = load i8*, i8** %16
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1870 = load i8*, i8** %17
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1871 = load i64, i64* %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1872 = load i32, i32* %19
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1873 = call i32 @mz_zip_array_ensure_capacity (i8* %1869, i8* %1870, i64 %1871, i32 %1872)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1874 = icmp ne i32 %1873, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1874, label %1876, label %1875
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1875
	jmp	mz_zip_writer_add_from_zip_reader1876
	.text
mz_zip_writer_add_from_zip_reader1875:
	# store i32 0, i32* %15
	movq	$0, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1881
	jmp	mz_zip_writer_add_from_zip_reader1881
	.text
mz_zip_writer_add_from_zip_reader1876:
	# br label %1877
	jmp	mz_zip_writer_add_from_zip_reader1877
	.text
mz_zip_writer_add_from_zip_reader1877:
	# %1878 = load i64, i64* %18
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1879 = load i8*, i8** %17
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1880 = getelementptr %struct.mz_zip_array, i8* %1879, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1878, i64* %1880
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %15
	movq	$1, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1881
	jmp	mz_zip_writer_add_from_zip_reader1881
	.text
mz_zip_writer_add_from_zip_reader1881:
	# %1882 = load i32, i32* %15
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1883 = icmp ne i32 %1882, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1883, label %1885, label %1884
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1884
	jmp	mz_zip_writer_add_from_zip_reader1885
	.text
mz_zip_writer_add_from_zip_reader1884:
	# store i32 0, i32* %20
	movq	$0, %rax
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1917
	jmp	mz_zip_writer_add_from_zip_reader1917
	.text
mz_zip_writer_add_from_zip_reader1885:
	# %1886 = load i64, i64* %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1887 = icmp ugt i64 %1886, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1887, label %1888, label %1916
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1916
	jmp	mz_zip_writer_add_from_zip_reader1888
	.text
mz_zip_writer_add_from_zip_reader1888:
	# %1889 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1890 = load i8*, i8** %1889
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1891 = load i64, i64* %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1892 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1893 = getelementptr %struct.mz_zip_array, i8* %1892, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1894 = load i32, i32* %1893
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1895 = zext i32 %1894 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1896 = mul i64 %1891, %1895
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %1897 = getelementptr i8, i8* %1890, i64 %1896
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %1898 = load i8*, i8** %23
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %1899 = load i64, i64* %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1900 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1901 = getelementptr %struct.mz_zip_array, i8* %1900, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1902 = load i32, i32* %1901
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1903 = zext i32 %1902 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1904 = mul i64 %1899, %1903
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %1905 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1906 = load i8*, i8** %1905
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1907 = load i64, i64* %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1908 = load i8*, i8** %22
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1909 = getelementptr %struct.mz_zip_array, i8* %1908, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1910 = load i32, i32* %1909
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1911 = zext i32 %1910 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1912 = mul i64 %1907, %1911
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %1913 = getelementptr i8, i8* %1906, i64 %1912
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1914 = call i64 @llvm.objectsize.i64.p0 (i8* %1913, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1915 = call i8* @__memcpy_chk (i8* %1897, i8* %1898, i64 %1904, i64 %1914)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %1916
	jmp	mz_zip_writer_add_from_zip_reader1916
	.text
mz_zip_writer_add_from_zip_reader1916:
	# store i32 1, i32* %20
	movq	$1, %rax
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1917
	jmp	mz_zip_writer_add_from_zip_reader1917
	.text
mz_zip_writer_add_from_zip_reader1917:
	# %1918 = load i32, i32* %20
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1919 = icmp ne i32 %1918, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1919, label %1966, label %1920
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1920
	jmp	mz_zip_writer_add_from_zip_reader1966
	.text
mz_zip_writer_add_from_zip_reader1920:
	# %1921 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1921, i8** %121
	movq	%rdx, %rax
	movq	-968(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %277, i8** %122
	movq	%r11, %rax
	movq	-976(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1922 = load i8*, i8** %121
	movq	-968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1923 = getelementptr %struct.mz_zip_archive, i8* %1922, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1924 = load i8*, i8** %1923
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1925 = load i8*, i8** %121
	movq	-968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1926 = getelementptr %struct.mz_zip_archive, i8* %1925, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1927 = load i8*, i8** %1926
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1928 = load i8*, i8** %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1929 = load i8*, i8** %1928
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %1924 (i8* %1927, i8* %1929)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %1930 = load i8*, i8** %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1931 = load i8*, i8** %122
	movq	-976(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1932 = call i64 @llvm.objectsize.i64.p0 (i8* %1931, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1933 = call i8* @__memset_chk (i8* %1930, i32 0, i64 32, i64 %1932)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1934 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1935 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1936 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1935, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1937 = load i64, i64* %250
	movq	-1952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %1934, i8** %135
	movq	%rdx, %rax
	movq	-1072(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1936, i8** %136
	movq	%rbx, %rax
	movq	-1080(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1937, i64* %137
	movq	%rsi, %rax
	movq	-1088(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %138
	movq	$0, %rax
	movq	-1096(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1938 = load i64, i64* %137
	movq	-1088(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1939 = load i8*, i8** %136
	movq	-1080(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1940 = getelementptr %struct.mz_zip_array, i8* %1939, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1941 = load i64, i64* %1940
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1942 = icmp ugt i64 %1938, %1941
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1942, label %1943, label %1952
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1952
	jmp	mz_zip_writer_add_from_zip_reader1943
	.text
mz_zip_writer_add_from_zip_reader1943:
	# %1944 = load i8*, i8** %135
	movq	-1072(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1945 = load i8*, i8** %136
	movq	-1080(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1946 = load i64, i64* %137
	movq	-1088(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1947 = load i32, i32* %138
	movq	-1096(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1948 = call i32 @mz_zip_array_ensure_capacity (i8* %1944, i8* %1945, i64 %1946, i32 %1947)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1949 = icmp ne i32 %1948, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1949, label %1951, label %1950
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1950
	jmp	mz_zip_writer_add_from_zip_reader1951
	.text
mz_zip_writer_add_from_zip_reader1950:
	# store i32 0, i32* %134
	movq	$0, %rax
	movq	-1064(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1956
	jmp	mz_zip_writer_add_from_zip_reader1956
	.text
mz_zip_writer_add_from_zip_reader1951:
	# br label %1952
	jmp	mz_zip_writer_add_from_zip_reader1952
	.text
mz_zip_writer_add_from_zip_reader1952:
	# %1953 = load i64, i64* %137
	movq	-1088(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1954 = load i8*, i8** %136
	movq	-1080(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1955 = getelementptr %struct.mz_zip_array, i8* %1954, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1953, i64* %1955
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %134
	movq	$1, %rax
	movq	-1064(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1956
	jmp	mz_zip_writer_add_from_zip_reader1956
	.text
mz_zip_writer_add_from_zip_reader1956:
	# %1957 = load i32, i32* %134
	movq	-1064(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1958 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1958, i8** %217
	movq	%rdx, %rax
	movq	-1720(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %218
	movq	$16, %rax
	movq	-1728(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1959 = load i8*, i8** %217
	movq	-1720(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1960 = icmp ne i8* %1959, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1960, label %1961, label %1965
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1965
	jmp	mz_zip_writer_add_from_zip_reader1961
	.text
mz_zip_writer_add_from_zip_reader1961:
	# %1962 = load i32, i32* %218
	movq	-1728(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1963 = load i8*, i8** %217
	movq	-1720(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1964 = getelementptr %struct.mz_zip_archive, i8* %1963, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %1962, i32* %1964
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %1965
	jmp	mz_zip_writer_add_from_zip_reader1965
	.text
mz_zip_writer_add_from_zip_reader1965:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader1966:
	# %1967 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1968 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1969 = getelementptr %struct.mz_zip_internal_state_tag, i8* %1968, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1970 = getelementptr %struct.mz_zip_array, i8* %277, i32 0, i32 0
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1971 = load i8*, i8** %1970
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1972 = getelementptr %struct.mz_zip_array, i8* %277, i32 0, i32 1
	movq	%r11, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1973 = load i64, i64* %1972
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %1967, i8** %32
	movq	%rdi, %rax
	movq	-248(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1969, i8** %33
	movq	%rsi, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1971, i8** %34
	movq	%rbx, %rax
	movq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1973, i64* %35
	movq	%rdx, %rax
	movq	-280(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1974 = load i8*, i8** %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1975 = getelementptr %struct.mz_zip_array, i8* %1974, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1976 = load i64, i64* %1975
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %1976, i64* %36
	movq	%rdx, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# %1977 = load i8*, i8** %32
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1978 = load i8*, i8** %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1979 = load i64, i64* %36
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1980 = load i64, i64* %35
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1981 = add i64 %1979, %1980
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %1977, i8** %27
	movq	%rdi, %rax
	movq	-200(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1978, i8** %28
	movq	%rsi, %rax
	movq	-216(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %1981, i64* %29
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %30
	movq	$1, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1982 = load i64, i64* %29
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1983 = load i8*, i8** %28
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1984 = getelementptr %struct.mz_zip_array, i8* %1983, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1985 = load i64, i64* %1984
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1986 = icmp ugt i64 %1982, %1985
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %1986, label %1987, label %1996
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1996
	jmp	mz_zip_writer_add_from_zip_reader1987
	.text
mz_zip_writer_add_from_zip_reader1987:
	# %1988 = load i8*, i8** %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %1989 = load i8*, i8** %28
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %1990 = load i64, i64* %29
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1991 = load i32, i32* %30
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1992 = call i32 @mz_zip_array_ensure_capacity (i8* %1988, i8* %1989, i64 %1990, i32 %1991)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %1993 = icmp ne i32 %1992, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1993, label %1995, label %1994
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader1994
	jmp	mz_zip_writer_add_from_zip_reader1995
	.text
mz_zip_writer_add_from_zip_reader1994:
	# store i32 0, i32* %26
	movq	$0, %rax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2000
	jmp	mz_zip_writer_add_from_zip_reader2000
	.text
mz_zip_writer_add_from_zip_reader1995:
	# br label %1996
	jmp	mz_zip_writer_add_from_zip_reader1996
	.text
mz_zip_writer_add_from_zip_reader1996:
	# %1997 = load i64, i64* %29
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1998 = load i8*, i8** %28
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1999 = getelementptr %struct.mz_zip_array, i8* %1998, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %1997, i64* %1999
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %26
	movq	$1, %rax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2000
	jmp	mz_zip_writer_add_from_zip_reader2000
	.text
mz_zip_writer_add_from_zip_reader2000:
	# %2001 = load i32, i32* %26
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2002 = icmp ne i32 %2001, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2002, label %2004, label %2003
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2003
	jmp	mz_zip_writer_add_from_zip_reader2004
	.text
mz_zip_writer_add_from_zip_reader2003:
	# store i32 0, i32* %31
	movq	$0, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2036
	jmp	mz_zip_writer_add_from_zip_reader2036
	.text
mz_zip_writer_add_from_zip_reader2004:
	# %2005 = load i64, i64* %35
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2006 = icmp ugt i64 %2005, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2006, label %2007, label %2035
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2035
	jmp	mz_zip_writer_add_from_zip_reader2007
	.text
mz_zip_writer_add_from_zip_reader2007:
	# %2008 = load i8*, i8** %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2009 = load i8*, i8** %2008
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2010 = load i64, i64* %36
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2011 = load i8*, i8** %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2012 = getelementptr %struct.mz_zip_array, i8* %2011, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2013 = load i32, i32* %2012
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2014 = zext i32 %2013 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2015 = mul i64 %2010, %2014
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2016 = getelementptr i8, i8* %2009, i64 %2015
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %2017 = load i8*, i8** %34
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2018 = load i64, i64* %35
	movq	-280(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2019 = load i8*, i8** %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2020 = getelementptr %struct.mz_zip_array, i8* %2019, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2021 = load i32, i32* %2020
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2022 = zext i32 %2021 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2023 = mul i64 %2018, %2022
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %2024 = load i8*, i8** %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2025 = load i8*, i8** %2024
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2026 = load i64, i64* %36
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2027 = load i8*, i8** %33
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2028 = getelementptr %struct.mz_zip_array, i8* %2027, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2029 = load i32, i32* %2028
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2030 = zext i32 %2029 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2031 = mul i64 %2026, %2030
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2032 = getelementptr i8, i8* %2025, i64 %2031
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2033 = call i64 @llvm.objectsize.i64.p0 (i8* %2032, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2034 = call i8* @__memcpy_chk (i8* %2016, i8* %2017, i64 %2023, i64 %2033)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %2035
	jmp	mz_zip_writer_add_from_zip_reader2035
	.text
mz_zip_writer_add_from_zip_reader2035:
	# store i32 1, i32* %31
	movq	$1, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2036
	jmp	mz_zip_writer_add_from_zip_reader2036
	.text
mz_zip_writer_add_from_zip_reader2036:
	# %2037 = load i32, i32* %31
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2038 = icmp ne i32 %2037, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2038, label %2085, label %2039
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2039
	jmp	mz_zip_writer_add_from_zip_reader2085
	.text
mz_zip_writer_add_from_zip_reader2039:
	# %2040 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2040, i8** %123
	movq	%rdx, %rax
	movq	-984(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %277, i8** %124
	movq	%r11, %rax
	movq	-992(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2041 = load i8*, i8** %123
	movq	-984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2042 = getelementptr %struct.mz_zip_archive, i8* %2041, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2043 = load i8*, i8** %2042
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2044 = load i8*, i8** %123
	movq	-984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2045 = getelementptr %struct.mz_zip_archive, i8* %2044, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2046 = load i8*, i8** %2045
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2047 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2048 = load i8*, i8** %2047
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %2043 (i8* %2046, i8* %2048)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %2049 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2050 = load i8*, i8** %124
	movq	-992(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2051 = call i64 @llvm.objectsize.i64.p0 (i8* %2050, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2052 = call i8* @__memset_chk (i8* %2049, i32 0, i64 32, i64 %2051)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2053 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2054 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2055 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2054, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2056 = load i64, i64* %250
	movq	-1952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %2053, i8** %140
	movq	%rdx, %rax
	movq	-1104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2055, i8** %141
	movq	%rbx, %rax
	movq	-1112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2056, i64* %142
	movq	%rsi, %rax
	movq	-1120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %143
	movq	$0, %rax
	movq	-1128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2057 = load i64, i64* %142
	movq	-1120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2058 = load i8*, i8** %141
	movq	-1112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2059 = getelementptr %struct.mz_zip_array, i8* %2058, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2060 = load i64, i64* %2059
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2061 = icmp ugt i64 %2057, %2060
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2061, label %2062, label %2071
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2071
	jmp	mz_zip_writer_add_from_zip_reader2062
	.text
mz_zip_writer_add_from_zip_reader2062:
	# %2063 = load i8*, i8** %140
	movq	-1104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2064 = load i8*, i8** %141
	movq	-1112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2065 = load i64, i64* %142
	movq	-1120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2066 = load i32, i32* %143
	movq	-1128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2067 = call i32 @mz_zip_array_ensure_capacity (i8* %2063, i8* %2064, i64 %2065, i32 %2066)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2068 = icmp ne i32 %2067, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2068, label %2070, label %2069
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2069
	jmp	mz_zip_writer_add_from_zip_reader2070
	.text
mz_zip_writer_add_from_zip_reader2069:
	# store i32 0, i32* %139
	movq	$0, %rax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2075
	jmp	mz_zip_writer_add_from_zip_reader2075
	.text
mz_zip_writer_add_from_zip_reader2070:
	# br label %2071
	jmp	mz_zip_writer_add_from_zip_reader2071
	.text
mz_zip_writer_add_from_zip_reader2071:
	# %2072 = load i64, i64* %142
	movq	-1120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2073 = load i8*, i8** %141
	movq	-1112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2074 = getelementptr %struct.mz_zip_array, i8* %2073, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2072, i64* %2074
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %139
	movq	$1, %rax
	movq	-208(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2075
	jmp	mz_zip_writer_add_from_zip_reader2075
	.text
mz_zip_writer_add_from_zip_reader2075:
	# %2076 = load i32, i32* %139
	movq	-208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2077 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2077, i8** %219
	movq	%rdx, %rax
	movq	-1736(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %220
	movq	$16, %rax
	movq	-1744(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2078 = load i8*, i8** %219
	movq	-1736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2079 = icmp ne i8* %2078, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2079, label %2080, label %2084
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2084
	jmp	mz_zip_writer_add_from_zip_reader2080
	.text
mz_zip_writer_add_from_zip_reader2080:
	# %2081 = load i32, i32* %220
	movq	-1744(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2082 = load i8*, i8** %219
	movq	-1736(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2083 = getelementptr %struct.mz_zip_archive, i8* %2082, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2081, i32* %2083
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2084
	jmp	mz_zip_writer_add_from_zip_reader2084
	.text
mz_zip_writer_add_from_zip_reader2084:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2085:
	# %2086 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2087 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2088 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2087, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %2089 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2090 = getelementptr i8, i8* %2089, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2091 = load i32, i32* %255
	movq	-2000(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2092 = zext i32 %2091 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2093 = getelementptr i8, i8* %2090, i64 %2092
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2094 = load i32, i32* %257
	movq	-2008(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2095 = zext i32 %2094 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2096 = getelementptr i8, i8* %2093, i64 %2095
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2097 = load i32, i32* %256
	movq	-1960(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2098 = zext i32 %2097 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %2086, i8** %43
	movq	%rdi, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2088, i8** %44
	movq	%rsi, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2096, i8** %45
	movq	%rbx, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2098, i64* %46
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2099 = load i8*, i8** %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2100 = getelementptr %struct.mz_zip_array, i8* %2099, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2101 = load i64, i64* %2100
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %2101, i64* %47
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2102 = load i8*, i8** %43
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2103 = load i8*, i8** %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2104 = load i64, i64* %47
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2105 = load i64, i64* %46
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2106 = add i64 %2104, %2105
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %2102, i8** %38
	movq	%rsi, %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2103, i8** %39
	movq	%rbx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2106, i64* %40
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %41
	movq	$1, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2107 = load i64, i64* %40
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2108 = load i8*, i8** %39
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2109 = getelementptr %struct.mz_zip_array, i8* %2108, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2110 = load i64, i64* %2109
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2111 = icmp ugt i64 %2107, %2110
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2111, label %2112, label %2121
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2121
	jmp	mz_zip_writer_add_from_zip_reader2112
	.text
mz_zip_writer_add_from_zip_reader2112:
	# %2113 = load i8*, i8** %38
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2114 = load i8*, i8** %39
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2115 = load i64, i64* %40
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2116 = load i32, i32* %41
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2117 = call i32 @mz_zip_array_ensure_capacity (i8* %2113, i8* %2114, i64 %2115, i32 %2116)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2118 = icmp ne i32 %2117, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2118, label %2120, label %2119
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2119
	jmp	mz_zip_writer_add_from_zip_reader2120
	.text
mz_zip_writer_add_from_zip_reader2119:
	# store i32 0, i32* %37
	movq	$0, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2125
	jmp	mz_zip_writer_add_from_zip_reader2125
	.text
mz_zip_writer_add_from_zip_reader2120:
	# br label %2121
	jmp	mz_zip_writer_add_from_zip_reader2121
	.text
mz_zip_writer_add_from_zip_reader2121:
	# %2122 = load i64, i64* %40
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2123 = load i8*, i8** %39
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2124 = getelementptr %struct.mz_zip_array, i8* %2123, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2122, i64* %2124
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %37
	movq	$1, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2125
	jmp	mz_zip_writer_add_from_zip_reader2125
	.text
mz_zip_writer_add_from_zip_reader2125:
	# %2126 = load i32, i32* %37
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2127 = icmp ne i32 %2126, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2127, label %2129, label %2128
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2128
	jmp	mz_zip_writer_add_from_zip_reader2129
	.text
mz_zip_writer_add_from_zip_reader2128:
	# store i32 0, i32* %42
	movq	$0, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2161
	jmp	mz_zip_writer_add_from_zip_reader2161
	.text
mz_zip_writer_add_from_zip_reader2129:
	# %2130 = load i64, i64* %46
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2131 = icmp ugt i64 %2130, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2131, label %2132, label %2160
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2160
	jmp	mz_zip_writer_add_from_zip_reader2132
	.text
mz_zip_writer_add_from_zip_reader2132:
	# %2133 = load i8*, i8** %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2134 = load i8*, i8** %2133
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2135 = load i64, i64* %47
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2136 = load i8*, i8** %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2137 = getelementptr %struct.mz_zip_array, i8* %2136, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2138 = load i32, i32* %2137
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2139 = zext i32 %2138 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2140 = mul i64 %2135, %2139
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2141 = getelementptr i8, i8* %2134, i64 %2140
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %2142 = load i8*, i8** %45
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2143 = load i64, i64* %46
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2144 = load i8*, i8** %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2145 = getelementptr %struct.mz_zip_array, i8* %2144, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2146 = load i32, i32* %2145
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2147 = zext i32 %2146 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2148 = mul i64 %2143, %2147
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %2149 = load i8*, i8** %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2150 = load i8*, i8** %2149
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2151 = load i64, i64* %47
	movq	-376(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2152 = load i8*, i8** %44
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2153 = getelementptr %struct.mz_zip_array, i8* %2152, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2154 = load i32, i32* %2153
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2155 = zext i32 %2154 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2156 = mul i64 %2151, %2155
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2157 = getelementptr i8, i8* %2150, i64 %2156
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2158 = call i64 @llvm.objectsize.i64.p0 (i8* %2157, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2159 = call i8* @__memcpy_chk (i8* %2141, i8* %2142, i64 %2148, i64 %2158)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %2160
	jmp	mz_zip_writer_add_from_zip_reader2160
	.text
mz_zip_writer_add_from_zip_reader2160:
	# store i32 1, i32* %42
	movq	$1, %rax
	movq	-336(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2161
	jmp	mz_zip_writer_add_from_zip_reader2161
	.text
mz_zip_writer_add_from_zip_reader2161:
	# %2162 = load i32, i32* %42
	movq	-336(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2163 = icmp ne i32 %2162, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2163, label %2210, label %2164
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2164
	jmp	mz_zip_writer_add_from_zip_reader2210
	.text
mz_zip_writer_add_from_zip_reader2164:
	# %2165 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2165, i8** %125
	movq	%rdx, %rax
	movq	-1000(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %277, i8** %126
	movq	%r11, %rax
	movq	-1008(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2166 = load i8*, i8** %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2167 = getelementptr %struct.mz_zip_archive, i8* %2166, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2168 = load i8*, i8** %2167
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2169 = load i8*, i8** %125
	movq	-1000(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2170 = getelementptr %struct.mz_zip_archive, i8* %2169, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2171 = load i8*, i8** %2170
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2172 = load i8*, i8** %126
	movq	-1008(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2173 = load i8*, i8** %2172
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %2168 (i8* %2171, i8* %2173)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %2174 = load i8*, i8** %126
	movq	-1008(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2175 = load i8*, i8** %126
	movq	-1008(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2176 = call i64 @llvm.objectsize.i64.p0 (i8* %2175, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2177 = call i8* @__memset_chk (i8* %2174, i32 0, i64 32, i64 %2176)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2178 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2179 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2180 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2179, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2181 = load i64, i64* %250
	movq	-1952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %2178, i8** %145
	movq	%rdx, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2180, i8** %146
	movq	%rbx, %rax
	movq	-1144(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2181, i64* %147
	movq	%rsi, %rax
	movq	-1152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %148
	movq	$0, %rax
	movq	-1160(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2182 = load i64, i64* %147
	movq	-1152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2183 = load i8*, i8** %146
	movq	-1144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2184 = getelementptr %struct.mz_zip_array, i8* %2183, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2185 = load i64, i64* %2184
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2186 = icmp ugt i64 %2182, %2185
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2186, label %2187, label %2196
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2196
	jmp	mz_zip_writer_add_from_zip_reader2187
	.text
mz_zip_writer_add_from_zip_reader2187:
	# %2188 = load i8*, i8** %145
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2189 = load i8*, i8** %146
	movq	-1144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2190 = load i64, i64* %147
	movq	-1152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2191 = load i32, i32* %148
	movq	-1160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2192 = call i32 @mz_zip_array_ensure_capacity (i8* %2188, i8* %2189, i64 %2190, i32 %2191)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2193 = icmp ne i32 %2192, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2193, label %2195, label %2194
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2194
	jmp	mz_zip_writer_add_from_zip_reader2195
	.text
mz_zip_writer_add_from_zip_reader2194:
	# store i32 0, i32* %144
	movq	$0, %rax
	movq	-1136(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2200
	jmp	mz_zip_writer_add_from_zip_reader2200
	.text
mz_zip_writer_add_from_zip_reader2195:
	# br label %2196
	jmp	mz_zip_writer_add_from_zip_reader2196
	.text
mz_zip_writer_add_from_zip_reader2196:
	# %2197 = load i64, i64* %147
	movq	-1152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2198 = load i8*, i8** %146
	movq	-1144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2199 = getelementptr %struct.mz_zip_array, i8* %2198, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2197, i64* %2199
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %144
	movq	$1, %rax
	movq	-1136(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2200
	jmp	mz_zip_writer_add_from_zip_reader2200
	.text
mz_zip_writer_add_from_zip_reader2200:
	# %2201 = load i32, i32* %144
	movq	-1136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2202 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2202, i8** %221
	movq	%rdx, %rax
	movq	-1752(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %222
	movq	$16, %rax
	movq	-1760(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2203 = load i8*, i8** %221
	movq	-1752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2204 = icmp ne i8* %2203, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2204, label %2205, label %2209
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2209
	jmp	mz_zip_writer_add_from_zip_reader2205
	.text
mz_zip_writer_add_from_zip_reader2205:
	# %2206 = load i32, i32* %222
	movq	-1760(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2207 = load i8*, i8** %221
	movq	-1752(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2208 = getelementptr %struct.mz_zip_archive, i8* %2207, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2206, i32* %2208
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2209
	jmp	mz_zip_writer_add_from_zip_reader2209
	.text
mz_zip_writer_add_from_zip_reader2209:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2210:
	# %2211 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2211, i8** %127
	movq	%rdx, %rax
	movq	-1016(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %277, i8** %128
	movq	%r11, %rax
	movq	-1024(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2212 = load i8*, i8** %127
	movq	-1016(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2213 = getelementptr %struct.mz_zip_archive, i8* %2212, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2214 = load i8*, i8** %2213
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2215 = load i8*, i8** %127
	movq	-1016(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2216 = getelementptr %struct.mz_zip_archive, i8* %2215, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2217 = load i8*, i8** %2216
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2218 = load i8*, i8** %128
	movq	-1024(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2219 = load i8*, i8** %2218
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void %2214 (i8* %2217, i8* %2219)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %2220 = load i8*, i8** %128
	movq	-1024(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2221 = load i8*, i8** %128
	movq	-1024(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2222 = call i64 @llvm.objectsize.i64.p0 (i8* %2221, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2223 = call i8* @__memset_chk (i8* %2220, i32 0, i64 32, i64 %2222)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %2456
	jmp	mz_zip_writer_add_from_zip_reader2456
	.text
mz_zip_writer_add_from_zip_reader2224:
	# %2225 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2226 = icmp ugt i64 %2225, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2226, label %2227, label %2236
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2236
	jmp	mz_zip_writer_add_from_zip_reader2227
	.text
mz_zip_writer_add_from_zip_reader2227:
	# %2228 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2228, i8** %223
	movq	%rdx, %rax
	movq	-1768(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %224
	movq	$29, %rax
	movq	-1776(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2229 = load i8*, i8** %223
	movq	-1768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2230 = icmp ne i8* %2229, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2230, label %2231, label %2235
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2235
	jmp	mz_zip_writer_add_from_zip_reader2231
	.text
mz_zip_writer_add_from_zip_reader2231:
	# %2232 = load i32, i32* %224
	movq	-1776(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2233 = load i8*, i8** %223
	movq	-1768(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2234 = getelementptr %struct.mz_zip_archive, i8* %2233, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2232, i32* %2234
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2235
	jmp	mz_zip_writer_add_from_zip_reader2235
	.text
mz_zip_writer_add_from_zip_reader2235:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2236:
	# %2237 = load i64, i64* %244
	movq	-1912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2238 = icmp uge i64 %2237, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2238, label %2239, label %2248
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2248
	jmp	mz_zip_writer_add_from_zip_reader2239
	.text
mz_zip_writer_add_from_zip_reader2239:
	# %2240 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2240, i8** %225
	movq	%rdx, %rax
	movq	-1784(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 29, i32* %226
	movq	$29, %rax
	movq	-1792(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2241 = load i8*, i8** %225
	movq	-1784(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2242 = icmp ne i8* %2241, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2242, label %2243, label %2247
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2247
	jmp	mz_zip_writer_add_from_zip_reader2243
	.text
mz_zip_writer_add_from_zip_reader2243:
	# %2244 = load i32, i32* %226
	movq	-1792(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2245 = load i8*, i8** %225
	movq	-1784(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2246 = getelementptr %struct.mz_zip_archive, i8* %2245, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2244, i32* %2246
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2247
	jmp	mz_zip_writer_add_from_zip_reader2247
	.text
mz_zip_writer_add_from_zip_reader2247:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2248:
	# %2249 = getelementptr [46 x i8], i8* %249, i64 0, i64 0
	movq	-1944(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2250 = getelementptr i8, i8* %2249, i64 42
	movq	%rdx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2251 = load i64, i64* %244
	movq	-1912(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2252 = trunc i64 %2251 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %2250, i8** %105
	movq	%rbx, %rax
	movq	-840(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %2252, i32* %106
	movq	%rdx, %rax
	movq	-848(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2253 = load i32, i32* %106
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2254 = trunc i32 %2253 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2255 = load i8*, i8** %105
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %2254, i8* %2255
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %2256 = load i32, i32* %106
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2257 = lshr i32 %2256, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %2258 = trunc i32 %2257 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2259 = load i8*, i8** %105
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2260 = getelementptr i8, i8* %2259, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %2258, i8* %2260
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %2261 = load i32, i32* %106
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2262 = lshr i32 %2261, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %2263 = trunc i32 %2262 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2264 = load i8*, i8** %105
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2265 = getelementptr i8, i8* %2264, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %2263, i8* %2265
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %2266 = load i32, i32* %106
	movq	-848(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2267 = lshr i32 %2266, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %2268 = trunc i32 %2267 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %2269 = load i8*, i8** %105
	movq	-840(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2270 = getelementptr i8, i8* %2269, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %2268, i8* %2270
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %2271 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2272 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2273 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2272, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2274 = getelementptr [46 x i8], i8* %249, i64 0, i64 0
	movq	-1944(%rbp), %rcx
	movq	$0, %rax
	imulq	$46, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2271, i8** %54
	movq	%rsi, %rax
	movq	-432(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2273, i8** %55
	movq	%rbx, %rax
	movq	-440(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2274, i8** %56
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 46, i64* %57
	movq	$46, %rax
	movq	-456(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2275 = load i8*, i8** %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2276 = getelementptr %struct.mz_zip_array, i8* %2275, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2277 = load i64, i64* %2276
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %2277, i64* %58
	movq	%rdx, %rax
	movq	-464(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2278 = load i8*, i8** %54
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2279 = load i8*, i8** %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2280 = load i64, i64* %58
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2281 = load i64, i64* %57
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2282 = add i64 %2280, %2281
	movq	%rdi, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %2278, i8** %49
	movq	%rsi, %rax
	movq	-392(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2279, i8** %50
	movq	%rbx, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2282, i64* %51
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %52
	movq	$1, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2283 = load i64, i64* %51
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2284 = load i8*, i8** %50
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2285 = getelementptr %struct.mz_zip_array, i8* %2284, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2286 = load i64, i64* %2285
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2287 = icmp ugt i64 %2283, %2286
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2287, label %2288, label %2297
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2297
	jmp	mz_zip_writer_add_from_zip_reader2288
	.text
mz_zip_writer_add_from_zip_reader2288:
	# %2289 = load i8*, i8** %49
	movq	-392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2290 = load i8*, i8** %50
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2291 = load i64, i64* %51
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2292 = load i32, i32* %52
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2293 = call i32 @mz_zip_array_ensure_capacity (i8* %2289, i8* %2290, i64 %2291, i32 %2292)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2294 = icmp ne i32 %2293, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2294, label %2296, label %2295
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2295
	jmp	mz_zip_writer_add_from_zip_reader2296
	.text
mz_zip_writer_add_from_zip_reader2295:
	# store i32 0, i32* %48
	movq	$0, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2301
	jmp	mz_zip_writer_add_from_zip_reader2301
	.text
mz_zip_writer_add_from_zip_reader2296:
	# br label %2297
	jmp	mz_zip_writer_add_from_zip_reader2297
	.text
mz_zip_writer_add_from_zip_reader2297:
	# %2298 = load i64, i64* %51
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2299 = load i8*, i8** %50
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2300 = getelementptr %struct.mz_zip_array, i8* %2299, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2298, i64* %2300
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %48
	movq	$1, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2301
	jmp	mz_zip_writer_add_from_zip_reader2301
	.text
mz_zip_writer_add_from_zip_reader2301:
	# %2302 = load i32, i32* %48
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2303 = icmp ne i32 %2302, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2303, label %2305, label %2304
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2304
	jmp	mz_zip_writer_add_from_zip_reader2305
	.text
mz_zip_writer_add_from_zip_reader2304:
	# store i32 0, i32* %53
	movq	$0, %rax
	movq	-424(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2337
	jmp	mz_zip_writer_add_from_zip_reader2337
	.text
mz_zip_writer_add_from_zip_reader2305:
	# %2306 = load i64, i64* %57
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2307 = icmp ugt i64 %2306, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2307, label %2308, label %2336
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2336
	jmp	mz_zip_writer_add_from_zip_reader2308
	.text
mz_zip_writer_add_from_zip_reader2308:
	# %2309 = load i8*, i8** %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2310 = load i8*, i8** %2309
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2311 = load i64, i64* %58
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2312 = load i8*, i8** %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2313 = getelementptr %struct.mz_zip_array, i8* %2312, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2314 = load i32, i32* %2313
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2315 = zext i32 %2314 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2316 = mul i64 %2311, %2315
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2317 = getelementptr i8, i8* %2310, i64 %2316
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %2318 = load i8*, i8** %56
	movq	-448(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2319 = load i64, i64* %57
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2320 = load i8*, i8** %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2321 = getelementptr %struct.mz_zip_array, i8* %2320, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2322 = load i32, i32* %2321
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2323 = zext i32 %2322 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2324 = mul i64 %2319, %2323
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %2325 = load i8*, i8** %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2326 = load i8*, i8** %2325
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2327 = load i64, i64* %58
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2328 = load i8*, i8** %55
	movq	-440(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2329 = getelementptr %struct.mz_zip_array, i8* %2328, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2330 = load i32, i32* %2329
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2331 = zext i32 %2330 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2332 = mul i64 %2327, %2331
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2333 = getelementptr i8, i8* %2326, i64 %2332
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2334 = call i64 @llvm.objectsize.i64.p0 (i8* %2333, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2335 = call i8* @__memcpy_chk (i8* %2317, i8* %2318, i64 %2324, i64 %2334)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %2336
	jmp	mz_zip_writer_add_from_zip_reader2336
	.text
mz_zip_writer_add_from_zip_reader2336:
	# store i32 1, i32* %53
	movq	$1, %rax
	movq	-424(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2337
	jmp	mz_zip_writer_add_from_zip_reader2337
	.text
mz_zip_writer_add_from_zip_reader2337:
	# %2338 = load i32, i32* %53
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2339 = icmp ne i32 %2338, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2339, label %2349, label %2340
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2340
	jmp	mz_zip_writer_add_from_zip_reader2349
	.text
mz_zip_writer_add_from_zip_reader2340:
	# %2341 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2341, i8** %227
	movq	%rdx, %rax
	movq	-1800(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %228
	movq	$16, %rax
	movq	-1656(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2342 = load i8*, i8** %227
	movq	-1800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2343 = icmp ne i8* %2342, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2343, label %2344, label %2348
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2348
	jmp	mz_zip_writer_add_from_zip_reader2344
	.text
mz_zip_writer_add_from_zip_reader2344:
	# %2345 = load i32, i32* %228
	movq	-1656(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2346 = load i8*, i8** %227
	movq	-1800(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2347 = getelementptr %struct.mz_zip_archive, i8* %2346, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2345, i32* %2347
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2348
	jmp	mz_zip_writer_add_from_zip_reader2348
	.text
mz_zip_writer_add_from_zip_reader2348:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2349:
	# %2350 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2351 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2352 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2351, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %2353 = load i8*, i8** %253
	movq	-1984(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2354 = getelementptr i8, i8* %2353, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2355 = load i32, i32* %242
	movq	-1896(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2356 = zext i32 %2355 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %2350, i8** %65
	movq	%rdi, %rax
	movq	-520(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2352, i8** %66
	movq	%rsi, %rax
	movq	-528(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2354, i8** %67
	movq	%rbx, %rax
	movq	-536(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2356, i64* %68
	movq	%rdx, %rax
	movq	-544(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2357 = load i8*, i8** %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2358 = getelementptr %struct.mz_zip_array, i8* %2357, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2359 = load i64, i64* %2358
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %2359, i64* %69
	movq	%rdx, %rax
	movq	-552(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2360 = load i8*, i8** %65
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2361 = load i8*, i8** %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2362 = load i64, i64* %69
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2363 = load i64, i64* %68
	movq	-544(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2364 = add i64 %2362, %2363
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %2360, i8** %60
	movq	%rdi, %rax
	movq	-480(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2361, i8** %61
	movq	%rsi, %rax
	movq	-488(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2364, i64* %62
	movq	%rdx, %rax
	movq	-496(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %63
	movq	$1, %rax
	movq	-504(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2365 = load i64, i64* %62
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2366 = load i8*, i8** %61
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2367 = getelementptr %struct.mz_zip_array, i8* %2366, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2368 = load i64, i64* %2367
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2369 = icmp ugt i64 %2365, %2368
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2369, label %2370, label %2379
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2379
	jmp	mz_zip_writer_add_from_zip_reader2370
	.text
mz_zip_writer_add_from_zip_reader2370:
	# %2371 = load i8*, i8** %60
	movq	-480(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2372 = load i8*, i8** %61
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2373 = load i64, i64* %62
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2374 = load i32, i32* %63
	movq	-504(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2375 = call i32 @mz_zip_array_ensure_capacity (i8* %2371, i8* %2372, i64 %2373, i32 %2374)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2376 = icmp ne i32 %2375, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2376, label %2378, label %2377
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2377
	jmp	mz_zip_writer_add_from_zip_reader2378
	.text
mz_zip_writer_add_from_zip_reader2377:
	# store i32 0, i32* %59
	movq	$0, %rax
	movq	-472(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2383
	jmp	mz_zip_writer_add_from_zip_reader2383
	.text
mz_zip_writer_add_from_zip_reader2378:
	# br label %2379
	jmp	mz_zip_writer_add_from_zip_reader2379
	.text
mz_zip_writer_add_from_zip_reader2379:
	# %2380 = load i64, i64* %62
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2381 = load i8*, i8** %61
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2382 = getelementptr %struct.mz_zip_array, i8* %2381, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2380, i64* %2382
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %59
	movq	$1, %rax
	movq	-472(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2383
	jmp	mz_zip_writer_add_from_zip_reader2383
	.text
mz_zip_writer_add_from_zip_reader2383:
	# %2384 = load i32, i32* %59
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2385 = icmp ne i32 %2384, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2385, label %2387, label %2386
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2386
	jmp	mz_zip_writer_add_from_zip_reader2387
	.text
mz_zip_writer_add_from_zip_reader2386:
	# store i32 0, i32* %64
	movq	$0, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2419
	jmp	mz_zip_writer_add_from_zip_reader2419
	.text
mz_zip_writer_add_from_zip_reader2387:
	# %2388 = load i64, i64* %68
	movq	-544(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2389 = icmp ugt i64 %2388, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2389, label %2390, label %2418
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2418
	jmp	mz_zip_writer_add_from_zip_reader2390
	.text
mz_zip_writer_add_from_zip_reader2390:
	# %2391 = load i8*, i8** %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2392 = load i8*, i8** %2391
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2393 = load i64, i64* %69
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2394 = load i8*, i8** %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2395 = getelementptr %struct.mz_zip_array, i8* %2394, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2396 = load i32, i32* %2395
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2397 = zext i32 %2396 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2398 = mul i64 %2393, %2397
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2399 = getelementptr i8, i8* %2392, i64 %2398
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %2400 = load i8*, i8** %67
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2401 = load i64, i64* %68
	movq	-544(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2402 = load i8*, i8** %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2403 = getelementptr %struct.mz_zip_array, i8* %2402, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2404 = load i32, i32* %2403
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2405 = zext i32 %2404 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2406 = mul i64 %2401, %2405
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %2407 = load i8*, i8** %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2408 = load i8*, i8** %2407
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2409 = load i64, i64* %69
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2410 = load i8*, i8** %66
	movq	-528(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2411 = getelementptr %struct.mz_zip_array, i8* %2410, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2412 = load i32, i32* %2411
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2413 = zext i32 %2412 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2414 = mul i64 %2409, %2413
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2415 = getelementptr i8, i8* %2408, i64 %2414
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2416 = call i64 @llvm.objectsize.i64.p0 (i8* %2415, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2417 = call i8* @__memcpy_chk (i8* %2399, i8* %2400, i64 %2406, i64 %2416)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %2418
	jmp	mz_zip_writer_add_from_zip_reader2418
	.text
mz_zip_writer_add_from_zip_reader2418:
	# store i32 1, i32* %64
	movq	$1, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2419
	jmp	mz_zip_writer_add_from_zip_reader2419
	.text
mz_zip_writer_add_from_zip_reader2419:
	# %2420 = load i32, i32* %64
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2421 = icmp ne i32 %2420, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2421, label %2455, label %2422
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2422
	jmp	mz_zip_writer_add_from_zip_reader2455
	.text
mz_zip_writer_add_from_zip_reader2422:
	# %2423 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2424 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2425 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2424, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2426 = load i64, i64* %250
	movq	-1952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %2423, i8** %150
	movq	%rdx, %rax
	movq	-1176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2425, i8** %151
	movq	%rbx, %rax
	movq	-1184(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2426, i64* %152
	movq	%rsi, %rax
	movq	-1192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %153
	movq	$0, %rax
	movq	-1200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2427 = load i64, i64* %152
	movq	-1192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2428 = load i8*, i8** %151
	movq	-1184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2429 = getelementptr %struct.mz_zip_array, i8* %2428, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2430 = load i64, i64* %2429
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2431 = icmp ugt i64 %2427, %2430
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2431, label %2432, label %2441
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2441
	jmp	mz_zip_writer_add_from_zip_reader2432
	.text
mz_zip_writer_add_from_zip_reader2432:
	# %2433 = load i8*, i8** %150
	movq	-1176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2434 = load i8*, i8** %151
	movq	-1184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2435 = load i64, i64* %152
	movq	-1192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2436 = load i32, i32* %153
	movq	-1200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2437 = call i32 @mz_zip_array_ensure_capacity (i8* %2433, i8* %2434, i64 %2435, i32 %2436)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2438 = icmp ne i32 %2437, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2438, label %2440, label %2439
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2439
	jmp	mz_zip_writer_add_from_zip_reader2440
	.text
mz_zip_writer_add_from_zip_reader2439:
	# store i32 0, i32* %149
	movq	$0, %rax
	movq	-1168(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2445
	jmp	mz_zip_writer_add_from_zip_reader2445
	.text
mz_zip_writer_add_from_zip_reader2440:
	# br label %2441
	jmp	mz_zip_writer_add_from_zip_reader2441
	.text
mz_zip_writer_add_from_zip_reader2441:
	# %2442 = load i64, i64* %152
	movq	-1192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2443 = load i8*, i8** %151
	movq	-1184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2444 = getelementptr %struct.mz_zip_array, i8* %2443, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2442, i64* %2444
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %149
	movq	$1, %rax
	movq	-1168(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2445
	jmp	mz_zip_writer_add_from_zip_reader2445
	.text
mz_zip_writer_add_from_zip_reader2445:
	# %2446 = load i32, i32* %149
	movq	-1168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2447 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2447, i8** %229
	movq	%rdx, %rax
	movq	-1392(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %230
	movq	$16, %rax
	movq	-1808(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2448 = load i8*, i8** %229
	movq	-1392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2449 = icmp ne i8* %2448, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2449, label %2450, label %2454
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2454
	jmp	mz_zip_writer_add_from_zip_reader2450
	.text
mz_zip_writer_add_from_zip_reader2450:
	# %2451 = load i32, i32* %230
	movq	-1808(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2452 = load i8*, i8** %229
	movq	-1392(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2453 = getelementptr %struct.mz_zip_archive, i8* %2452, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %2451, i32* %2453
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %2454
	jmp	mz_zip_writer_add_from_zip_reader2454
	.text
mz_zip_writer_add_from_zip_reader2454:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2455:
	# br label %2456
	jmp	mz_zip_writer_add_from_zip_reader2456
	.text
mz_zip_writer_add_from_zip_reader2456:
	# %2457 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2458 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2457, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2459 = getelementptr %struct.mz_zip_array, i8* %2458, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2460 = load i64, i64* %2459
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2461 = icmp uge i64 %2460, 4294967295
	movq	%rdx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %2461, label %2462, label %2495
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2495
	jmp	mz_zip_writer_add_from_zip_reader2462
	.text
mz_zip_writer_add_from_zip_reader2462:
	# %2463 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2464 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2465 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2464, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2466 = load i64, i64* %250
	movq	-1952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %2463, i8** %155
	movq	%rdx, %rax
	movq	-1216(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2465, i8** %156
	movq	%rbx, %rax
	movq	-1224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2466, i64* %157
	movq	%rsi, %rax
	movq	-1232(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %158
	movq	$0, %rax
	movq	-1240(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2467 = load i64, i64* %157
	movq	-1232(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2468 = load i8*, i8** %156
	movq	-1224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2469 = getelementptr %struct.mz_zip_array, i8* %2468, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2470 = load i64, i64* %2469
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2471 = icmp ugt i64 %2467, %2470
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2471, label %2472, label %2481
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2481
	jmp	mz_zip_writer_add_from_zip_reader2472
	.text
mz_zip_writer_add_from_zip_reader2472:
	# %2473 = load i8*, i8** %155
	movq	-1216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2474 = load i8*, i8** %156
	movq	-1224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2475 = load i64, i64* %157
	movq	-1232(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2476 = load i32, i32* %158
	movq	-1240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2477 = call i32 @mz_zip_array_ensure_capacity (i8* %2473, i8* %2474, i64 %2475, i32 %2476)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2478 = icmp ne i32 %2477, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2478, label %2480, label %2479
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2479
	jmp	mz_zip_writer_add_from_zip_reader2480
	.text
mz_zip_writer_add_from_zip_reader2479:
	# store i32 0, i32* %154
	movq	$0, %rax
	movq	-1208(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2485
	jmp	mz_zip_writer_add_from_zip_reader2485
	.text
mz_zip_writer_add_from_zip_reader2480:
	# br label %2481
	jmp	mz_zip_writer_add_from_zip_reader2481
	.text
mz_zip_writer_add_from_zip_reader2481:
	# %2482 = load i64, i64* %157
	movq	-1232(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2483 = load i8*, i8** %156
	movq	-1224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2484 = getelementptr %struct.mz_zip_array, i8* %2483, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2482, i64* %2484
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %154
	movq	$1, %rax
	movq	-1208(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2485
	jmp	mz_zip_writer_add_from_zip_reader2485
	.text
mz_zip_writer_add_from_zip_reader2485:
	# %2486 = load i32, i32* %154
	movq	-1208(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2487 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2487, i8** %231
	movq	%rdx, %rax
	movq	-1816(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 15, i32* %232
	movq	$15, %rax
	movq	-1824(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2488 = load i8*, i8** %231
	movq	-1816(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2489 = icmp ne i8* %2488, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2489, label %2490, label %2494
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2494
	jmp	mz_zip_writer_add_from_zip_reader2490
	.text
mz_zip_writer_add_from_zip_reader2490:
	# %2491 = load i32, i32* %232
	movq	-1824(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2492 = load i8*, i8** %231
	movq	-1816(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2493 = getelementptr %struct.mz_zip_archive, i8* %2492, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2491, i32* %2493
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2494
	jmp	mz_zip_writer_add_from_zip_reader2494
	.text
mz_zip_writer_add_from_zip_reader2494:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2495:
	# %2496 = load i64, i64* %250
	movq	-1952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2497 = trunc i64 %2496 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %2497, i32* %239
	movq	%rdx, %rax
	movq	-1872(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2498 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2499 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2500 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2499, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %2498, i8** %76
	movq	%rbx, %rax
	movq	-608(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2500, i8** %77
	movq	%rdx, %rax
	movq	-616(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %239, i8** %78
	movq	-1872(%rbp), %rax
	movq	-624(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 1, i64* %79
	movq	$1, %rax
	movq	-632(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2501 = load i8*, i8** %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2502 = getelementptr %struct.mz_zip_array, i8* %2501, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2503 = load i64, i64* %2502
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %2503, i64* %80
	movq	%rdx, %rax
	movq	-640(%rbp), %rcx
	movq	%rax, (%rcx)
	# %2504 = load i8*, i8** %76
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2505 = load i8*, i8** %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2506 = load i64, i64* %80
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2507 = load i64, i64* %79
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2508 = add i64 %2506, %2507
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %2504, i8** %71
	movq	%rsi, %rax
	movq	-568(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2505, i8** %72
	movq	%rbx, %rax
	movq	-576(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2508, i64* %73
	movq	%rdx, %rax
	movq	-584(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %74
	movq	$1, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2509 = load i64, i64* %73
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2510 = load i8*, i8** %72
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2511 = getelementptr %struct.mz_zip_array, i8* %2510, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2512 = load i64, i64* %2511
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2513 = icmp ugt i64 %2509, %2512
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2513, label %2514, label %2523
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2523
	jmp	mz_zip_writer_add_from_zip_reader2514
	.text
mz_zip_writer_add_from_zip_reader2514:
	# %2515 = load i8*, i8** %71
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %2516 = load i8*, i8** %72
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2517 = load i64, i64* %73
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2518 = load i32, i32* %74
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2519 = call i32 @mz_zip_array_ensure_capacity (i8* %2515, i8* %2516, i64 %2517, i32 %2518)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2520 = icmp ne i32 %2519, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2520, label %2522, label %2521
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2521
	jmp	mz_zip_writer_add_from_zip_reader2522
	.text
mz_zip_writer_add_from_zip_reader2521:
	# store i32 0, i32* %70
	movq	$0, %rax
	movq	-560(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2527
	jmp	mz_zip_writer_add_from_zip_reader2527
	.text
mz_zip_writer_add_from_zip_reader2522:
	# br label %2523
	jmp	mz_zip_writer_add_from_zip_reader2523
	.text
mz_zip_writer_add_from_zip_reader2523:
	# %2524 = load i64, i64* %73
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2525 = load i8*, i8** %72
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2526 = getelementptr %struct.mz_zip_array, i8* %2525, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2524, i64* %2526
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %70
	movq	$1, %rax
	movq	-560(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2527
	jmp	mz_zip_writer_add_from_zip_reader2527
	.text
mz_zip_writer_add_from_zip_reader2527:
	# %2528 = load i32, i32* %70
	movq	-560(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2529 = icmp ne i32 %2528, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2529, label %2531, label %2530
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2530
	jmp	mz_zip_writer_add_from_zip_reader2531
	.text
mz_zip_writer_add_from_zip_reader2530:
	# store i32 0, i32* %75
	movq	$0, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2563
	jmp	mz_zip_writer_add_from_zip_reader2563
	.text
mz_zip_writer_add_from_zip_reader2531:
	# %2532 = load i64, i64* %79
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2533 = icmp ugt i64 %2532, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2533, label %2534, label %2562
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2562
	jmp	mz_zip_writer_add_from_zip_reader2534
	.text
mz_zip_writer_add_from_zip_reader2534:
	# %2535 = load i8*, i8** %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2536 = load i8*, i8** %2535
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2537 = load i64, i64* %80
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2538 = load i8*, i8** %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2539 = getelementptr %struct.mz_zip_array, i8* %2538, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2540 = load i32, i32* %2539
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2541 = zext i32 %2540 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2542 = mul i64 %2537, %2541
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2543 = getelementptr i8, i8* %2536, i64 %2542
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %2544 = load i8*, i8** %78
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %2545 = load i64, i64* %79
	movq	-632(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2546 = load i8*, i8** %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2547 = getelementptr %struct.mz_zip_array, i8* %2546, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2548 = load i32, i32* %2547
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2549 = zext i32 %2548 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2550 = mul i64 %2545, %2549
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %2551 = load i8*, i8** %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2552 = load i8*, i8** %2551
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2553 = load i64, i64* %80
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2554 = load i8*, i8** %77
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2555 = getelementptr %struct.mz_zip_array, i8* %2554, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2556 = load i32, i32* %2555
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2557 = zext i32 %2556 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2558 = mul i64 %2553, %2557
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %2559 = getelementptr i8, i8* %2552, i64 %2558
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2560 = call i64 @llvm.objectsize.i64.p0 (i8* %2559, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2561 = call i8* @__memcpy_chk (i8* %2543, i8* %2544, i64 %2550, i64 %2560)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %2562
	jmp	mz_zip_writer_add_from_zip_reader2562
	.text
mz_zip_writer_add_from_zip_reader2562:
	# store i32 1, i32* %75
	movq	$1, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2563
	jmp	mz_zip_writer_add_from_zip_reader2563
	.text
mz_zip_writer_add_from_zip_reader2563:
	# %2564 = load i32, i32* %75
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2565 = icmp ne i32 %2564, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2565, label %2599, label %2566
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2566
	jmp	mz_zip_writer_add_from_zip_reader2599
	.text
mz_zip_writer_add_from_zip_reader2566:
	# %2567 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2568 = load i8*, i8** %251
	movq	-1968(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2569 = getelementptr %struct.mz_zip_internal_state_tag, i8* %2568, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2570 = load i64, i64* %250
	movq	-1952(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %2567, i8** %160
	movq	%rdx, %rax
	movq	-1256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2569, i8** %161
	movq	%rbx, %rax
	movq	-1264(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %2570, i64* %162
	movq	%rsi, %rax
	movq	-1272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %163
	movq	$0, %rax
	movq	-1304(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2571 = load i64, i64* %162
	movq	-1272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2572 = load i8*, i8** %161
	movq	-1264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2573 = getelementptr %struct.mz_zip_array, i8* %2572, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %2574 = load i64, i64* %2573
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2575 = icmp ugt i64 %2571, %2574
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %2575, label %2576, label %2585
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2585
	jmp	mz_zip_writer_add_from_zip_reader2576
	.text
mz_zip_writer_add_from_zip_reader2576:
	# %2577 = load i8*, i8** %160
	movq	-1256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %2578 = load i8*, i8** %161
	movq	-1264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2579 = load i64, i64* %162
	movq	-1272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2580 = load i32, i32* %163
	movq	-1304(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %2581 = call i32 @mz_zip_array_ensure_capacity (i8* %2577, i8* %2578, i64 %2579, i32 %2580)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %2582 = icmp ne i32 %2581, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2582, label %2584, label %2583
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2583
	jmp	mz_zip_writer_add_from_zip_reader2584
	.text
mz_zip_writer_add_from_zip_reader2583:
	# store i32 0, i32* %159
	movq	$0, %rax
	movq	-1248(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2589
	jmp	mz_zip_writer_add_from_zip_reader2589
	.text
mz_zip_writer_add_from_zip_reader2584:
	# br label %2585
	jmp	mz_zip_writer_add_from_zip_reader2585
	.text
mz_zip_writer_add_from_zip_reader2585:
	# %2586 = load i64, i64* %162
	movq	-1272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2587 = load i8*, i8** %161
	movq	-1264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2588 = getelementptr %struct.mz_zip_array, i8* %2587, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2586, i64* %2588
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %159
	movq	$1, %rax
	movq	-1248(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2589
	jmp	mz_zip_writer_add_from_zip_reader2589
	.text
mz_zip_writer_add_from_zip_reader2589:
	# %2590 = load i32, i32* %159
	movq	-1248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2591 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %2591, i8** %233
	movq	%rdx, %rax
	movq	-1832(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %234
	movq	$16, %rax
	movq	-1360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %2592 = load i8*, i8** %233
	movq	-1832(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2593 = icmp ne i8* %2592, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %2593, label %2594, label %2598
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_add_from_zip_reader2598
	jmp	mz_zip_writer_add_from_zip_reader2594
	.text
mz_zip_writer_add_from_zip_reader2594:
	# %2595 = load i32, i32* %234
	movq	-1360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %2596 = load i8*, i8** %233
	movq	-1832(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2597 = getelementptr %struct.mz_zip_archive, i8* %2596, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %2595, i32* %2597
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %2598
	jmp	mz_zip_writer_add_from_zip_reader2598
	.text
mz_zip_writer_add_from_zip_reader2598:
	# store i32 0, i32* %235
	movq	$0, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2599:
	# %2600 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2601 = getelementptr %struct.mz_zip_archive, i8* %2600, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %2602 = load i32, i32* %2601
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %2603 = add i32 %2602, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %2603, i32* %2601
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %2604 = load i64, i64* %246
	movq	-1928(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %2605 = load i8*, i8** %236
	movq	-1856(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %2606 = getelementptr %struct.mz_zip_archive, i8* %2605, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %2604, i64* %2606
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %235
	movq	$1, %rax
	movq	-1840(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %2607
	jmp	mz_zip_writer_add_from_zip_reader2607
	.text
mz_zip_writer_add_from_zip_reader2607:
	# %2608 = load i32, i32* %235
	movq	-1840(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %2608
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_update_zip64_extension_block
_mz_zip_writer_update_zip64_extension_block:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$656, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	popq	-56(%rbp)
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %12 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %17 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -136(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -144(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %23 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -160(%rbp)
	# %24 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -200(%rbp)
	# %28 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -224(%rbp)
	# %31 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -232(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %33 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -248(%rbp)
	# %34 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %35 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -264(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %37 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -280(%rbp)
	# %38 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %39 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -296(%rbp)
	# %40 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %41 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -312(%rbp)
	# %42 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %44 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -336(%rbp)
	# %45 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -344(%rbp)
	# %46 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %47 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -360(%rbp)
	# %48 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -368(%rbp)
	# %49 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -376(%rbp)
	# %50 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -384(%rbp)
	# %51 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -392(%rbp)
	# %52 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -400(%rbp)
	# %53 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -408(%rbp)
	# %54 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -416(%rbp)
	# %55 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -424(%rbp)
	# %56 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -432(%rbp)
	# %57 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -440(%rbp)
	# %58 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -448(%rbp)
	# %59 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -456(%rbp)
	# %60 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -464(%rbp)
	# %61 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -472(%rbp)
	# %62 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -480(%rbp)
	# %63 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -488(%rbp)
	# %64 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -496(%rbp)
	# %65 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -504(%rbp)
	# %66 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -512(%rbp)
	# %67 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -520(%rbp)
	# %68 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -528(%rbp)
	# %69 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -536(%rbp)
	# %70 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -544(%rbp)
	# %71 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -552(%rbp)
	# %72 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -560(%rbp)
	# %73 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -568(%rbp)
	# %74 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -576(%rbp)
	# %75 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -584(%rbp)
	# %76 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -592(%rbp)
	# %77 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -600(%rbp)
	# %78 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -608(%rbp)
	# %79 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -616(%rbp)
	# %80 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -624(%rbp)
	# %81 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -632(%rbp)
	# %82 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -640(%rbp)
	# %83 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -648(%rbp)
	# %84 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -656(%rbp)
	# %85 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %86 = alloca [64 x i8]
	subq	$64, %rsp
	movq	%rsp, %r15
	# %87 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %88 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %89 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %90 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %91 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %92 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# store i8* %0, i8** %78
	movq	-8(%rbp), %rax
	movq	-608(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %79
	movq	-16(%rbp), %rax
	movq	-616(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %80
	movq	-24(%rbp), %rax
	movq	-624(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %81
	movq	%rdx, %rax
	movq	-632(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %4, i8** %82
	movq	-32(%rbp), %rax
	movq	-640(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %5, i8** %83
	movq	-40(%rbp), %rax
	movq	-648(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %6, i8** %84
	movq	-48(%rbp), %rax
	movq	-656(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %7, i8** %85
	movq	-56(%rbp), %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %93 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %94 = load i8*, i8** %78
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %95 = load i32, i32* %81
	movq	-632(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %96 = add i32 %95, 64
	movq	%rdx, %rax
	movq	$64, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %97 = zext i32 %96 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %93, i8** %10
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %94, i8** %11
	movq	%rbx, %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %97, i64* %12
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %98 = load i64, i64* %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %99 = load i8*, i8** %11
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %100 = getelementptr %struct.mz_zip_array, i8* %99, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %101 = load i64, i64* %100
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %102 = icmp ugt i64 %98, %101
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %102, label %103, label %112
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block112
	jmp	mz_zip_writer_update_zip64_extension_block103
	.text
mz_zip_writer_update_zip64_extension_block103:
	# %104 = load i8*, i8** %10
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %105 = load i8*, i8** %11
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %106 = load i64, i64* %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %107 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %108 = call i32 @mz_zip_array_ensure_capacity (i8* %104, i8* %105, i64 %106, i32 %107)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %109 = icmp ne i32 %108, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %109, label %111, label %110
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block110
	jmp	mz_zip_writer_update_zip64_extension_block111
	.text
mz_zip_writer_update_zip64_extension_block110:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %113
	jmp	mz_zip_writer_update_zip64_extension_block113
	.text
mz_zip_writer_update_zip64_extension_block111:
	# br label %112
	jmp	mz_zip_writer_update_zip64_extension_block112
	.text
mz_zip_writer_update_zip64_extension_block112:
	# store i32 1, i32* %9
	movq	$1, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %113
	jmp	mz_zip_writer_update_zip64_extension_block113
	.text
mz_zip_writer_update_zip64_extension_block113:
	# %114 = load i32, i32* %9
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %115 = icmp ne i32 %114, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %115, label %125, label %116
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block116
	jmp	mz_zip_writer_update_zip64_extension_block125
	.text
mz_zip_writer_update_zip64_extension_block116:
	# %117 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %117, i8** %67
	movq	%rdx, %rax
	movq	-520(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %68
	movq	$16, %rax
	movq	-528(%rbp), %rcx
	movl	%eax, (%rcx)
	# %118 = load i8*, i8** %67
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %119 = icmp ne i8* %118, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %119, label %120, label %124
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block124
	jmp	mz_zip_writer_update_zip64_extension_block120
	.text
mz_zip_writer_update_zip64_extension_block120:
	# %121 = load i32, i32* %68
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %122 = load i8*, i8** %67
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = getelementptr %struct.mz_zip_archive, i8* %122, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %121, i32* %123
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %124
	jmp	mz_zip_writer_update_zip64_extension_block124
	.text
mz_zip_writer_update_zip64_extension_block124:
	# store i32 0, i32* %77
	movq	$0, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %629
	jmp	mz_zip_writer_update_zip64_extension_block629
	.text
mz_zip_writer_update_zip64_extension_block125:
	# %126 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %127 = load i8*, i8** %78
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %126, i8** %63
	movq	%rbx, %rax
	movq	-488(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %127, i8** %64
	movq	%rdx, %rax
	movq	-496(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %65
	movq	$0, %rax
	movq	-504(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %66
	movq	$0, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %128 = load i64, i64* %65
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %129 = load i8*, i8** %64
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %130 = getelementptr %struct.mz_zip_array, i8* %129, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %131 = load i64, i64* %130
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %132 = icmp ugt i64 %128, %131
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %132, label %133, label %142
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block142
	jmp	mz_zip_writer_update_zip64_extension_block133
	.text
mz_zip_writer_update_zip64_extension_block133:
	# %134 = load i8*, i8** %63
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %135 = load i8*, i8** %64
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %136 = load i64, i64* %65
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %137 = load i32, i32* %66
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %138 = call i32 @mz_zip_array_ensure_capacity (i8* %134, i8* %135, i64 %136, i32 %137)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %139 = icmp ne i32 %138, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %139, label %141, label %140
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block140
	jmp	mz_zip_writer_update_zip64_extension_block141
	.text
mz_zip_writer_update_zip64_extension_block140:
	# store i32 0, i32* %62
	movq	$0, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %146
	jmp	mz_zip_writer_update_zip64_extension_block146
	.text
mz_zip_writer_update_zip64_extension_block141:
	# br label %142
	jmp	mz_zip_writer_update_zip64_extension_block142
	.text
mz_zip_writer_update_zip64_extension_block142:
	# %143 = load i64, i64* %65
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %144 = load i8*, i8** %64
	movq	-496(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %145 = getelementptr %struct.mz_zip_array, i8* %144, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %143, i64* %145
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %62
	movq	$1, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %146
	jmp	mz_zip_writer_update_zip64_extension_block146
	.text
mz_zip_writer_update_zip64_extension_block146:
	# %147 = load i32, i32* %62
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %148 = load i8*, i8** %83
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %149 = icmp ne i8* %148, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %149, label %159, label %150
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block150
	jmp	mz_zip_writer_update_zip64_extension_block159
	.text
mz_zip_writer_update_zip64_extension_block150:
	# %151 = load i8*, i8** %82
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %152 = icmp ne i8* %151, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %152, label %159, label %153
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block153
	jmp	mz_zip_writer_update_zip64_extension_block159
	.text
mz_zip_writer_update_zip64_extension_block153:
	# %154 = load i8*, i8** %84
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %155 = icmp ne i8* %154, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %155, label %159, label %156
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block156
	jmp	mz_zip_writer_update_zip64_extension_block159
	.text
mz_zip_writer_update_zip64_extension_block156:
	# %157 = load i8*, i8** %85
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %158 = icmp ne i8* %157, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %158, label %159, label %471
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block471
	jmp	mz_zip_writer_update_zip64_extension_block159
	.text
mz_zip_writer_update_zip64_extension_block159:
	# %160 = getelementptr [64 x i8], i8* %86, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %160, i8** %87
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %161 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %161, i8** %36
	movq	%rdx, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 1, i16* %37
	movq	$1, %rax
	movq	-280(%rbp), %rcx
	movq	%rax, (%rcx)
	# %162 = load i16, i16* %37
	movq	-280(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %163 = trunc i16 %162 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %164 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %163, i8* %164
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %165 = load i16, i16* %37
	movq	-280(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %166 = zext i16 %165 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %167 = ashr i32 %166, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %168 = trunc i32 %167 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %169 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %170 = getelementptr i8, i8* %169, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %168, i8* %170
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %171 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %172 = getelementptr i8, i8* %171, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %172, i8** %38
	movq	%rdx, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 0, i16* %39
	movq	$0, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# %173 = load i16, i16* %39
	movq	-296(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %174 = trunc i16 %173 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %175 = load i8*, i8** %38
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %174, i8* %175
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %176 = load i16, i16* %39
	movq	-296(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %177 = zext i16 %176 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %178 = ashr i32 %177, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %179 = trunc i32 %178 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %180 = load i8*, i8** %38
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %181 = getelementptr i8, i8* %180, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %179, i8* %181
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %182 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %183 = getelementptr i8, i8* %182, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %183, i8** %87
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %184 = load i8*, i8** %83
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %185 = icmp ne i8* %184, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %185, label %186, label %236
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block236
	jmp	mz_zip_writer_update_zip64_extension_block186
	.text
mz_zip_writer_update_zip64_extension_block186:
	# %187 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %188 = load i8*, i8** %83
	movq	-648(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %189 = load i64, i64* %188
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %187, i8** %46
	movq	%rbx, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %189, i64* %47
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# %190 = load i8*, i8** %46
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %191 = load i64, i64* %47
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %192 = trunc i64 %191 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %190, i8** %42
	movq	%rbx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %192, i32* %43
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %193 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %194 = trunc i32 %193 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %195 = load i8*, i8** %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %194, i8* %195
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %196 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %197 = lshr i32 %196, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %198 = trunc i32 %197 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %199 = load i8*, i8** %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %200 = getelementptr i8, i8* %199, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %198, i8* %200
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %201 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %202 = lshr i32 %201, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %203 = trunc i32 %202 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %204 = load i8*, i8** %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %205 = getelementptr i8, i8* %204, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %203, i8* %205
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %206 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %207 = lshr i32 %206, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %208 = trunc i32 %207 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %209 = load i8*, i8** %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %210 = getelementptr i8, i8* %209, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %208, i8* %210
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %211 = load i8*, i8** %46
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %212 = getelementptr i8, i8* %211, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %213 = load i64, i64* %47
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %214 = lshr i64 %213, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %215 = trunc i64 %214 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %212, i8** %44
	movq	%rbx, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %215, i32* %45
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movl	%eax, (%rcx)
	# %216 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %217 = trunc i32 %216 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %218 = load i8*, i8** %44
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %217, i8* %218
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %219 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %220 = lshr i32 %219, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %221 = trunc i32 %220 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %222 = load i8*, i8** %44
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %223 = getelementptr i8, i8* %222, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %221, i8* %223
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %224 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %225 = lshr i32 %224, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %226 = trunc i32 %225 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %227 = load i8*, i8** %44
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %228 = getelementptr i8, i8* %227, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %226, i8* %228
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %229 = load i32, i32* %45
	movq	-344(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %230 = lshr i32 %229, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %231 = trunc i32 %230 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %232 = load i8*, i8** %44
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %233 = getelementptr i8, i8* %232, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %231, i8* %233
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %234 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %235 = getelementptr i8, i8* %234, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %235, i8** %87
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %236
	jmp	mz_zip_writer_update_zip64_extension_block236
	.text
mz_zip_writer_update_zip64_extension_block236:
	# %237 = load i8*, i8** %82
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %238 = icmp ne i8* %237, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %238, label %239, label %289
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block289
	jmp	mz_zip_writer_update_zip64_extension_block239
	.text
mz_zip_writer_update_zip64_extension_block239:
	# %240 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %241 = load i8*, i8** %82
	movq	-640(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %242 = load i64, i64* %241
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %240, i8** %52
	movq	%rbx, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %242, i64* %53
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movq	%rax, (%rcx)
	# %243 = load i8*, i8** %52
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %244 = load i64, i64* %53
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %245 = trunc i64 %244 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %243, i8** %48
	movq	%rbx, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %245, i32* %49
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# %246 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %247 = trunc i32 %246 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %248 = load i8*, i8** %48
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %247, i8* %248
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %249 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %250 = lshr i32 %249, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %251 = trunc i32 %250 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %252 = load i8*, i8** %48
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %253 = getelementptr i8, i8* %252, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %251, i8* %253
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %254 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %255 = lshr i32 %254, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %256 = trunc i32 %255 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %257 = load i8*, i8** %48
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %258 = getelementptr i8, i8* %257, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %256, i8* %258
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %259 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %260 = lshr i32 %259, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %261 = trunc i32 %260 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %262 = load i8*, i8** %48
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %263 = getelementptr i8, i8* %262, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %261, i8* %263
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %264 = load i8*, i8** %52
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %265 = getelementptr i8, i8* %264, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %266 = load i64, i64* %53
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %267 = lshr i64 %266, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %268 = trunc i64 %267 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %265, i8** %50
	movq	%rbx, %rax
	movq	-384(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %268, i32* %51
	movq	%rdx, %rax
	movq	-392(%rbp), %rcx
	movl	%eax, (%rcx)
	# %269 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %270 = trunc i32 %269 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %271 = load i8*, i8** %50
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %270, i8* %271
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %272 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %273 = lshr i32 %272, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %274 = trunc i32 %273 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %275 = load i8*, i8** %50
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %276 = getelementptr i8, i8* %275, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %274, i8* %276
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %277 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %278 = lshr i32 %277, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %279 = trunc i32 %278 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %280 = load i8*, i8** %50
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %281 = getelementptr i8, i8* %280, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %279, i8* %281
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %282 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %283 = lshr i32 %282, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %284 = trunc i32 %283 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %285 = load i8*, i8** %50
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %286 = getelementptr i8, i8* %285, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %284, i8* %286
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %287 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %288 = getelementptr i8, i8* %287, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %288, i8** %87
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %289
	jmp	mz_zip_writer_update_zip64_extension_block289
	.text
mz_zip_writer_update_zip64_extension_block289:
	# %290 = load i8*, i8** %84
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %291 = icmp ne i8* %290, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %291, label %292, label %342
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block342
	jmp	mz_zip_writer_update_zip64_extension_block292
	.text
mz_zip_writer_update_zip64_extension_block292:
	# %293 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %294 = load i8*, i8** %84
	movq	-656(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %295 = load i64, i64* %294
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %293, i8** %58
	movq	%rbx, %rax
	movq	-448(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %295, i64* %59
	movq	%rdx, %rax
	movq	-456(%rbp), %rcx
	movq	%rax, (%rcx)
	# %296 = load i8*, i8** %58
	movq	-448(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %297 = load i64, i64* %59
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %298 = trunc i64 %297 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %296, i8** %54
	movq	%rbx, %rax
	movq	-416(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %298, i32* %55
	movq	%rdx, %rax
	movq	-424(%rbp), %rcx
	movl	%eax, (%rcx)
	# %299 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %300 = trunc i32 %299 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %301 = load i8*, i8** %54
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %300, i8* %301
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %302 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %303 = lshr i32 %302, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %304 = trunc i32 %303 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %305 = load i8*, i8** %54
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %306 = getelementptr i8, i8* %305, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %304, i8* %306
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %307 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %308 = lshr i32 %307, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %309 = trunc i32 %308 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %310 = load i8*, i8** %54
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %311 = getelementptr i8, i8* %310, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %309, i8* %311
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %312 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %313 = lshr i32 %312, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %314 = trunc i32 %313 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %315 = load i8*, i8** %54
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %316 = getelementptr i8, i8* %315, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %314, i8* %316
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %317 = load i8*, i8** %58
	movq	-448(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %318 = getelementptr i8, i8* %317, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %319 = load i64, i64* %59
	movq	-456(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %320 = lshr i64 %319, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %rdx
	# %321 = trunc i64 %320 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %318, i8** %56
	movq	%rbx, %rax
	movq	-432(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %321, i32* %57
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movl	%eax, (%rcx)
	# %322 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %323 = trunc i32 %322 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %324 = load i8*, i8** %56
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %323, i8* %324
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %325 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %326 = lshr i32 %325, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %327 = trunc i32 %326 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %328 = load i8*, i8** %56
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %329 = getelementptr i8, i8* %328, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %327, i8* %329
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %330 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %331 = lshr i32 %330, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %332 = trunc i32 %331 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %333 = load i8*, i8** %56
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %334 = getelementptr i8, i8* %333, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %332, i8* %334
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %335 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %336 = lshr i32 %335, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %337 = trunc i32 %336 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %338 = load i8*, i8** %56
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %339 = getelementptr i8, i8* %338, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %337, i8* %339
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %340 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %341 = getelementptr i8, i8* %340, i64 8
	movq	%rdx, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %341, i8** %87
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %342
	jmp	mz_zip_writer_update_zip64_extension_block342
	.text
mz_zip_writer_update_zip64_extension_block342:
	# %343 = load i8*, i8** %85
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %344 = icmp ne i8* %343, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %344, label %345, label %369
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block369
	jmp	mz_zip_writer_update_zip64_extension_block345
	.text
mz_zip_writer_update_zip64_extension_block345:
	# %346 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %347 = load i8*, i8** %85
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %348 = load i32, i32* %347
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %346, i8** %60
	movq	%rbx, %rax
	movq	-464(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %348, i32* %61
	movq	%rdx, %rax
	movq	-472(%rbp), %rcx
	movl	%eax, (%rcx)
	# %349 = load i32, i32* %61
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %350 = trunc i32 %349 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %351 = load i8*, i8** %60
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %350, i8* %351
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %352 = load i32, i32* %61
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %353 = lshr i32 %352, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %354 = trunc i32 %353 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %355 = load i8*, i8** %60
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %356 = getelementptr i8, i8* %355, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %354, i8* %356
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %357 = load i32, i32* %61
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %358 = lshr i32 %357, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %359 = trunc i32 %358 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %360 = load i8*, i8** %60
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %361 = getelementptr i8, i8* %360, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %359, i8* %361
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %362 = load i32, i32* %61
	movq	-472(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %363 = lshr i32 %362, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %364 = trunc i32 %363 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %365 = load i8*, i8** %60
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %366 = getelementptr i8, i8* %365, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %364, i8* %366
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %367 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %368 = getelementptr i8, i8* %367, i64 4
	movq	%rdx, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %368, i8** %87
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %369
	jmp	mz_zip_writer_update_zip64_extension_block369
	.text
mz_zip_writer_update_zip64_extension_block369:
	# %370 = getelementptr [64 x i8], i8* %86, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %371 = getelementptr i8, i8* %370, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %372 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %373 = getelementptr [64 x i8], i8* %86, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %374 = ptrtoint i8** %372 to i64
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %375 = ptrtoint i8** %373 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %376 = sub i64 %374, %375
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %377 = sub i64 %376, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %378 = trunc i64 %377 to i16
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i8* %371, i8** %40
	movq	%rsi, %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %378, i16* %41
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %379 = load i16, i16* %41
	movq	-312(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %380 = trunc i16 %379 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %381 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %380, i8* %381
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %382 = load i16, i16* %41
	movq	-312(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %383 = zext i16 %382 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %384 = ashr i32 %383, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %385 = trunc i32 %384 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %386 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %387 = getelementptr i8, i8* %386, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %385, i8* %387
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %388 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %389 = load i8*, i8** %78
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %390 = getelementptr [64 x i8], i8* %86, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %391 = load i8*, i8** %87
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %392 = getelementptr [64 x i8], i8* %86, i64 0, i64 0
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$64, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %393 = ptrtoint i8** %391 to i64
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %394 = ptrtoint i8** %392 to i64
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %395 = sub i64 %393, %394
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %388, i8** %20
	movq	%r8, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %389, i8** %21
	movq	%rdi, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %390, i8** %22
	movq	%rsi, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %395, i64* %23
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# %396 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %397 = getelementptr %struct.mz_zip_array, i8* %396, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %398 = load i64, i64* %397
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %398, i64* %24
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# %399 = load i8*, i8** %20
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %400 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %401 = load i64, i64* %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %402 = load i64, i64* %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %403 = add i64 %401, %402
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %399, i8** %15
	movq	%rdi, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %400, i8** %16
	movq	%rsi, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %403, i64* %17
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %18
	movq	$1, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# %404 = load i64, i64* %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %405 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %406 = getelementptr %struct.mz_zip_array, i8* %405, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %407 = load i64, i64* %406
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %408 = icmp ugt i64 %404, %407
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %408, label %409, label %418
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block418
	jmp	mz_zip_writer_update_zip64_extension_block409
	.text
mz_zip_writer_update_zip64_extension_block409:
	# %410 = load i8*, i8** %15
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %411 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %412 = load i64, i64* %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %413 = load i32, i32* %18
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %414 = call i32 @mz_zip_array_ensure_capacity (i8* %410, i8* %411, i64 %412, i32 %413)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %415 = icmp ne i32 %414, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %415, label %417, label %416
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block416
	jmp	mz_zip_writer_update_zip64_extension_block417
	.text
mz_zip_writer_update_zip64_extension_block416:
	# store i32 0, i32* %14
	movq	$0, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %422
	jmp	mz_zip_writer_update_zip64_extension_block422
	.text
mz_zip_writer_update_zip64_extension_block417:
	# br label %418
	jmp	mz_zip_writer_update_zip64_extension_block418
	.text
mz_zip_writer_update_zip64_extension_block418:
	# %419 = load i64, i64* %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %420 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %421 = getelementptr %struct.mz_zip_array, i8* %420, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %419, i64* %421
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %14
	movq	$1, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %422
	jmp	mz_zip_writer_update_zip64_extension_block422
	.text
mz_zip_writer_update_zip64_extension_block422:
	# %423 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %424 = icmp ne i32 %423, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %424, label %426, label %425
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block425
	jmp	mz_zip_writer_update_zip64_extension_block426
	.text
mz_zip_writer_update_zip64_extension_block425:
	# store i32 0, i32* %19
	movq	$0, %rax
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %458
	jmp	mz_zip_writer_update_zip64_extension_block458
	.text
mz_zip_writer_update_zip64_extension_block426:
	# %427 = load i64, i64* %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %428 = icmp ugt i64 %427, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %428, label %429, label %457
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block457
	jmp	mz_zip_writer_update_zip64_extension_block429
	.text
mz_zip_writer_update_zip64_extension_block429:
	# %430 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %431 = load i8*, i8** %430
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %432 = load i64, i64* %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %433 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %434 = getelementptr %struct.mz_zip_array, i8* %433, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %435 = load i32, i32* %434
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %436 = zext i32 %435 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %437 = mul i64 %432, %436
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %438 = getelementptr i8, i8* %431, i64 %437
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %439 = load i8*, i8** %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %440 = load i64, i64* %23
	movq	-160(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %441 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %442 = getelementptr %struct.mz_zip_array, i8* %441, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %443 = load i32, i32* %442
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %444 = zext i32 %443 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %445 = mul i64 %440, %444
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %446 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %447 = load i8*, i8** %446
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %448 = load i64, i64* %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %449 = load i8*, i8** %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %450 = getelementptr %struct.mz_zip_array, i8* %449, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %451 = load i32, i32* %450
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %452 = zext i32 %451 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %453 = mul i64 %448, %452
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %454 = getelementptr i8, i8* %447, i64 %453
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %455 = call i64 @llvm.objectsize.i64.p0 (i8* %454, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %456 = call i8* @__memcpy_chk (i8* %438, i8* %439, i64 %445, i64 %455)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %457
	jmp	mz_zip_writer_update_zip64_extension_block457
	.text
mz_zip_writer_update_zip64_extension_block457:
	# store i32 1, i32* %19
	movq	$1, %rax
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %458
	jmp	mz_zip_writer_update_zip64_extension_block458
	.text
mz_zip_writer_update_zip64_extension_block458:
	# %459 = load i32, i32* %19
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %460 = icmp ne i32 %459, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %460, label %470, label %461
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block461
	jmp	mz_zip_writer_update_zip64_extension_block470
	.text
mz_zip_writer_update_zip64_extension_block461:
	# %462 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %462, i8** %69
	movq	%rdx, %rax
	movq	-536(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %70
	movq	$16, %rax
	movq	-544(%rbp), %rcx
	movl	%eax, (%rcx)
	# %463 = load i8*, i8** %69
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %464 = icmp ne i8* %463, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %464, label %465, label %469
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block469
	jmp	mz_zip_writer_update_zip64_extension_block465
	.text
mz_zip_writer_update_zip64_extension_block465:
	# %466 = load i32, i32* %70
	movq	-544(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %467 = load i8*, i8** %69
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %468 = getelementptr %struct.mz_zip_archive, i8* %467, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %466, i32* %468
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %469
	jmp	mz_zip_writer_update_zip64_extension_block469
	.text
mz_zip_writer_update_zip64_extension_block469:
	# store i32 0, i32* %77
	movq	$0, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %629
	jmp	mz_zip_writer_update_zip64_extension_block629
	.text
mz_zip_writer_update_zip64_extension_block470:
	# br label %471
	jmp	mz_zip_writer_update_zip64_extension_block471
	.text
mz_zip_writer_update_zip64_extension_block471:
	# %472 = load i8*, i8** %80
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %473 = icmp ne i8* %472, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %473, label %474, label %628
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block628
	jmp	mz_zip_writer_update_zip64_extension_block474
	.text
mz_zip_writer_update_zip64_extension_block474:
	# %475 = load i32, i32* %81
	movq	-632(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %476 = icmp ne i32 %475, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %476, label %477, label %628
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block628
	jmp	mz_zip_writer_update_zip64_extension_block477
	.text
mz_zip_writer_update_zip64_extension_block477:
	# %478 = load i32, i32* %81
	movq	-632(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %478, i32* %88
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %479 = load i8*, i8** %80
	movq	-624(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %479, i8** %89
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# br label %480
	jmp	mz_zip_writer_update_zip64_extension_block480
	.text
mz_zip_writer_update_zip64_extension_block480:
	# %481 = load i32, i32* %88
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %482 = zext i32 %481 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %483 = icmp ult i64 %482, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %483, label %484, label %493
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block493
	jmp	mz_zip_writer_update_zip64_extension_block484
	.text
mz_zip_writer_update_zip64_extension_block484:
	# %485 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %485, i8** %71
	movq	%rdx, %rax
	movq	-552(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %72
	movq	$9, %rax
	movq	-560(%rbp), %rcx
	movl	%eax, (%rcx)
	# %486 = load i8*, i8** %71
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %487 = icmp ne i8* %486, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %487, label %488, label %492
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block492
	jmp	mz_zip_writer_update_zip64_extension_block488
	.text
mz_zip_writer_update_zip64_extension_block488:
	# %489 = load i32, i32* %72
	movq	-560(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %490 = load i8*, i8** %71
	movq	-552(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %491 = getelementptr %struct.mz_zip_archive, i8* %490, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %489, i32* %491
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %492
	jmp	mz_zip_writer_update_zip64_extension_block492
	.text
mz_zip_writer_update_zip64_extension_block492:
	# store i32 0, i32* %77
	movq	$0, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %629
	jmp	mz_zip_writer_update_zip64_extension_block629
	.text
mz_zip_writer_update_zip64_extension_block493:
	# %494 = load i8*, i8** %89
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %495 = getelementptr i8, i8* %494, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %496 = load i8, i8* %495
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %497 = zext i8 %496 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %498 = load i8*, i8** %89
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %499 = getelementptr i8, i8* %498, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %500 = load i8, i8* %499
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %501 = zext i8 %500 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %502 = shl i32 %501, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %503 = or i32 %497, %502
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %503, i32* %90
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %504 = load i8*, i8** %89
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %505 = getelementptr i8, i8* %504, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %506 = getelementptr i8, i8* %505, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %507 = load i8, i8* %506
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %508 = zext i8 %507 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %509 = load i8*, i8** %89
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %510 = getelementptr i8, i8* %509, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %511 = getelementptr i8, i8* %510, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %512 = load i8, i8* %511
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %513 = zext i8 %512 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %514 = shl i32 %513, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %515 = or i32 %508, %514
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %515, i32* %91
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %516 = load i32, i32* %91
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %517 = zext i32 %516 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %518 = add i64 %517, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %519 = trunc i64 %518 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %519, i32* %92
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %520 = load i32, i32* %92
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %521 = load i32, i32* %88
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %522 = icmp ugt i32 %520, %521
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %522, label %523, label %532
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block532
	jmp	mz_zip_writer_update_zip64_extension_block523
	.text
mz_zip_writer_update_zip64_extension_block523:
	# %524 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %524, i8** %73
	movq	%rdx, %rax
	movq	-568(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 9, i32* %74
	movq	$9, %rax
	movq	-576(%rbp), %rcx
	movl	%eax, (%rcx)
	# %525 = load i8*, i8** %73
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %526 = icmp ne i8* %525, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %526, label %527, label %531
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block531
	jmp	mz_zip_writer_update_zip64_extension_block527
	.text
mz_zip_writer_update_zip64_extension_block527:
	# %528 = load i32, i32* %74
	movq	-576(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %529 = load i8*, i8** %73
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %530 = getelementptr %struct.mz_zip_archive, i8* %529, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %528, i32* %530
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %531
	jmp	mz_zip_writer_update_zip64_extension_block531
	.text
mz_zip_writer_update_zip64_extension_block531:
	# store i32 0, i32* %77
	movq	$0, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %629
	jmp	mz_zip_writer_update_zip64_extension_block629
	.text
mz_zip_writer_update_zip64_extension_block532:
	# %533 = load i32, i32* %90
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %534 = icmp ne i32 %533, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %534, label %535, label %616
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block616
	jmp	mz_zip_writer_update_zip64_extension_block535
	.text
mz_zip_writer_update_zip64_extension_block535:
	# %536 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %537 = load i8*, i8** %78
	movq	-608(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %538 = load i8*, i8** %89
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %539 = load i32, i32* %92
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %540 = zext i32 %539 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %536, i8** %31
	movq	%rdi, %rax
	movq	-232(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %537, i8** %32
	movq	%rsi, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %538, i8** %33
	movq	%rbx, %rax
	movq	-248(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %540, i64* %34
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# %541 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %542 = getelementptr %struct.mz_zip_array, i8* %541, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %543 = load i64, i64* %542
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %543, i64* %35
	movq	%rdx, %rax
	movq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
	# %544 = load i8*, i8** %31
	movq	-232(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %545 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %546 = load i64, i64* %35
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %547 = load i64, i64* %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %548 = add i64 %546, %547
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i8* %544, i8** %26
	movq	%rdi, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %545, i8** %27
	movq	%rbx, %rax
	movq	-200(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %548, i64* %28
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %29
	movq	$1, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %549 = load i64, i64* %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %550 = load i8*, i8** %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %551 = getelementptr %struct.mz_zip_array, i8* %550, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %552 = load i64, i64* %551
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %553 = icmp ugt i64 %549, %552
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %553, label %554, label %563
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block563
	jmp	mz_zip_writer_update_zip64_extension_block554
	.text
mz_zip_writer_update_zip64_extension_block554:
	# %555 = load i8*, i8** %26
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %556 = load i8*, i8** %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %557 = load i64, i64* %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %558 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %559 = call i32 @mz_zip_array_ensure_capacity (i8* %555, i8* %556, i64 %557, i32 %558)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_array_ensure_capacity
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %560 = icmp ne i32 %559, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %560, label %562, label %561
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block561
	jmp	mz_zip_writer_update_zip64_extension_block562
	.text
mz_zip_writer_update_zip64_extension_block561:
	# store i32 0, i32* %25
	movq	$0, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %567
	jmp	mz_zip_writer_update_zip64_extension_block567
	.text
mz_zip_writer_update_zip64_extension_block562:
	# br label %563
	jmp	mz_zip_writer_update_zip64_extension_block563
	.text
mz_zip_writer_update_zip64_extension_block563:
	# %564 = load i64, i64* %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %565 = load i8*, i8** %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %566 = getelementptr %struct.mz_zip_array, i8* %565, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %564, i64* %566
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %25
	movq	$1, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %567
	jmp	mz_zip_writer_update_zip64_extension_block567
	.text
mz_zip_writer_update_zip64_extension_block567:
	# %568 = load i32, i32* %25
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %569 = icmp ne i32 %568, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %569, label %571, label %570
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block570
	jmp	mz_zip_writer_update_zip64_extension_block571
	.text
mz_zip_writer_update_zip64_extension_block570:
	# store i32 0, i32* %30
	movq	$0, %rax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %603
	jmp	mz_zip_writer_update_zip64_extension_block603
	.text
mz_zip_writer_update_zip64_extension_block571:
	# %572 = load i64, i64* %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %573 = icmp ugt i64 %572, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	seta	%dl
	# br i1 %573, label %574, label %602
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block602
	jmp	mz_zip_writer_update_zip64_extension_block574
	.text
mz_zip_writer_update_zip64_extension_block574:
	# %575 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %576 = load i8*, i8** %575
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %577 = load i64, i64* %35
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %578 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %579 = getelementptr %struct.mz_zip_array, i8* %578, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %580 = load i32, i32* %579
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %581 = zext i32 %580 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %582 = mul i64 %577, %581
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %583 = getelementptr i8, i8* %576, i64 %582
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %584 = load i8*, i8** %33
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %585 = load i64, i64* %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %586 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %587 = getelementptr %struct.mz_zip_array, i8* %586, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %588 = load i32, i32* %587
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %589 = zext i32 %588 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %590 = mul i64 %585, %589
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdi
	# %591 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %592 = load i8*, i8** %591
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %593 = load i64, i64* %35
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %594 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %595 = getelementptr %struct.mz_zip_array, i8* %594, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %596 = load i32, i32* %595
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %597 = zext i32 %596 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %598 = mul i64 %593, %597
	movq	%rbx, %rax
	movq	%rdx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %599 = getelementptr i8, i8* %592, i64 %598
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %600 = call i64 @llvm.objectsize.i64.p0 (i8* %599, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %601 = call i8* @__memcpy_chk (i8* %583, i8* %584, i64 %590, i64 %600)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# br label %602
	jmp	mz_zip_writer_update_zip64_extension_block602
	.text
mz_zip_writer_update_zip64_extension_block602:
	# store i32 1, i32* %30
	movq	$1, %rax
	movq	-224(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %603
	jmp	mz_zip_writer_update_zip64_extension_block603
	.text
mz_zip_writer_update_zip64_extension_block603:
	# %604 = load i32, i32* %30
	movq	-224(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %605 = icmp ne i32 %604, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %605, label %615, label %606
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block606
	jmp	mz_zip_writer_update_zip64_extension_block615
	.text
mz_zip_writer_update_zip64_extension_block606:
	# %607 = load i8*, i8** %79
	movq	-616(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %607, i8** %75
	movq	%rdx, %rax
	movq	-584(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 16, i32* %76
	movq	$16, %rax
	movq	-592(%rbp), %rcx
	movl	%eax, (%rcx)
	# %608 = load i8*, i8** %75
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %609 = icmp ne i8* %608, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %609, label %610, label %614
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block614
	jmp	mz_zip_writer_update_zip64_extension_block610
	.text
mz_zip_writer_update_zip64_extension_block610:
	# %611 = load i32, i32* %76
	movq	-592(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %612 = load i8*, i8** %75
	movq	-584(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %613 = getelementptr %struct.mz_zip_archive, i8* %612, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %611, i32* %613
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %614
	jmp	mz_zip_writer_update_zip64_extension_block614
	.text
mz_zip_writer_update_zip64_extension_block614:
	# store i32 0, i32* %77
	movq	$0, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %629
	jmp	mz_zip_writer_update_zip64_extension_block629
	.text
mz_zip_writer_update_zip64_extension_block615:
	# br label %616
	jmp	mz_zip_writer_update_zip64_extension_block616
	.text
mz_zip_writer_update_zip64_extension_block616:
	# %617 = load i32, i32* %92
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %618 = load i8*, i8** %89
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %619 = zext i32 %617 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %620 = getelementptr i8, i8* %618, i64 %619
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %620, i8** %89
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %621 = load i32, i32* %92
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %622 = load i32, i32* %88
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %623 = sub i32 %622, %621
	movq	%rdx, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %623, i32* %88
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %624
	jmp	mz_zip_writer_update_zip64_extension_block624
	.text
mz_zip_writer_update_zip64_extension_block624:
	# %625 = load i32, i32* %88
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %626 = icmp ne i32 %625, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %626, label %480, label %627
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_update_zip64_extension_block627
	jmp	mz_zip_writer_update_zip64_extension_block480
	.text
mz_zip_writer_update_zip64_extension_block627:
	# br label %628
	jmp	mz_zip_writer_update_zip64_extension_block628
	.text
mz_zip_writer_update_zip64_extension_block628:
	# store i32 1, i32* %77
	movq	$1, %rax
	movq	-600(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %629
	jmp	mz_zip_writer_update_zip64_extension_block629
	.text
mz_zip_writer_update_zip64_extension_block629:
	# %630 = load i32, i32* %77
	movq	-600(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %630
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_finalize_archive
_mz_zip_writer_finalize_archive:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$576, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %3 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r12
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -64(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %15 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -112(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -120(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -128(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -136(%rbp)
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -144(%rbp)
	# %21 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -152(%rbp)
	# %22 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -160(%rbp)
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %26 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -192(%rbp)
	# %27 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -200(%rbp)
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -216(%rbp)
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %32 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %33 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -248(%rbp)
	# %34 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %35 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -264(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -280(%rbp)
	# %38 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %39 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -296(%rbp)
	# %40 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %41 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -312(%rbp)
	# %42 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -320(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %44 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -336(%rbp)
	# %45 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -344(%rbp)
	# %46 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %47 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -360(%rbp)
	# %48 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -368(%rbp)
	# %49 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -376(%rbp)
	# %50 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -384(%rbp)
	# %51 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -392(%rbp)
	# %52 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -400(%rbp)
	# %53 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -408(%rbp)
	# %54 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -416(%rbp)
	# %55 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -424(%rbp)
	# %56 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -432(%rbp)
	# %57 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -440(%rbp)
	# %58 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -448(%rbp)
	# %59 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -456(%rbp)
	# %60 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -464(%rbp)
	# %61 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %62 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %63 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %64 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -472(%rbp)
	# %65 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -480(%rbp)
	# %66 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -488(%rbp)
	# %67 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -496(%rbp)
	# %68 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -504(%rbp)
	# %69 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -512(%rbp)
	# %70 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -520(%rbp)
	# %71 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -528(%rbp)
	# %72 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -536(%rbp)
	# %73 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -544(%rbp)
	# %74 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -552(%rbp)
	# %75 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -560(%rbp)
	# %76 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -568(%rbp)
	# %77 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -576(%rbp)
	# %78 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r15
	# %79 = alloca [256 x i8]
	subq	$256, %rsp
	movq	%rsp, %r14
	# %80 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# store i8* %0, i8** %75
	movq	%rdx, %rax
	movq	-560(%rbp), %rcx
	movq	%rax, (%rcx)
	# %81 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %82 = icmp ne i8* %81, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %82, label %83, label %93
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive93
	jmp	mz_zip_writer_finalize_archive83
	.text
mz_zip_writer_finalize_archive83:
	# %84 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %85 = getelementptr %struct.mz_zip_archive, i8* %84, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %86 = load i8*, i8** %85
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %87 = icmp ne i8* %86, null
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %87, label %88, label %93
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive93
	jmp	mz_zip_writer_finalize_archive88
	.text
mz_zip_writer_finalize_archive88:
	# %89 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %90 = getelementptr %struct.mz_zip_archive, i8* %89, i32 0, i32 3
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %91 = load i32, i32* %90
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %92 = icmp ne i32 %91, 2
	movq	%r8, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %92, label %93, label %102
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive102
	jmp	mz_zip_writer_finalize_archive93
	.text
mz_zip_writer_finalize_archive93:
	# %94 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %94, i8** %58
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %59
	movq	$24, %rax
	movq	-456(%rbp), %rcx
	movl	%eax, (%rcx)
	# %95 = load i8*, i8** %58
	movq	-448(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %96 = icmp ne i8* %95, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %96, label %97, label %101
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive101
	jmp	mz_zip_writer_finalize_archive97
	.text
mz_zip_writer_finalize_archive97:
	# %98 = load i32, i32* %59
	movq	-456(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %99 = load i8*, i8** %58
	movq	-448(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %100 = getelementptr %struct.mz_zip_archive, i8* %99, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %98, i32* %100
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %101
	jmp	mz_zip_writer_finalize_archive101
	.text
mz_zip_writer_finalize_archive101:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive102:
	# %103 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %104 = getelementptr %struct.mz_zip_archive, i8* %103, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %105 = load i8*, i8** %104
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8* %105, i8** %76
	movq	%r8, %rax
	movq	-568(%rbp), %rcx
	movq	%rax, (%rcx)
	# %106 = load i8*, i8** %76
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %107 = getelementptr %struct.mz_zip_internal_state_tag, i8* %106, i32 0, i32 4
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %108 = load i32, i32* %107
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %109 = icmp ne i32 %108, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %109, label %110, label %126
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive126
	jmp	mz_zip_writer_finalize_archive110
	.text
mz_zip_writer_finalize_archive110:
	# %111 = load i8*, i8** %76
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %112 = getelementptr %struct.mz_zip_internal_state_tag, i8* %111, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %113 = getelementptr %struct.mz_zip_array, i8* %112, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %114 = load i64, i64* %113
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %115 = icmp uge i64 %114, 4294967295
	movq	%r8, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setnb	%r8b
	# br i1 %115, label %116, label %125
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive125
	jmp	mz_zip_writer_finalize_archive116
	.text
mz_zip_writer_finalize_archive116:
	# %117 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %117, i8** %60
	movq	%rdx, %rax
	movq	-464(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %61
	movq	$2, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %118 = load i8*, i8** %60
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %119 = icmp ne i8* %118, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %119, label %120, label %124
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive124
	jmp	mz_zip_writer_finalize_archive120
	.text
mz_zip_writer_finalize_archive120:
	# %121 = load i32, i32* %61
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %122 = load i8*, i8** %60
	movq	-464(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = getelementptr %struct.mz_zip_archive, i8* %122, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %121, i32* %123
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %124
	jmp	mz_zip_writer_finalize_archive124
	.text
mz_zip_writer_finalize_archive124:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive125:
	# br label %152
	jmp	mz_zip_writer_finalize_archive152
	.text
mz_zip_writer_finalize_archive126:
	# %127 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %128 = getelementptr %struct.mz_zip_archive, i8* %127, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %129 = load i32, i32* %128
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %130 = icmp ugt i32 %129, 65535
	movq	%r8, %rax
	movq	$65535, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	seta	%r8b
	# br i1 %130, label %142, label %131
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive131
	jmp	mz_zip_writer_finalize_archive142
	.text
mz_zip_writer_finalize_archive131:
	# %132 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %133 = getelementptr %struct.mz_zip_archive, i8* %132, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %134 = load i64, i64* %133
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %135 = load i8*, i8** %76
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %136 = getelementptr %struct.mz_zip_internal_state_tag, i8* %135, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %137 = getelementptr %struct.mz_zip_array, i8* %136, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %138 = load i64, i64* %137
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %139 = add i64 %134, %138
	movq	%r9, %rax
	movq	%r8, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %140 = add i64 %139, 22
	movq	%r8, %rax
	movq	$22, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# %141 = icmp ugt i64 %140, 4294967295
	movq	%r8, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	seta	%r8b
	# br i1 %141, label %142, label %151
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive151
	jmp	mz_zip_writer_finalize_archive142
	.text
mz_zip_writer_finalize_archive142:
	# %143 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %143, i8** %62
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %63
	movq	$2, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %144 = load i8*, i8** %62
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %145 = icmp ne i8* %144, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %145, label %146, label %150
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive150
	jmp	mz_zip_writer_finalize_archive146
	.text
mz_zip_writer_finalize_archive146:
	# %147 = load i32, i32* %63
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %148 = load i8*, i8** %62
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %149 = getelementptr %struct.mz_zip_archive, i8* %148, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %147, i32* %149
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %150
	jmp	mz_zip_writer_finalize_archive150
	.text
mz_zip_writer_finalize_archive150:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive151:
	# br label %152
	jmp	mz_zip_writer_finalize_archive152
	.text
mz_zip_writer_finalize_archive152:
	# store i64 0, i64* %77
	movq	$0, %rax
	movq	-576(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 0, i64* %78
	movq	$0, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %153 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %154 = getelementptr %struct.mz_zip_archive, i8* %153, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %155 = load i32, i32* %154
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %156 = icmp ne i32 %155, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %156, label %157, label %198
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive198
	jmp	mz_zip_writer_finalize_archive157
	.text
mz_zip_writer_finalize_archive157:
	# %158 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %159 = getelementptr %struct.mz_zip_archive, i8* %158, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %160 = load i64, i64* %159
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i64 %160, i64* %77
	movq	%r8, %rax
	movq	-576(%rbp), %rcx
	movq	%rax, (%rcx)
	# %161 = load i8*, i8** %76
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %162 = getelementptr %struct.mz_zip_internal_state_tag, i8* %161, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %163 = getelementptr %struct.mz_zip_array, i8* %162, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %164 = load i64, i64* %163
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i64 %164, i64* %78
	movq	%r8, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %165 = load i64, i64* %77
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %166 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %167 = getelementptr %struct.mz_zip_archive, i8* %166, i32 0, i32 1
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i64 %165, i64* %167
	movq	%r9, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %168 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %169 = getelementptr %struct.mz_zip_archive, i8* %168, i32 0, i32 12
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %170 = load i8*, i8** %169
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %171 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %172 = getelementptr %struct.mz_zip_archive, i8* %171, i32 0, i32 14
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %173 = load i8*, i8** %172
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %174 = load i64, i64* %77
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %175 = load i8*, i8** %76
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %176 = getelementptr %struct.mz_zip_internal_state_tag, i8* %175, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %177 = getelementptr %struct.mz_zip_array, i8* %176, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %178 = load i8*, i8** %177
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %179 = load i64, i64* %78
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %180 = call i64 %170 (i8* %173, i64 %174, i8* %178, i64 %179)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%r8, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r9
	# %181 = load i64, i64* %78
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %182 = icmp ne i64 %180, %181
	movq	%r9, %rax
	movq	%r8, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %182, label %183, label %192
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive192
	jmp	mz_zip_writer_finalize_archive183
	.text
mz_zip_writer_finalize_archive183:
	# %184 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %184, i8** %64
	movq	%rdx, %rax
	movq	-472(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %65
	movq	$19, %rax
	movq	-480(%rbp), %rcx
	movl	%eax, (%rcx)
	# %185 = load i8*, i8** %64
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %186 = icmp ne i8* %185, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %186, label %187, label %191
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive191
	jmp	mz_zip_writer_finalize_archive187
	.text
mz_zip_writer_finalize_archive187:
	# %188 = load i32, i32* %65
	movq	-480(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %189 = load i8*, i8** %64
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %190 = getelementptr %struct.mz_zip_archive, i8* %189, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %188, i32* %190
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %191
	jmp	mz_zip_writer_finalize_archive191
	.text
mz_zip_writer_finalize_archive191:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive192:
	# %193 = load i64, i64* %78
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %194 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %195 = getelementptr %struct.mz_zip_archive, i8* %194, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %196 = load i64, i64* %195
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %197 = add i64 %196, %193
	movq	%r8, %rax
	movq	%r10, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# store i64 %197, i64* %195
	movq	%r8, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %198
	jmp	mz_zip_writer_finalize_archive198
	.text
mz_zip_writer_finalize_archive198:
	# %199 = load i8*, i8** %76
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %200 = getelementptr %struct.mz_zip_internal_state_tag, i8* %199, i32 0, i32 4
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %201 = load i32, i32* %200
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %202 = icmp ne i32 %201, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %202, label %203, label %630
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive630
	jmp	mz_zip_writer_finalize_archive203
	.text
mz_zip_writer_finalize_archive203:
	# %204 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %205 = getelementptr %struct.mz_zip_archive, i8* %204, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %206 = load i64, i64* %205
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i64 %206, i64* %80
	movq	%r8, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %207 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# call void @memset (i8* %207, i8 0, i64 256, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$256, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %208 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %209 = getelementptr i8, i8* %208, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %209, i8** %46
	movq	%r8, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 101075792, i32* %47
	movq	$101075792, %rax
	movq	-360(%rbp), %rcx
	movl	%eax, (%rcx)
	# %210 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %211 = trunc i32 %210 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %212 = load i8*, i8** %46
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %211, i8* %212
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %213 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %214 = lshr i32 %213, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %215 = trunc i32 %214 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %216 = load i8*, i8** %46
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %217 = getelementptr i8, i8* %216, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %215, i8* %217
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %218 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %219 = lshr i32 %218, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %220 = trunc i32 %219 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %221 = load i8*, i8** %46
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %222 = getelementptr i8, i8* %221, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %220, i8* %222
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %223 = load i32, i32* %47
	movq	-360(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %224 = lshr i32 %223, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %225 = trunc i32 %224 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %226 = load i8*, i8** %46
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %227 = getelementptr i8, i8* %226, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %225, i8* %227
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %228 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %229 = getelementptr i8, i8* %228, i64 4
	movq	%r8, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %229, i8** %14
	movq	%r8, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 44, i64* %15
	movq	$44, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# %230 = load i8*, i8** %14
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %231 = load i64, i64* %15
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %232 = trunc i64 %231 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %230, i8** %10
	movq	%r9, %rax
	movq	-64(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %232, i32* %11
	movq	%r8, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %233 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %234 = trunc i32 %233 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %235 = load i8*, i8** %10
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %234, i8* %235
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %236 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %237 = lshr i32 %236, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %238 = trunc i32 %237 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %239 = load i8*, i8** %10
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %240 = getelementptr i8, i8* %239, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %238, i8* %240
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %241 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %242 = lshr i32 %241, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %243 = trunc i32 %242 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %244 = load i8*, i8** %10
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %245 = getelementptr i8, i8* %244, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %243, i8* %245
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %246 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %247 = lshr i32 %246, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %248 = trunc i32 %247 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %249 = load i8*, i8** %10
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %250 = getelementptr i8, i8* %249, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %248, i8* %250
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %251 = load i8*, i8** %14
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %252 = getelementptr i8, i8* %251, i64 4
	movq	%r8, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %253 = load i64, i64* %15
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %254 = lshr i64 %253, 32
	movq	%r8, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %r8
	# %255 = trunc i64 %254 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %252, i8** %12
	movq	%r9, %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %255, i32* %13
	movq	%r8, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %256 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %257 = trunc i32 %256 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %258 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %257, i8* %258
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %259 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %260 = lshr i32 %259, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %261 = trunc i32 %260 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %262 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %263 = getelementptr i8, i8* %262, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %261, i8* %263
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %264 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %265 = lshr i32 %264, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %266 = trunc i32 %265 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %267 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %268 = getelementptr i8, i8* %267, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %266, i8* %268
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %269 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %270 = lshr i32 %269, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %271 = trunc i32 %270 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %272 = load i8*, i8** %12
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %273 = getelementptr i8, i8* %272, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %271, i8* %273
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %274 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %275 = getelementptr i8, i8* %274, i64 12
	movq	%r8, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %275, i8** %2
	movq	%r8, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 798, i16* %3
	movq	$798, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %276 = load i16, i16* %3
	movq	%r12, %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %277 = trunc i16 %276 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %278 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %277, i8* %278
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %279 = load i16, i16* %3
	movq	%r12, %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %280 = zext i16 %279 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %281 = ashr i32 %280, 8
	movq	%r8, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %r8
	# %282 = trunc i32 %281 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %283 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %284 = getelementptr i8, i8* %283, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %282, i8* %284
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %285 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %286 = getelementptr i8, i8* %285, i64 14
	movq	%r8, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %286, i8** %4
	movq	%r8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 45, i16* %5
	movq	$45, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# %287 = load i16, i16* %5
	movq	-24(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %288 = trunc i16 %287 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %289 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %288, i8* %289
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %290 = load i16, i16* %5
	movq	-24(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r8
	movw	%ax, %r8w
	# %291 = zext i16 %290 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %292 = ashr i32 %291, 8
	movq	%r8, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %r8
	# %293 = trunc i32 %292 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %294 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %295 = getelementptr i8, i8* %294, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %293, i8* %295
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %296 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %297 = getelementptr i8, i8* %296, i64 24
	movq	%r8, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %298 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %299 = getelementptr %struct.mz_zip_archive, i8* %298, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %300 = load i32, i32* %299
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %301 = zext i32 %300 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %297, i8** %20
	movq	%r9, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %301, i64* %21
	movq	%r8, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %302 = load i8*, i8** %20
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %303 = load i64, i64* %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %304 = trunc i64 %303 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %302, i8** %16
	movq	%r9, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %304, i32* %17
	movq	%r8, %rax
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	# %305 = load i32, i32* %17
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %306 = trunc i32 %305 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %307 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %306, i8* %307
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %308 = load i32, i32* %17
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %309 = lshr i32 %308, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %310 = trunc i32 %309 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %311 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %312 = getelementptr i8, i8* %311, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %310, i8* %312
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %313 = load i32, i32* %17
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %314 = lshr i32 %313, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %315 = trunc i32 %314 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %316 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %317 = getelementptr i8, i8* %316, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %315, i8* %317
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %318 = load i32, i32* %17
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %319 = lshr i32 %318, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %320 = trunc i32 %319 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %321 = load i8*, i8** %16
	movq	-112(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %322 = getelementptr i8, i8* %321, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %320, i8* %322
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %323 = load i8*, i8** %20
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %324 = getelementptr i8, i8* %323, i64 4
	movq	%r8, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %325 = load i64, i64* %21
	movq	-152(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %326 = lshr i64 %325, 32
	movq	%r8, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %r8
	# %327 = trunc i64 %326 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %324, i8** %18
	movq	%r9, %rax
	movq	-128(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %327, i32* %19
	movq	%r8, %rax
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	# %328 = load i32, i32* %19
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %329 = trunc i32 %328 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %330 = load i8*, i8** %18
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %329, i8* %330
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %331 = load i32, i32* %19
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %332 = lshr i32 %331, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %333 = trunc i32 %332 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %334 = load i8*, i8** %18
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %335 = getelementptr i8, i8* %334, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %333, i8* %335
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %336 = load i32, i32* %19
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %337 = lshr i32 %336, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %338 = trunc i32 %337 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %339 = load i8*, i8** %18
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %340 = getelementptr i8, i8* %339, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %338, i8* %340
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %341 = load i32, i32* %19
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %342 = lshr i32 %341, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %343 = trunc i32 %342 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %344 = load i8*, i8** %18
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %345 = getelementptr i8, i8* %344, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %343, i8* %345
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %346 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %347 = getelementptr i8, i8* %346, i64 32
	movq	%r8, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %348 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %349 = getelementptr %struct.mz_zip_archive, i8* %348, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %350 = load i32, i32* %349
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %351 = zext i32 %350 to i64
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %347, i8** %26
	movq	%r9, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %351, i64* %27
	movq	%r8, %rax
	movq	-200(%rbp), %rcx
	movq	%rax, (%rcx)
	# %352 = load i8*, i8** %26
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %353 = load i64, i64* %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %354 = trunc i64 %353 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %352, i8** %22
	movq	%r9, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %354, i32* %23
	movq	%r8, %rax
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	# %355 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %356 = trunc i32 %355 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %357 = load i8*, i8** %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %356, i8* %357
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %358 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %359 = lshr i32 %358, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %360 = trunc i32 %359 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %361 = load i8*, i8** %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %362 = getelementptr i8, i8* %361, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %360, i8* %362
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %363 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %364 = lshr i32 %363, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %365 = trunc i32 %364 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %366 = load i8*, i8** %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %367 = getelementptr i8, i8* %366, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %365, i8* %367
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %368 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %369 = lshr i32 %368, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %370 = trunc i32 %369 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %371 = load i8*, i8** %22
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %372 = getelementptr i8, i8* %371, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %370, i8* %372
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %373 = load i8*, i8** %26
	movq	-192(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %374 = getelementptr i8, i8* %373, i64 4
	movq	%r8, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %375 = load i64, i64* %27
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %376 = lshr i64 %375, 32
	movq	%r8, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %r8
	# %377 = trunc i64 %376 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %374, i8** %24
	movq	%r9, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %377, i32* %25
	movq	%r8, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# %378 = load i32, i32* %25
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %379 = trunc i32 %378 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %380 = load i8*, i8** %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %379, i8* %380
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %381 = load i32, i32* %25
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %382 = lshr i32 %381, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %383 = trunc i32 %382 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %384 = load i8*, i8** %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %385 = getelementptr i8, i8* %384, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %383, i8* %385
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %386 = load i32, i32* %25
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %387 = lshr i32 %386, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %388 = trunc i32 %387 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %389 = load i8*, i8** %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %390 = getelementptr i8, i8* %389, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %388, i8* %390
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %391 = load i32, i32* %25
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %392 = lshr i32 %391, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %393 = trunc i32 %392 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %394 = load i8*, i8** %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %395 = getelementptr i8, i8* %394, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %393, i8* %395
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %396 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %397 = getelementptr i8, i8* %396, i64 40
	movq	%r8, %rcx
	movq	$40, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %398 = load i64, i64* %78
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# store i8* %397, i8** %32
	movq	%r8, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %398, i64* %33
	movq	%r9, %rax
	movq	-248(%rbp), %rcx
	movq	%rax, (%rcx)
	# %399 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %400 = load i64, i64* %33
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %401 = trunc i64 %400 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %399, i8** %28
	movq	%r9, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %401, i32* %29
	movq	%r8, %rax
	movq	-216(%rbp), %rcx
	movl	%eax, (%rcx)
	# %402 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %403 = trunc i32 %402 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %404 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %403, i8* %404
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %405 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %406 = lshr i32 %405, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %407 = trunc i32 %406 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %408 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %409 = getelementptr i8, i8* %408, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %407, i8* %409
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %410 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %411 = lshr i32 %410, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %412 = trunc i32 %411 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %413 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %414 = getelementptr i8, i8* %413, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %412, i8* %414
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %415 = load i32, i32* %29
	movq	-216(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %416 = lshr i32 %415, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %417 = trunc i32 %416 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %418 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %419 = getelementptr i8, i8* %418, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %417, i8* %419
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %420 = load i8*, i8** %32
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %421 = getelementptr i8, i8* %420, i64 4
	movq	%r8, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %422 = load i64, i64* %33
	movq	-248(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %423 = lshr i64 %422, 32
	movq	%r8, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %r8
	# %424 = trunc i64 %423 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %421, i8** %30
	movq	%r9, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %424, i32* %31
	movq	%r8, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %425 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %426 = trunc i32 %425 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %427 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %426, i8* %427
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %428 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %429 = lshr i32 %428, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %430 = trunc i32 %429 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %431 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %432 = getelementptr i8, i8* %431, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %430, i8* %432
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %433 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %434 = lshr i32 %433, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %435 = trunc i32 %434 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %436 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %437 = getelementptr i8, i8* %436, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %435, i8* %437
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %438 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %439 = lshr i32 %438, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %440 = trunc i32 %439 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %441 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %442 = getelementptr i8, i8* %441, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %440, i8* %442
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %443 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %444 = getelementptr i8, i8* %443, i64 48
	movq	%r8, %rcx
	movq	$48, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %445 = load i64, i64* %77
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8* %444, i8** %38
	movq	%r9, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %445, i64* %39
	movq	%r8, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# %446 = load i8*, i8** %38
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %447 = load i64, i64* %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %448 = trunc i64 %447 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %446, i8** %34
	movq	%r9, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %448, i32* %35
	movq	%r8, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# %449 = load i32, i32* %35
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %450 = trunc i32 %449 to i8
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %451 = load i8*, i8** %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# store i8 %450, i8* %451
	movq	%r8, %rax
	movq	%r9, %rcx
	movb	%al, (%rcx)
	# %452 = load i32, i32* %35
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %453 = lshr i32 %452, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %454 = trunc i32 %453 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %455 = load i8*, i8** %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %456 = getelementptr i8, i8* %455, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %454, i8* %456
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %457 = load i32, i32* %35
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %458 = lshr i32 %457, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %459 = trunc i32 %458 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %460 = load i8*, i8** %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %461 = getelementptr i8, i8* %460, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %459, i8* %461
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %462 = load i32, i32* %35
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %463 = lshr i32 %462, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %464 = trunc i32 %463 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %465 = load i8*, i8** %34
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %466 = getelementptr i8, i8* %465, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %464, i8* %466
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %467 = load i8*, i8** %38
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %468 = getelementptr i8, i8* %467, i64 4
	movq	%r8, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %469 = load i64, i64* %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %470 = lshr i64 %469, 32
	movq	%r8, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %r8
	# %471 = trunc i64 %470 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %468, i8** %36
	movq	%r9, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %471, i32* %37
	movq	%r8, %rax
	movq	-280(%rbp), %rcx
	movl	%eax, (%rcx)
	# %472 = load i32, i32* %37
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %473 = trunc i32 %472 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %474 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %473, i8* %474
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %475 = load i32, i32* %37
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %476 = lshr i32 %475, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %477 = trunc i32 %476 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %478 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %479 = getelementptr i8, i8* %478, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %477, i8* %479
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %480 = load i32, i32* %37
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %481 = lshr i32 %480, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %482 = trunc i32 %481 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %483 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %484 = getelementptr i8, i8* %483, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %482, i8* %484
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %485 = load i32, i32* %37
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %486 = lshr i32 %485, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %487 = trunc i32 %486 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %488 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %489 = getelementptr i8, i8* %488, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %487, i8* %489
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %490 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %491 = getelementptr %struct.mz_zip_archive, i8* %490, i32 0, i32 12
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %492 = load i8*, i8** %491
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %493 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %494 = getelementptr %struct.mz_zip_archive, i8* %493, i32 0, i32 14
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %495 = load i8*, i8** %494
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %496 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %497 = getelementptr %struct.mz_zip_archive, i8* %496, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %498 = load i64, i64* %497
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %499 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %500 = call i64 %492 (i8* %495, i64 %498, i8* %499, i64 56)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	$56, %rax
	pushq	%rax
	movq	%r8, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %501 = icmp ne i64 %500, 56
	movq	%r8, %rax
	movq	$56, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %501, label %502, label %511
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive511
	jmp	mz_zip_writer_finalize_archive502
	.text
mz_zip_writer_finalize_archive502:
	# %503 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %503, i8** %66
	movq	%rdx, %rax
	movq	-488(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %67
	movq	$19, %rax
	movq	-496(%rbp), %rcx
	movl	%eax, (%rcx)
	# %504 = load i8*, i8** %66
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %505 = icmp ne i8* %504, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %505, label %506, label %510
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive510
	jmp	mz_zip_writer_finalize_archive506
	.text
mz_zip_writer_finalize_archive506:
	# %507 = load i32, i32* %67
	movq	-496(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %508 = load i8*, i8** %66
	movq	-488(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %509 = getelementptr %struct.mz_zip_archive, i8* %508, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %507, i32* %509
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %510
	jmp	mz_zip_writer_finalize_archive510
	.text
mz_zip_writer_finalize_archive510:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive511:
	# %512 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %513 = getelementptr %struct.mz_zip_archive, i8* %512, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %514 = load i64, i64* %513
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %515 = add i64 %514, 56
	movq	%r8, %rax
	movq	$56, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# store i64 %515, i64* %513
	movq	%r8, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %516 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# call void @memset (i8* %516, i8 0, i64 256, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$256, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %517 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %518 = getelementptr i8, i8* %517, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %518, i8** %48
	movq	%r8, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 117853008, i32* %49
	movq	$117853008, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# %519 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %520 = trunc i32 %519 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %521 = load i8*, i8** %48
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %520, i8* %521
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %522 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %523 = lshr i32 %522, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %524 = trunc i32 %523 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %525 = load i8*, i8** %48
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %526 = getelementptr i8, i8* %525, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %524, i8* %526
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %527 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %528 = lshr i32 %527, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %529 = trunc i32 %528 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %530 = load i8*, i8** %48
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %531 = getelementptr i8, i8* %530, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %529, i8* %531
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %532 = load i32, i32* %49
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %533 = lshr i32 %532, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %534 = trunc i32 %533 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %535 = load i8*, i8** %48
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %536 = getelementptr i8, i8* %535, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %534, i8* %536
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %537 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %538 = getelementptr i8, i8* %537, i64 8
	movq	%r8, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %539 = load i64, i64* %80
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8* %538, i8** %44
	movq	%r9, %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %539, i64* %45
	movq	%r8, %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# %540 = load i8*, i8** %44
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %541 = load i64, i64* %45
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %542 = trunc i64 %541 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %540, i8** %40
	movq	%r9, %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %542, i32* %41
	movq	%r8, %rax
	movq	-312(%rbp), %rcx
	movl	%eax, (%rcx)
	# %543 = load i32, i32* %41
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %544 = trunc i32 %543 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %545 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %544, i8* %545
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %546 = load i32, i32* %41
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %547 = lshr i32 %546, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %548 = trunc i32 %547 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %549 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %550 = getelementptr i8, i8* %549, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %548, i8* %550
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %551 = load i32, i32* %41
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %552 = lshr i32 %551, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %553 = trunc i32 %552 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %554 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %555 = getelementptr i8, i8* %554, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %553, i8* %555
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %556 = load i32, i32* %41
	movq	-312(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %557 = lshr i32 %556, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %558 = trunc i32 %557 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %559 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %560 = getelementptr i8, i8* %559, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %558, i8* %560
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %561 = load i8*, i8** %44
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %562 = getelementptr i8, i8* %561, i64 4
	movq	%r8, %rcx
	movq	$4, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %563 = load i64, i64* %45
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %564 = lshr i64 %563, 32
	movq	%r8, %rax
	movq	$32, %rcx
	shrq	%cl,%rax
	movq	%rax, %r8
	# %565 = trunc i64 %564 to i32
	movq	%r8, %rax
	movq	$0, %r8
	movl	%eax, %r8d
	# store i8* %562, i8** %42
	movq	%r9, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %565, i32* %43
	movq	%r8, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# %566 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %567 = trunc i32 %566 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %568 = load i8*, i8** %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %567, i8* %568
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %569 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %570 = lshr i32 %569, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %571 = trunc i32 %570 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %572 = load i8*, i8** %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %573 = getelementptr i8, i8* %572, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %571, i8* %573
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %574 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %575 = lshr i32 %574, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %576 = trunc i32 %575 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %577 = load i8*, i8** %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %578 = getelementptr i8, i8* %577, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %576, i8* %578
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %579 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %580 = lshr i32 %579, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %581 = trunc i32 %580 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %582 = load i8*, i8** %42
	movq	-320(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %583 = getelementptr i8, i8* %582, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %581, i8* %583
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %584 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %585 = getelementptr i8, i8* %584, i64 16
	movq	%r8, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %585, i8** %50
	movq	%r8, %rax
	movq	-384(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %51
	movq	$1, %rax
	movq	-392(%rbp), %rcx
	movl	%eax, (%rcx)
	# %586 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %587 = trunc i32 %586 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %588 = load i8*, i8** %50
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# store i8 %587, i8* %588
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %589 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %590 = lshr i32 %589, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %591 = trunc i32 %590 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %592 = load i8*, i8** %50
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %593 = getelementptr i8, i8* %592, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %591, i8* %593
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %594 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %595 = lshr i32 %594, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %596 = trunc i32 %595 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %597 = load i8*, i8** %50
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %598 = getelementptr i8, i8* %597, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %596, i8* %598
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %599 = load i32, i32* %51
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %600 = lshr i32 %599, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %601 = trunc i32 %600 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %602 = load i8*, i8** %50
	movq	-384(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %603 = getelementptr i8, i8* %602, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %601, i8* %603
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %604 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %605 = getelementptr %struct.mz_zip_archive, i8* %604, i32 0, i32 12
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %606 = load i8*, i8** %605
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %607 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %608 = getelementptr %struct.mz_zip_archive, i8* %607, i32 0, i32 14
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %609 = load i8*, i8** %608
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %610 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %611 = getelementptr %struct.mz_zip_archive, i8* %610, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %612 = load i64, i64* %611
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %613 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %614 = call i64 %606 (i8* %609, i64 %612, i8* %613, i64 20)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	$20, %rax
	pushq	%rax
	movq	%r8, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %615 = icmp ne i64 %614, 20
	movq	%r8, %rax
	movq	$20, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r8
	setne	%r8b
	# br i1 %615, label %616, label %625
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive625
	jmp	mz_zip_writer_finalize_archive616
	.text
mz_zip_writer_finalize_archive616:
	# %617 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %617, i8** %68
	movq	%rdx, %rax
	movq	-504(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %69
	movq	$19, %rax
	movq	-512(%rbp), %rcx
	movl	%eax, (%rcx)
	# %618 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %619 = icmp ne i8* %618, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %619, label %620, label %624
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive624
	jmp	mz_zip_writer_finalize_archive620
	.text
mz_zip_writer_finalize_archive620:
	# %621 = load i32, i32* %69
	movq	-512(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %622 = load i8*, i8** %68
	movq	-504(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %623 = getelementptr %struct.mz_zip_archive, i8* %622, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %621, i32* %623
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %624
	jmp	mz_zip_writer_finalize_archive624
	.text
mz_zip_writer_finalize_archive624:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive625:
	# %626 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %627 = getelementptr %struct.mz_zip_archive, i8* %626, i32 0, i32 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %628 = load i64, i64* %627
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %629 = add i64 %628, 20
	movq	%r8, %rax
	movq	$20, %rcx
	addq	%rcx, %rax
	movq	%rax, %r8
	# store i64 %629, i64* %627
	movq	%r8, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# br label %630
	jmp	mz_zip_writer_finalize_archive630
	.text
mz_zip_writer_finalize_archive630:
	# %631 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# call void @memset (i8* %631, i8 0, i64 256, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$256, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %632 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %633 = getelementptr i8, i8* %632, i64 0
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %633, i8** %52
	movq	%r8, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 101010256, i32* %53
	movq	$101010256, %rax
	movq	-408(%rbp), %rcx
	movl	%eax, (%rcx)
	# %634 = load i32, i32* %53
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %635 = trunc i32 %634 to i8
	movq	%r8, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %636 = load i8*, i8** %52
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# store i8 %635, i8* %636
	movq	%r8, %rax
	movq	%r9, %rcx
	movb	%al, (%rcx)
	# %637 = load i32, i32* %53
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %638 = lshr i32 %637, 8
	movq	%r8, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %639 = trunc i32 %638 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %640 = load i8*, i8** %52
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %641 = getelementptr i8, i8* %640, i64 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %639, i8* %641
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %642 = load i32, i32* %53
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %643 = lshr i32 %642, 16
	movq	%r8, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %644 = trunc i32 %643 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %645 = load i8*, i8** %52
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %646 = getelementptr i8, i8* %645, i64 2
	movq	%r8, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %644, i8* %646
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %647 = load i32, i32* %53
	movq	-408(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %648 = lshr i32 %647, 24
	movq	%r8, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %r8
	# %649 = trunc i32 %648 to i8
	movq	%r8, %rax
	movq	$0, %r9
	movb	%al, %r9b
	# %650 = load i8*, i8** %52
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %651 = getelementptr i8, i8* %650, i64 3
	movq	%r8, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8 %649, i8* %651
	movq	%r9, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# %652 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %653 = getelementptr i8, i8* %652, i64 8
	movq	%r8, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %654 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %655 = getelementptr %struct.mz_zip_archive, i8* %654, i32 0, i32 2
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %656 = load i32, i32* %655
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %r8
	movl	%eax, %r8d
	# %657 = icmp ult i32 65535, %656
	movq	$65535, %rax
	movq	%r8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setb	%r8b
	# br i1 %657, label %658, label %659
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive659
	jmp	mz_zip_writer_finalize_archive658
	.text
mz_zip_writer_finalize_archive658:
	# br label %663
	movq	$65535, %rdi
	jmp	mz_zip_writer_finalize_archive663
	.text
mz_zip_writer_finalize_archive659:
	# %660 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %661 = getelementptr %struct.mz_zip_archive, i8* %660, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %662 = load i32, i32* %661
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# br label %663
	jmp	mz_zip_writer_finalize_archive663
	.text
mz_zip_writer_finalize_archive663:
	# %664 = phi i32 [65535, %658], [%662, %659]
	# %665 = trunc i32 %664 to i16
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# store i8* %653, i8** %6
	movq	%r9, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %665, i16* %7
	movq	%rdi, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# %666 = load i16, i16* %7
	movq	-40(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %667 = trunc i16 %666 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %668 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %667, i8* %668
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %669 = load i16, i16* %7
	movq	-40(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %670 = zext i16 %669 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %671 = ashr i32 %670, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdi
	# %672 = trunc i32 %671 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %673 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %674 = getelementptr i8, i8* %673, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %672, i8* %674
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %675 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %676 = getelementptr i8, i8* %675, i64 10
	movq	%rdi, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %677 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %678 = getelementptr %struct.mz_zip_archive, i8* %677, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %679 = load i32, i32* %678
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %680 = icmp ult i32 65535, %679
	movq	$65535, %rax
	movq	%rdi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setb	%dil
	# br i1 %680, label %681, label %682
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive682
	jmp	mz_zip_writer_finalize_archive681
	.text
mz_zip_writer_finalize_archive681:
	# br label %686
	movq	$65535, %rsi
	jmp	mz_zip_writer_finalize_archive686
	.text
mz_zip_writer_finalize_archive682:
	# %683 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %684 = getelementptr %struct.mz_zip_archive, i8* %683, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %685 = load i32, i32* %684
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# br label %686
	jmp	mz_zip_writer_finalize_archive686
	.text
mz_zip_writer_finalize_archive686:
	# %687 = phi i32 [65535, %681], [%685, %682]
	# %688 = trunc i32 %687 to i16
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# store i8* %676, i8** %8
	movq	%r8, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %688, i16* %9
	movq	%rsi, %rax
	movq	-56(%rbp), %rcx
	movq	%rax, (%rcx)
	# %689 = load i16, i16* %9
	movq	-56(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %690 = trunc i16 %689 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %691 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %690, i8* %691
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %692 = load i16, i16* %9
	movq	-56(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %693 = zext i16 %692 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %694 = ashr i32 %693, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rsi
	# %695 = trunc i32 %694 to i8
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %696 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %697 = getelementptr i8, i8* %696, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %695, i8* %697
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %698 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %699 = getelementptr i8, i8* %698, i64 12
	movq	%rsi, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %700 = load i64, i64* %78
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %701 = icmp ult i64 4294967295, %700
	movq	$4294967295, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %701, label %702, label %703
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive703
	jmp	mz_zip_writer_finalize_archive702
	.text
mz_zip_writer_finalize_archive702:
	# br label %705
	movq	$4294967295, %rbx
	jmp	mz_zip_writer_finalize_archive705
	.text
mz_zip_writer_finalize_archive703:
	# %704 = load i64, i64* %78
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %705
	jmp	mz_zip_writer_finalize_archive705
	.text
mz_zip_writer_finalize_archive705:
	# %706 = phi i64 [4294967295, %702], [%704, %703]
	# %707 = trunc i64 %706 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i8* %699, i8** %54
	movq	%rdi, %rax
	movq	-416(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %707, i32* %55
	movq	%rbx, %rax
	movq	-424(%rbp), %rcx
	movl	%eax, (%rcx)
	# %708 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %709 = trunc i32 %708 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %710 = load i8*, i8** %54
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %709, i8* %710
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %711 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %712 = lshr i32 %711, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %713 = trunc i32 %712 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %714 = load i8*, i8** %54
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %715 = getelementptr i8, i8* %714, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %713, i8* %715
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %716 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %717 = lshr i32 %716, 16
	movq	%rbx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %718 = trunc i32 %717 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %719 = load i8*, i8** %54
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %720 = getelementptr i8, i8* %719, i64 2
	movq	%rbx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %718, i8* %720
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %721 = load i32, i32* %55
	movq	-424(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %722 = lshr i32 %721, 24
	movq	%rbx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %723 = trunc i32 %722 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %724 = load i8*, i8** %54
	movq	-416(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %725 = getelementptr i8, i8* %724, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %723, i8* %725
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %726 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %727 = getelementptr i8, i8* %726, i64 16
	movq	%rbx, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %728 = load i64, i64* %77
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %729 = icmp ult i64 4294967295, %728
	movq	$4294967295, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %729, label %730, label %731
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive731
	jmp	mz_zip_writer_finalize_archive730
	.text
mz_zip_writer_finalize_archive730:
	# br label %733
	movq	$4294967295, %rdx
	jmp	mz_zip_writer_finalize_archive733
	.text
mz_zip_writer_finalize_archive731:
	# %732 = load i64, i64* %77
	movq	-576(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %733
	jmp	mz_zip_writer_finalize_archive733
	.text
mz_zip_writer_finalize_archive733:
	# %734 = phi i64 [4294967295, %730], [%732, %731]
	# %735 = trunc i64 %734 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %727, i8** %56
	movq	%rsi, %rax
	movq	-432(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %735, i32* %57
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movl	%eax, (%rcx)
	# %736 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %737 = trunc i32 %736 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %738 = load i8*, i8** %56
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %737, i8* %738
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %739 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %740 = lshr i32 %739, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %741 = trunc i32 %740 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %742 = load i8*, i8** %56
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %743 = getelementptr i8, i8* %742, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %741, i8* %743
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %744 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %745 = lshr i32 %744, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %746 = trunc i32 %745 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %747 = load i8*, i8** %56
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %748 = getelementptr i8, i8* %747, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %746, i8* %748
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %749 = load i32, i32* %57
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %750 = lshr i32 %749, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %751 = trunc i32 %750 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %752 = load i8*, i8** %56
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %753 = getelementptr i8, i8* %752, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %751, i8* %753
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %754 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %755 = getelementptr %struct.mz_zip_archive, i8* %754, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %756 = load i8*, i8** %755
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %757 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %758 = getelementptr %struct.mz_zip_archive, i8* %757, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %759 = load i8*, i8** %758
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %760 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %761 = getelementptr %struct.mz_zip_archive, i8* %760, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %762 = load i64, i64* %761
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %763 = getelementptr [256 x i8], i8* %79, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %764 = call i64 %756 (i8* %759, i64 %762, i8* %763, i64 22)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$22, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %765 = icmp ne i64 %764, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %765, label %766, label %775
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive775
	jmp	mz_zip_writer_finalize_archive766
	.text
mz_zip_writer_finalize_archive766:
	# %767 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %767, i8** %70
	movq	%rdx, %rax
	movq	-520(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 19, i32* %71
	movq	$19, %rax
	movq	-528(%rbp), %rcx
	movl	%eax, (%rcx)
	# %768 = load i8*, i8** %70
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %769 = icmp ne i8* %768, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %769, label %770, label %774
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive774
	jmp	mz_zip_writer_finalize_archive770
	.text
mz_zip_writer_finalize_archive770:
	# %771 = load i32, i32* %71
	movq	-528(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %772 = load i8*, i8** %70
	movq	-520(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %773 = getelementptr %struct.mz_zip_archive, i8* %772, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %771, i32* %773
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %774
	jmp	mz_zip_writer_finalize_archive774
	.text
mz_zip_writer_finalize_archive774:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive775:
	# %776 = load i8*, i8** %76
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %777 = getelementptr %struct.mz_zip_internal_state_tag, i8* %776, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %778 = load i8*, i8** %777
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %779 = icmp ne i8* %778, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %779, label %780, label %795
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive795
	jmp	mz_zip_writer_finalize_archive780
	.text
mz_zip_writer_finalize_archive780:
	# %781 = load i8*, i8** %76
	movq	-568(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %782 = getelementptr %struct.mz_zip_internal_state_tag, i8* %781, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %783 = load i8*, i8** %782
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %784 = call i32 @fflush (i8* %783)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_fflush
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %785 = icmp eq i32 %784, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %785, label %786, label %795
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive795
	jmp	mz_zip_writer_finalize_archive786
	.text
mz_zip_writer_finalize_archive786:
	# %787 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %787, i8** %72
	movq	%rdx, %rax
	movq	-536(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 21, i32* %73
	movq	$21, %rax
	movq	-544(%rbp), %rcx
	movl	%eax, (%rcx)
	# %788 = load i8*, i8** %72
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %789 = icmp ne i8* %788, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %789, label %790, label %794
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_archive794
	jmp	mz_zip_writer_finalize_archive790
	.text
mz_zip_writer_finalize_archive790:
	# %791 = load i32, i32* %73
	movq	-544(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %792 = load i8*, i8** %72
	movq	-536(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %793 = getelementptr %struct.mz_zip_archive, i8* %792, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %791, i32* %793
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %794
	jmp	mz_zip_writer_finalize_archive794
	.text
mz_zip_writer_finalize_archive794:
	# store i32 0, i32* %74
	movq	$0, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive795:
	# %796 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %797 = getelementptr %struct.mz_zip_archive, i8* %796, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %798 = load i64, i64* %797
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %799 = add i64 %798, 22
	movq	%rdx, %rax
	movq	$22, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %799, i64* %797
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %800 = load i8*, i8** %75
	movq	-560(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %801 = getelementptr %struct.mz_zip_archive, i8* %800, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 3, i32* %801
	movq	$3, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %74
	movq	$1, %rax
	movq	-552(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %802
	jmp	mz_zip_writer_finalize_archive802
	.text
mz_zip_writer_finalize_archive802:
	# %803 = load i32, i32* %74
	movq	-552(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %803
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_finalize_heap_archive
_mz_zip_writer_finalize_heap_archive:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%r14
	popq	%r15
	popq	-8(%rbp)
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %11
	movq	-8(%rbp), %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %12
	movq	%r15, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %13
	movq	%r14, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %14 = load i8*, i8** %12
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %15 = icmp ne i8* %14, null
	movq	%r14, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r14
	setne	%r14b
	# br i1 %15, label %16, label %19
	movq	%r14, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive19
	jmp	mz_zip_writer_finalize_heap_archive16
	.text
mz_zip_writer_finalize_heap_archive16:
	# %17 = load i8*, i8** %13
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r14
	# %18 = icmp ne i8* %17, null
	movq	%r14, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r14
	setne	%r14b
	# br i1 %18, label %28, label %19
	movq	%r14, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive19
	jmp	mz_zip_writer_finalize_heap_archive28
	.text
mz_zip_writer_finalize_heap_archive19:
	# %20 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %20, i8** %4
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %5
	movq	$24, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %21 = load i8*, i8** %4
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %22 = icmp ne i8* %21, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %22, label %23, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive27
	jmp	mz_zip_writer_finalize_heap_archive23
	.text
mz_zip_writer_finalize_heap_archive23:
	# %24 = load i32, i32* %5
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %25 = load i8*, i8** %4
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = getelementptr %struct.mz_zip_archive, i8* %25, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %24, i32* %26
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %27
	jmp	mz_zip_writer_finalize_heap_archive27
	.text
mz_zip_writer_finalize_heap_archive27:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %91
	jmp	mz_zip_writer_finalize_heap_archive91
	.text
mz_zip_writer_finalize_heap_archive28:
	# %29 = load i8*, i8** %12
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# store i8* null, i8** %29
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %30 = load i8*, i8** %13
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# store i64 0, i64* %30
	movq	$0, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %31 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %32 = icmp ne i8* %31, null
	movq	%r12, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r12
	setne	%r12b
	# br i1 %32, label %33, label %38
	movq	%r12, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive38
	jmp	mz_zip_writer_finalize_heap_archive33
	.text
mz_zip_writer_finalize_heap_archive33:
	# %34 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %35 = getelementptr %struct.mz_zip_archive, i8* %34, i32 0, i32 15
	movq	%r12, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r12
	# %36 = load i8*, i8** %35
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %37 = icmp ne i8* %36, null
	movq	%r12, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r12
	setne	%r12b
	# br i1 %37, label %47, label %38
	movq	%r12, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive38
	jmp	mz_zip_writer_finalize_heap_archive47
	.text
mz_zip_writer_finalize_heap_archive38:
	# %39 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %39, i8** %6
	movq	%rdx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %7
	movq	$24, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %40 = load i8*, i8** %6
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = icmp ne i8* %40, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %41, label %42, label %46
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive46
	jmp	mz_zip_writer_finalize_heap_archive42
	.text
mz_zip_writer_finalize_heap_archive42:
	# %43 = load i32, i32* %7
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %44 = load i8*, i8** %6
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = getelementptr %struct.mz_zip_archive, i8* %44, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %43, i32* %45
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	mz_zip_writer_finalize_heap_archive46
	.text
mz_zip_writer_finalize_heap_archive46:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %91
	jmp	mz_zip_writer_finalize_heap_archive91
	.text
mz_zip_writer_finalize_heap_archive47:
	# %48 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %49 = getelementptr %struct.mz_zip_archive, i8* %48, i32 0, i32 12
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %50 = load i8*, i8** %49
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %51 = icmp ne i8* %50, @mz_zip_heap_write_func
	movq	%r10, %rax
	leaq	_mz_zip_heap_write_func(%rip), %rcx
	cmpq	%rcx, %rax
	movq	$0, %r10
	setne	%r10b
	# br i1 %51, label %52, label %61
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive61
	jmp	mz_zip_writer_finalize_heap_archive52
	.text
mz_zip_writer_finalize_heap_archive52:
	# %53 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %53, i8** %8
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %9
	movq	$24, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %54 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %55 = icmp ne i8* %54, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %55, label %56, label %60
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive60
	jmp	mz_zip_writer_finalize_heap_archive56
	.text
mz_zip_writer_finalize_heap_archive56:
	# %57 = load i32, i32* %9
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %58 = load i8*, i8** %8
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = getelementptr %struct.mz_zip_archive, i8* %58, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %57, i32* %59
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %60
	jmp	mz_zip_writer_finalize_heap_archive60
	.text
mz_zip_writer_finalize_heap_archive60:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %91
	jmp	mz_zip_writer_finalize_heap_archive91
	.text
mz_zip_writer_finalize_heap_archive61:
	# %62 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %63 = call i32 @mz_zip_writer_finalize_archive (i8* %62)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_finalize_archive
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %r8
	# %64 = icmp ne i32 %63, 0
	movq	%r8, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# br i1 %64, label %66, label %65
	movq	%r8, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_finalize_heap_archive65
	jmp	mz_zip_writer_finalize_heap_archive66
	.text
mz_zip_writer_finalize_heap_archive65:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %91
	jmp	mz_zip_writer_finalize_heap_archive91
	.text
mz_zip_writer_finalize_heap_archive66:
	# %67 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %68 = getelementptr %struct.mz_zip_archive, i8* %67, i32 0, i32 15
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %69 = load i8*, i8** %68
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %70 = getelementptr %struct.mz_zip_internal_state_tag, i8* %69, i32 0, i32 8
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %71 = load i8*, i8** %70
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %72 = load i8*, i8** %12
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %71, i8** %72
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %73 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %74 = getelementptr %struct.mz_zip_archive, i8* %73, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %75 = load i8*, i8** %74
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %76 = getelementptr %struct.mz_zip_internal_state_tag, i8* %75, i32 0, i32 9
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %77 = load i64, i64* %76
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %78 = load i8*, i8** %13
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %77, i64* %78
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %79 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %80 = getelementptr %struct.mz_zip_archive, i8* %79, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %81 = load i8*, i8** %80
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %82 = getelementptr %struct.mz_zip_internal_state_tag, i8* %81, i32 0, i32 8
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* null, i8** %82
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %83 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %84 = getelementptr %struct.mz_zip_archive, i8* %83, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %85 = load i8*, i8** %84
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %86 = getelementptr %struct.mz_zip_internal_state_tag, i8* %85, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %86
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %87 = load i8*, i8** %11
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = getelementptr %struct.mz_zip_archive, i8* %87, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %89 = load i8*, i8** %88
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %90 = getelementptr %struct.mz_zip_internal_state_tag, i8* %89, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 0, i64* %90
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %10
	movq	$1, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %91
	jmp	mz_zip_writer_finalize_heap_archive91
	.text
mz_zip_writer_finalize_heap_archive91:
	# %92 = load i32, i32* %10
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %92
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_add_mem_to_archive_file_in_place
_mz_zip_add_mem_to_archive_file_in_place:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$16, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%rdx
	popq	%r15
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %13 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %rsi
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %8
	movq	-8(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %9
	movq	-16(%rbp), %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %10
	movq	%r15, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %11
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* %4, i8** %12
	movq	%r14, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i16 %5, i16* %13
	movq	%r13, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 %6, i32* %14
	movq	%r12, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %15 = load i8*, i8** %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %16 = load i8*, i8** %9
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %17 = load i8*, i8** %10
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %18 = load i64, i64* %11
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %19 = load i8*, i8** %12
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %20 = load i16, i16* %13
	movq	%rsi, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %21 = load i32, i32* %14
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %22 = call i32 @mz_zip_add_mem_to_archive_file_in_place_v2 (i8* %15, i8* %16, i8* %17, i64 %18, i8* %19, i16 %20, i32 %21, i8* null)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r9, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_add_mem_to_archive_file_in_place_v2
	addq	$16, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %22
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_add_mem_to_archive_file_in_place_v2
_mz_zip_add_mem_to_archive_file_in_place_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$104, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	popq	-56(%rbp)
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -72(%rbp)
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -80(%rbp)
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %13 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %15 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -96(%rbp)
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %20 = alloca %struct.mz_zip_archive
	subq	$112, %rsp
	movq	%rsp, %r8
	# %21 = alloca %struct.stat
	subq	$140, %rsp
	movq	%rsp, %rdi
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %10
	movq	-8(%rbp), %rax
	movq	-72(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %11
	movq	-16(%rbp), %rax
	movq	-80(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %12
	movq	-24(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %13
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i8* %4, i8** %14
	movq	-32(%rbp), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i16 %5, i16* %15
	movq	-40(%rbp), %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %6, i32* %16
	movq	-48(%rbp), %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %7, i8** %17
	movq	-56(%rbp), %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %19
	movq	$0, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %22
	movq	$0, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# call void @mz_zip_zero_struct (i8* %20)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_zero_struct
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %24 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %25 = icmp slt i32 %24, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %25, label %26, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v227
	jmp	mz_zip_add_mem_to_archive_file_in_place_v226
	.text
mz_zip_add_mem_to_archive_file_in_place_v226:
	# store i32 6, i32* %16
	movq	$6, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %27
	jmp	mz_zip_add_mem_to_archive_file_in_place_v227
	.text
mz_zip_add_mem_to_archive_file_in_place_v227:
	# %28 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = icmp ne i8* %28, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %29, label %30, label %50
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v250
	jmp	mz_zip_add_mem_to_archive_file_in_place_v230
	.text
mz_zip_add_mem_to_archive_file_in_place_v230:
	# %31 = load i8*, i8** %11
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %32 = icmp ne i8* %31, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %32, label %33, label %50
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v250
	jmp	mz_zip_add_mem_to_archive_file_in_place_v233
	.text
mz_zip_add_mem_to_archive_file_in_place_v233:
	# %34 = load i64, i64* %13
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %35 = icmp ne i64 %34, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %35, label %36, label %39
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v239
	jmp	mz_zip_add_mem_to_archive_file_in_place_v236
	.text
mz_zip_add_mem_to_archive_file_in_place_v236:
	# %37 = load i8*, i8** %12
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %38 = icmp ne i8* %37, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %38, label %39, label %50
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v250
	jmp	mz_zip_add_mem_to_archive_file_in_place_v239
	.text
mz_zip_add_mem_to_archive_file_in_place_v239:
	# %40 = load i16, i16* %15
	movq	-96(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %41 = zext i16 %40 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %42 = icmp ne i32 %41, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %42, label %43, label %46
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v246
	jmp	mz_zip_add_mem_to_archive_file_in_place_v243
	.text
mz_zip_add_mem_to_archive_file_in_place_v243:
	# %44 = load i8*, i8** %14
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %45 = icmp ne i8* %44, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %45, label %46, label %50
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v250
	jmp	mz_zip_add_mem_to_archive_file_in_place_v246
	.text
mz_zip_add_mem_to_archive_file_in_place_v246:
	# %47 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %48 = and i32 %47, 15
	movq	%rdx, %rax
	movq	$15, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %49 = icmp ugt i32 %48, 10
	movq	%rdx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %49, label %50, label %56
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v256
	jmp	mz_zip_add_mem_to_archive_file_in_place_v250
	.text
mz_zip_add_mem_to_archive_file_in_place_v250:
	# %51 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %52 = icmp ne i8* %51, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %52, label %53, label %55
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v255
	jmp	mz_zip_add_mem_to_archive_file_in_place_v253
	.text
mz_zip_add_mem_to_archive_file_in_place_v253:
	# %54 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 24, i32* %54
	movq	$24, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %55
	jmp	mz_zip_add_mem_to_archive_file_in_place_v255
	.text
mz_zip_add_mem_to_archive_file_in_place_v255:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %161
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2161
	.text
mz_zip_add_mem_to_archive_file_in_place_v256:
	# %57 = load i8*, i8** %11
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = call i32 @mz_zip_writer_validate_archive_name (i8* %57)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_validate_archive_name
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %59 = icmp ne i32 %58, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %59, label %66, label %60
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v260
	jmp	mz_zip_add_mem_to_archive_file_in_place_v266
	.text
mz_zip_add_mem_to_archive_file_in_place_v260:
	# %61 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = icmp ne i8* %61, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %62, label %63, label %65
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v265
	jmp	mz_zip_add_mem_to_archive_file_in_place_v263
	.text
mz_zip_add_mem_to_archive_file_in_place_v263:
	# %64 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 25, i32* %64
	movq	$25, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %65
	jmp	mz_zip_add_mem_to_archive_file_in_place_v265
	.text
mz_zip_add_mem_to_archive_file_in_place_v265:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %161
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2161
	.text
mz_zip_add_mem_to_archive_file_in_place_v266:
	# %67 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %68 = call i32 @stat (i8* %67, i8* %21)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_stat
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %69 = icmp ne i32 %68, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %69, label %70, label %84
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v284
	jmp	mz_zip_add_mem_to_archive_file_in_place_v270
	.text
mz_zip_add_mem_to_archive_file_in_place_v270:
	# %71 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %72 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %73 = call i32 @mz_zip_writer_init_file_v2 (i8* %20, i8* %71, i64 0, i32 %72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %74 = icmp ne i32 %73, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %74, label %83, label %75
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v275
	jmp	mz_zip_add_mem_to_archive_file_in_place_v283
	.text
mz_zip_add_mem_to_archive_file_in_place_v275:
	# %76 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %77 = icmp ne i8* %76, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %77, label %78, label %82
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v282
	jmp	mz_zip_add_mem_to_archive_file_in_place_v278
	.text
mz_zip_add_mem_to_archive_file_in_place_v278:
	# %79 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 5
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %80 = load i32, i32* %79
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %81 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %80, i32* %81
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %82
	jmp	mz_zip_add_mem_to_archive_file_in_place_v282
	.text
mz_zip_add_mem_to_archive_file_in_place_v282:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %161
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2161
	.text
mz_zip_add_mem_to_archive_file_in_place_v283:
	# store i32 1, i32* %19
	movq	$1, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %113
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2113
	.text
mz_zip_add_mem_to_archive_file_in_place_v284:
	# %85 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %86 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %87 = or i32 %86, 2048
	movq	%rdx, %rax
	movq	$2048, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %88 = call i32 @mz_zip_reader_init_file_v2 (i8* %20, i8* %85, i32 %87, i64 0, i64 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %89 = icmp ne i32 %88, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %89, label %98, label %90
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v290
	jmp	mz_zip_add_mem_to_archive_file_in_place_v298
	.text
mz_zip_add_mem_to_archive_file_in_place_v290:
	# %91 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %92 = icmp ne i8* %91, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %92, label %93, label %97
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v297
	jmp	mz_zip_add_mem_to_archive_file_in_place_v293
	.text
mz_zip_add_mem_to_archive_file_in_place_v293:
	# %94 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 5
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %95 = load i32, i32* %94
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %96 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %95, i32* %96
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %97
	jmp	mz_zip_add_mem_to_archive_file_in_place_v297
	.text
mz_zip_add_mem_to_archive_file_in_place_v297:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %161
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2161
	.text
mz_zip_add_mem_to_archive_file_in_place_v298:
	# %99 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %100 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %101 = call i32 @mz_zip_writer_init_from_reader_v2 (i8* %20, i8* %99, i32 %100)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_init_from_reader_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %102 = icmp ne i32 %101, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %102, label %112, label %103
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2103
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2112
	.text
mz_zip_add_mem_to_archive_file_in_place_v2103:
	# %104 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %105 = icmp ne i8* %104, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %105, label %106, label %110
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2110
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2106
	.text
mz_zip_add_mem_to_archive_file_in_place_v2106:
	# %107 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 5
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %108 = load i32, i32* %107
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %109 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %108, i32* %109
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %110
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2110
	.text
mz_zip_add_mem_to_archive_file_in_place_v2110:
	# %111 = call i32 @mz_zip_reader_end_internal (i8* %20, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %161
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2161
	.text
mz_zip_add_mem_to_archive_file_in_place_v2112:
	# br label %113
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2113
	.text
mz_zip_add_mem_to_archive_file_in_place_v2113:
	# %114 = load i8*, i8** %11
	movq	-80(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %115 = load i8*, i8** %12
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %116 = load i64, i64* %13
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %117 = load i8*, i8** %14
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = load i16, i16* %15
	movq	-96(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %r12
	movw	%ax, %r12w
	# %119 = load i32, i32* %16
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r13
	movl	%eax, %r13d
	# %120 = call i32 @mz_zip_writer_add_mem_ex (i8* %20, i8* %114, i8* %115, i64 %116, i8* %117, i16 %118, i32 %119, i64 0, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	40(%rbp)
	popq	32(%rbp)
	popq	24(%rbp)
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_add_mem_ex
	addq	$24, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %120, i32* %18
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %121 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 5
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %122 = load i32, i32* %121
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %122, i32* %22
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %123 = call i32 @mz_zip_writer_finalize_archive (i8* %20)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_finalize_archive
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %124 = icmp ne i32 %123, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %124, label %132, label %125
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2125
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2132
	.text
mz_zip_add_mem_to_archive_file_in_place_v2125:
	# %126 = load i32, i32* %22
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %127 = icmp ne i32 %126, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %127, label %131, label %128
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2128
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2131
	.text
mz_zip_add_mem_to_archive_file_in_place_v2128:
	# %129 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 5
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %130 = load i32, i32* %129
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %130, i32* %22
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %131
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2131
	.text
mz_zip_add_mem_to_archive_file_in_place_v2131:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %132
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2132
	.text
mz_zip_add_mem_to_archive_file_in_place_v2132:
	# %133 = load i32, i32* %18
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %134 = call i32 @mz_zip_writer_end_internal (i8* %20, i32 %133)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %135 = icmp ne i32 %134, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %135, label %143, label %136
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2136
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2143
	.text
mz_zip_add_mem_to_archive_file_in_place_v2136:
	# %137 = load i32, i32* %22
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %138 = icmp ne i32 %137, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %138, label %142, label %139
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2139
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2142
	.text
mz_zip_add_mem_to_archive_file_in_place_v2139:
	# %140 = getelementptr %struct.mz_zip_archive, i8* %20, i32 0, i32 5
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %141 = load i32, i32* %140
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %141, i32* %22
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %142
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2142
	.text
mz_zip_add_mem_to_archive_file_in_place_v2142:
	# store i32 0, i32* %18
	movq	$0, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %143
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2143
	.text
mz_zip_add_mem_to_archive_file_in_place_v2143:
	# %144 = load i32, i32* %18
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %145 = icmp ne i32 %144, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %145, label %153, label %146
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2146
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2153
	.text
mz_zip_add_mem_to_archive_file_in_place_v2146:
	# %147 = load i32, i32* %19
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %148 = icmp ne i32 %147, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %148, label %149, label %153
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2153
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2149
	.text
mz_zip_add_mem_to_archive_file_in_place_v2149:
	# %150 = load i8*, i8** %10
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %151 = call i32 @remove (i8* %150)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_remove
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %151, i32* %23
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %152 = load i32, i32* %23
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# br label %153
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2153
	.text
mz_zip_add_mem_to_archive_file_in_place_v2153:
	# %154 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %155 = icmp ne i8* %154, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %155, label %156, label %159
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_add_mem_to_archive_file_in_place_v2159
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2156
	.text
mz_zip_add_mem_to_archive_file_in_place_v2156:
	# %157 = load i32, i32* %22
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %158 = load i8*, i8** %17
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %157, i32* %158
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %159
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2159
	.text
mz_zip_add_mem_to_archive_file_in_place_v2159:
	# %160 = load i32, i32* %18
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %160, i32* %9
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %161
	jmp	mz_zip_add_mem_to_archive_file_in_place_v2161
	.text
mz_zip_add_mem_to_archive_file_in_place_v2161:
	# %162 = load i32, i32* %9
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %162
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_extract_archive_file_to_heap_v2
_mz_zip_extract_archive_file_to_heap_v2:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$32, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	popq	%r15
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r14
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %15 = alloca %struct.mz_zip_archive
	subq	$112, %rsp
	movq	%rsp, %rsi
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %8
	movq	-8(%rbp), %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %9
	movq	-16(%rbp), %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %10
	movq	-24(%rbp), %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i8* %3, i8** %11
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 %4, i32* %12
	movq	-32(%rbp), %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# store i8* %5, i8** %13
	movq	%r15, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8* null, i8** %16
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %17 = load i8*, i8** %11
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = icmp ne i8* %17, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %18, label %19, label %21
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_extract_archive_file_to_heap_v221
	jmp	mz_zip_extract_archive_file_to_heap_v219
	.text
mz_zip_extract_archive_file_to_heap_v219:
	# %20 = load i8*, i8** %11
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 0, i64* %20
	movq	$0, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %21
	jmp	mz_zip_extract_archive_file_to_heap_v221
	.text
mz_zip_extract_archive_file_to_heap_v221:
	# %22 = load i8*, i8** %8
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = icmp ne i8* %22, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %23, label %24, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_extract_archive_file_to_heap_v227
	jmp	mz_zip_extract_archive_file_to_heap_v224
	.text
mz_zip_extract_archive_file_to_heap_v224:
	# %25 = load i8*, i8** %9
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = icmp ne i8* %25, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %26, label %33, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_extract_archive_file_to_heap_v227
	jmp	mz_zip_extract_archive_file_to_heap_v233
	.text
mz_zip_extract_archive_file_to_heap_v227:
	# %28 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %29 = icmp ne i8* %28, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %29, label %30, label %32
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_extract_archive_file_to_heap_v232
	jmp	mz_zip_extract_archive_file_to_heap_v230
	.text
mz_zip_extract_archive_file_to_heap_v230:
	# %31 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 24, i32* %31
	movq	$24, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %32
	jmp	mz_zip_extract_archive_file_to_heap_v232
	.text
mz_zip_extract_archive_file_to_heap_v232:
	# store i8* null, i8** %7
	movq	$0, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# br label %71
	jmp	mz_zip_extract_archive_file_to_heap_v271
	.text
mz_zip_extract_archive_file_to_heap_v233:
	# call void @mz_zip_zero_struct (i8* %15)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_zero_struct
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %34 = load i8*, i8** %8
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %r13
	# %35 = load i32, i32* %12
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %36 = or i32 %35, 2048
	movq	%rdx, %rax
	movq	$2048, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# %37 = call i32 @mz_zip_reader_init_file_v2 (i8* %15, i8* %34, i32 %36, i64 0, i64 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_init_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %38 = icmp ne i32 %37, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %38, label %47, label %39
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_extract_archive_file_to_heap_v239
	jmp	mz_zip_extract_archive_file_to_heap_v247
	.text
mz_zip_extract_archive_file_to_heap_v239:
	# %40 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = icmp ne i8* %40, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %41, label %42, label %46
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_extract_archive_file_to_heap_v246
	jmp	mz_zip_extract_archive_file_to_heap_v242
	.text
mz_zip_extract_archive_file_to_heap_v242:
	# %43 = getelementptr %struct.mz_zip_archive, i8* %15, i32 0, i32 5
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %44 = load i32, i32* %43
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %45 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %44, i32* %45
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	mz_zip_extract_archive_file_to_heap_v246
	.text
mz_zip_extract_archive_file_to_heap_v246:
	# store i8* null, i8** %7
	movq	$0, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# br label %71
	jmp	mz_zip_extract_archive_file_to_heap_v271
	.text
mz_zip_extract_archive_file_to_heap_v247:
	# %48 = load i8*, i8** %9
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %49 = load i8*, i8** %10
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %50 = load i32, i32* %12
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %51 = call i32 @mz_zip_reader_locate_file_v2 (i8* %15, i8* %48, i8* %49, i32 %50, i8* %14)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%r12, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_locate_file_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %52 = icmp ne i32 %51, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %52, label %53, label %58
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_extract_archive_file_to_heap_v258
	jmp	mz_zip_extract_archive_file_to_heap_v253
	.text
mz_zip_extract_archive_file_to_heap_v253:
	# %54 = load i32, i32* %14
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %r11
	movl	%eax, %r11d
	# %55 = load i8*, i8** %11
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %56 = load i32, i32* %12
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %57 = call i8* @mz_zip_reader_extract_to_heap (i8* %15, i32 %54, i8* %55, i32 %56)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%r11, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_extract_to_heap
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %57, i8** %16
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %58
	jmp	mz_zip_extract_archive_file_to_heap_v258
	.text
mz_zip_extract_archive_file_to_heap_v258:
	# %59 = load i8*, i8** %16
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = icmp ne i8* %59, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# %61 = zext i1 %60 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %62 = call i32 @mz_zip_reader_end_internal (i8* %15, i32 %61)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end_internal
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %63 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %64 = icmp ne i8* %63, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %64, label %65, label %69
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_extract_archive_file_to_heap_v269
	jmp	mz_zip_extract_archive_file_to_heap_v265
	.text
mz_zip_extract_archive_file_to_heap_v265:
	# %66 = getelementptr %struct.mz_zip_archive, i8* %15, i32 0, i32 5
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %67 = load i32, i32* %66
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %68 = load i8*, i8** %13
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i32 %67, i32* %68
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %69
	jmp	mz_zip_extract_archive_file_to_heap_v269
	.text
mz_zip_extract_archive_file_to_heap_v269:
	# %70 = load i8*, i8** %16
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %70, i8** %7
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# br label %71
	jmp	mz_zip_extract_archive_file_to_heap_v271
	.text
mz_zip_extract_archive_file_to_heap_v271:
	# %72 = load i8*, i8** %7
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %72
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_extract_archive_file_to_heap
_mz_zip_extract_archive_file_to_heap:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r9
	popq	%r10
	popq	%r11
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %5
	movq	%r11, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %6
	movq	%r10, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %7
	movq	%r9, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %8
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %9 = load i8*, i8** %5
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %10 = load i8*, i8** %6
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %11 = load i8*, i8** %7
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %12 = load i32, i32* %8
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %13 = call i8* @mz_zip_extract_archive_file_to_heap_v2 (i8* %9, i8* %10, i8* null, i8* %11, i32 %12, i8* null)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r9
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_extract_archive_file_to_heap_v2
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i8* %13
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_mode
_mz_zip_get_mode:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = icmp ne i8* %3, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %4, label %5, label %9
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_mode9
	jmp	mz_zip_get_mode5
	.text
mz_zip_get_mode5:
	# %6 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %7 = getelementptr %struct.mz_zip_archive, i8* %6, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %8 = load i32, i32* %7
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# br label %10
	movq	%rbx, %rdx
	jmp	mz_zip_get_mode10
	.text
mz_zip_get_mode9:
	# br label %10
	movq	$0, %rdx
	jmp	mz_zip_get_mode10
	.text
mz_zip_get_mode10:
	# %11 = phi i32 [%8, %5], [0, %9]
	# ret i32 %11
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_type
_mz_zip_get_type:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = icmp ne i8* %3, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %4, label %5, label %9
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_type9
	jmp	mz_zip_get_type5
	.text
mz_zip_get_type5:
	# %6 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %7 = getelementptr %struct.mz_zip_archive, i8* %6, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %8 = load i32, i32* %7
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# br label %10
	movq	%rbx, %rdx
	jmp	mz_zip_get_type10
	.text
mz_zip_get_type9:
	# br label %10
	movq	$0, %rdx
	jmp	mz_zip_get_type10
	.text
mz_zip_get_type10:
	# %11 = phi i32 [%8, %5], [0, %9]
	# ret i32 %11
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_set_last_error
_mz_zip_set_last_error:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%r9
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# store i8* %0, i8** %4
	movq	%r9, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %5
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %7 = load i8*, i8** %4
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = icmp ne i8* %7, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %8, label %10, label %9
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_set_last_error9
	jmp	mz_zip_set_last_error10
	.text
mz_zip_set_last_error9:
	# store i32 24, i32* %3
	movq	$24, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %18
	jmp	mz_zip_set_last_error18
	.text
mz_zip_set_last_error10:
	# %11 = load i8*, i8** %4
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %12 = getelementptr %struct.mz_zip_archive, i8* %11, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %13 = load i32, i32* %12
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i32 %13, i32* %6
	movq	%rbx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# %14 = load i32, i32* %5
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %15 = load i8*, i8** %4
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %16 = getelementptr %struct.mz_zip_archive, i8* %15, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %14, i32* %16
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %17 = load i32, i32* %6
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i32 %17, i32* %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %18
	jmp	mz_zip_set_last_error18
	.text
mz_zip_set_last_error18:
	# %19 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %19
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_peek_last_error
_mz_zip_peek_last_error:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %7, label %6
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_peek_last_error6
	jmp	mz_zip_peek_last_error7
	.text
mz_zip_peek_last_error6:
	# store i32 24, i32* %2
	movq	$24, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %11
	jmp	mz_zip_peek_last_error11
	.text
mz_zip_peek_last_error7:
	# %8 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %9 = getelementptr %struct.mz_zip_archive, i8* %8, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %10 = load i32, i32* %9
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %10, i32* %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %11
	jmp	mz_zip_peek_last_error11
	.text
mz_zip_peek_last_error11:
	# %12 = load i32, i32* %2
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %12
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_clear_last_error
_mz_zip_clear_last_error:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %2
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = call i32 @mz_zip_set_last_error (i8* %3, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_set_last_error
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %4
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_last_error
_mz_zip_get_last_error:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %5 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %6 = icmp ne i8* %5, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %6, label %8, label %7
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_last_error7
	jmp	mz_zip_get_last_error8
	.text
mz_zip_get_last_error7:
	# store i32 24, i32* %2
	movq	$24, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %15
	jmp	mz_zip_get_last_error15
	.text
mz_zip_get_last_error8:
	# %9 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %10 = getelementptr %struct.mz_zip_archive, i8* %9, i32 0, i32 5
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %11 = load i32, i32* %10
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i32 %11, i32* %4
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %12 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = getelementptr %struct.mz_zip_archive, i8* %12, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %14 = load i32, i32* %4
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %14, i32* %2
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %15
	jmp	mz_zip_get_last_error15
	.text
mz_zip_get_last_error15:
	# %16 = load i32, i32* %2
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %16
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_error_string
_mz_zip_get_error_string:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rsi
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# store i32 %0, i32* %3
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %4 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# switch i32 %4, label %38 [\n    i32 0, label %5\n    i32 1, label %6\n    i32 2, label %7\n    i32 3, label %8\n    i32 4, label %9\n    i32 5, label %10\n    i32 6, label %11\n    i32 7, label %12\n    i32 8, label %13\n    i32 9, label %14\n    i32 10, label %15\n    i32 11, label %16\n    i32 12, label %17\n    i32 13, label %18\n    i32 14, label %19\n    i32 15, label %20\n    i32 16, label %21\n    i32 17, label %22\n    i32 18, label %23\n    i32 19, label %24\n    i32 20, label %25\n    i32 21, label %26\n    i32 22, label %27\n    i32 23, label %28\n    i32 24, label %29\n    i32 25, label %30\n    i32 26, label %31\n    i32 27, label %32\n    i32 28, label %33\n    i32 29, label %34\n    i32 30, label %35\n    i32 31, label %36\n    i32 32, label %37\n  ]
	movq	%rdx, %rax
	movl	$0, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string5
	movl	$1, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string6
	movl	$2, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string7
	movl	$3, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string8
	movl	$4, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string9
	movl	$5, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string10
	movl	$6, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string11
	movl	$7, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string12
	movl	$8, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string13
	movl	$9, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string14
	movl	$10, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string15
	movl	$11, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string16
	movl	$12, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string17
	movl	$13, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string18
	movl	$14, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string19
	movl	$15, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string20
	movl	$16, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string21
	movl	$17, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string22
	movl	$18, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string23
	movl	$19, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string24
	movl	$20, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string25
	movl	$21, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string26
	movl	$22, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string27
	movl	$23, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string28
	movl	$24, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string29
	movl	$25, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string30
	movl	$26, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string31
	movl	$27, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string32
	movl	$28, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string33
	movl	$29, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string34
	movl	$30, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string35
	movl	$31, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string36
	movl	$32, %ecx
	cmpq	%rax, %rcx
	je	mz_zip_get_error_string37
	jmp	mz_zip_get_error_string38
	.text
mz_zip_get_error_string5:
	# store i8* @.str.25, i8** %2
	leaq	_.str.25(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string6:
	# store i8* @.str.26, i8** %2
	leaq	_.str.26(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string7:
	# store i8* @.str.27, i8** %2
	leaq	_.str.27(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string8:
	# store i8* @.str.28, i8** %2
	leaq	_.str.28(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string9:
	# store i8* @.str.29, i8** %2
	leaq	_.str.29(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string10:
	# store i8* @.str.30, i8** %2
	leaq	_.str.30(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string11:
	# store i8* @.str.31, i8** %2
	leaq	_.str.31(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string12:
	# store i8* @.str.32, i8** %2
	leaq	_.str.32(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string13:
	# store i8* @.str.33, i8** %2
	leaq	_.str.33(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string14:
	# store i8* @.str.34, i8** %2
	leaq	_.str.34(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string15:
	# store i8* @.str.35, i8** %2
	leaq	_.str.35(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string16:
	# store i8* @.str.36, i8** %2
	leaq	_.str.36(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string17:
	# store i8* @.str.37, i8** %2
	leaq	_.str.37(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string18:
	# store i8* @.str.38, i8** %2
	leaq	_.str.38(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string19:
	# store i8* @.str.39, i8** %2
	leaq	_.str.39(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string20:
	# store i8* @.str.40, i8** %2
	leaq	_.str.40(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string21:
	# store i8* @.str.41, i8** %2
	leaq	_.str.41(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string22:
	# store i8* @.str.42, i8** %2
	leaq	_.str.42(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string23:
	# store i8* @.str.43, i8** %2
	leaq	_.str.43(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string24:
	# store i8* @.str.44, i8** %2
	leaq	_.str.44(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string25:
	# store i8* @.str.45, i8** %2
	leaq	_.str.45(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string26:
	# store i8* @.str.46, i8** %2
	leaq	_.str.46(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string27:
	# store i8* @.str.47, i8** %2
	leaq	_.str.47(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string28:
	# store i8* @.str.48, i8** %2
	leaq	_.str.48(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string29:
	# store i8* @.str.49, i8** %2
	leaq	_.str.49(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string30:
	# store i8* @.str.50, i8** %2
	leaq	_.str.50(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string31:
	# store i8* @.str.51, i8** %2
	leaq	_.str.51(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string32:
	# store i8* @.str.52, i8** %2
	leaq	_.str.52(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string33:
	# store i8* @.str.53, i8** %2
	leaq	_.str.53(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string34:
	# store i8* @.str.54, i8** %2
	leaq	_.str.54(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string35:
	# store i8* @.str.55, i8** %2
	leaq	_.str.55(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string36:
	# store i8* @.str.56, i8** %2
	leaq	_.str.56(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string37:
	# store i8* @.str.57, i8** %2
	leaq	_.str.57(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string38:
	# br label %39
	jmp	mz_zip_get_error_string39
	.text
mz_zip_get_error_string39:
	# store i8* @.str.58, i8** %2
	leaq	_.str.58(%rip), %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %40
	jmp	mz_zip_get_error_string40
	.text
mz_zip_get_error_string40:
	# %41 = load i8*, i8** %2
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %41
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_is_zip64
_mz_zip_is_zip64:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %6, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_is_zip6411
	jmp	mz_zip_is_zip646
	.text
mz_zip_is_zip646:
	# %7 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = getelementptr %struct.mz_zip_archive, i8* %7, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %9 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %10 = icmp ne i8* %9, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %10, label %12, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_is_zip6411
	jmp	mz_zip_is_zip6412
	.text
mz_zip_is_zip6411:
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %18
	jmp	mz_zip_is_zip6418
	.text
mz_zip_is_zip6412:
	# %13 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.mz_zip_archive, i8* %13, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %15 = load i8*, i8** %14
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = getelementptr %struct.mz_zip_internal_state_tag, i8* %15, i32 0, i32 4
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %17 = load i32, i32* %16
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %17, i32* %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %18
	jmp	mz_zip_is_zip6418
	.text
mz_zip_is_zip6418:
	# %19 = load i32, i32* %2
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %19
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_central_dir_size
_mz_zip_get_central_dir_size:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %6, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_central_dir_size11
	jmp	mz_zip_get_central_dir_size6
	.text
mz_zip_get_central_dir_size6:
	# %7 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = getelementptr %struct.mz_zip_archive, i8* %7, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %9 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %10 = icmp ne i8* %9, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %10, label %12, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_central_dir_size11
	jmp	mz_zip_get_central_dir_size12
	.text
mz_zip_get_central_dir_size11:
	# store i64 0, i64* %2
	movq	$0, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %19
	jmp	mz_zip_get_central_dir_size19
	.text
mz_zip_get_central_dir_size12:
	# %13 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.mz_zip_archive, i8* %13, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %15 = load i8*, i8** %14
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = getelementptr %struct.mz_zip_internal_state_tag, i8* %15, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %17 = getelementptr %struct.mz_zip_array, i8* %16, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %18 = load i64, i64* %17
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %18, i64* %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %19
	jmp	mz_zip_get_central_dir_size19
	.text
mz_zip_get_central_dir_size19:
	# %20 = load i64, i64* %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %20
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_get_num_files
_mz_zip_reader_get_num_files:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %3 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %4 = icmp ne i8* %3, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %4, label %5, label %9
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_num_files9
	jmp	mz_zip_reader_get_num_files5
	.text
mz_zip_reader_get_num_files5:
	# %6 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %7 = getelementptr %struct.mz_zip_archive, i8* %6, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %8 = load i32, i32* %7
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# br label %10
	movq	%rbx, %rdx
	jmp	mz_zip_reader_get_num_files10
	.text
mz_zip_reader_get_num_files9:
	# br label %10
	movq	$0, %rdx
	jmp	mz_zip_reader_get_num_files10
	.text
mz_zip_reader_get_num_files10:
	# %11 = phi i32 [%8, %5], [0, %9]
	# ret i32 %11
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_archive_size
_mz_zip_get_archive_size:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %7, label %6
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_archive_size6
	jmp	mz_zip_get_archive_size7
	.text
mz_zip_get_archive_size6:
	# store i64 0, i64* %2
	movq	$0, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %11
	jmp	mz_zip_get_archive_size11
	.text
mz_zip_get_archive_size7:
	# %8 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %9 = getelementptr %struct.mz_zip_archive, i8* %8, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %10 = load i64, i64* %9
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %10, i64* %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %11
	jmp	mz_zip_get_archive_size11
	.text
mz_zip_get_archive_size11:
	# %12 = load i64, i64* %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %12
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_archive_file_start_offset
_mz_zip_get_archive_file_start_offset:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %6, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_archive_file_start_offset11
	jmp	mz_zip_get_archive_file_start_offset6
	.text
mz_zip_get_archive_file_start_offset6:
	# %7 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = getelementptr %struct.mz_zip_archive, i8* %7, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %9 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %10 = icmp ne i8* %9, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %10, label %12, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_archive_file_start_offset11
	jmp	mz_zip_get_archive_file_start_offset12
	.text
mz_zip_get_archive_file_start_offset11:
	# store i64 0, i64* %2
	movq	$0, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %18
	jmp	mz_zip_get_archive_file_start_offset18
	.text
mz_zip_get_archive_file_start_offset12:
	# %13 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.mz_zip_archive, i8* %13, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %15 = load i8*, i8** %14
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = getelementptr %struct.mz_zip_internal_state_tag, i8* %15, i32 0, i32 7
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$7, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %17 = load i64, i64* %16
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %17, i64* %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %18
	jmp	mz_zip_get_archive_file_start_offset18
	.text
mz_zip_get_archive_file_start_offset18:
	# %19 = load i64, i64* %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %19
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_get_cfile
_mz_zip_get_cfile:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %6, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_cfile11
	jmp	mz_zip_get_cfile6
	.text
mz_zip_get_cfile6:
	# %7 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %8 = getelementptr %struct.mz_zip_archive, i8* %7, i32 0, i32 15
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %9 = load i8*, i8** %8
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %10 = icmp ne i8* %9, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %10, label %12, label %11
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_get_cfile11
	jmp	mz_zip_get_cfile12
	.text
mz_zip_get_cfile11:
	# store i8* null, i8** %2
	movq	$0, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %18
	jmp	mz_zip_get_cfile18
	.text
mz_zip_get_cfile12:
	# %13 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = getelementptr %struct.mz_zip_archive, i8* %13, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %15 = load i8*, i8** %14
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = getelementptr %struct.mz_zip_internal_state_tag, i8* %15, i32 0, i32 6
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$6, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %17 = load i8*, i8** %16
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %17, i8** %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# br label %18
	jmp	mz_zip_get_cfile18
	.text
mz_zip_get_cfile18:
	# %19 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %19
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_read_archive_data
_mz_zip_read_archive_data:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r12
	popq	%r13
	popq	%r14
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %7 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %8
	movq	%r14, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i64 %1, i64* %9
	movq	%r13, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %10
	movq	%r12, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i64 %3, i64* %11
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %12 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = icmp ne i8* %12, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %13, label %14, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_read_archive_data27
	jmp	mz_zip_read_archive_data14
	.text
mz_zip_read_archive_data14:
	# %15 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %16 = getelementptr %struct.mz_zip_archive, i8* %15, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %17 = load i8*, i8** %16
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %18 = icmp ne i8* %17, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %18, label %19, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_read_archive_data27
	jmp	mz_zip_read_archive_data19
	.text
mz_zip_read_archive_data19:
	# %20 = load i8*, i8** %10
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %21 = icmp ne i8* %20, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %21, label %22, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_read_archive_data27
	jmp	mz_zip_read_archive_data22
	.text
mz_zip_read_archive_data22:
	# %23 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %24 = getelementptr %struct.mz_zip_archive, i8* %23, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %25 = load i8*, i8** %24
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %26 = icmp ne i8* %25, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %26, label %37, label %27
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_read_archive_data27
	jmp	mz_zip_read_archive_data37
	.text
mz_zip_read_archive_data27:
	# %28 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %28, i8** %5
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %6
	movq	$24, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %29 = load i8*, i8** %5
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %30 = icmp ne i8* %29, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %30, label %31, label %35
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_read_archive_data35
	jmp	mz_zip_read_archive_data31
	.text
mz_zip_read_archive_data31:
	# %32 = load i32, i32* %6
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %33 = load i8*, i8** %5
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr %struct.mz_zip_archive, i8* %33, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %32, i32* %34
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %35
	jmp	mz_zip_read_archive_data35
	.text
mz_zip_read_archive_data35:
	# %36 = sext i32 0 to i64
	movq	$0, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %36, i64* %7
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# br label %48
	jmp	mz_zip_read_archive_data48
	.text
mz_zip_read_archive_data37:
	# %38 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %39 = getelementptr %struct.mz_zip_archive, i8* %38, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %40 = load i8*, i8** %39
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %41 = load i8*, i8** %8
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %42 = getelementptr %struct.mz_zip_archive, i8* %41, i32 0, i32 14
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %43 = load i8*, i8** %42
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %44 = load i64, i64* %9
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %45 = load i8*, i8** %10
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %46 = load i64, i64* %11
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %47 = call i64 %40 (i8* %43, i64 %44, i8* %45, i64 %46)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i64 %47, i64* %7
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# br label %48
	jmp	mz_zip_read_archive_data48
	.text
mz_zip_read_archive_data48:
	# %49 = load i64, i64* %7
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i64 %49
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_get_filename
_mz_zip_reader_get_filename:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$32, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	%rdi
	popq	%r13
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %16 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %11
	movq	%r13, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %12
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# store i8* %2, i8** %13
	movq	%rbx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %14
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %17 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %18 = load i32, i32* %12
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# store i8* %17, i8** %6
	movq	%rdi, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %18, i32* %7
	movq	%rsi, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %19 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %20 = icmp ne i8* %19, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %20, label %21, label %32
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_filename32
	jmp	mz_zip_reader_get_filename21
	.text
mz_zip_reader_get_filename21:
	# %22 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %23 = getelementptr %struct.mz_zip_archive, i8* %22, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %24 = load i8*, i8** %23
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %25 = icmp ne i8* %24, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %25, label %26, label %32
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_filename32
	jmp	mz_zip_reader_get_filename26
	.text
mz_zip_reader_get_filename26:
	# %27 = load i32, i32* %7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %28 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %29 = getelementptr %struct.mz_zip_archive, i8* %28, i32 0, i32 2
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %30 = load i32, i32* %29
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %31 = icmp uge i32 %27, %30
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setnb	%sil
	# br i1 %31, label %32, label %33
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_filename33
	jmp	mz_zip_reader_get_filename32
	.text
mz_zip_reader_get_filename32:
	# store i8* null, i8** %5
	movq	$0, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %49
	jmp	mz_zip_reader_get_filename49
	.text
mz_zip_reader_get_filename33:
	# %34 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %35 = getelementptr %struct.mz_zip_archive, i8* %34, i32 0, i32 15
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %36 = load i8*, i8** %35
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %37 = load i8*, i8** %36
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %38 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %39 = getelementptr %struct.mz_zip_archive, i8* %38, i32 0, i32 15
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %40 = load i8*, i8** %39
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %41 = getelementptr %struct.mz_zip_internal_state_tag, i8* %40, i32 0, i32 1
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %42 = load i8*, i8** %41
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %43 = load i32, i32* %7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r13
	movl	%eax, %r13d
	# %44 = zext i32 %43 to i64
	movq	%r13, %rax
	movq	$0, %r13
	movl	%eax, %r13d
	# %45 = getelementptr i32, i8* %42, i64 %44
	movq	%rdi, %rcx
	movq	%r13, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %46 = load i32, i32* %45
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %47 = zext i32 %46 to i64
	movq	%rdi, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %48 = getelementptr i8, i8* %37, i64 %47
	movq	%rsi, %rcx
	movq	%rdi, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %48, i8** %5
	movq	%rsi, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %49
	jmp	mz_zip_reader_get_filename49
	.text
mz_zip_reader_get_filename49:
	# %50 = load i8*, i8** %5
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8* %50, i8** %16
	movq	%rsi, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %51 = load i8*, i8** %16
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %52 = icmp ne i8* %51, null
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setne	%sil
	# br i1 %52, label %68, label %53
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_filename53
	jmp	mz_zip_reader_get_filename68
	.text
mz_zip_reader_get_filename53:
	# %54 = load i32, i32* %14
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %55 = icmp ne i32 %54, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %55, label %56, label %59
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_filename59
	jmp	mz_zip_reader_get_filename56
	.text
mz_zip_reader_get_filename56:
	# %57 = load i8*, i8** %13
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = getelementptr i8, i8* %57, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 0, i8* %58
	movq	$0, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %59
	jmp	mz_zip_reader_get_filename59
	.text
mz_zip_reader_get_filename59:
	# %60 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %60, i8** %8
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 24, i32* %9
	movq	$24, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %61 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = icmp ne i8* %61, null
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %62, label %63, label %67
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_filename67
	jmp	mz_zip_reader_get_filename63
	.text
mz_zip_reader_get_filename63:
	# %64 = load i32, i32* %9
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %65 = load i8*, i8** %8
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %66 = getelementptr %struct.mz_zip_archive, i8* %65, i32 0, i32 5
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %64, i32* %66
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %67
	jmp	mz_zip_reader_get_filename67
	.text
mz_zip_reader_get_filename67:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %110
	jmp	mz_zip_reader_get_filename110
	.text
mz_zip_reader_get_filename68:
	# %69 = load i8*, i8** %16
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %70 = getelementptr i8, i8* %69, i64 28
	movq	%rsi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %71 = getelementptr i8, i8* %70, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %72 = load i8, i8* %71
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %73 = zext i8 %72 to i32
	movq	%rsi, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %74 = load i8*, i8** %16
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %75 = getelementptr i8, i8* %74, i64 28
	movq	%rsi, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %76 = getelementptr i8, i8* %75, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %77 = load i8, i8* %76
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %78 = zext i8 %77 to i32
	movq	%rsi, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %79 = shl i32 %78, 8
	movq	%rsi, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %80 = or i32 %73, %79
	movq	%rdi, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %80, i32* %15
	movq	%rsi, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %81 = load i32, i32* %14
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %82 = icmp ne i32 %81, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setne	%sil
	# br i1 %82, label %83, label %107
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_filename107
	jmp	mz_zip_reader_get_filename83
	.text
mz_zip_reader_get_filename83:
	# %84 = load i32, i32* %15
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %85 = load i32, i32* %14
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %86 = sub i32 %85, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %87 = icmp ult i32 %84, %86
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rsi
	setb	%sil
	# br i1 %87, label %88, label %90
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_get_filename90
	jmp	mz_zip_reader_get_filename88
	.text
mz_zip_reader_get_filename88:
	# %89 = load i32, i32* %15
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# br label %93
	movq	%rbx, %rdx
	jmp	mz_zip_reader_get_filename93
	.text
mz_zip_reader_get_filename90:
	# %91 = load i32, i32* %14
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %92 = sub i32 %91, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# br label %93
	jmp	mz_zip_reader_get_filename93
	.text
mz_zip_reader_get_filename93:
	# %94 = phi i32 [%89, %88], [%92, %90]
	# store i32 %94, i32* %15
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %95 = load i8*, i8** %13
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %96 = load i8*, i8** %16
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %97 = getelementptr i8, i8* %96, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %98 = load i32, i32* %15
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %99 = zext i32 %98 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %100 = load i8*, i8** %13
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %101 = call i64 @llvm.objectsize.i64.p0 (i8* %100, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %102 = call i8* @__memcpy_chk (i8* %95, i8* %97, i64 %99, i64 %101)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %103 = load i8*, i8** %13
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %104 = load i32, i32* %15
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %105 = zext i32 %104 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %106 = getelementptr i8, i8* %103, i64 %105
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 0, i8* %106
	movq	$0, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %107
	jmp	mz_zip_reader_get_filename107
	.text
mz_zip_reader_get_filename107:
	# %108 = load i32, i32* %15
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %109 = add i32 %108, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %109, i32* %10
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# br label %110
	jmp	mz_zip_reader_get_filename110
	.text
mz_zip_reader_get_filename110:
	# %111 = load i32, i32* %10
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %111
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_end
_mz_zip_end:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rbx
	# %2 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %4 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %5 = icmp ne i8* %4, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %5, label %7, label %6
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_end6
	jmp	mz_zip_end7
	.text
mz_zip_end6:
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %30
	jmp	mz_zip_end30
	.text
mz_zip_end7:
	# %8 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %9 = getelementptr %struct.mz_zip_archive, i8* %8, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %10 = load i32, i32* %9
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %11 = icmp eq i32 %10, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %11, label %12, label %15
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_end15
	jmp	mz_zip_end12
	.text
mz_zip_end12:
	# %13 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %14 = call i32 @mz_zip_reader_end (i8* %13)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_reader_end
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %14, i32* %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %30
	jmp	mz_zip_end30
	.text
mz_zip_end15:
	# %16 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %17 = getelementptr %struct.mz_zip_archive, i8* %16, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %18 = load i32, i32* %17
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %19 = icmp eq i32 %18, 2
	movq	%rbx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %19, label %25, label %20
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_end20
	jmp	mz_zip_end25
	.text
mz_zip_end20:
	# %21 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %22 = getelementptr %struct.mz_zip_archive, i8* %21, i32 0, i32 3
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %23 = load i32, i32* %22
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %24 = icmp eq i32 %23, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %24, label %25, label %28
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_end28
	jmp	mz_zip_end25
	.text
mz_zip_end25:
	# %26 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %27 = call i32 @mz_zip_writer_end (i8* %26)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_zip_writer_end
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 %27, i32* %2
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %30
	jmp	mz_zip_end30
	.text
mz_zip_end28:
	# br label %29
	jmp	mz_zip_end29
	.text
mz_zip_end29:
	# store i32 0, i32* %2
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %30
	jmp	mz_zip_end30
	.text
mz_zip_end30:
	# %31 = load i32, i32* %2
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %31
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_main
_main:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$24, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%rdi
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r15
	# %9 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r13
	# %11 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r11
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# store i32 0, i32* %3
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 %0, i32* %4
	movq	%rdi, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %1, i8** %5
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# %16 = load i8*, i8** @s_pStr
	leaq	_s_pStr(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %17 = call i64 @strlen (i8* %16)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_strlen
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i64 %17, i64* %8
	movq	%rbx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %18 = load i64, i64* %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %19 = call i64 @mz_compressBound (i64 %18)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_compressBound
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i64 %19, i64* %9
	movq	%rbx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# %20 = load i64, i64* %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i64 %20, i64* %10
	movq	%rbx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %13
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %21 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %22 = load i8*, i8** %5
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %23 = call i32 (i8*, ...) @printf (i8* @.str.59, i8* @.str)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.59(%rip), %rax
	pushq	%rax
	leaq	_.str(%rip), %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# br label %24
	jmp	main24
	.text
main24:
	# %25 = load i64, i64* %9
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %26 = call i8* @malloc (i64 %25)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i8* %26, i8** %11
	movq	%rbx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %27 = load i64, i64* %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %28 = call i8* @malloc (i64 %27)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_malloc
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i8* %28, i8** %12
	movq	%rbx, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# %29 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %30 = icmp ne i8* %29, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %30, label %31, label %34
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main34
	jmp	main31
	.text
main31:
	# %32 = load i8*, i8** %12
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %33 = icmp ne i8* %32, null
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %33, label %36, label %34
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main34
	jmp	main36
	.text
main34:
	# %35 = call i32 (i8*, ...) @printf (i8* @.str.60)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.60(%rip), %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 1, i32* %3
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	main133
	.text
main36:
	# %37 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %38 = load i8*, i8** @s_pStr
	leaq	_s_pStr(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %39 = load i64, i64* %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = call i32 @mz_compress (i8* %37, i8* %9, i8* %38, i64 %39)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%r14, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_compress
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 %40, i32* %7
	movq	%rbx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %41 = load i32, i32* %7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %42 = icmp ne i32 %41, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %42, label %43, label %47
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main47
	jmp	main43
	.text
main43:
	# %44 = call i32 (i8*, ...) @printf (i8* @.str.61)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.61(%rip), %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %45 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @free (i8* %45)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %46 = load i8*, i8** %12
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @free (i8* %46)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 1, i32* %3
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	main133
	.text
main47:
	# %48 = load i64, i64* %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %49 = trunc i64 %48 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %50 = load i64, i64* %9
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %51 = trunc i64 %50 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %52 = call i32 (i8*, ...) @printf (i8* @.str.62, i32 %49, i32 %51)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.62(%rip), %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %53 = load i32, i32* %6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %54 = icmp ne i32 %53, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %54, label %55, label %80
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main80
	jmp	main55
	.text
main55:
	# %56 = call i32 @rand ()
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	xorq	%rax, %rax
	callq	_rand
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %57 = srem i32 %56, 3
	pushq	%rdx
	movq	%rbx, %rax
	movq	$3, %rcx
	cqto	
	idivq	%rcx
	movq	%rdx, %rbx
	popq	%rdx
	# %58 = add i32 1, %57
	movq	$1, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %58, i32* %14
	movq	%rbx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %59
	jmp	main59
	.text
main59:
	# %60 = load i32, i32* %14
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %61 = add i32 %60, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %61, i32* %14
	movq	%rbx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %62 = icmp ne i32 %60, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %62, label %63, label %79
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main79
	jmp	main63
	.text
main63:
	# %64 = call i32 @rand ()
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	xorq	%rax, %rax
	callq	_rand
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %65 = sext i32 %64 to i64
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %66 = load i64, i64* %9
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %67 = urem i64 %65, %66
	pushq	%rdx
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cqto	
	divq	%rcx
	movq	%rdx, %rbx
	popq	%rdx
	# %68 = trunc i64 %67 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i32 %68, i32* %15
	movq	%rbx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %69 = call i32 @rand ()
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	xorq	%rax, %rax
	callq	_rand
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %70 = and i32 %69, 255
	movq	%rbx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdi
	# %71 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %72 = load i32, i32* %15
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %73 = zext i32 %72 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %74 = getelementptr i8, i8* %71, i64 %73
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %75 = load i8, i8* %74
	movq	%rsi, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %76 = zext i8 %75 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %77 = xor i32 %76, %70
	movq	%rbx, %rax
	movq	%rdi, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %78 = trunc i32 %77 to i8
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# store i8 %78, i8* %74
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# br label %59
	jmp	main59
	.text
main79:
	# br label %80
	jmp	main80
	.text
main80:
	# %81 = load i8*, i8** %12
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %82 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %83 = load i64, i64* %9
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %84 = call i32 @mz_uncompress (i8* %81, i8* %10, i8* %82, i64 %83)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%r13, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_mz_uncompress
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 %84, i32* %7
	movq	%rbx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %85 = load i32, i32* %7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %86 = icmp eq i32 %85, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# %87 = zext i1 %86 to i32
	movq	%rbx, %rax
	movq	%rax, %rsi
	# %88 = load i32, i32* %13
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %89 = add i32 %88, %87
	movq	%rbx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %89, i32* %13
	movq	%rbx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %90 = load i32, i32* %6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %91 = icmp ne i32 %90, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %91, label %92, label %96
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main96
	jmp	main92
	.text
main92:
	# %93 = load i32, i32* %6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %94 = load i32, i32* %13
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %95 = call i32 (i8*, ...) @printf (i8* @.str.63, i32 %93, i32 %94)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.63(%rip), %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# br label %123
	jmp	main123
	.text
main96:
	# %97 = load i32, i32* %7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %98 = icmp ne i32 %97, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %98, label %99, label %103
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main103
	jmp	main99
	.text
main99:
	# %100 = call i32 (i8*, ...) @printf (i8* @.str.64)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.64(%rip), %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %101 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @free (i8* %101)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %102 = load i8*, i8** %12
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @free (i8* %102)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 1, i32* %3
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	main133
	.text
main103:
	# %104 = load i64, i64* %9
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %105 = trunc i64 %104 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %106 = load i64, i64* %10
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %107 = trunc i64 %106 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %108 = call i32 (i8*, ...) @printf (i8* @.str.65, i32 %105, i32 %107)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.65(%rip), %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %109 = load i64, i64* %10
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %110 = load i64, i64* %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %111 = icmp ne i64 %109, %110
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %111, label %118, label %112
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main112
	jmp	main118
	.text
main112:
	# %113 = load i8*, i8** %12
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %114 = load i8*, i8** @s_pStr
	leaq	_s_pStr(%rip), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %115 = load i64, i64* %8
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %116 = call i32 @memcmp (i8* %113, i8* %114, i64 %115)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memcmp
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %117 = icmp ne i32 %116, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %117, label %118, label %122
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main122
	jmp	main118
	.text
main118:
	# %119 = call i32 (i8*, ...) @printf (i8* @.str.66)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.66(%rip), %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %120 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @free (i8* %120)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %121 = load i8*, i8** %12
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @free (i8* %121)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 1, i32* %3
	movq	$1, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	main133
	.text
main122:
	# br label %123
	jmp	main123
	.text
main123:
	# %124 = load i8*, i8** %11
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @free (i8* %124)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %125 = load i8*, i8** %12
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @free (i8* %125)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_free
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %126 = load i32, i32* %6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %127 = add i32 %126, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %127, i32* %6
	movq	%rbx, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %128
	jmp	main128
	.text
main128:
	# %129 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %130 = icmp sge i32 %129, 2
	movq	%rbx, %rax
	movq	$2, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setge	%bl
	# br i1 %130, label %24, label %131
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	main131
	jmp	main24
	.text
main131:
	# %132 = call i32 (i8*, ...) @printf (i8* @.str.67)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	_.str.67(%rip), %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_printf
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 0, i32* %3
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %133
	jmp	main133
	.text
main133:
	# %134 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %134
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compress_block
_tdefl_compress_block:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rsi
	popq	%rdi
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# store i8* %0, i8** %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %4
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %5 = load i32, i32* %4
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %6 = icmp ne i32 %5, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %6, label %7, label %9
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_block9
	jmp	tdefl_compress_block7
	.text
tdefl_compress_block7:
	# %8 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @tdefl_start_static_block (i8* %8)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_start_static_block
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %11
	jmp	tdefl_compress_block11
	.text
tdefl_compress_block9:
	# %10 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @tdefl_start_dynamic_block (i8* %10)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_start_dynamic_block
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %11
	jmp	tdefl_compress_block11
	.text
tdefl_compress_block11:
	# %12 = load i8*, i8** %3
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %13 = call i32 @tdefl_compress_lz_codes (i8* %12)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_compress_lz_codes
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i32 %13
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_start_static_block
_tdefl_start_static_block:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	popq	%rdi
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %2
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %7 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %8 = getelementptr %struct.tdefl_compressor, i8* %7, i32 0, i32 38
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %9 = getelementptr [3 x [288 x i8]], i8* %8, i64 0, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %10 = getelementptr [288 x i8], i8* %9, i64 0, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %10, i8** %4
	movq	%rdi, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %3
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %11
	jmp	tdefl_start_static_block11
	.text
tdefl_start_static_block11:
	# %12 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %13 = icmp ule i32 %12, 143
	movq	%rdi, %rax
	movq	$143, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setbe	%dil
	# br i1 %13, label %14, label %20
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_static_block20
	jmp	tdefl_start_static_block14
	.text
tdefl_start_static_block14:
	# %15 = load i8*, i8** %4
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %16 = getelementptr i8, i8* %15, i32 1
	movq	%r9, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %16, i8** %4
	movq	%rdi, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8 8, i8* %15
	movq	$8, %rax
	movq	%r9, %rcx
	movb	%al, (%rcx)
	# br label %17
	jmp	tdefl_start_static_block17
	.text
tdefl_start_static_block17:
	# %18 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %19 = add i32 %18, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %19, i32* %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %11
	jmp	tdefl_start_static_block11
	.text
tdefl_start_static_block20:
	# br label %21
	jmp	tdefl_start_static_block21
	.text
tdefl_start_static_block21:
	# %22 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %23 = icmp ule i32 %22, 255
	movq	%rdi, %rax
	movq	$255, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setbe	%dil
	# br i1 %23, label %24, label %30
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_static_block30
	jmp	tdefl_start_static_block24
	.text
tdefl_start_static_block24:
	# %25 = load i8*, i8** %4
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %26 = getelementptr i8, i8* %25, i32 1
	movq	%r9, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %26, i8** %4
	movq	%rdi, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8 9, i8* %25
	movq	$9, %rax
	movq	%r9, %rcx
	movb	%al, (%rcx)
	# br label %27
	jmp	tdefl_start_static_block27
	.text
tdefl_start_static_block27:
	# %28 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %29 = add i32 %28, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %29, i32* %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %21
	jmp	tdefl_start_static_block21
	.text
tdefl_start_static_block30:
	# br label %31
	jmp	tdefl_start_static_block31
	.text
tdefl_start_static_block31:
	# %32 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %33 = icmp ule i32 %32, 279
	movq	%rdi, %rax
	movq	$279, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setbe	%dil
	# br i1 %33, label %34, label %40
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_static_block40
	jmp	tdefl_start_static_block34
	.text
tdefl_start_static_block34:
	# %35 = load i8*, i8** %4
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %36 = getelementptr i8, i8* %35, i32 1
	movq	%r9, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %36, i8** %4
	movq	%rdi, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8 7, i8* %35
	movq	$7, %rax
	movq	%r9, %rcx
	movb	%al, (%rcx)
	# br label %37
	jmp	tdefl_start_static_block37
	.text
tdefl_start_static_block37:
	# %38 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %39 = add i32 %38, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %39, i32* %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %31
	jmp	tdefl_start_static_block31
	.text
tdefl_start_static_block40:
	# br label %41
	jmp	tdefl_start_static_block41
	.text
tdefl_start_static_block41:
	# %42 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %43 = icmp ule i32 %42, 287
	movq	%rdi, %rax
	movq	$287, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdi
	setbe	%dil
	# br i1 %43, label %44, label %50
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_static_block50
	jmp	tdefl_start_static_block44
	.text
tdefl_start_static_block44:
	# %45 = load i8*, i8** %4
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r9
	# %46 = getelementptr i8, i8* %45, i32 1
	movq	%r9, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %46, i8** %4
	movq	%rdi, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i8 8, i8* %45
	movq	$8, %rax
	movq	%r9, %rcx
	movb	%al, (%rcx)
	# br label %47
	jmp	tdefl_start_static_block47
	.text
tdefl_start_static_block47:
	# %48 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %49 = add i32 %48, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdi
	# store i32 %49, i32* %3
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %41
	jmp	tdefl_start_static_block41
	.text
tdefl_start_static_block50:
	# %51 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %52 = getelementptr %struct.tdefl_compressor, i8* %51, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %53 = getelementptr [3 x [288 x i8]], i8* %52, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %54 = getelementptr [288 x i8], i8* %53, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %55 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %56 = getelementptr %struct.tdefl_compressor, i8* %55, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %57 = getelementptr [3 x [288 x i8]], i8* %56, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %58 = getelementptr [288 x i8], i8* %57, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %59 = call i64 @llvm.objectsize.i64.p0 (i8* %58, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %60 = call i8* @__memset_chk (i8* %54, i32 5, i64 32, i64 %59)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$5, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %61 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @tdefl_optimize_huffman_table (i8* %61, i32 0, i32 288, i32 15, i32 1)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$288, %rax
	pushq	%rax
	movq	$15, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_optimize_huffman_table
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %62 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# call void @tdefl_optimize_huffman_table (i8* %62, i32 1, i32 32, i32 15, i32 1)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	$15, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_optimize_huffman_table
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %63
	jmp	tdefl_start_static_block63
	.text
tdefl_start_static_block63:
	# store i32 1, i32* %5
	movq	$1, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# store i32 2, i32* %6
	movq	$2, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %64 = load i32, i32* %5
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %65 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %66 = shl i32 1, %65
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %67 = sub i32 %66, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %68 = icmp ule i32 %64, %67
	movq	%rdi, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %69 = xor i1 %68, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %70 = zext i1 %69 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %71 = sext i32 %70 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %72 = icmp ne i64 %71, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %72, label %73, label %75
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_static_block75
	jmp	tdefl_start_static_block73
	.text
tdefl_start_static_block73:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_static_block, i8* @.str.11, i32 2521, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_static_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2521, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_static_block74:
	# br label %76
	jmp	tdefl_start_static_block76
	.text
tdefl_start_static_block75:
	# br label %76
	jmp	tdefl_start_static_block76
	.text
tdefl_start_static_block76:
	# %77 = load i32, i32* %5
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %78 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %79 = getelementptr %struct.tdefl_compressor, i8* %78, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %80 = load i32, i32* %79
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %81 = shl i32 %77, %80
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %82 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %83 = getelementptr %struct.tdefl_compressor, i8* %82, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %84 = load i32, i32* %83
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %85 = or i32 %84, %81
	movq	%rdx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %85, i32* %83
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %86 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %87 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = getelementptr %struct.tdefl_compressor, i8* %87, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %89 = load i32, i32* %88
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %90 = add i32 %89, %86
	movq	%rdx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %90, i32* %88
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %91
	jmp	tdefl_start_static_block91
	.text
tdefl_start_static_block91:
	# %92 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %93 = getelementptr %struct.tdefl_compressor, i8* %92, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %94 = load i32, i32* %93
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %95 = icmp uge i32 %94, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %95, label %96, label %122
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_static_block122
	jmp	tdefl_start_static_block96
	.text
tdefl_start_static_block96:
	# %97 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %98 = getelementptr %struct.tdefl_compressor, i8* %97, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %99 = load i8*, i8** %98
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %100 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %101 = getelementptr %struct.tdefl_compressor, i8* %100, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %102 = load i8*, i8** %101
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %103 = icmp ult i8* %99, %102
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %103, label %104, label %113
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_static_block113
	jmp	tdefl_start_static_block104
	.text
tdefl_start_static_block104:
	# %105 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %106 = getelementptr %struct.tdefl_compressor, i8* %105, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %107 = load i32, i32* %106
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %108 = trunc i32 %107 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %109 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %110 = getelementptr %struct.tdefl_compressor, i8* %109, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %111 = load i8*, i8** %110
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %112 = getelementptr i8, i8* %111, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %112, i8** %110
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8 %108, i8* %111
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %113
	jmp	tdefl_start_static_block113
	.text
tdefl_start_static_block113:
	# %114 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = getelementptr %struct.tdefl_compressor, i8* %114, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %116 = load i32, i32* %115
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %117 = lshr i32 %116, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %117, i32* %115
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %118 = load i8*, i8** %2
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %119 = getelementptr %struct.tdefl_compressor, i8* %118, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %120 = load i32, i32* %119
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %121 = sub i32 %120, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %121, i32* %119
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %91
	jmp	tdefl_start_static_block91
	.text
tdefl_start_static_block122:
	# br label %123
	jmp	tdefl_start_static_block123
	.text
tdefl_start_static_block123:
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_start_dynamic_block
_tdefl_start_dynamic_block:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$184, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %12 = alloca [320 x i8]
	subq	$320, %rsp
	movq	%rsp, -80(%rbp)
	# %13 = alloca [320 x i8]
	subq	$320, %rsp
	movq	%rsp, -88(%rbp)
	# %14 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -96(%rbp)
	# %15 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -104(%rbp)
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -120(%rbp)
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -128(%rbp)
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -136(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -152(%rbp)
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -168(%rbp)
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -160(%rbp)
	# %24 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -184(%rbp)
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %28 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %29 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %30 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# store i8* %0, i8** %2
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8 -1, i8* %14
	movq	$-1, %rax
	movq	-96(%rbp), %rcx
	movb	%al, (%rcx)
	# %31 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %32 = getelementptr %struct.tdefl_compressor, i8* %31, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %33 = getelementptr [3 x [288 x i16]], i8* %32, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %34 = getelementptr [288 x i16], i8* %33, i64 0, i64 256
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$256, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 1, i16* %34
	movq	$1, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %35 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @tdefl_optimize_huffman_table (i8* %35, i32 0, i32 288, i32 15, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$288, %rax
	pushq	%rax
	movq	$15, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_optimize_huffman_table
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %36 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @tdefl_optimize_huffman_table (i8* %36, i32 1, i32 32, i32 15, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$32, %rax
	pushq	%rax
	movq	$15, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_optimize_huffman_table
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 286, i32* %3
	movq	$286, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %37
	jmp	tdefl_start_dynamic_block37
	.text
tdefl_start_dynamic_block37:
	# %38 = load i32, i32* %3
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %39 = icmp sgt i32 %38, 257
	movq	%rbx, %rax
	movq	$257, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setg	%bl
	# br i1 %39, label %40, label %55
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block55
	jmp	tdefl_start_dynamic_block40
	.text
tdefl_start_dynamic_block40:
	# %41 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %42 = getelementptr %struct.tdefl_compressor, i8* %41, i32 0, i32 38
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %43 = getelementptr [3 x [288 x i8]], i8* %42, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %44 = load i32, i32* %3
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %45 = sub i32 %44, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %46 = sext i32 %45 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %47 = getelementptr [288 x i8], i8* %43, i64 0, i64 %46
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %48 = load i8, i8* %47
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %49 = icmp ne i8 %48, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %49, label %50, label %51
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block51
	jmp	tdefl_start_dynamic_block50
	.text
tdefl_start_dynamic_block50:
	# br label %55
	jmp	tdefl_start_dynamic_block55
	.text
tdefl_start_dynamic_block51:
	# br label %52
	jmp	tdefl_start_dynamic_block52
	.text
tdefl_start_dynamic_block52:
	# %53 = load i32, i32* %3
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %54 = add i32 %53, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %54, i32* %3
	movq	%rbx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# br label %37
	jmp	tdefl_start_dynamic_block37
	.text
tdefl_start_dynamic_block55:
	# store i32 30, i32* %4
	movq	$30, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	tdefl_start_dynamic_block56
	.text
tdefl_start_dynamic_block56:
	# %57 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %58 = icmp sgt i32 %57, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setg	%bl
	# br i1 %58, label %59, label %74
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block74
	jmp	tdefl_start_dynamic_block59
	.text
tdefl_start_dynamic_block59:
	# %60 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %61 = getelementptr %struct.tdefl_compressor, i8* %60, i32 0, i32 38
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %62 = getelementptr [3 x [288 x i8]], i8* %61, i64 0, i64 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %63 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %64 = sub i32 %63, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %65 = sext i32 %64 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %66 = getelementptr [288 x i8], i8* %62, i64 0, i64 %65
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %67 = load i8, i8* %66
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %68 = icmp ne i8 %67, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %68, label %69, label %70
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block70
	jmp	tdefl_start_dynamic_block69
	.text
tdefl_start_dynamic_block69:
	# br label %74
	jmp	tdefl_start_dynamic_block74
	.text
tdefl_start_dynamic_block70:
	# br label %71
	jmp	tdefl_start_dynamic_block71
	.text
tdefl_start_dynamic_block71:
	# %72 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %73 = add i32 %72, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %73, i32* %4
	movq	%rbx, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %56
	jmp	tdefl_start_dynamic_block56
	.text
tdefl_start_dynamic_block74:
	# %75 = getelementptr [320 x i8], i8* %12, i64 0, i64 0
	movq	-80(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %76 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %77 = getelementptr %struct.tdefl_compressor, i8* %76, i32 0, i32 38
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %78 = getelementptr [3 x [288 x i8]], i8* %77, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %79 = getelementptr [288 x i8], i8* %78, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %80 = load i32, i32* %3
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %81 = sext i32 %80 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %82 = call i8* @__memcpy_chk (i8* %75, i8* %79, i64 %81, i64 320)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	$320, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %83 = getelementptr [320 x i8], i8* %12, i64 0, i64 0
	movq	-80(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %84 = load i32, i32* %3
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %85 = sext i32 %84 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %86 = getelementptr i8, i8* %83, i64 %85
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %87 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %88 = getelementptr %struct.tdefl_compressor, i8* %87, i32 0, i32 38
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %89 = getelementptr [3 x [288 x i8]], i8* %88, i64 0, i64 1
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %90 = getelementptr [288 x i8], i8* %89, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %91 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %92 = sext i32 %91 to i64
	movq	%rbx, %rax
	movq	$0, %rdi
	movl	%eax, %edi
	# %93 = getelementptr [320 x i8], i8* %12, i64 0, i64 0
	movq	-80(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %94 = load i32, i32* %3
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %95 = sext i32 %94 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %96 = getelementptr i8, i8* %93, i64 %95
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %97 = call i64 @llvm.objectsize.i64.p0 (i8* %96, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %98 = call i8* @__memcpy_chk (i8* %86, i8* %90, i64 %92, i64 %97)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memcpy_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %99 = load i32, i32* %3
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %100 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %101 = add i32 %99, %100
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %101, i32* %7
	movq	%rbx, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %102 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %103 = getelementptr %struct.tdefl_compressor, i8* %102, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %104 = getelementptr [3 x [288 x i16]], i8* %103, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %105 = getelementptr [288 x i16], i8* %104, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %106 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %107 = getelementptr %struct.tdefl_compressor, i8* %106, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %108 = getelementptr [3 x [288 x i16]], i8* %107, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %109 = getelementptr [288 x i16], i8* %108, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %110 = call i64 @llvm.objectsize.i64.p0 (i8* %109, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# %111 = call i8* @__memset_chk (i8* %105, i32 0, i64 38, i64 %110)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$38, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rbx
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %112
	jmp	tdefl_start_dynamic_block112
	.text
tdefl_start_dynamic_block112:
	# %113 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %114 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %115 = icmp ult i32 %113, %114
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %115, label %116, label %515
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block515
	jmp	tdefl_start_dynamic_block116
	.text
tdefl_start_dynamic_block116:
	# %117 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %118 = zext i32 %117 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %119 = getelementptr [320 x i8], i8* %12, i64 0, i64 %118
	movq	-80(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %120 = load i8, i8* %119
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# store i8 %120, i8* %15
	movq	%rbx, %rax
	movq	-104(%rbp), %rcx
	movb	%al, (%rcx)
	# %121 = load i8, i8* %15
	movq	-104(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %122 = icmp ne i8 %121, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %122, label %272, label %123
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block123
	jmp	tdefl_start_dynamic_block272
	.text
tdefl_start_dynamic_block123:
	# %124 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %125 = icmp ne i32 %124, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %125, label %126, label %183
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block183
	jmp	tdefl_start_dynamic_block126
	.text
tdefl_start_dynamic_block126:
	# %127 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %128 = icmp ult i32 %127, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %128, label %129, label %158
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block158
	jmp	tdefl_start_dynamic_block129
	.text
tdefl_start_dynamic_block129:
	# %130 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %131 = getelementptr %struct.tdefl_compressor, i8* %130, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %132 = getelementptr [3 x [288 x i16]], i8* %131, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %133 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %134 = zext i8 %133 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %135 = getelementptr [288 x i16], i8* %132, i64 0, i64 %134
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %136 = load i16, i16* %135
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %137 = zext i16 %136 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %138 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %139 = add i32 %137, %138
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %140 = trunc i32 %139 to i16
	movq	%rbx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %141 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %142 = getelementptr %struct.tdefl_compressor, i8* %141, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %143 = getelementptr [3 x [288 x i16]], i8* %142, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %144 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %145 = zext i8 %144 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %146 = getelementptr [288 x i16], i8* %143, i64 0, i64 %145
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %140, i16* %146
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %147
	jmp	tdefl_start_dynamic_block147
	.text
tdefl_start_dynamic_block147:
	# %148 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %149 = add i32 %148, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %149, i32* %10
	movq	%rbx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %150 = icmp ne i32 %148, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %150, label %151, label %157
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block157
	jmp	tdefl_start_dynamic_block151
	.text
tdefl_start_dynamic_block151:
	# %152 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %153 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %154 = add i32 %153, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %154, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %155 = zext i32 %153 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %156 = getelementptr [320 x i8], i8* %13, i64 0, i64 %155
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %152, i8* %156
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %147
	jmp	tdefl_start_dynamic_block147
	.text
tdefl_start_dynamic_block157:
	# br label %182
	jmp	tdefl_start_dynamic_block182
	.text
tdefl_start_dynamic_block158:
	# %159 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %160 = getelementptr %struct.tdefl_compressor, i8* %159, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %161 = getelementptr [3 x [288 x i16]], i8* %160, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %162 = getelementptr [288 x i16], i8* %161, i64 0, i64 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %163 = load i16, i16* %162
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %164 = zext i16 %163 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %165 = add i32 %164, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %166 = trunc i32 %165 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %167 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %168 = getelementptr %struct.tdefl_compressor, i8* %167, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %169 = getelementptr [3 x [288 x i16]], i8* %168, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %170 = getelementptr [288 x i16], i8* %169, i64 0, i64 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %166, i16* %170
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %171 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %172 = add i32 %171, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %172, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %173 = zext i32 %171 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %174 = getelementptr [320 x i8], i8* %13, i64 0, i64 %173
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 16, i8* %174
	movq	$16, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %175 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %176 = sub i32 %175, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %177 = trunc i32 %176 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %178 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %179 = add i32 %178, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %179, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %180 = zext i32 %178 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %181 = getelementptr [320 x i8], i8* %13, i64 0, i64 %180
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %177, i8* %181
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %182
	jmp	tdefl_start_dynamic_block182
	.text
tdefl_start_dynamic_block182:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %183
	jmp	tdefl_start_dynamic_block183
	.text
tdefl_start_dynamic_block183:
	# %184 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %185 = add i32 %184, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %185, i32* %9
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %186 = icmp eq i32 %185, 138
	movq	%rbx, %rax
	movq	$138, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %186, label %187, label %271
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block271
	jmp	tdefl_start_dynamic_block187
	.text
tdefl_start_dynamic_block187:
	# %188 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %189 = icmp ne i32 %188, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %189, label %190, label %270
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block270
	jmp	tdefl_start_dynamic_block190
	.text
tdefl_start_dynamic_block190:
	# %191 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %192 = icmp ult i32 %191, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %192, label %193, label %217
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block217
	jmp	tdefl_start_dynamic_block193
	.text
tdefl_start_dynamic_block193:
	# %194 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %195 = getelementptr %struct.tdefl_compressor, i8* %194, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %196 = getelementptr [3 x [288 x i16]], i8* %195, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %197 = getelementptr [288 x i16], i8* %196, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %198 = load i16, i16* %197
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %199 = zext i16 %198 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %200 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %201 = add i32 %199, %200
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %202 = trunc i32 %201 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %203 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %204 = getelementptr %struct.tdefl_compressor, i8* %203, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %205 = getelementptr [3 x [288 x i16]], i8* %204, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %206 = getelementptr [288 x i16], i8* %205, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %202, i16* %206
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %207
	jmp	tdefl_start_dynamic_block207
	.text
tdefl_start_dynamic_block207:
	# %208 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %209 = add i32 %208, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %209, i32* %9
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %210 = icmp ne i32 %208, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %210, label %211, label %216
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block216
	jmp	tdefl_start_dynamic_block211
	.text
tdefl_start_dynamic_block211:
	# %212 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %213 = add i32 %212, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %213, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %214 = zext i32 %212 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %215 = getelementptr [320 x i8], i8* %13, i64 0, i64 %214
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 0, i8* %215
	movq	$0, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %207
	jmp	tdefl_start_dynamic_block207
	.text
tdefl_start_dynamic_block216:
	# br label %269
	jmp	tdefl_start_dynamic_block269
	.text
tdefl_start_dynamic_block217:
	# %218 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %219 = icmp ule i32 %218, 10
	movq	%rbx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setbe	%bl
	# br i1 %219, label %220, label %244
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block244
	jmp	tdefl_start_dynamic_block220
	.text
tdefl_start_dynamic_block220:
	# %221 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %222 = getelementptr %struct.tdefl_compressor, i8* %221, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %223 = getelementptr [3 x [288 x i16]], i8* %222, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %224 = getelementptr [288 x i16], i8* %223, i64 0, i64 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %225 = load i16, i16* %224
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %226 = zext i16 %225 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %227 = add i32 %226, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %228 = trunc i32 %227 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %229 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %230 = getelementptr %struct.tdefl_compressor, i8* %229, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %231 = getelementptr [3 x [288 x i16]], i8* %230, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %232 = getelementptr [288 x i16], i8* %231, i64 0, i64 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %228, i16* %232
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %233 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %234 = add i32 %233, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %234, i32* %8
	movq	%rsi, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %235 = zext i32 %233 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %236 = getelementptr [320 x i8], i8* %13, i64 0, i64 %235
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 17, i8* %236
	movq	$17, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %237 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %238 = sub i32 %237, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %239 = trunc i32 %238 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %240 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %241 = add i32 %240, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %241, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %242 = zext i32 %240 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %243 = getelementptr [320 x i8], i8* %13, i64 0, i64 %242
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %239, i8* %243
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %268
	jmp	tdefl_start_dynamic_block268
	.text
tdefl_start_dynamic_block244:
	# %245 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %246 = getelementptr %struct.tdefl_compressor, i8* %245, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %247 = getelementptr [3 x [288 x i16]], i8* %246, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %248 = getelementptr [288 x i16], i8* %247, i64 0, i64 18
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %249 = load i16, i16* %248
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %250 = zext i16 %249 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %251 = add i32 %250, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %252 = trunc i32 %251 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %253 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %254 = getelementptr %struct.tdefl_compressor, i8* %253, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %255 = getelementptr [3 x [288 x i16]], i8* %254, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %256 = getelementptr [288 x i16], i8* %255, i64 0, i64 18
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %252, i16* %256
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %257 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %258 = add i32 %257, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %258, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %259 = zext i32 %257 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %260 = getelementptr [320 x i8], i8* %13, i64 0, i64 %259
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 18, i8* %260
	movq	$18, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %261 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %262 = sub i32 %261, 11
	movq	%rbx, %rax
	movq	$11, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %263 = trunc i32 %262 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %264 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %265 = add i32 %264, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %265, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %266 = zext i32 %264 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %267 = getelementptr [320 x i8], i8* %13, i64 0, i64 %266
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %263, i8* %267
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %268
	jmp	tdefl_start_dynamic_block268
	.text
tdefl_start_dynamic_block268:
	# br label %269
	jmp	tdefl_start_dynamic_block269
	.text
tdefl_start_dynamic_block269:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %270
	jmp	tdefl_start_dynamic_block270
	.text
tdefl_start_dynamic_block270:
	# br label %271
	jmp	tdefl_start_dynamic_block271
	.text
tdefl_start_dynamic_block271:
	# br label %510
	jmp	tdefl_start_dynamic_block510
	.text
tdefl_start_dynamic_block272:
	# %273 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %274 = icmp ne i32 %273, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %274, label %275, label %355
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block355
	jmp	tdefl_start_dynamic_block275
	.text
tdefl_start_dynamic_block275:
	# %276 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %277 = icmp ult i32 %276, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %277, label %278, label %302
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block302
	jmp	tdefl_start_dynamic_block278
	.text
tdefl_start_dynamic_block278:
	# %279 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %280 = getelementptr %struct.tdefl_compressor, i8* %279, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %281 = getelementptr [3 x [288 x i16]], i8* %280, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %282 = getelementptr [288 x i16], i8* %281, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %283 = load i16, i16* %282
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %284 = zext i16 %283 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %285 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %286 = add i32 %284, %285
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %287 = trunc i32 %286 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %288 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %289 = getelementptr %struct.tdefl_compressor, i8* %288, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %290 = getelementptr [3 x [288 x i16]], i8* %289, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %291 = getelementptr [288 x i16], i8* %290, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %287, i16* %291
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %292
	jmp	tdefl_start_dynamic_block292
	.text
tdefl_start_dynamic_block292:
	# %293 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %294 = add i32 %293, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %294, i32* %9
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %295 = icmp ne i32 %293, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %295, label %296, label %301
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block301
	jmp	tdefl_start_dynamic_block296
	.text
tdefl_start_dynamic_block296:
	# %297 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %298 = add i32 %297, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %298, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %299 = zext i32 %297 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %300 = getelementptr [320 x i8], i8* %13, i64 0, i64 %299
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 0, i8* %300
	movq	$0, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %292
	jmp	tdefl_start_dynamic_block292
	.text
tdefl_start_dynamic_block301:
	# br label %354
	jmp	tdefl_start_dynamic_block354
	.text
tdefl_start_dynamic_block302:
	# %303 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %304 = icmp ule i32 %303, 10
	movq	%rbx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setbe	%bl
	# br i1 %304, label %305, label %329
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block329
	jmp	tdefl_start_dynamic_block305
	.text
tdefl_start_dynamic_block305:
	# %306 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %307 = getelementptr %struct.tdefl_compressor, i8* %306, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %308 = getelementptr [3 x [288 x i16]], i8* %307, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %309 = getelementptr [288 x i16], i8* %308, i64 0, i64 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %310 = load i16, i16* %309
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %311 = zext i16 %310 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %312 = add i32 %311, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %313 = trunc i32 %312 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %314 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %315 = getelementptr %struct.tdefl_compressor, i8* %314, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %316 = getelementptr [3 x [288 x i16]], i8* %315, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %317 = getelementptr [288 x i16], i8* %316, i64 0, i64 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %313, i16* %317
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %318 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %319 = add i32 %318, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %319, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %320 = zext i32 %318 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %321 = getelementptr [320 x i8], i8* %13, i64 0, i64 %320
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 17, i8* %321
	movq	$17, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %322 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %323 = sub i32 %322, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %324 = trunc i32 %323 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %325 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %326 = add i32 %325, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %326, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %327 = zext i32 %325 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %328 = getelementptr [320 x i8], i8* %13, i64 0, i64 %327
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %324, i8* %328
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %353
	jmp	tdefl_start_dynamic_block353
	.text
tdefl_start_dynamic_block329:
	# %330 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %331 = getelementptr %struct.tdefl_compressor, i8* %330, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %332 = getelementptr [3 x [288 x i16]], i8* %331, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %333 = getelementptr [288 x i16], i8* %332, i64 0, i64 18
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %334 = load i16, i16* %333
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %335 = zext i16 %334 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %336 = add i32 %335, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %337 = trunc i32 %336 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %338 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %339 = getelementptr %struct.tdefl_compressor, i8* %338, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %340 = getelementptr [3 x [288 x i16]], i8* %339, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %341 = getelementptr [288 x i16], i8* %340, i64 0, i64 18
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %337, i16* %341
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %342 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %343 = add i32 %342, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %343, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %344 = zext i32 %342 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %345 = getelementptr [320 x i8], i8* %13, i64 0, i64 %344
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 18, i8* %345
	movq	$18, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %346 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %347 = sub i32 %346, 11
	movq	%rbx, %rax
	movq	$11, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %348 = trunc i32 %347 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %349 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %350 = add i32 %349, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %350, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %351 = zext i32 %349 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %352 = getelementptr [320 x i8], i8* %13, i64 0, i64 %351
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %348, i8* %352
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %353
	jmp	tdefl_start_dynamic_block353
	.text
tdefl_start_dynamic_block353:
	# br label %354
	jmp	tdefl_start_dynamic_block354
	.text
tdefl_start_dynamic_block354:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %355
	jmp	tdefl_start_dynamic_block355
	.text
tdefl_start_dynamic_block355:
	# %356 = load i8, i8* %15
	movq	-104(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %357 = zext i8 %356 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %358 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %359 = zext i8 %358 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %360 = icmp ne i32 %357, %359
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %360, label %361, label %443
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block443
	jmp	tdefl_start_dynamic_block361
	.text
tdefl_start_dynamic_block361:
	# %362 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %363 = icmp ne i32 %362, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %363, label %364, label %421
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block421
	jmp	tdefl_start_dynamic_block364
	.text
tdefl_start_dynamic_block364:
	# %365 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %366 = icmp ult i32 %365, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %366, label %367, label %396
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block396
	jmp	tdefl_start_dynamic_block367
	.text
tdefl_start_dynamic_block367:
	# %368 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %369 = getelementptr %struct.tdefl_compressor, i8* %368, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %370 = getelementptr [3 x [288 x i16]], i8* %369, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %371 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %372 = zext i8 %371 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %373 = getelementptr [288 x i16], i8* %370, i64 0, i64 %372
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %374 = load i16, i16* %373
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %375 = zext i16 %374 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %376 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %377 = add i32 %375, %376
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %378 = trunc i32 %377 to i16
	movq	%rbx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %379 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %380 = getelementptr %struct.tdefl_compressor, i8* %379, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %381 = getelementptr [3 x [288 x i16]], i8* %380, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %382 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %383 = zext i8 %382 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %384 = getelementptr [288 x i16], i8* %381, i64 0, i64 %383
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %378, i16* %384
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %385
	jmp	tdefl_start_dynamic_block385
	.text
tdefl_start_dynamic_block385:
	# %386 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %387 = add i32 %386, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %387, i32* %10
	movq	%rbx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %388 = icmp ne i32 %386, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %388, label %389, label %395
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block395
	jmp	tdefl_start_dynamic_block389
	.text
tdefl_start_dynamic_block389:
	# %390 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %391 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %392 = add i32 %391, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %392, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %393 = zext i32 %391 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %394 = getelementptr [320 x i8], i8* %13, i64 0, i64 %393
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %390, i8* %394
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %385
	jmp	tdefl_start_dynamic_block385
	.text
tdefl_start_dynamic_block395:
	# br label %420
	jmp	tdefl_start_dynamic_block420
	.text
tdefl_start_dynamic_block396:
	# %397 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %398 = getelementptr %struct.tdefl_compressor, i8* %397, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %399 = getelementptr [3 x [288 x i16]], i8* %398, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %400 = getelementptr [288 x i16], i8* %399, i64 0, i64 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %401 = load i16, i16* %400
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %402 = zext i16 %401 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %403 = add i32 %402, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %404 = trunc i32 %403 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %405 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %406 = getelementptr %struct.tdefl_compressor, i8* %405, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %407 = getelementptr [3 x [288 x i16]], i8* %406, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %408 = getelementptr [288 x i16], i8* %407, i64 0, i64 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %404, i16* %408
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %409 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %410 = add i32 %409, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %410, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %411 = zext i32 %409 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %412 = getelementptr [320 x i8], i8* %13, i64 0, i64 %411
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 16, i8* %412
	movq	$16, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %413 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %414 = sub i32 %413, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %415 = trunc i32 %414 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %416 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %417 = add i32 %416, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %417, i32* %8
	movq	%rsi, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %418 = zext i32 %416 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %419 = getelementptr [320 x i8], i8* %13, i64 0, i64 %418
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %415, i8* %419
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %420
	jmp	tdefl_start_dynamic_block420
	.text
tdefl_start_dynamic_block420:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %421
	jmp	tdefl_start_dynamic_block421
	.text
tdefl_start_dynamic_block421:
	# %422 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %423 = getelementptr %struct.tdefl_compressor, i8* %422, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %424 = getelementptr [3 x [288 x i16]], i8* %423, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %425 = load i8, i8* %15
	movq	-104(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %426 = zext i8 %425 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %427 = getelementptr [288 x i16], i8* %424, i64 0, i64 %426
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %428 = load i16, i16* %427
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %429 = zext i16 %428 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %430 = add i32 %429, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %431 = trunc i32 %430 to i16
	movq	%rbx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %432 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %433 = getelementptr %struct.tdefl_compressor, i8* %432, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %434 = getelementptr [3 x [288 x i16]], i8* %433, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %435 = load i8, i8* %15
	movq	-104(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %436 = zext i8 %435 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %437 = getelementptr [288 x i16], i8* %434, i64 0, i64 %436
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %431, i16* %437
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %438 = load i8, i8* %15
	movq	-104(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rsi
	movb	%al, %sil
	# %439 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %440 = add i32 %439, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %440, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %441 = zext i32 %439 to i64
	movq	%rdi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %442 = getelementptr [320 x i8], i8* %13, i64 0, i64 %441
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %438, i8* %442
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %509
	jmp	tdefl_start_dynamic_block509
	.text
tdefl_start_dynamic_block443:
	# %444 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %445 = add i32 %444, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %445, i32* %10
	movq	%rbx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %446 = icmp eq i32 %445, 6
	movq	%rbx, %rax
	movq	$6, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %446, label %447, label %508
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block508
	jmp	tdefl_start_dynamic_block447
	.text
tdefl_start_dynamic_block447:
	# %448 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %449 = icmp ne i32 %448, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %449, label %450, label %507
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block507
	jmp	tdefl_start_dynamic_block450
	.text
tdefl_start_dynamic_block450:
	# %451 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %452 = icmp ult i32 %451, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %452, label %453, label %482
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block482
	jmp	tdefl_start_dynamic_block453
	.text
tdefl_start_dynamic_block453:
	# %454 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %455 = getelementptr %struct.tdefl_compressor, i8* %454, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %456 = getelementptr [3 x [288 x i16]], i8* %455, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %457 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %458 = zext i8 %457 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %459 = getelementptr [288 x i16], i8* %456, i64 0, i64 %458
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %460 = load i16, i16* %459
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %461 = zext i16 %460 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %462 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %463 = add i32 %461, %462
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %464 = trunc i32 %463 to i16
	movq	%rbx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %465 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %466 = getelementptr %struct.tdefl_compressor, i8* %465, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %467 = getelementptr [3 x [288 x i16]], i8* %466, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %468 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %469 = zext i8 %468 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %470 = getelementptr [288 x i16], i8* %467, i64 0, i64 %469
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %464, i16* %470
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %471
	jmp	tdefl_start_dynamic_block471
	.text
tdefl_start_dynamic_block471:
	# %472 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %473 = add i32 %472, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %473, i32* %10
	movq	%rbx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %474 = icmp ne i32 %472, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %474, label %475, label %481
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block481
	jmp	tdefl_start_dynamic_block475
	.text
tdefl_start_dynamic_block475:
	# %476 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %477 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %478 = add i32 %477, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %478, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %479 = zext i32 %477 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %480 = getelementptr [320 x i8], i8* %13, i64 0, i64 %479
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %476, i8* %480
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %471
	jmp	tdefl_start_dynamic_block471
	.text
tdefl_start_dynamic_block481:
	# br label %506
	jmp	tdefl_start_dynamic_block506
	.text
tdefl_start_dynamic_block482:
	# %483 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %484 = getelementptr %struct.tdefl_compressor, i8* %483, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %485 = getelementptr [3 x [288 x i16]], i8* %484, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %486 = getelementptr [288 x i16], i8* %485, i64 0, i64 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %487 = load i16, i16* %486
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %488 = zext i16 %487 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %489 = add i32 %488, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %490 = trunc i32 %489 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %491 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %492 = getelementptr %struct.tdefl_compressor, i8* %491, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %493 = getelementptr [3 x [288 x i16]], i8* %492, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %494 = getelementptr [288 x i16], i8* %493, i64 0, i64 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %490, i16* %494
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %495 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %496 = add i32 %495, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %496, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %497 = zext i32 %495 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %498 = getelementptr [320 x i8], i8* %13, i64 0, i64 %497
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 16, i8* %498
	movq	$16, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %499 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %500 = sub i32 %499, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %501 = trunc i32 %500 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %502 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %503 = add i32 %502, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %503, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %504 = zext i32 %502 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %505 = getelementptr [320 x i8], i8* %13, i64 0, i64 %504
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %501, i8* %505
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %506
	jmp	tdefl_start_dynamic_block506
	.text
tdefl_start_dynamic_block506:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %507
	jmp	tdefl_start_dynamic_block507
	.text
tdefl_start_dynamic_block507:
	# br label %508
	jmp	tdefl_start_dynamic_block508
	.text
tdefl_start_dynamic_block508:
	# br label %509
	jmp	tdefl_start_dynamic_block509
	.text
tdefl_start_dynamic_block509:
	# br label %510
	jmp	tdefl_start_dynamic_block510
	.text
tdefl_start_dynamic_block510:
	# %511 = load i8, i8* %15
	movq	-104(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# store i8 %511, i8* %14
	movq	%rbx, %rax
	movq	-96(%rbp), %rcx
	movb	%al, (%rcx)
	# br label %512
	jmp	tdefl_start_dynamic_block512
	.text
tdefl_start_dynamic_block512:
	# %513 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %514 = add i32 %513, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %514, i32* %6
	movq	%rbx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %112
	jmp	tdefl_start_dynamic_block112
	.text
tdefl_start_dynamic_block515:
	# %516 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %517 = icmp ne i32 %516, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %517, label %518, label %579
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block579
	jmp	tdefl_start_dynamic_block518
	.text
tdefl_start_dynamic_block518:
	# %519 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %520 = icmp ne i32 %519, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %520, label %521, label %578
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block578
	jmp	tdefl_start_dynamic_block521
	.text
tdefl_start_dynamic_block521:
	# %522 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %523 = icmp ult i32 %522, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %523, label %524, label %553
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block553
	jmp	tdefl_start_dynamic_block524
	.text
tdefl_start_dynamic_block524:
	# %525 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %526 = getelementptr %struct.tdefl_compressor, i8* %525, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %527 = getelementptr [3 x [288 x i16]], i8* %526, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %528 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %529 = zext i8 %528 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %530 = getelementptr [288 x i16], i8* %527, i64 0, i64 %529
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %531 = load i16, i16* %530
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %532 = zext i16 %531 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %533 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %534 = add i32 %532, %533
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %535 = trunc i32 %534 to i16
	movq	%rbx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %536 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %537 = getelementptr %struct.tdefl_compressor, i8* %536, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %538 = getelementptr [3 x [288 x i16]], i8* %537, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %539 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %540 = zext i8 %539 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %541 = getelementptr [288 x i16], i8* %538, i64 0, i64 %540
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %535, i16* %541
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %542
	jmp	tdefl_start_dynamic_block542
	.text
tdefl_start_dynamic_block542:
	# %543 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %544 = add i32 %543, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %544, i32* %10
	movq	%rsi, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %545 = icmp ne i32 %543, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %545, label %546, label %552
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block552
	jmp	tdefl_start_dynamic_block546
	.text
tdefl_start_dynamic_block546:
	# %547 = load i8, i8* %14
	movq	-96(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdi
	movb	%al, %dil
	# %548 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %549 = add i32 %548, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %549, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %550 = zext i32 %548 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %551 = getelementptr [320 x i8], i8* %13, i64 0, i64 %550
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %547, i8* %551
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %542
	jmp	tdefl_start_dynamic_block542
	.text
tdefl_start_dynamic_block552:
	# br label %577
	jmp	tdefl_start_dynamic_block577
	.text
tdefl_start_dynamic_block553:
	# %554 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %555 = getelementptr %struct.tdefl_compressor, i8* %554, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %556 = getelementptr [3 x [288 x i16]], i8* %555, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %557 = getelementptr [288 x i16], i8* %556, i64 0, i64 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %558 = load i16, i16* %557
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %559 = zext i16 %558 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %560 = add i32 %559, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %561 = trunc i32 %560 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %562 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %563 = getelementptr %struct.tdefl_compressor, i8* %562, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %564 = getelementptr [3 x [288 x i16]], i8* %563, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %565 = getelementptr [288 x i16], i8* %564, i64 0, i64 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %561, i16* %565
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %566 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %567 = add i32 %566, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %567, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %568 = zext i32 %566 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %569 = getelementptr [320 x i8], i8* %13, i64 0, i64 %568
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 16, i8* %569
	movq	$16, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %570 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %571 = sub i32 %570, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %572 = trunc i32 %571 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %573 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %574 = add i32 %573, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %574, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %575 = zext i32 %573 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %576 = getelementptr [320 x i8], i8* %13, i64 0, i64 %575
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %572, i8* %576
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %577
	jmp	tdefl_start_dynamic_block577
	.text
tdefl_start_dynamic_block577:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %578
	jmp	tdefl_start_dynamic_block578
	.text
tdefl_start_dynamic_block578:
	# br label %663
	jmp	tdefl_start_dynamic_block663
	.text
tdefl_start_dynamic_block579:
	# %580 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %581 = icmp ne i32 %580, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %581, label %582, label %662
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block662
	jmp	tdefl_start_dynamic_block582
	.text
tdefl_start_dynamic_block582:
	# %583 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %584 = icmp ult i32 %583, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %584, label %585, label %609
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block609
	jmp	tdefl_start_dynamic_block585
	.text
tdefl_start_dynamic_block585:
	# %586 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %587 = getelementptr %struct.tdefl_compressor, i8* %586, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %588 = getelementptr [3 x [288 x i16]], i8* %587, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %589 = getelementptr [288 x i16], i8* %588, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %590 = load i16, i16* %589
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %591 = zext i16 %590 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %592 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %593 = add i32 %591, %592
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %594 = trunc i32 %593 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %595 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %596 = getelementptr %struct.tdefl_compressor, i8* %595, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %597 = getelementptr [3 x [288 x i16]], i8* %596, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %598 = getelementptr [288 x i16], i8* %597, i64 0, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %594, i16* %598
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %599
	jmp	tdefl_start_dynamic_block599
	.text
tdefl_start_dynamic_block599:
	# %600 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %601 = add i32 %600, -1
	movq	%rsi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %601, i32* %9
	movq	%rbx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %602 = icmp ne i32 %600, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setne	%bl
	# br i1 %602, label %603, label %608
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block608
	jmp	tdefl_start_dynamic_block603
	.text
tdefl_start_dynamic_block603:
	# %604 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %605 = add i32 %604, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %605, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %606 = zext i32 %604 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %607 = getelementptr [320 x i8], i8* %13, i64 0, i64 %606
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 0, i8* %607
	movq	$0, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %599
	jmp	tdefl_start_dynamic_block599
	.text
tdefl_start_dynamic_block608:
	# br label %661
	jmp	tdefl_start_dynamic_block661
	.text
tdefl_start_dynamic_block609:
	# %610 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %611 = icmp ule i32 %610, 10
	movq	%rbx, %rax
	movq	$10, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setbe	%bl
	# br i1 %611, label %612, label %636
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block636
	jmp	tdefl_start_dynamic_block612
	.text
tdefl_start_dynamic_block612:
	# %613 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %614 = getelementptr %struct.tdefl_compressor, i8* %613, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %615 = getelementptr [3 x [288 x i16]], i8* %614, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %616 = getelementptr [288 x i16], i8* %615, i64 0, i64 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %617 = load i16, i16* %616
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %618 = zext i16 %617 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %619 = add i32 %618, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %620 = trunc i32 %619 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %621 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %622 = getelementptr %struct.tdefl_compressor, i8* %621, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %623 = getelementptr [3 x [288 x i16]], i8* %622, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %624 = getelementptr [288 x i16], i8* %623, i64 0, i64 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %620, i16* %624
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %625 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %626 = add i32 %625, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %626, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %627 = zext i32 %625 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %628 = getelementptr [320 x i8], i8* %13, i64 0, i64 %627
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 17, i8* %628
	movq	$17, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %629 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %630 = sub i32 %629, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %631 = trunc i32 %630 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %632 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %633 = add i32 %632, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %633, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %634 = zext i32 %632 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %635 = getelementptr [320 x i8], i8* %13, i64 0, i64 %634
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %631, i8* %635
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %660
	jmp	tdefl_start_dynamic_block660
	.text
tdefl_start_dynamic_block636:
	# %637 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %638 = getelementptr %struct.tdefl_compressor, i8* %637, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %639 = getelementptr [3 x [288 x i16]], i8* %638, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %640 = getelementptr [288 x i16], i8* %639, i64 0, i64 18
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %641 = load i16, i16* %640
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %642 = zext i16 %641 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %643 = add i32 %642, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %644 = trunc i32 %643 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %645 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %646 = getelementptr %struct.tdefl_compressor, i8* %645, i32 0, i32 36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %647 = getelementptr [3 x [288 x i16]], i8* %646, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %648 = getelementptr [288 x i16], i8* %647, i64 0, i64 18
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$18, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %644, i16* %648
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %649 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %650 = add i32 %649, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %650, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %651 = zext i32 %649 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %652 = getelementptr [320 x i8], i8* %13, i64 0, i64 %651
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 18, i8* %652
	movq	$18, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %653 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %654 = sub i32 %653, 11
	movq	%rbx, %rax
	movq	$11, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %655 = trunc i32 %654 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %656 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %657 = add i32 %656, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %657, i32* %8
	movq	%rbx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %658 = zext i32 %656 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %659 = getelementptr [320 x i8], i8* %13, i64 0, i64 %658
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %655, i8* %659
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %660
	jmp	tdefl_start_dynamic_block660
	.text
tdefl_start_dynamic_block660:
	# br label %661
	jmp	tdefl_start_dynamic_block661
	.text
tdefl_start_dynamic_block661:
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %662
	jmp	tdefl_start_dynamic_block662
	.text
tdefl_start_dynamic_block662:
	# br label %663
	jmp	tdefl_start_dynamic_block663
	.text
tdefl_start_dynamic_block663:
	# %664 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# call void @tdefl_optimize_huffman_table (i8* %664, i32 2, i32 19, i32 7, i32 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$2, %rax
	pushq	%rax
	movq	$19, %rax
	pushq	%rax
	movq	$7, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%r8
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_optimize_huffman_table
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %665
	jmp	tdefl_start_dynamic_block665
	.text
tdefl_start_dynamic_block665:
	# store i32 2, i32* %16
	movq	$2, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 2, i32* %17
	movq	$2, %rax
	movq	-120(%rbp), %rcx
	movl	%eax, (%rcx)
	# %666 = load i32, i32* %16
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %667 = load i32, i32* %17
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %668 = shl i32 1, %667
	movq	$1, %rax
	movq	%rbx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %669 = sub i32 %668, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %670 = icmp ule i32 %666, %669
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setbe	%bl
	# %671 = xor i1 %670, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %672 = zext i1 %671 to i32
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %673 = sext i32 %672 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %674 = icmp ne i64 %673, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %674, label %675, label %677
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block677
	jmp	tdefl_start_dynamic_block675
	.text
tdefl_start_dynamic_block675:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_dynamic_block, i8* @.str.11, i32 2479, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_dynamic_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2479, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_dynamic_block676:
	# br label %678
	jmp	tdefl_start_dynamic_block678
	.text
tdefl_start_dynamic_block677:
	# br label %678
	jmp	tdefl_start_dynamic_block678
	.text
tdefl_start_dynamic_block678:
	# %679 = load i32, i32* %16
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %680 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %681 = getelementptr %struct.tdefl_compressor, i8* %680, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %682 = load i32, i32* %681
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %683 = shl i32 %679, %682
	movq	%rsi, %rax
	movq	%rbx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %684 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %685 = getelementptr %struct.tdefl_compressor, i8* %684, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %686 = load i32, i32* %685
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %687 = or i32 %686, %683
	movq	%rbx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %687, i32* %685
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %688 = load i32, i32* %17
	movq	-120(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %689 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %690 = getelementptr %struct.tdefl_compressor, i8* %689, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %691 = load i32, i32* %690
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %692 = add i32 %691, %688
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %692, i32* %690
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %693
	jmp	tdefl_start_dynamic_block693
	.text
tdefl_start_dynamic_block693:
	# %694 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %695 = getelementptr %struct.tdefl_compressor, i8* %694, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %696 = load i32, i32* %695
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %697 = icmp uge i32 %696, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setnb	%bl
	# br i1 %697, label %698, label %724
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block724
	jmp	tdefl_start_dynamic_block698
	.text
tdefl_start_dynamic_block698:
	# %699 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %700 = getelementptr %struct.tdefl_compressor, i8* %699, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %701 = load i8*, i8** %700
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %702 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %703 = getelementptr %struct.tdefl_compressor, i8* %702, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %704 = load i8*, i8** %703
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %705 = icmp ult i8* %701, %704
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %705, label %706, label %715
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block715
	jmp	tdefl_start_dynamic_block706
	.text
tdefl_start_dynamic_block706:
	# %707 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %708 = getelementptr %struct.tdefl_compressor, i8* %707, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %709 = load i32, i32* %708
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %710 = trunc i32 %709 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %711 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %712 = getelementptr %struct.tdefl_compressor, i8* %711, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %713 = load i8*, i8** %712
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %714 = getelementptr i8, i8* %713, i32 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %714, i8** %712
	movq	%rbx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# store i8 %710, i8* %713
	movq	%rdi, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# br label %715
	jmp	tdefl_start_dynamic_block715
	.text
tdefl_start_dynamic_block715:
	# %716 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %717 = getelementptr %struct.tdefl_compressor, i8* %716, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %718 = load i32, i32* %717
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %719 = lshr i32 %718, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# store i32 %719, i32* %717
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %720 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %721 = getelementptr %struct.tdefl_compressor, i8* %720, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %722 = load i32, i32* %721
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %723 = sub i32 %722, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %723, i32* %721
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %693
	jmp	tdefl_start_dynamic_block693
	.text
tdefl_start_dynamic_block724:
	# br label %725
	jmp	tdefl_start_dynamic_block725
	.text
tdefl_start_dynamic_block725:
	# br label %726
	jmp	tdefl_start_dynamic_block726
	.text
tdefl_start_dynamic_block726:
	# %727 = load i32, i32* %3
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %728 = sub i32 %727, 257
	movq	%rbx, %rax
	movq	$257, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %728, i32* %18
	movq	%rbx, %rax
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 5, i32* %19
	movq	$5, %rax
	movq	-136(%rbp), %rcx
	movl	%eax, (%rcx)
	# %729 = load i32, i32* %18
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %730 = load i32, i32* %19
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %731 = shl i32 1, %730
	movq	$1, %rax
	movq	%rbx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %732 = sub i32 %731, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %733 = icmp ule i32 %729, %732
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setbe	%bl
	# %734 = xor i1 %733, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %735 = zext i1 %734 to i32
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %736 = sext i32 %735 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %737 = icmp ne i64 %736, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %737, label %738, label %740
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block740
	jmp	tdefl_start_dynamic_block738
	.text
tdefl_start_dynamic_block738:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_dynamic_block, i8* @.str.11, i32 2481, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_dynamic_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2481, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_dynamic_block739:
	# br label %741
	jmp	tdefl_start_dynamic_block741
	.text
tdefl_start_dynamic_block740:
	# br label %741
	jmp	tdefl_start_dynamic_block741
	.text
tdefl_start_dynamic_block741:
	# %742 = load i32, i32* %18
	movq	-128(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %743 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %744 = getelementptr %struct.tdefl_compressor, i8* %743, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %745 = load i32, i32* %744
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %746 = shl i32 %742, %745
	movq	%rsi, %rax
	movq	%rbx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %747 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %748 = getelementptr %struct.tdefl_compressor, i8* %747, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %749 = load i32, i32* %748
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %750 = or i32 %749, %746
	movq	%rbx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %750, i32* %748
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %751 = load i32, i32* %19
	movq	-136(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %752 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %753 = getelementptr %struct.tdefl_compressor, i8* %752, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %754 = load i32, i32* %753
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %755 = add i32 %754, %751
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %755, i32* %753
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %756
	jmp	tdefl_start_dynamic_block756
	.text
tdefl_start_dynamic_block756:
	# %757 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %758 = getelementptr %struct.tdefl_compressor, i8* %757, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %759 = load i32, i32* %758
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %760 = icmp uge i32 %759, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setnb	%bl
	# br i1 %760, label %761, label %787
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block787
	jmp	tdefl_start_dynamic_block761
	.text
tdefl_start_dynamic_block761:
	# %762 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %763 = getelementptr %struct.tdefl_compressor, i8* %762, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %764 = load i8*, i8** %763
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %765 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %766 = getelementptr %struct.tdefl_compressor, i8* %765, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %767 = load i8*, i8** %766
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %768 = icmp ult i8* %764, %767
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %768, label %769, label %778
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block778
	jmp	tdefl_start_dynamic_block769
	.text
tdefl_start_dynamic_block769:
	# %770 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %771 = getelementptr %struct.tdefl_compressor, i8* %770, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %772 = load i32, i32* %771
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %773 = trunc i32 %772 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %774 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %775 = getelementptr %struct.tdefl_compressor, i8* %774, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %776 = load i8*, i8** %775
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %777 = getelementptr i8, i8* %776, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# store i8* %777, i8** %775
	movq	%r8, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %773, i8* %776
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %778
	jmp	tdefl_start_dynamic_block778
	.text
tdefl_start_dynamic_block778:
	# %779 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %780 = getelementptr %struct.tdefl_compressor, i8* %779, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %781 = load i32, i32* %780
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %782 = lshr i32 %781, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# store i32 %782, i32* %780
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %783 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %784 = getelementptr %struct.tdefl_compressor, i8* %783, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %785 = load i32, i32* %784
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %786 = sub i32 %785, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %786, i32* %784
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %756
	jmp	tdefl_start_dynamic_block756
	.text
tdefl_start_dynamic_block787:
	# br label %788
	jmp	tdefl_start_dynamic_block788
	.text
tdefl_start_dynamic_block788:
	# br label %789
	jmp	tdefl_start_dynamic_block789
	.text
tdefl_start_dynamic_block789:
	# %790 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %791 = sub i32 %790, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %791, i32* %20
	movq	%rbx, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 5, i32* %21
	movq	$5, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# %792 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %793 = load i32, i32* %21
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %794 = shl i32 1, %793
	movq	$1, %rax
	movq	%rbx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %795 = sub i32 %794, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %796 = icmp ule i32 %792, %795
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setbe	%bl
	# %797 = xor i1 %796, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rbx
	# %798 = zext i1 %797 to i32
	movq	%rbx, %rax
	movq	%rax, %rbx
	# %799 = sext i32 %798 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %800 = icmp ne i64 %799, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %800, label %801, label %803
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block803
	jmp	tdefl_start_dynamic_block801
	.text
tdefl_start_dynamic_block801:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_dynamic_block, i8* @.str.11, i32 2482, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_dynamic_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2482, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_dynamic_block802:
	# br label %804
	jmp	tdefl_start_dynamic_block804
	.text
tdefl_start_dynamic_block803:
	# br label %804
	jmp	tdefl_start_dynamic_block804
	.text
tdefl_start_dynamic_block804:
	# %805 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %806 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %807 = getelementptr %struct.tdefl_compressor, i8* %806, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %808 = load i32, i32* %807
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %809 = shl i32 %805, %808
	movq	%rsi, %rax
	movq	%rbx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdi
	# %810 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %811 = getelementptr %struct.tdefl_compressor, i8* %810, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %812 = load i32, i32* %811
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %813 = or i32 %812, %809
	movq	%rbx, %rax
	movq	%rdi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %813, i32* %811
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %814 = load i32, i32* %21
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %815 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %816 = getelementptr %struct.tdefl_compressor, i8* %815, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %817 = load i32, i32* %816
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %818 = add i32 %817, %814
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %818, i32* %816
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %819
	jmp	tdefl_start_dynamic_block819
	.text
tdefl_start_dynamic_block819:
	# %820 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %821 = getelementptr %struct.tdefl_compressor, i8* %820, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %822 = load i32, i32* %821
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %823 = icmp uge i32 %822, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setnb	%bl
	# br i1 %823, label %824, label %850
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block850
	jmp	tdefl_start_dynamic_block824
	.text
tdefl_start_dynamic_block824:
	# %825 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %826 = getelementptr %struct.tdefl_compressor, i8* %825, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %827 = load i8*, i8** %826
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %828 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %829 = getelementptr %struct.tdefl_compressor, i8* %828, i32 0, i32 12
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %830 = load i8*, i8** %829
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %831 = icmp ult i8* %827, %830
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %831, label %832, label %841
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block841
	jmp	tdefl_start_dynamic_block832
	.text
tdefl_start_dynamic_block832:
	# %833 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %834 = getelementptr %struct.tdefl_compressor, i8* %833, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %835 = load i32, i32* %834
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %836 = trunc i32 %835 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %837 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %838 = getelementptr %struct.tdefl_compressor, i8* %837, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %839 = load i8*, i8** %838
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %840 = getelementptr i8, i8* %839, i32 1
	movq	%r8, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8* %840, i8** %838
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %836, i8* %839
	movq	%rdi, %rax
	movq	%r8, %rcx
	movb	%al, (%rcx)
	# br label %841
	jmp	tdefl_start_dynamic_block841
	.text
tdefl_start_dynamic_block841:
	# %842 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %843 = getelementptr %struct.tdefl_compressor, i8* %842, i32 0, i32 17
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %844 = load i32, i32* %843
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %845 = lshr i32 %844, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# store i32 %845, i32* %843
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %846 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %847 = getelementptr %struct.tdefl_compressor, i8* %846, i32 0, i32 16
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %848 = load i32, i32* %847
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %849 = sub i32 %848, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %849, i32* %847
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %819
	jmp	tdefl_start_dynamic_block819
	.text
tdefl_start_dynamic_block850:
	# br label %851
	jmp	tdefl_start_dynamic_block851
	.text
tdefl_start_dynamic_block851:
	# store i32 18, i32* %5
	movq	$18, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %852
	jmp	tdefl_start_dynamic_block852
	.text
tdefl_start_dynamic_block852:
	# %853 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %854 = icmp sge i32 %853, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setge	%bl
	# br i1 %854, label %855, label %872
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block872
	jmp	tdefl_start_dynamic_block855
	.text
tdefl_start_dynamic_block855:
	# %856 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %857 = getelementptr %struct.tdefl_compressor, i8* %856, i32 0, i32 38
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %858 = getelementptr [3 x [288 x i8]], i8* %857, i64 0, i64 2
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %859 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %860 = sext i32 %859 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %861 = getelementptr [19 x i8], i8* @s_tdefl_packed_code_size_syms_swizzle, i64 0, i64 %860
	leaq	_s_tdefl_packed_code_size_syms_swizzle(%rip), %rcx
	movq	$0, %rax
	imulq	$19, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %862 = load i8, i8* %861
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %863 = zext i8 %862 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %864 = getelementptr [288 x i8], i8* %858, i64 0, i64 %863
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %865 = load i8, i8* %864
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %866 = icmp ne i8 %865, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %866, label %867, label %868
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block868
	jmp	tdefl_start_dynamic_block867
	.text
tdefl_start_dynamic_block867:
	# br label %872
	jmp	tdefl_start_dynamic_block872
	.text
tdefl_start_dynamic_block868:
	# br label %869
	jmp	tdefl_start_dynamic_block869
	.text
tdefl_start_dynamic_block869:
	# %870 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %871 = add i32 %870, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %871, i32* %5
	movq	%rbx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %852
	jmp	tdefl_start_dynamic_block852
	.text
tdefl_start_dynamic_block872:
	# %873 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %874 = add i32 %873, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %875 = icmp sgt i32 4, %874
	movq	$4, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setg	%bl
	# br i1 %875, label %876, label %877
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block877
	jmp	tdefl_start_dynamic_block876
	.text
tdefl_start_dynamic_block876:
	# br label %880
	movq	$4, %rdx
	jmp	tdefl_start_dynamic_block880
	.text
tdefl_start_dynamic_block877:
	# %878 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %879 = add i32 %878, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# br label %880
	jmp	tdefl_start_dynamic_block880
	.text
tdefl_start_dynamic_block880:
	# %881 = phi i32 [4, %876], [%879, %877]
	# store i32 %881, i32* %5
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %882
	jmp	tdefl_start_dynamic_block882
	.text
tdefl_start_dynamic_block882:
	# %883 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %884 = sub i32 %883, 4
	movq	%rdx, %rax
	movq	$4, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %884, i32* %22
	movq	%rdx, %rax
	movq	-168(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 4, i32* %23
	movq	$4, %rax
	movq	-160(%rbp), %rcx
	movl	%eax, (%rcx)
	# %885 = load i32, i32* %22
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %886 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %887 = shl i32 1, %886
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %888 = sub i32 %887, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %889 = icmp ule i32 %885, %888
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %890 = xor i1 %889, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %891 = zext i1 %890 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %892 = sext i32 %891 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %893 = icmp ne i64 %892, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %893, label %894, label %896
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block896
	jmp	tdefl_start_dynamic_block894
	.text
tdefl_start_dynamic_block894:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_dynamic_block, i8* @.str.11, i32 2488, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_dynamic_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2488, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_dynamic_block895:
	# br label %897
	jmp	tdefl_start_dynamic_block897
	.text
tdefl_start_dynamic_block896:
	# br label %897
	jmp	tdefl_start_dynamic_block897
	.text
tdefl_start_dynamic_block897:
	# %898 = load i32, i32* %22
	movq	-168(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %899 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %900 = getelementptr %struct.tdefl_compressor, i8* %899, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %901 = load i32, i32* %900
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %902 = shl i32 %898, %901
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %903 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %904 = getelementptr %struct.tdefl_compressor, i8* %903, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %905 = load i32, i32* %904
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %906 = or i32 %905, %902
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %906, i32* %904
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %907 = load i32, i32* %23
	movq	-160(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %908 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %909 = getelementptr %struct.tdefl_compressor, i8* %908, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %910 = load i32, i32* %909
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %911 = add i32 %910, %907
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %911, i32* %909
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %912
	jmp	tdefl_start_dynamic_block912
	.text
tdefl_start_dynamic_block912:
	# %913 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %914 = getelementptr %struct.tdefl_compressor, i8* %913, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %915 = load i32, i32* %914
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %916 = icmp uge i32 %915, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %916, label %917, label %943
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block943
	jmp	tdefl_start_dynamic_block917
	.text
tdefl_start_dynamic_block917:
	# %918 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %919 = getelementptr %struct.tdefl_compressor, i8* %918, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %920 = load i8*, i8** %919
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %921 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %922 = getelementptr %struct.tdefl_compressor, i8* %921, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %923 = load i8*, i8** %922
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %924 = icmp ult i8* %920, %923
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %924, label %925, label %934
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block934
	jmp	tdefl_start_dynamic_block925
	.text
tdefl_start_dynamic_block925:
	# %926 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %927 = getelementptr %struct.tdefl_compressor, i8* %926, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %928 = load i32, i32* %927
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %929 = trunc i32 %928 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %930 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %931 = getelementptr %struct.tdefl_compressor, i8* %930, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %932 = load i8*, i8** %931
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %933 = getelementptr i8, i8* %932, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %933, i8** %931
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %929, i8* %932
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %934
	jmp	tdefl_start_dynamic_block934
	.text
tdefl_start_dynamic_block934:
	# %935 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %936 = getelementptr %struct.tdefl_compressor, i8* %935, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %937 = load i32, i32* %936
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %938 = lshr i32 %937, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %938, i32* %936
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %939 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %940 = getelementptr %struct.tdefl_compressor, i8* %939, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %941 = load i32, i32* %940
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %942 = sub i32 %941, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %942, i32* %940
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %912
	jmp	tdefl_start_dynamic_block912
	.text
tdefl_start_dynamic_block943:
	# br label %944
	jmp	tdefl_start_dynamic_block944
	.text
tdefl_start_dynamic_block944:
	# store i32 0, i32* %6
	movq	$0, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %945
	jmp	tdefl_start_dynamic_block945
	.text
tdefl_start_dynamic_block945:
	# %946 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %947 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %948 = icmp slt i32 %946, %947
	movq	%rdx, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %948, label %949, label %1025
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1025
	jmp	tdefl_start_dynamic_block949
	.text
tdefl_start_dynamic_block949:
	# br label %950
	jmp	tdefl_start_dynamic_block950
	.text
tdefl_start_dynamic_block950:
	# %951 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %952 = getelementptr %struct.tdefl_compressor, i8* %951, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %953 = getelementptr [3 x [288 x i8]], i8* %952, i64 0, i64 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %954 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %955 = zext i32 %954 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %956 = getelementptr [19 x i8], i8* @s_tdefl_packed_code_size_syms_swizzle, i64 0, i64 %955
	leaq	_s_tdefl_packed_code_size_syms_swizzle(%rip), %rcx
	movq	$0, %rax
	imulq	$19, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %957 = load i8, i8* %956
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %958 = zext i8 %957 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %959 = getelementptr [288 x i8], i8* %953, i64 0, i64 %958
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %960 = load i8, i8* %959
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %961 = zext i8 %960 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %961, i32* %24
	movq	%rdx, %rax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 3, i32* %25
	movq	$3, %rax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
	# %962 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %963 = load i32, i32* %25
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %964 = shl i32 1, %963
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %965 = sub i32 %964, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %966 = icmp ule i32 %962, %965
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %967 = xor i1 %966, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %968 = zext i1 %967 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %969 = sext i32 %968 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %970 = icmp ne i64 %969, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %970, label %971, label %973
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block973
	jmp	tdefl_start_dynamic_block971
	.text
tdefl_start_dynamic_block971:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_dynamic_block, i8* @.str.11, i32 2490, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_dynamic_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2490, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_dynamic_block972:
	# br label %974
	jmp	tdefl_start_dynamic_block974
	.text
tdefl_start_dynamic_block973:
	# br label %974
	jmp	tdefl_start_dynamic_block974
	.text
tdefl_start_dynamic_block974:
	# %975 = load i32, i32* %24
	movq	-176(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %976 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %977 = getelementptr %struct.tdefl_compressor, i8* %976, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %978 = load i32, i32* %977
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %979 = shl i32 %975, %978
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %980 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %981 = getelementptr %struct.tdefl_compressor, i8* %980, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %982 = load i32, i32* %981
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %983 = or i32 %982, %979
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %983, i32* %981
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %984 = load i32, i32* %25
	movq	-184(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %985 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %986 = getelementptr %struct.tdefl_compressor, i8* %985, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %987 = load i32, i32* %986
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %988 = add i32 %987, %984
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %988, i32* %986
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %989
	jmp	tdefl_start_dynamic_block989
	.text
tdefl_start_dynamic_block989:
	# %990 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %991 = getelementptr %struct.tdefl_compressor, i8* %990, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %992 = load i32, i32* %991
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %993 = icmp uge i32 %992, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %993, label %994, label %1020
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1020
	jmp	tdefl_start_dynamic_block994
	.text
tdefl_start_dynamic_block994:
	# %995 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %996 = getelementptr %struct.tdefl_compressor, i8* %995, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %997 = load i8*, i8** %996
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %998 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %999 = getelementptr %struct.tdefl_compressor, i8* %998, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1000 = load i8*, i8** %999
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1001 = icmp ult i8* %997, %1000
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1001, label %1002, label %1011
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1011
	jmp	tdefl_start_dynamic_block1002
	.text
tdefl_start_dynamic_block1002:
	# %1003 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1004 = getelementptr %struct.tdefl_compressor, i8* %1003, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1005 = load i32, i32* %1004
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1006 = trunc i32 %1005 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1007 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1008 = getelementptr %struct.tdefl_compressor, i8* %1007, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1009 = load i8*, i8** %1008
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1010 = getelementptr i8, i8* %1009, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1010, i8** %1008
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %1006, i8* %1009
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %1011
	jmp	tdefl_start_dynamic_block1011
	.text
tdefl_start_dynamic_block1011:
	# %1012 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1013 = getelementptr %struct.tdefl_compressor, i8* %1012, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1014 = load i32, i32* %1013
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1015 = lshr i32 %1014, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %1015, i32* %1013
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1016 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1017 = getelementptr %struct.tdefl_compressor, i8* %1016, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1018 = load i32, i32* %1017
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1019 = sub i32 %1018, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1019, i32* %1017
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %989
	jmp	tdefl_start_dynamic_block989
	.text
tdefl_start_dynamic_block1020:
	# br label %1021
	jmp	tdefl_start_dynamic_block1021
	.text
tdefl_start_dynamic_block1021:
	# br label %1022
	jmp	tdefl_start_dynamic_block1022
	.text
tdefl_start_dynamic_block1022:
	# %1023 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1024 = add i32 %1023, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1024, i32* %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %945
	jmp	tdefl_start_dynamic_block945
	.text
tdefl_start_dynamic_block1025:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %1026
	jmp	tdefl_start_dynamic_block1026
	.text
tdefl_start_dynamic_block1026:
	# %1027 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1028 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1029 = icmp ult i32 %1027, %1028
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1029, label %1030, label %1201
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1201
	jmp	tdefl_start_dynamic_block1030
	.text
tdefl_start_dynamic_block1030:
	# %1031 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1032 = add i32 %1031, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1032, i32* %11
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1033 = zext i32 %1031 to i64
	movq	%rbx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1034 = getelementptr [320 x i8], i8* %13, i64 0, i64 %1033
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1035 = load i8, i8* %1034
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1036 = zext i8 %1035 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1036, i32* %26
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %1037 = load i32, i32* %26
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1038 = icmp ult i32 %1037, 19
	movq	%rdx, %rax
	movq	$19, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# %1039 = xor i1 %1038, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1040 = zext i1 %1039 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1041 = sext i32 %1040 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1042 = icmp ne i64 %1041, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1042, label %1043, label %1045
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1045
	jmp	tdefl_start_dynamic_block1043
	.text
tdefl_start_dynamic_block1043:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_dynamic_block, i8* @.str.11, i32 2495, i8* @.str.74)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_dynamic_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2495, %rax
	pushq	%rax
	leaq	_.str.74(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_dynamic_block1044:
	# br label %1046
	jmp	tdefl_start_dynamic_block1046
	.text
tdefl_start_dynamic_block1045:
	# br label %1046
	jmp	tdefl_start_dynamic_block1046
	.text
tdefl_start_dynamic_block1046:
	# br label %1047
	jmp	tdefl_start_dynamic_block1047
	.text
tdefl_start_dynamic_block1047:
	# %1048 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1049 = getelementptr %struct.tdefl_compressor, i8* %1048, i32 0, i32 37
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$37, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1050 = getelementptr [3 x [288 x i16]], i8* %1049, i64 0, i64 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1051 = load i32, i32* %26
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1052 = zext i32 %1051 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1053 = getelementptr [288 x i16], i8* %1050, i64 0, i64 %1052
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1054 = load i16, i16* %1053
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %1055 = zext i16 %1054 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %1055, i32* %27
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %1056 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1057 = getelementptr %struct.tdefl_compressor, i8* %1056, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1058 = getelementptr [3 x [288 x i8]], i8* %1057, i64 0, i64 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1059 = load i32, i32* %26
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1060 = zext i32 %1059 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1061 = getelementptr [288 x i8], i8* %1058, i64 0, i64 %1060
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1062 = load i8, i8* %1061
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1063 = zext i8 %1062 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1063, i32* %28
	movq	%rdx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %1064 = load i32, i32* %27
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1065 = load i32, i32* %28
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1066 = shl i32 1, %1065
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1067 = sub i32 %1066, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1068 = icmp ule i32 %1064, %1067
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %1069 = xor i1 %1068, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1070 = zext i1 %1069 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1071 = sext i32 %1070 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1072 = icmp ne i64 %1071, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1072, label %1073, label %1075
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1075
	jmp	tdefl_start_dynamic_block1073
	.text
tdefl_start_dynamic_block1073:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_dynamic_block, i8* @.str.11, i32 2496, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_dynamic_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2496, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_dynamic_block1074:
	# br label %1076
	jmp	tdefl_start_dynamic_block1076
	.text
tdefl_start_dynamic_block1075:
	# br label %1076
	jmp	tdefl_start_dynamic_block1076
	.text
tdefl_start_dynamic_block1076:
	# %1077 = load i32, i32* %27
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1078 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1079 = getelementptr %struct.tdefl_compressor, i8* %1078, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1080 = load i32, i32* %1079
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1081 = shl i32 %1077, %1080
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %1082 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1083 = getelementptr %struct.tdefl_compressor, i8* %1082, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1084 = load i32, i32* %1083
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1085 = or i32 %1084, %1081
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1085, i32* %1083
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1086 = load i32, i32* %28
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1087 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1088 = getelementptr %struct.tdefl_compressor, i8* %1087, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1089 = load i32, i32* %1088
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1090 = add i32 %1089, %1086
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1090, i32* %1088
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %1091
	jmp	tdefl_start_dynamic_block1091
	.text
tdefl_start_dynamic_block1091:
	# %1092 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1093 = getelementptr %struct.tdefl_compressor, i8* %1092, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1094 = load i32, i32* %1093
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1095 = icmp uge i32 %1094, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1095, label %1096, label %1122
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1122
	jmp	tdefl_start_dynamic_block1096
	.text
tdefl_start_dynamic_block1096:
	# %1097 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1098 = getelementptr %struct.tdefl_compressor, i8* %1097, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1099 = load i8*, i8** %1098
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1100 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1101 = getelementptr %struct.tdefl_compressor, i8* %1100, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1102 = load i8*, i8** %1101
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1103 = icmp ult i8* %1099, %1102
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1103, label %1104, label %1113
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1113
	jmp	tdefl_start_dynamic_block1104
	.text
tdefl_start_dynamic_block1104:
	# %1105 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1106 = getelementptr %struct.tdefl_compressor, i8* %1105, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1107 = load i32, i32* %1106
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1108 = trunc i32 %1107 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1109 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1110 = getelementptr %struct.tdefl_compressor, i8* %1109, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1111 = load i8*, i8** %1110
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1112 = getelementptr i8, i8* %1111, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1112, i8** %1110
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %1108, i8* %1111
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %1113
	jmp	tdefl_start_dynamic_block1113
	.text
tdefl_start_dynamic_block1113:
	# %1114 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1115 = getelementptr %struct.tdefl_compressor, i8* %1114, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1116 = load i32, i32* %1115
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1117 = lshr i32 %1116, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %1117, i32* %1115
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1118 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1119 = getelementptr %struct.tdefl_compressor, i8* %1118, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1120 = load i32, i32* %1119
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1121 = sub i32 %1120, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1121, i32* %1119
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %1091
	jmp	tdefl_start_dynamic_block1091
	.text
tdefl_start_dynamic_block1122:
	# br label %1123
	jmp	tdefl_start_dynamic_block1123
	.text
tdefl_start_dynamic_block1123:
	# %1124 = load i32, i32* %26
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1125 = icmp uge i32 %1124, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1125, label %1126, label %1200
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1200
	jmp	tdefl_start_dynamic_block1126
	.text
tdefl_start_dynamic_block1126:
	# br label %1127
	jmp	tdefl_start_dynamic_block1127
	.text
tdefl_start_dynamic_block1127:
	# %1128 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1129 = add i32 %1128, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1129, i32* %11
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %1130 = zext i32 %1128 to i64
	movq	%rbx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1131 = getelementptr [320 x i8], i8* %13, i64 0, i64 %1130
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$320, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1132 = load i8, i8* %1131
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1133 = zext i8 %1132 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1133, i32* %29
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %1134 = load i32, i32* %26
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1135 = sub i32 %1134, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1136 = zext i32 %1135 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1137 = getelementptr [4 x i8], i8* @.str.15, i64 0, i64 %1136
	leaq	_.str.15(%rip), %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1138 = load i8, i8* %1137
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %1139 = sext i8 %1138 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %1139, i32* %30
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %1140 = load i32, i32* %29
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1141 = load i32, i32* %30
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1142 = shl i32 1, %1141
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %1143 = sub i32 %1142, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %1144 = icmp ule i32 %1140, %1143
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %1145 = xor i1 %1144, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %1146 = zext i1 %1145 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %1147 = sext i32 %1146 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1148 = icmp ne i64 %1147, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %1148, label %1149, label %1151
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1151
	jmp	tdefl_start_dynamic_block1149
	.text
tdefl_start_dynamic_block1149:
	# call void @__assert_rtn (i8* @__func__.tdefl_start_dynamic_block, i8* @.str.11, i32 2498, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_start_dynamic_block(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2498, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_start_dynamic_block1150:
	# br label %1152
	jmp	tdefl_start_dynamic_block1152
	.text
tdefl_start_dynamic_block1151:
	# br label %1152
	jmp	tdefl_start_dynamic_block1152
	.text
tdefl_start_dynamic_block1152:
	# %1153 = load i32, i32* %29
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %1154 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1155 = getelementptr %struct.tdefl_compressor, i8* %1154, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1156 = load i32, i32* %1155
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1157 = shl i32 %1153, %1156
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %1158 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1159 = getelementptr %struct.tdefl_compressor, i8* %1158, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1160 = load i32, i32* %1159
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1161 = or i32 %1160, %1157
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1161, i32* %1159
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1162 = load i32, i32* %30
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %1163 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1164 = getelementptr %struct.tdefl_compressor, i8* %1163, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1165 = load i32, i32* %1164
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1166 = add i32 %1165, %1162
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1166, i32* %1164
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %1167
	jmp	tdefl_start_dynamic_block1167
	.text
tdefl_start_dynamic_block1167:
	# %1168 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1169 = getelementptr %struct.tdefl_compressor, i8* %1168, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1170 = load i32, i32* %1169
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1171 = icmp uge i32 %1170, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %1171, label %1172, label %1198
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1198
	jmp	tdefl_start_dynamic_block1172
	.text
tdefl_start_dynamic_block1172:
	# %1173 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1174 = getelementptr %struct.tdefl_compressor, i8* %1173, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1175 = load i8*, i8** %1174
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1176 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1177 = getelementptr %struct.tdefl_compressor, i8* %1176, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1178 = load i8*, i8** %1177
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1179 = icmp ult i8* %1175, %1178
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %1179, label %1180, label %1189
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_start_dynamic_block1189
	jmp	tdefl_start_dynamic_block1180
	.text
tdefl_start_dynamic_block1180:
	# %1181 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1182 = getelementptr %struct.tdefl_compressor, i8* %1181, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %1183 = load i32, i32* %1182
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1184 = trunc i32 %1183 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %1185 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1186 = getelementptr %struct.tdefl_compressor, i8* %1185, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %1187 = load i8*, i8** %1186
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %1188 = getelementptr i8, i8* %1187, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %1188, i8** %1186
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %1184, i8* %1187
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %1189
	jmp	tdefl_start_dynamic_block1189
	.text
tdefl_start_dynamic_block1189:
	# %1190 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1191 = getelementptr %struct.tdefl_compressor, i8* %1190, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1192 = load i32, i32* %1191
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1193 = lshr i32 %1192, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %1193, i32* %1191
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %1194 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %1195 = getelementptr %struct.tdefl_compressor, i8* %1194, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %1196 = load i32, i32* %1195
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %1197 = sub i32 %1196, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %1197, i32* %1195
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %1167
	jmp	tdefl_start_dynamic_block1167
	.text
tdefl_start_dynamic_block1198:
	# br label %1199
	jmp	tdefl_start_dynamic_block1199
	.text
tdefl_start_dynamic_block1199:
	# br label %1200
	jmp	tdefl_start_dynamic_block1200
	.text
tdefl_start_dynamic_block1200:
	# br label %1026
	jmp	tdefl_start_dynamic_block1026
	.text
tdefl_start_dynamic_block1201:
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_compress_lz_codes
_tdefl_compress_lz_codes:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$96, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -80(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -88(%rbp)
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -96(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %18 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %2
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %3
	movq	$1, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %22 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %23 = getelementptr %struct.tdefl_compressor, i8* %22, i32 0, i32 39
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$39, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %24 = getelementptr [65536 x i8], i8* %23, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$65536, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %24, i8** %4
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %25
	jmp	tdefl_compress_lz_codes25
	.text
tdefl_compress_lz_codes25:
	# %26 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %27 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %28 = getelementptr %struct.tdefl_compressor, i8* %27, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %29 = load i8*, i8** %28
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %30 = icmp ult i8* %26, %29
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %30, label %31, label %528
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes528
	jmp	tdefl_compress_lz_codes31
	.text
tdefl_compress_lz_codes31:
	# %32 = load i32, i32* %3
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %33 = icmp eq i32 %32, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %33, label %34, label %40
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes40
	jmp	tdefl_compress_lz_codes34
	.text
tdefl_compress_lz_codes34:
	# %35 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %36 = getelementptr i8, i8* %35, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %36, i8** %4
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# %37 = load i8, i8* %35
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %38 = zext i8 %37 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %39 = or i32 %38, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %39, i32* %3
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %40
	jmp	tdefl_compress_lz_codes40
	.text
tdefl_compress_lz_codes40:
	# %41 = load i32, i32* %3
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %42 = and i32 %41, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %43 = icmp ne i32 %42, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %43, label %44, label %426
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes426
	jmp	tdefl_compress_lz_codes44
	.text
tdefl_compress_lz_codes44:
	# %45 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %46 = getelementptr i8, i8* %45, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %47 = load i8, i8* %46
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %48 = zext i8 %47 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %48, i32* %7
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# %49 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %50 = getelementptr i8, i8* %49, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %51 = load i8, i8* %50
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %52 = zext i8 %51 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %53 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %54 = getelementptr i8, i8* %53, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %55 = load i8, i8* %54
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %56 = zext i8 %55 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %57 = shl i32 %56, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %58 = or i32 %52, %57
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %58, i32* %8
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %59 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %60 = getelementptr i8, i8* %59, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %60, i8** %4
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# %61 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = getelementptr %struct.tdefl_compressor, i8* %61, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %63 = getelementptr [3 x [288 x i8]], i8* %62, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %64 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %65 = zext i32 %64 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %66 = getelementptr [256 x i16], i8* @s_tdefl_len_sym, i64 0, i64 %65
	leaq	_s_tdefl_len_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %67 = load i16, i16* %66
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %68 = zext i16 %67 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %69 = getelementptr [288 x i8], i8* %63, i64 0, i64 %68
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %70 = load i8, i8* %69
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %71 = icmp ne i8 %70, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# %72 = xor i1 %71, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %73 = zext i1 %72 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %74 = sext i32 %73 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %75 = icmp ne i64 %74, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %75, label %76, label %78
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes78
	jmp	tdefl_compress_lz_codes76
	.text
tdefl_compress_lz_codes76:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2638, i8* @.str.75)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2638, %rax
	pushq	%rax
	leaq	_.str.75(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes77:
	# br label %79
	jmp	tdefl_compress_lz_codes79
	.text
tdefl_compress_lz_codes78:
	# br label %79
	jmp	tdefl_compress_lz_codes79
	.text
tdefl_compress_lz_codes79:
	# br label %80
	jmp	tdefl_compress_lz_codes80
	.text
tdefl_compress_lz_codes80:
	# %81 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %82 = getelementptr %struct.tdefl_compressor, i8* %81, i32 0, i32 37
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$37, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %83 = getelementptr [3 x [288 x i16]], i8* %82, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %84 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %85 = zext i32 %84 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %86 = getelementptr [256 x i16], i8* @s_tdefl_len_sym, i64 0, i64 %85
	leaq	_s_tdefl_len_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %87 = load i16, i16* %86
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %88 = zext i16 %87 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %89 = getelementptr [288 x i16], i8* %83, i64 0, i64 %88
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %90 = load i16, i16* %89
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %91 = zext i16 %90 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %91, i32* %9
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %92 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %93 = getelementptr %struct.tdefl_compressor, i8* %92, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %94 = getelementptr [3 x [288 x i8]], i8* %93, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %95 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %96 = zext i32 %95 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %97 = getelementptr [256 x i16], i8* @s_tdefl_len_sym, i64 0, i64 %96
	leaq	_s_tdefl_len_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %98 = load i16, i16* %97
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %99 = zext i16 %98 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %100 = getelementptr [288 x i8], i8* %94, i64 0, i64 %99
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %101 = load i8, i8* %100
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %102 = zext i8 %101 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %102, i32* %10
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %103 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %104 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %105 = shl i32 1, %104
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %106 = sub i32 %105, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %107 = icmp ule i32 %103, %106
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %108 = xor i1 %107, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %109 = zext i1 %108 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %110 = sext i32 %109 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %111 = icmp ne i64 %110, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %111, label %112, label %114
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes114
	jmp	tdefl_compress_lz_codes112
	.text
tdefl_compress_lz_codes112:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2639, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2639, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes113:
	# br label %115
	jmp	tdefl_compress_lz_codes115
	.text
tdefl_compress_lz_codes114:
	# br label %115
	jmp	tdefl_compress_lz_codes115
	.text
tdefl_compress_lz_codes115:
	# %116 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %117 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %118 = getelementptr %struct.tdefl_compressor, i8* %117, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %119 = load i32, i32* %118
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %120 = shl i32 %116, %119
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %121 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %122 = getelementptr %struct.tdefl_compressor, i8* %121, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %123 = load i32, i32* %122
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %124 = or i32 %123, %120
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %124, i32* %122
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %125 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %126 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %127 = getelementptr %struct.tdefl_compressor, i8* %126, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %128 = load i32, i32* %127
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %129 = add i32 %128, %125
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %129, i32* %127
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %130
	jmp	tdefl_compress_lz_codes130
	.text
tdefl_compress_lz_codes130:
	# %131 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %132 = getelementptr %struct.tdefl_compressor, i8* %131, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %133 = load i32, i32* %132
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %134 = icmp uge i32 %133, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %134, label %135, label %161
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes161
	jmp	tdefl_compress_lz_codes135
	.text
tdefl_compress_lz_codes135:
	# %136 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %137 = getelementptr %struct.tdefl_compressor, i8* %136, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %138 = load i8*, i8** %137
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %139 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %140 = getelementptr %struct.tdefl_compressor, i8* %139, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %141 = load i8*, i8** %140
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %142 = icmp ult i8* %138, %141
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %142, label %143, label %152
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes152
	jmp	tdefl_compress_lz_codes143
	.text
tdefl_compress_lz_codes143:
	# %144 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %145 = getelementptr %struct.tdefl_compressor, i8* %144, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %146 = load i32, i32* %145
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %147 = trunc i32 %146 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %148 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %149 = getelementptr %struct.tdefl_compressor, i8* %148, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %150 = load i8*, i8** %149
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %151 = getelementptr i8, i8* %150, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %151, i8** %149
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %147, i8* %150
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %152
	jmp	tdefl_compress_lz_codes152
	.text
tdefl_compress_lz_codes152:
	# %153 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %154 = getelementptr %struct.tdefl_compressor, i8* %153, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %155 = load i32, i32* %154
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %156 = lshr i32 %155, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %156, i32* %154
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %157 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %158 = getelementptr %struct.tdefl_compressor, i8* %157, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %159 = load i32, i32* %158
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %160 = sub i32 %159, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %160, i32* %158
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %130
	jmp	tdefl_compress_lz_codes130
	.text
tdefl_compress_lz_codes161:
	# br label %162
	jmp	tdefl_compress_lz_codes162
	.text
tdefl_compress_lz_codes162:
	# br label %163
	jmp	tdefl_compress_lz_codes163
	.text
tdefl_compress_lz_codes163:
	# %164 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %165 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %166 = zext i32 %165 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %167 = getelementptr [256 x i8], i8* @s_tdefl_len_extra, i64 0, i64 %166
	leaq	_s_tdefl_len_extra(%rip), %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %168 = load i8, i8* %167
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %169 = zext i8 %168 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %170 = getelementptr [17 x i32], i8* @mz_bitmasks, i64 0, i64 %169
	leaq	_mz_bitmasks(%rip), %rcx
	movq	$0, %rax
	imulq	$68, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %171 = load i32, i32* %170
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %172 = and i32 %164, %171
	movq	%rbx, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %172, i32* %11
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %173 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %174 = zext i32 %173 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %175 = getelementptr [256 x i8], i8* @s_tdefl_len_extra, i64 0, i64 %174
	leaq	_s_tdefl_len_extra(%rip), %rcx
	movq	$0, %rax
	imulq	$256, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %176 = load i8, i8* %175
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %177 = zext i8 %176 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %177, i32* %12
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# %178 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %179 = load i32, i32* %12
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %180 = shl i32 1, %179
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %181 = sub i32 %180, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %182 = icmp ule i32 %178, %181
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %183 = xor i1 %182, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %184 = zext i1 %183 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %185 = sext i32 %184 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %186 = icmp ne i64 %185, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %186, label %187, label %189
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes189
	jmp	tdefl_compress_lz_codes187
	.text
tdefl_compress_lz_codes187:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2640, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2640, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes188:
	# br label %190
	jmp	tdefl_compress_lz_codes190
	.text
tdefl_compress_lz_codes189:
	# br label %190
	jmp	tdefl_compress_lz_codes190
	.text
tdefl_compress_lz_codes190:
	# %191 = load i32, i32* %11
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %192 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %193 = getelementptr %struct.tdefl_compressor, i8* %192, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %194 = load i32, i32* %193
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %195 = shl i32 %191, %194
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %196 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %197 = getelementptr %struct.tdefl_compressor, i8* %196, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %198 = load i32, i32* %197
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %199 = or i32 %198, %195
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %199, i32* %197
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %200 = load i32, i32* %12
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %201 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %202 = getelementptr %struct.tdefl_compressor, i8* %201, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %203 = load i32, i32* %202
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %204 = add i32 %203, %200
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %204, i32* %202
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %205
	jmp	tdefl_compress_lz_codes205
	.text
tdefl_compress_lz_codes205:
	# %206 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %207 = getelementptr %struct.tdefl_compressor, i8* %206, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %208 = load i32, i32* %207
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %209 = icmp uge i32 %208, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %209, label %210, label %236
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes236
	jmp	tdefl_compress_lz_codes210
	.text
tdefl_compress_lz_codes210:
	# %211 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %212 = getelementptr %struct.tdefl_compressor, i8* %211, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %213 = load i8*, i8** %212
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %214 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %215 = getelementptr %struct.tdefl_compressor, i8* %214, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %216 = load i8*, i8** %215
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %217 = icmp ult i8* %213, %216
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %217, label %218, label %227
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes227
	jmp	tdefl_compress_lz_codes218
	.text
tdefl_compress_lz_codes218:
	# %219 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %220 = getelementptr %struct.tdefl_compressor, i8* %219, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %221 = load i32, i32* %220
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %222 = trunc i32 %221 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %223 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %224 = getelementptr %struct.tdefl_compressor, i8* %223, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %225 = load i8*, i8** %224
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %226 = getelementptr i8, i8* %225, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %226, i8** %224
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %222, i8* %225
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %227
	jmp	tdefl_compress_lz_codes227
	.text
tdefl_compress_lz_codes227:
	# %228 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %229 = getelementptr %struct.tdefl_compressor, i8* %228, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %230 = load i32, i32* %229
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %231 = lshr i32 %230, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %231, i32* %229
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %232 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %233 = getelementptr %struct.tdefl_compressor, i8* %232, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %234 = load i32, i32* %233
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %235 = sub i32 %234, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %235, i32* %233
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %205
	jmp	tdefl_compress_lz_codes205
	.text
tdefl_compress_lz_codes236:
	# br label %237
	jmp	tdefl_compress_lz_codes237
	.text
tdefl_compress_lz_codes237:
	# %238 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %239 = icmp ult i32 %238, 512
	movq	%rdx, %rax
	movq	$512, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %239, label %240, label %251
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes251
	jmp	tdefl_compress_lz_codes240
	.text
tdefl_compress_lz_codes240:
	# %241 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %242 = zext i32 %241 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %243 = getelementptr [512 x i8], i8* @s_tdefl_small_dist_sym, i64 0, i64 %242
	leaq	_s_tdefl_small_dist_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %244 = load i8, i8* %243
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %245 = zext i8 %244 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %245, i32* %5
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %246 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %247 = zext i32 %246 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %248 = getelementptr [512 x i8], i8* @s_tdefl_small_dist_extra, i64 0, i64 %247
	leaq	_s_tdefl_small_dist_extra(%rip), %rcx
	movq	$0, %rax
	imulq	$512, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %249 = load i8, i8* %248
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %250 = zext i8 %249 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %250, i32* %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %264
	jmp	tdefl_compress_lz_codes264
	.text
tdefl_compress_lz_codes251:
	# %252 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %253 = lshr i32 %252, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %254 = zext i32 %253 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %255 = getelementptr [128 x i8], i8* @s_tdefl_large_dist_sym, i64 0, i64 %254
	leaq	_s_tdefl_large_dist_sym(%rip), %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %256 = load i8, i8* %255
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %257 = zext i8 %256 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %257, i32* %5
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %258 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %259 = lshr i32 %258, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %260 = zext i32 %259 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %261 = getelementptr [128 x i8], i8* @s_tdefl_large_dist_extra, i64 0, i64 %260
	leaq	_s_tdefl_large_dist_extra(%rip), %rcx
	movq	$0, %rax
	imulq	$128, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %262 = load i8, i8* %261
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %263 = zext i8 %262 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %263, i32* %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %264
	jmp	tdefl_compress_lz_codes264
	.text
tdefl_compress_lz_codes264:
	# %265 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %266 = getelementptr %struct.tdefl_compressor, i8* %265, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %267 = getelementptr [3 x [288 x i8]], i8* %266, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %268 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %269 = zext i32 %268 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %270 = getelementptr [288 x i8], i8* %267, i64 0, i64 %269
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %271 = load i8, i8* %270
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %272 = icmp ne i8 %271, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# %273 = xor i1 %272, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %274 = zext i1 %273 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %275 = sext i32 %274 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %276 = icmp ne i64 %275, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %276, label %277, label %279
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes279
	jmp	tdefl_compress_lz_codes277
	.text
tdefl_compress_lz_codes277:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2652, i8* @.str.76)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2652, %rax
	pushq	%rax
	leaq	_.str.76(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes278:
	# br label %280
	jmp	tdefl_compress_lz_codes280
	.text
tdefl_compress_lz_codes279:
	# br label %280
	jmp	tdefl_compress_lz_codes280
	.text
tdefl_compress_lz_codes280:
	# br label %281
	jmp	tdefl_compress_lz_codes281
	.text
tdefl_compress_lz_codes281:
	# %282 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %283 = getelementptr %struct.tdefl_compressor, i8* %282, i32 0, i32 37
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$37, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %284 = getelementptr [3 x [288 x i16]], i8* %283, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %285 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %286 = zext i32 %285 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %287 = getelementptr [288 x i16], i8* %284, i64 0, i64 %286
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %288 = load i16, i16* %287
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %289 = zext i16 %288 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %289, i32* %13
	movq	%rdx, %rax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	# %290 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %291 = getelementptr %struct.tdefl_compressor, i8* %290, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %292 = getelementptr [3 x [288 x i8]], i8* %291, i64 0, i64 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %293 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %294 = zext i32 %293 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %295 = getelementptr [288 x i8], i8* %292, i64 0, i64 %294
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %296 = load i8, i8* %295
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %297 = zext i8 %296 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %297, i32* %14
	movq	%rdx, %rax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	# %298 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %299 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %300 = shl i32 1, %299
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %301 = sub i32 %300, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %302 = icmp ule i32 %298, %301
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %303 = xor i1 %302, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %304 = zext i1 %303 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %305 = sext i32 %304 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %306 = icmp ne i64 %305, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %306, label %307, label %309
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes309
	jmp	tdefl_compress_lz_codes307
	.text
tdefl_compress_lz_codes307:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2653, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2653, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes308:
	# br label %310
	jmp	tdefl_compress_lz_codes310
	.text
tdefl_compress_lz_codes309:
	# br label %310
	jmp	tdefl_compress_lz_codes310
	.text
tdefl_compress_lz_codes310:
	# %311 = load i32, i32* %13
	movq	-88(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %312 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %313 = getelementptr %struct.tdefl_compressor, i8* %312, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %314 = load i32, i32* %313
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %315 = shl i32 %311, %314
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %316 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %317 = getelementptr %struct.tdefl_compressor, i8* %316, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %318 = load i32, i32* %317
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %319 = or i32 %318, %315
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %319, i32* %317
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %320 = load i32, i32* %14
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %321 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %322 = getelementptr %struct.tdefl_compressor, i8* %321, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %323 = load i32, i32* %322
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %324 = add i32 %323, %320
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %324, i32* %322
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %325
	jmp	tdefl_compress_lz_codes325
	.text
tdefl_compress_lz_codes325:
	# %326 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %327 = getelementptr %struct.tdefl_compressor, i8* %326, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %328 = load i32, i32* %327
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %329 = icmp uge i32 %328, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %329, label %330, label %356
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes356
	jmp	tdefl_compress_lz_codes330
	.text
tdefl_compress_lz_codes330:
	# %331 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %332 = getelementptr %struct.tdefl_compressor, i8* %331, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %333 = load i8*, i8** %332
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %334 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %335 = getelementptr %struct.tdefl_compressor, i8* %334, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %336 = load i8*, i8** %335
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %337 = icmp ult i8* %333, %336
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %337, label %338, label %347
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes347
	jmp	tdefl_compress_lz_codes338
	.text
tdefl_compress_lz_codes338:
	# %339 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %340 = getelementptr %struct.tdefl_compressor, i8* %339, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %341 = load i32, i32* %340
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %342 = trunc i32 %341 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %343 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %344 = getelementptr %struct.tdefl_compressor, i8* %343, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %345 = load i8*, i8** %344
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %346 = getelementptr i8, i8* %345, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %346, i8** %344
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %342, i8* %345
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %347
	jmp	tdefl_compress_lz_codes347
	.text
tdefl_compress_lz_codes347:
	# %348 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %349 = getelementptr %struct.tdefl_compressor, i8* %348, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %350 = load i32, i32* %349
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %351 = lshr i32 %350, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %351, i32* %349
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %352 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %353 = getelementptr %struct.tdefl_compressor, i8* %352, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %354 = load i32, i32* %353
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %355 = sub i32 %354, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %355, i32* %353
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %325
	jmp	tdefl_compress_lz_codes325
	.text
tdefl_compress_lz_codes356:
	# br label %357
	jmp	tdefl_compress_lz_codes357
	.text
tdefl_compress_lz_codes357:
	# br label %358
	jmp	tdefl_compress_lz_codes358
	.text
tdefl_compress_lz_codes358:
	# %359 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %360 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %361 = zext i32 %360 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %362 = getelementptr [17 x i32], i8* @mz_bitmasks, i64 0, i64 %361
	leaq	_mz_bitmasks(%rip), %rcx
	movq	$0, %rax
	imulq	$68, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %363 = load i32, i32* %362
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %364 = and i32 %359, %363
	movq	%rbx, %rax
	movq	%rdx, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %364, i32* %15
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %365 = load i32, i32* %6
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %365, i32* %16
	movq	%rdx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %366 = load i32, i32* %15
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %367 = load i32, i32* %16
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %368 = shl i32 1, %367
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %369 = sub i32 %368, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %370 = icmp ule i32 %366, %369
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %371 = xor i1 %370, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %372 = zext i1 %371 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %373 = sext i32 %372 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %374 = icmp ne i64 %373, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %374, label %375, label %377
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes377
	jmp	tdefl_compress_lz_codes375
	.text
tdefl_compress_lz_codes375:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2654, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2654, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes376:
	# br label %378
	jmp	tdefl_compress_lz_codes378
	.text
tdefl_compress_lz_codes377:
	# br label %378
	jmp	tdefl_compress_lz_codes378
	.text
tdefl_compress_lz_codes378:
	# %379 = load i32, i32* %15
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %380 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %381 = getelementptr %struct.tdefl_compressor, i8* %380, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %382 = load i32, i32* %381
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %383 = shl i32 %379, %382
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %384 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %385 = getelementptr %struct.tdefl_compressor, i8* %384, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %386 = load i32, i32* %385
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %387 = or i32 %386, %383
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %387, i32* %385
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %388 = load i32, i32* %16
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %389 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %390 = getelementptr %struct.tdefl_compressor, i8* %389, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %391 = load i32, i32* %390
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %392 = add i32 %391, %388
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %392, i32* %390
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %393
	jmp	tdefl_compress_lz_codes393
	.text
tdefl_compress_lz_codes393:
	# %394 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %395 = getelementptr %struct.tdefl_compressor, i8* %394, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %396 = load i32, i32* %395
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %397 = icmp uge i32 %396, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %397, label %398, label %424
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes424
	jmp	tdefl_compress_lz_codes398
	.text
tdefl_compress_lz_codes398:
	# %399 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %400 = getelementptr %struct.tdefl_compressor, i8* %399, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %401 = load i8*, i8** %400
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %402 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %403 = getelementptr %struct.tdefl_compressor, i8* %402, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %404 = load i8*, i8** %403
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %405 = icmp ult i8* %401, %404
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %405, label %406, label %415
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes415
	jmp	tdefl_compress_lz_codes406
	.text
tdefl_compress_lz_codes406:
	# %407 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %408 = getelementptr %struct.tdefl_compressor, i8* %407, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %409 = load i32, i32* %408
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %410 = trunc i32 %409 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %411 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %412 = getelementptr %struct.tdefl_compressor, i8* %411, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %413 = load i8*, i8** %412
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %414 = getelementptr i8, i8* %413, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %414, i8** %412
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %410, i8* %413
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %415
	jmp	tdefl_compress_lz_codes415
	.text
tdefl_compress_lz_codes415:
	# %416 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %417 = getelementptr %struct.tdefl_compressor, i8* %416, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %418 = load i32, i32* %417
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %419 = lshr i32 %418, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %419, i32* %417
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %420 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %421 = getelementptr %struct.tdefl_compressor, i8* %420, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %422 = load i32, i32* %421
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %423 = sub i32 %422, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %423, i32* %421
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %393
	jmp	tdefl_compress_lz_codes393
	.text
tdefl_compress_lz_codes424:
	# br label %425
	jmp	tdefl_compress_lz_codes425
	.text
tdefl_compress_lz_codes425:
	# br label %524
	jmp	tdefl_compress_lz_codes524
	.text
tdefl_compress_lz_codes426:
	# %427 = load i8*, i8** %4
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %428 = getelementptr i8, i8* %427, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %428, i8** %4
	movq	%rdx, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# %429 = load i8, i8* %427
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %430 = zext i8 %429 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %430, i32* %17
	movq	%rdx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %431 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %432 = getelementptr %struct.tdefl_compressor, i8* %431, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %433 = getelementptr [3 x [288 x i8]], i8* %432, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %434 = load i32, i32* %17
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %435 = zext i32 %434 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %436 = getelementptr [288 x i8], i8* %433, i64 0, i64 %435
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %437 = load i8, i8* %436
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %438 = icmp ne i8 %437, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# %439 = xor i1 %438, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %440 = zext i1 %439 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %441 = sext i32 %440 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %442 = icmp ne i64 %441, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %442, label %443, label %445
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes445
	jmp	tdefl_compress_lz_codes443
	.text
tdefl_compress_lz_codes443:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2659, i8* @.str.77)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2659, %rax
	pushq	%rax
	leaq	_.str.77(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes444:
	# br label %446
	jmp	tdefl_compress_lz_codes446
	.text
tdefl_compress_lz_codes445:
	# br label %446
	jmp	tdefl_compress_lz_codes446
	.text
tdefl_compress_lz_codes446:
	# br label %447
	jmp	tdefl_compress_lz_codes447
	.text
tdefl_compress_lz_codes447:
	# %448 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %449 = getelementptr %struct.tdefl_compressor, i8* %448, i32 0, i32 37
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$37, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %450 = getelementptr [3 x [288 x i16]], i8* %449, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %451 = load i32, i32* %17
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %452 = zext i32 %451 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %453 = getelementptr [288 x i16], i8* %450, i64 0, i64 %452
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %454 = load i16, i16* %453
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %455 = zext i16 %454 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %455, i32* %18
	movq	%rdx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %456 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %457 = getelementptr %struct.tdefl_compressor, i8* %456, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %458 = getelementptr [3 x [288 x i8]], i8* %457, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %459 = load i32, i32* %17
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %460 = zext i32 %459 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %461 = getelementptr [288 x i8], i8* %458, i64 0, i64 %460
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %462 = load i8, i8* %461
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %463 = zext i8 %462 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %463, i32* %19
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %464 = load i32, i32* %18
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %465 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %466 = shl i32 1, %465
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %467 = sub i32 %466, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %468 = icmp ule i32 %464, %467
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %469 = xor i1 %468, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %470 = zext i1 %469 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %471 = sext i32 %470 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %472 = icmp ne i64 %471, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %472, label %473, label %475
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes475
	jmp	tdefl_compress_lz_codes473
	.text
tdefl_compress_lz_codes473:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2660, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2660, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes474:
	# br label %476
	jmp	tdefl_compress_lz_codes476
	.text
tdefl_compress_lz_codes475:
	# br label %476
	jmp	tdefl_compress_lz_codes476
	.text
tdefl_compress_lz_codes476:
	# %477 = load i32, i32* %18
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %478 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %479 = getelementptr %struct.tdefl_compressor, i8* %478, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %480 = load i32, i32* %479
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %481 = shl i32 %477, %480
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %482 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %483 = getelementptr %struct.tdefl_compressor, i8* %482, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %484 = load i32, i32* %483
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %485 = or i32 %484, %481
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %485, i32* %483
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %486 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %487 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %488 = getelementptr %struct.tdefl_compressor, i8* %487, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %489 = load i32, i32* %488
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %490 = add i32 %489, %486
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %490, i32* %488
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %491
	jmp	tdefl_compress_lz_codes491
	.text
tdefl_compress_lz_codes491:
	# %492 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %493 = getelementptr %struct.tdefl_compressor, i8* %492, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %494 = load i32, i32* %493
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %495 = icmp uge i32 %494, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %495, label %496, label %522
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes522
	jmp	tdefl_compress_lz_codes496
	.text
tdefl_compress_lz_codes496:
	# %497 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %498 = getelementptr %struct.tdefl_compressor, i8* %497, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %499 = load i8*, i8** %498
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %500 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %501 = getelementptr %struct.tdefl_compressor, i8* %500, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %502 = load i8*, i8** %501
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %503 = icmp ult i8* %499, %502
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %503, label %504, label %513
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes513
	jmp	tdefl_compress_lz_codes504
	.text
tdefl_compress_lz_codes504:
	# %505 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %506 = getelementptr %struct.tdefl_compressor, i8* %505, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %507 = load i32, i32* %506
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %508 = trunc i32 %507 to i8
	movq	%rdx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %509 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %510 = getelementptr %struct.tdefl_compressor, i8* %509, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %511 = load i8*, i8** %510
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %512 = getelementptr i8, i8* %511, i32 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %512, i8** %510
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8 %508, i8* %511
	movq	%rsi, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# br label %513
	jmp	tdefl_compress_lz_codes513
	.text
tdefl_compress_lz_codes513:
	# %514 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %515 = getelementptr %struct.tdefl_compressor, i8* %514, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %516 = load i32, i32* %515
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %517 = lshr i32 %516, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %517, i32* %515
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %518 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %519 = getelementptr %struct.tdefl_compressor, i8* %518, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %520 = load i32, i32* %519
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %521 = sub i32 %520, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %521, i32* %519
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %491
	jmp	tdefl_compress_lz_codes491
	.text
tdefl_compress_lz_codes522:
	# br label %523
	jmp	tdefl_compress_lz_codes523
	.text
tdefl_compress_lz_codes523:
	# br label %524
	jmp	tdefl_compress_lz_codes524
	.text
tdefl_compress_lz_codes524:
	# br label %525
	jmp	tdefl_compress_lz_codes525
	.text
tdefl_compress_lz_codes525:
	# %526 = load i32, i32* %3
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %527 = lshr i32 %526, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %527, i32* %3
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %25
	jmp	tdefl_compress_lz_codes25
	.text
tdefl_compress_lz_codes528:
	# br label %529
	jmp	tdefl_compress_lz_codes529
	.text
tdefl_compress_lz_codes529:
	# %530 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %531 = getelementptr %struct.tdefl_compressor, i8* %530, i32 0, i32 37
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$37, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %532 = getelementptr [3 x [288 x i16]], i8* %531, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %533 = getelementptr [288 x i16], i8* %532, i64 0, i64 256
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$256, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %534 = load i16, i16* %533
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %535 = zext i16 %534 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# store i32 %535, i32* %20
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %536 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %537 = getelementptr %struct.tdefl_compressor, i8* %536, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %538 = getelementptr [3 x [288 x i8]], i8* %537, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %539 = getelementptr [288 x i8], i8* %538, i64 0, i64 256
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$256, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %540 = load i8, i8* %539
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %541 = zext i8 %540 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %541, i32* %21
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %542 = load i32, i32* %20
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %543 = load i32, i32* %21
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %544 = shl i32 1, %543
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %545 = sub i32 %544, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %546 = icmp ule i32 %542, %545
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# %547 = xor i1 %546, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %rdx
	# %548 = zext i1 %547 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %549 = sext i32 %548 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %550 = icmp ne i64 %549, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %550, label %551, label %553
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes553
	jmp	tdefl_compress_lz_codes551
	.text
tdefl_compress_lz_codes551:
	# call void @__assert_rtn (i8* @__func__.tdefl_compress_lz_codes, i8* @.str.11, i32 2664, i8* @.str.72)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.tdefl_compress_lz_codes(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$2664, %rax
	pushq	%rax
	leaq	_.str.72(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
tdefl_compress_lz_codes552:
	# br label %554
	jmp	tdefl_compress_lz_codes554
	.text
tdefl_compress_lz_codes553:
	# br label %554
	jmp	tdefl_compress_lz_codes554
	.text
tdefl_compress_lz_codes554:
	# %555 = load i32, i32* %20
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %556 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %557 = getelementptr %struct.tdefl_compressor, i8* %556, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %558 = load i32, i32* %557
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %559 = shl i32 %555, %558
	movq	%rbx, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rsi
	# %560 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %561 = getelementptr %struct.tdefl_compressor, i8* %560, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %562 = load i32, i32* %561
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %563 = or i32 %562, %559
	movq	%rdx, %rax
	movq	%rsi, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %563, i32* %561
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %564 = load i32, i32* %21
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %565 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %566 = getelementptr %struct.tdefl_compressor, i8* %565, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %567 = load i32, i32* %566
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %568 = add i32 %567, %564
	movq	%rdx, %rax
	movq	%rsi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %568, i32* %566
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %569
	jmp	tdefl_compress_lz_codes569
	.text
tdefl_compress_lz_codes569:
	# %570 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %571 = getelementptr %struct.tdefl_compressor, i8* %570, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %572 = load i32, i32* %571
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %573 = icmp uge i32 %572, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %573, label %574, label %600
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes600
	jmp	tdefl_compress_lz_codes574
	.text
tdefl_compress_lz_codes574:
	# %575 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %576 = getelementptr %struct.tdefl_compressor, i8* %575, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %577 = load i8*, i8** %576
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %578 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %579 = getelementptr %struct.tdefl_compressor, i8* %578, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %580 = load i8*, i8** %579
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %581 = icmp ult i8* %577, %580
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %581, label %582, label %591
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_compress_lz_codes591
	jmp	tdefl_compress_lz_codes582
	.text
tdefl_compress_lz_codes582:
	# %583 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %584 = getelementptr %struct.tdefl_compressor, i8* %583, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %585 = load i32, i32* %584
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %586 = trunc i32 %585 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %587 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %588 = getelementptr %struct.tdefl_compressor, i8* %587, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %589 = load i8*, i8** %588
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %590 = getelementptr i8, i8* %589, i32 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %590, i8** %588
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i8 %586, i8* %589
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# br label %591
	jmp	tdefl_compress_lz_codes591
	.text
tdefl_compress_lz_codes591:
	# %592 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %593 = getelementptr %struct.tdefl_compressor, i8* %592, i32 0, i32 17
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$17, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %594 = load i32, i32* %593
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %595 = lshr i32 %594, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %595, i32* %593
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %596 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %597 = getelementptr %struct.tdefl_compressor, i8* %596, i32 0, i32 16
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$16, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %598 = load i32, i32* %597
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %599 = sub i32 %598, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %599, i32* %597
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %569
	jmp	tdefl_compress_lz_codes569
	.text
tdefl_compress_lz_codes600:
	# br label %601
	jmp	tdefl_compress_lz_codes601
	.text
tdefl_compress_lz_codes601:
	# %602 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %603 = getelementptr %struct.tdefl_compressor, i8* %602, i32 0, i32 11
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %604 = load i8*, i8** %603
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %605 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %606 = getelementptr %struct.tdefl_compressor, i8* %605, i32 0, i32 12
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$12, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %607 = load i8*, i8** %606
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %608 = icmp ult i8* %604, %607
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# %609 = zext i1 %608 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# ret i32 %609
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_optimize_huffman_table
_tdefl_optimize_huffman_table:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$88, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	popq	%rsi
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rbx
	# %11 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %12 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -72(%rbp)
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -80(%rbp)
	# %14 = alloca [33 x i32]
	subq	$132, %rsp
	movq	%rsp, -88(%rbp)
	# %15 = alloca [33 x i32]
	subq	$132, %rsp
	movq	%rsp, %r15
	# %16 = alloca [288 x %struct.tdefl_sym_freq]
	subq	$1152, %rsp
	movq	%rsp, %r14
	# %17 = alloca [288 x %struct.tdefl_sym_freq]
	subq	$1152, %rsp
	movq	%rsp, %r13
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %19 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %20 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# %22 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %23 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# store i8* %0, i8** %6
	movq	-8(%rbp), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %7
	movq	-16(%rbp), %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %8
	movq	-24(%rbp), %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %4, i32* %10
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %24 = getelementptr [33 x i32], i8* %14, i64 0, i64 0
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# call void @memset (i8* %24, i8 0, i64 132, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$132, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %25 = load i32, i32* %10
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %26 = icmp ne i32 %25, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %26, label %27, label %50
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table50
	jmp	tdefl_optimize_huffman_table27
	.text
tdefl_optimize_huffman_table27:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %28
	jmp	tdefl_optimize_huffman_table28
	.text
tdefl_optimize_huffman_table28:
	# %29 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %30 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %31 = icmp slt i32 %29, %30
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %31, label %32, label %49
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table49
	jmp	tdefl_optimize_huffman_table32
	.text
tdefl_optimize_huffman_table32:
	# %33 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %34 = getelementptr %struct.tdefl_compressor, i8* %33, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %35 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %36 = sext i32 %35 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %37 = getelementptr [3 x [288 x i8]], i8* %34, i64 0, i64 %36
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %38 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %39 = sext i32 %38 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %40 = getelementptr [288 x i8], i8* %37, i64 0, i64 %39
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %41 = load i8, i8* %40
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %42 = zext i8 %41 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %43 = getelementptr [33 x i32], i8* %14, i64 0, i64 %42
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %44 = load i32, i32* %43
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %45 = add i32 %44, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %45, i32* %43
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %46
	jmp	tdefl_optimize_huffman_table46
	.text
tdefl_optimize_huffman_table46:
	# %47 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %48 = add i32 %47, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %48, i32* %11
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %28
	jmp	tdefl_optimize_huffman_table28
	.text
tdefl_optimize_huffman_table49:
	# br label %184
	jmp	tdefl_optimize_huffman_table184
	.text
tdefl_optimize_huffman_table50:
	# store i32 0, i32* %19
	movq	$0, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %51 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %52 = getelementptr %struct.tdefl_compressor, i8* %51, i32 0, i32 36
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$36, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %53 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %54 = sext i32 %53 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %55 = getelementptr [3 x [288 x i16]], i8* %52, i64 0, i64 %54
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %56 = getelementptr [288 x i16], i8* %55, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %56, i8** %20
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %57
	jmp	tdefl_optimize_huffman_table57
	.text
tdefl_optimize_huffman_table57:
	# %58 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %59 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %60 = icmp slt i32 %58, %59
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %60, label %61, label %89
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table89
	jmp	tdefl_optimize_huffman_table61
	.text
tdefl_optimize_huffman_table61:
	# %62 = load i8*, i8** %20
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %63 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %64 = sext i32 %63 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %65 = getelementptr i16, i8* %62, i64 %64
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %66 = load i16, i16* %65
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %67 = icmp ne i16 %66, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %67, label %68, label %85
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table85
	jmp	tdefl_optimize_huffman_table68
	.text
tdefl_optimize_huffman_table68:
	# %69 = load i8*, i8** %20
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %70 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %71 = sext i32 %70 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %72 = getelementptr i16, i8* %69, i64 %71
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %73 = load i16, i16* %72
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %74 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %75 = sext i32 %74 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %76 = getelementptr [288 x %struct.tdefl_sym_freq], i8* %16, i64 0, i64 %75
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %77 = getelementptr %struct.tdefl_sym_freq, i8* %76, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %73, i16* %77
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %78 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %79 = trunc i32 %78 to i16
	movq	%rdx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %80 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %81 = add i32 %80, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %81, i32* %19
	movq	%rdx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %82 = sext i32 %80 to i64
	movq	%rbx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %83 = getelementptr [288 x %struct.tdefl_sym_freq], i8* %16, i64 0, i64 %82
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %84 = getelementptr %struct.tdefl_sym_freq, i8* %83, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %79, i16* %84
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %85
	jmp	tdefl_optimize_huffman_table85
	.text
tdefl_optimize_huffman_table85:
	# br label %86
	jmp	tdefl_optimize_huffman_table86
	.text
tdefl_optimize_huffman_table86:
	# %87 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %88 = add i32 %87, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %88, i32* %11
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %57
	jmp	tdefl_optimize_huffman_table57
	.text
tdefl_optimize_huffman_table89:
	# %90 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %91 = getelementptr [288 x %struct.tdefl_sym_freq], i8* %16, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %92 = getelementptr [288 x %struct.tdefl_sym_freq], i8* %17, i64 0, i64 0
	movq	%r13, %rcx
	movq	$0, %rax
	imulq	$1152, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %93 = call i8* @tdefl_radix_sort_syms (i32 %90, i8* %91, i8* %92)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_radix_sort_syms
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %93, i8** %18
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %94 = load i8*, i8** %18
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %95 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# call void @tdefl_calculate_minimum_redundancy (i8* %94, i32 %95)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_calculate_minimum_redundancy
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %96
	jmp	tdefl_optimize_huffman_table96
	.text
tdefl_optimize_huffman_table96:
	# %97 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %98 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %99 = icmp slt i32 %97, %98
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %99, label %100, label %114
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table114
	jmp	tdefl_optimize_huffman_table100
	.text
tdefl_optimize_huffman_table100:
	# %101 = load i8*, i8** %18
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %102 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %103 = sext i32 %102 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %104 = getelementptr %struct.tdefl_sym_freq, i8* %101, i64 %103
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %105 = getelementptr %struct.tdefl_sym_freq, i8* %104, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %106 = load i16, i16* %105
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %107 = zext i16 %106 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %108 = getelementptr [33 x i32], i8* %14, i64 0, i64 %107
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %109 = load i32, i32* %108
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %110 = add i32 %109, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %110, i32* %108
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %111
	jmp	tdefl_optimize_huffman_table111
	.text
tdefl_optimize_huffman_table111:
	# %112 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %113 = add i32 %112, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %113, i32* %11
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %96
	jmp	tdefl_optimize_huffman_table96
	.text
tdefl_optimize_huffman_table114:
	# %115 = getelementptr [33 x i32], i8* %14, i64 0, i64 0
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %116 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %117 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# call void @tdefl_huffman_enforce_max_code_size (i8* %115, i32 %116, i32 %117)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_tdefl_huffman_enforce_max_code_size
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %118 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %119 = getelementptr %struct.tdefl_compressor, i8* %118, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %120 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %121 = sext i32 %120 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %122 = getelementptr [3 x [288 x i8]], i8* %119, i64 0, i64 %121
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %123 = getelementptr [288 x i8], i8* %122, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %124 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = getelementptr %struct.tdefl_compressor, i8* %124, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %126 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %127 = sext i32 %126 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %128 = getelementptr [3 x [288 x i8]], i8* %125, i64 0, i64 %127
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %129 = getelementptr [288 x i8], i8* %128, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %130 = call i64 @llvm.objectsize.i64.p0 (i8* %129, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %131 = call i8* @__memset_chk (i8* %123, i32 0, i64 288, i64 %130)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rsi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$288, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %132 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %133 = getelementptr %struct.tdefl_compressor, i8* %132, i32 0, i32 37
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$37, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %134 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %135 = sext i32 %134 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %136 = getelementptr [3 x [288 x i16]], i8* %133, i64 0, i64 %135
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %137 = getelementptr [288 x i16], i8* %136, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %138 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %139 = getelementptr %struct.tdefl_compressor, i8* %138, i32 0, i32 37
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$37, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %140 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %141 = sext i32 %140 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %142 = getelementptr [3 x [288 x i16]], i8* %139, i64 0, i64 %141
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %143 = getelementptr [288 x i16], i8* %142, i64 0, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %144 = call i64 @llvm.objectsize.i64.p0 (i8* %143, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# %145 = call i8* @__memset_chk (i8* %137, i32 0, i64 576, i64 %144)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$576, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i32 1, i32* %11
	movq	$1, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# %146 = load i32, i32* %19
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %146, i32* %12
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %147
	jmp	tdefl_optimize_huffman_table147
	.text
tdefl_optimize_huffman_table147:
	# %148 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %149 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %150 = icmp sle i32 %148, %149
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %150, label %151, label %183
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table183
	jmp	tdefl_optimize_huffman_table151
	.text
tdefl_optimize_huffman_table151:
	# %152 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %153 = sext i32 %152 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %154 = getelementptr [33 x i32], i8* %14, i64 0, i64 %153
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %155 = load i32, i32* %154
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %155, i32* %13
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %156
	jmp	tdefl_optimize_huffman_table156
	.text
tdefl_optimize_huffman_table156:
	# %157 = load i32, i32* %13
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %158 = icmp sgt i32 %157, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setg	%dl
	# br i1 %158, label %159, label %179
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table179
	jmp	tdefl_optimize_huffman_table159
	.text
tdefl_optimize_huffman_table159:
	# %160 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %161 = trunc i32 %160 to i8
	movq	%rdx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %162 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %163 = getelementptr %struct.tdefl_compressor, i8* %162, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %164 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %165 = sext i32 %164 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %166 = getelementptr [3 x [288 x i8]], i8* %163, i64 0, i64 %165
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %167 = load i8*, i8** %18
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %168 = load i32, i32* %12
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %169 = add i32 %168, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %169, i32* %12
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %170 = sext i32 %169 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %171 = getelementptr %struct.tdefl_sym_freq, i8* %167, i64 %170
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %172 = getelementptr %struct.tdefl_sym_freq, i8* %171, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %173 = load i16, i16* %172
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %174 = zext i16 %173 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %175 = getelementptr [288 x i8], i8* %166, i64 0, i64 %174
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %161, i8* %175
	movq	%rdi, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# br label %176
	jmp	tdefl_optimize_huffman_table176
	.text
tdefl_optimize_huffman_table176:
	# %177 = load i32, i32* %13
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %178 = add i32 %177, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %178, i32* %13
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %156
	jmp	tdefl_optimize_huffman_table156
	.text
tdefl_optimize_huffman_table179:
	# br label %180
	jmp	tdefl_optimize_huffman_table180
	.text
tdefl_optimize_huffman_table180:
	# %181 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %182 = add i32 %181, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %182, i32* %11
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %147
	jmp	tdefl_optimize_huffman_table147
	.text
tdefl_optimize_huffman_table183:
	# br label %184
	jmp	tdefl_optimize_huffman_table184
	.text
tdefl_optimize_huffman_table184:
	# %185 = getelementptr [33 x i32], i8* %15, i64 0, i64 1
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 0, i32* %185
	movq	$0, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %12
	movq	$0, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 2, i32* %11
	movq	$2, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %186
	jmp	tdefl_optimize_huffman_table186
	.text
tdefl_optimize_huffman_table186:
	# %187 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %188 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %189 = icmp sle i32 %187, %188
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %189, label %190, label %205
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table205
	jmp	tdefl_optimize_huffman_table190
	.text
tdefl_optimize_huffman_table190:
	# %191 = load i32, i32* %12
	movq	-72(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %192 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %193 = sub i32 %192, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %194 = sext i32 %193 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %195 = getelementptr [33 x i32], i8* %14, i64 0, i64 %194
	movq	-88(%rbp), %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %196 = load i32, i32* %195
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %197 = add i32 %191, %196
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %198 = shl i32 %197, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# store i32 %198, i32* %12
	movq	%rbx, %rax
	movq	-72(%rbp), %rcx
	movl	%eax, (%rcx)
	# %199 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %200 = sext i32 %199 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %201 = getelementptr [33 x i32], i8* %15, i64 0, i64 %200
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %198, i32* %201
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %202
	jmp	tdefl_optimize_huffman_table202
	.text
tdefl_optimize_huffman_table202:
	# %203 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %204 = add i32 %203, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %204, i32* %11
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %186
	jmp	tdefl_optimize_huffman_table186
	.text
tdefl_optimize_huffman_table205:
	# store i32 0, i32* %11
	movq	$0, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %206
	jmp	tdefl_optimize_huffman_table206
	.text
tdefl_optimize_huffman_table206:
	# %207 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %208 = load i32, i32* %8
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %209 = icmp slt i32 %207, %208
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# br i1 %209, label %210, label %258
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table258
	jmp	tdefl_optimize_huffman_table210
	.text
tdefl_optimize_huffman_table210:
	# store i32 0, i32* %21
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %211 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %212 = getelementptr %struct.tdefl_compressor, i8* %211, i32 0, i32 38
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$38, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %213 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %214 = sext i32 %213 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %215 = getelementptr [3 x [288 x i8]], i8* %212, i64 0, i64 %214
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$864, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %216 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %217 = sext i32 %216 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %218 = getelementptr [288 x i8], i8* %215, i64 0, i64 %217
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$288, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %219 = load i8, i8* %218
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %220 = zext i8 %219 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i32 %220, i32* %23
	movq	%rdx, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %221 = icmp eq i32 %220, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br i1 %221, label %222, label %223
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table223
	jmp	tdefl_optimize_huffman_table222
	.text
tdefl_optimize_huffman_table222:
	# br label %255
	jmp	tdefl_optimize_huffman_table255
	.text
tdefl_optimize_huffman_table223:
	# %224 = load i32, i32* %23
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %225 = zext i32 %224 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %226 = getelementptr [33 x i32], i8* %15, i64 0, i64 %225
	movq	%r15, %rcx
	movq	$0, %rax
	imulq	$132, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %227 = load i32, i32* %226
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %228 = add i32 %227, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rsi
	# store i32 %228, i32* %226
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# store i32 %227, i32* %22
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# %229 = load i32, i32* %23
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %229, i32* %13
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %230
	jmp	tdefl_optimize_huffman_table230
	.text
tdefl_optimize_huffman_table230:
	# %231 = load i32, i32* %13
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %232 = icmp sgt i32 %231, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setg	%dl
	# br i1 %232, label %233, label %244
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_optimize_huffman_table244
	jmp	tdefl_optimize_huffman_table233
	.text
tdefl_optimize_huffman_table233:
	# %234 = load i32, i32* %21
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %235 = shl i32 %234, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %236 = load i32, i32* %22
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %237 = and i32 %236, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %238 = or i32 %235, %237
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %238, i32* %21
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %239
	jmp	tdefl_optimize_huffman_table239
	.text
tdefl_optimize_huffman_table239:
	# %240 = load i32, i32* %13
	movq	-80(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %241 = add i32 %240, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %241, i32* %13
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	# %242 = load i32, i32* %22
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %243 = lshr i32 %242, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %243, i32* %22
	movq	%rdx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# br label %230
	jmp	tdefl_optimize_huffman_table230
	.text
tdefl_optimize_huffman_table244:
	# %245 = load i32, i32* %21
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %246 = trunc i32 %245 to i16
	movq	%rdx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %247 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %248 = getelementptr %struct.tdefl_compressor, i8* %247, i32 0, i32 37
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$319345, %rax
	addq	%rax, %rcx
	movq	$37, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %249 = load i32, i32* %7
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %250 = sext i32 %249 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %251 = getelementptr [3 x [288 x i16]], i8* %248, i64 0, i64 %250
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$1728, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %252 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %253 = sext i32 %252 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %254 = getelementptr [288 x i16], i8* %251, i64 0, i64 %253
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$576, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$2, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 %246, i16* %254
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %255
	jmp	tdefl_optimize_huffman_table255
	.text
tdefl_optimize_huffman_table255:
	# %256 = load i32, i32* %11
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %257 = add i32 %256, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %257, i32* %11
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %206
	jmp	tdefl_optimize_huffman_table206
	.text
tdefl_optimize_huffman_table258:
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_radix_sort_syms
_tdefl_radix_sort_syms:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$48, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rdx
	popq	%rbx
	popq	-8(%rbp)
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r10
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -40(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -48(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %11 = alloca [512 x i32]
	subq	$2048, %rsp
	movq	%rsp, %r14
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r12
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %16 = alloca [256 x i32]
	subq	$1024, %rsp
	movq	%rsp, %r8
	# %17 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# store i32 %0, i32* %4
	movq	-8(%rbp), %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %1, i8** %5
	movq	%rbx, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %2, i8** %6
	movq	%rdx, %rax
	movq	%r10, %rcx
	movq	%rax, (%rcx)
	# store i32 2, i32* %7
	movq	$2, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# %19 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %19, i8** %12
	movq	%rbx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %20 = load i8*, i8** %6
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8* %20, i8** %13
	movq	%rbx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# %21 = getelementptr [512 x i32], i8* %11, i64 0, i64 0
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# call void @memset (i8* %21, i8 0, i64 2048, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rbx, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$2048, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %22
	jmp	tdefl_radix_sort_syms22
	.text
tdefl_radix_sort_syms22:
	# %23 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %24 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %25 = icmp ult i32 %23, %24
	movq	%r10, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setb	%bl
	# br i1 %25, label %26, label %51
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_radix_sort_syms51
	jmp	tdefl_radix_sort_syms26
	.text
tdefl_radix_sort_syms26:
	# %27 = load i8*, i8** %5
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %28 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %29 = zext i32 %28 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %30 = getelementptr %struct.tdefl_sym_freq, i8* %27, i64 %29
	movq	%r10, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %31 = getelementptr %struct.tdefl_sym_freq, i8* %30, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %32 = load i16, i16* %31
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %33 = zext i16 %32 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# store i32 %33, i32* %14
	movq	%rbx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %34 = load i32, i32* %14
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %35 = and i32 %34, 255
	movq	%rbx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %36 = zext i32 %35 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %37 = getelementptr [512 x i32], i8* %11, i64 0, i64 %36
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %38 = load i32, i32* %37
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %39 = add i32 %38, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %39, i32* %37
	movq	%rbx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %40 = load i32, i32* %14
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %41 = lshr i32 %40, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %42 = and i32 %41, 255
	movq	%rbx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %43 = add i32 256, %42
	movq	$256, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %44 = zext i32 %43 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %45 = getelementptr [512 x i32], i8* %11, i64 0, i64 %44
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %46 = load i32, i32* %45
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %47 = add i32 %46, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %47, i32* %45
	movq	%rbx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# br label %48
	jmp	tdefl_radix_sort_syms48
	.text
tdefl_radix_sort_syms48:
	# %49 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %50 = add i32 %49, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %50, i32* %10
	movq	%rbx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %22
	jmp	tdefl_radix_sort_syms22
	.text
tdefl_radix_sort_syms51:
	# br label %52
	jmp	tdefl_radix_sort_syms52
	.text
tdefl_radix_sort_syms52:
	# %53 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %54 = icmp ugt i32 %53, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	seta	%bl
	# br i1 %54, label %55, label %64
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rbx
	je	tdefl_radix_sort_syms64
	jmp	tdefl_radix_sort_syms55
	.text
tdefl_radix_sort_syms55:
	# %56 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %57 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %58 = sub i32 %57, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %59 = mul i32 %58, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# %60 = zext i32 %59 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %61 = getelementptr [512 x i32], i8* %11, i64 0, i64 %60
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %62 = load i32, i32* %61
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %63 = icmp eq i32 %56, %62
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br label %64
	movq	%rdx, %rbx
	jmp	tdefl_radix_sort_syms64
	.text
tdefl_radix_sort_syms64:
	# %65 = phi i1 [0, %52], [%63, %55]
	# br i1 %65, label %66, label %69
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_radix_sort_syms69
	jmp	tdefl_radix_sort_syms66
	.text
tdefl_radix_sort_syms66:
	# %67 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %68 = add i32 %67, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %68, i32* %7
	movq	%rbx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %52
	jmp	tdefl_radix_sort_syms52
	.text
tdefl_radix_sort_syms69:
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %70
	jmp	tdefl_radix_sort_syms70
	.text
tdefl_radix_sort_syms70:
	# %71 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %72 = load i32, i32* %7
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %73 = icmp ult i32 %71, %72
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %73, label %74, label %136
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_radix_sort_syms136
	jmp	tdefl_radix_sort_syms74
	.text
tdefl_radix_sort_syms74:
	# %75 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %76 = shl i32 %75, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %77 = zext i32 %76 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %78 = getelementptr [512 x i32], i8* %11, i64 0, i64 %77
	movq	%r14, %rcx
	movq	$0, %rax
	imulq	$2048, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %78, i8** %15
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %17
	movq	$0, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	tdefl_radix_sort_syms79
	.text
tdefl_radix_sort_syms79:
	# %80 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %81 = icmp ult i32 %80, 256
	movq	%rdx, %rax
	movq	$256, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %81, label %82, label %97
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_radix_sort_syms97
	jmp	tdefl_radix_sort_syms82
	.text
tdefl_radix_sort_syms82:
	# %83 = load i32, i32* %17
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %84 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %85 = zext i32 %84 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %86 = getelementptr [256 x i32], i8* %16, i64 0, i64 %85
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1024, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %83, i32* %86
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %87 = load i8*, i8** %15
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %88 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %89 = zext i32 %88 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %90 = getelementptr i32, i8* %87, i64 %89
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %91 = load i32, i32* %90
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %92 = load i32, i32* %17
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %93 = add i32 %92, %91
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %93, i32* %17
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %94
	jmp	tdefl_radix_sort_syms94
	.text
tdefl_radix_sort_syms94:
	# %95 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %96 = add i32 %95, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %96, i32* %10
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	tdefl_radix_sort_syms79
	.text
tdefl_radix_sort_syms97:
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %98
	jmp	tdefl_radix_sort_syms98
	.text
tdefl_radix_sort_syms98:
	# %99 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %100 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %101 = icmp ult i32 %99, %100
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %101, label %102, label %127
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_radix_sort_syms127
	jmp	tdefl_radix_sort_syms102
	.text
tdefl_radix_sort_syms102:
	# %103 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %104 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %105 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %106 = zext i32 %105 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %107 = getelementptr %struct.tdefl_sym_freq, i8* %104, i64 %106
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %108 = getelementptr %struct.tdefl_sym_freq, i8* %107, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %109 = load i16, i16* %108
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %110 = zext i16 %109 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %111 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %112 = ashr i32 %110, %111
	movq	%rbx, %rax
	movq	%rdx, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdx
	# %113 = and i32 %112, 255
	movq	%rdx, %rax
	movq	$255, %rcx
	andq	%rcx, %rax
	movq	%rax, %rdx
	# %114 = sext i32 %113 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %115 = getelementptr [256 x i32], i8* %16, i64 0, i64 %114
	movq	%r8, %rcx
	movq	$0, %rax
	imulq	$1024, %rax
	addq	%rax, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %116 = load i32, i32* %115
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %117 = add i32 %116, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %117, i32* %115
	movq	%rdx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %118 = zext i32 %116 to i64
	movq	%rbx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %119 = getelementptr %struct.tdefl_sym_freq, i8* %103, i64 %118
	movq	%r11, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %120 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %121 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %122 = zext i32 %121 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %123 = getelementptr %struct.tdefl_sym_freq, i8* %120, i64 %122
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# call void @memcpy (i8* %119, i8* %123, i64 4, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r10, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	$4, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memcpy
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# br label %124
	jmp	tdefl_radix_sort_syms124
	.text
tdefl_radix_sort_syms124:
	# %125 = load i32, i32* %10
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %126 = add i32 %125, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %126, i32* %10
	movq	%rdx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %98
	jmp	tdefl_radix_sort_syms98
	.text
tdefl_radix_sort_syms127:
	# %128 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %128, i8** %18
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %129 = load i8*, i8** %13
	movq	%r12, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %129, i8** %12
	movq	%rdx, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %130 = load i8*, i8** %18
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %130, i8** %13
	movq	%rdx, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# br label %131
	jmp	tdefl_radix_sort_syms131
	.text
tdefl_radix_sort_syms131:
	# %132 = load i32, i32* %9
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %133 = add i32 %132, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %133, i32* %9
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	# %134 = load i32, i32* %8
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %135 = add i32 %134, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %135, i32* %8
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %70
	jmp	tdefl_radix_sort_syms70
	.text
tdefl_radix_sort_syms136:
	# %137 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# ret i8* %137
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_calculate_minimum_redundancy
_tdefl_calculate_minimum_redundancy:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$8, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rdx
	popq	%rbx
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -8(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r15
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r14
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# store i8* %0, i8** %3
	movq	%rbx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %4
	movq	%rdx, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# %11 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %12 = icmp eq i32 %11, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %12, label %13, label %14
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy14
	jmp	tdefl_calculate_minimum_redundancy13
	.text
tdefl_calculate_minimum_redundancy13:
	# br label %259
	jmp	tdefl_calculate_minimum_redundancy259
	.text
tdefl_calculate_minimum_redundancy14:
	# %15 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %16 = icmp eq i32 %15, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %16, label %17, label %21
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy21
	jmp	tdefl_calculate_minimum_redundancy17
	.text
tdefl_calculate_minimum_redundancy17:
	# %18 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %19 = getelementptr %struct.tdefl_sym_freq, i8* %18, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %20 = getelementptr %struct.tdefl_sym_freq, i8* %19, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i16 1, i16* %20
	movq	$1, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# br label %259
	jmp	tdefl_calculate_minimum_redundancy259
	.text
tdefl_calculate_minimum_redundancy21:
	# br label %22
	jmp	tdefl_calculate_minimum_redundancy22
	.text
tdefl_calculate_minimum_redundancy22:
	# %23 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %24 = getelementptr %struct.tdefl_sym_freq, i8* %23, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %25 = getelementptr %struct.tdefl_sym_freq, i8* %24, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %26 = load i16, i16* %25
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %27 = zext i16 %26 to i32
	movq	%rbx, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %28 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %29 = getelementptr %struct.tdefl_sym_freq, i8* %28, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %30 = getelementptr %struct.tdefl_sym_freq, i8* %29, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %31 = load i16, i16* %30
	movq	%rsi, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %32 = zext i16 %31 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %33 = add i32 %32, %27
	movq	%rbx, %rax
	movq	%rdi, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %34 = trunc i32 %33 to i16
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# store i16 %34, i16* %30
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# store i32 2, i32* %6
	movq	$2, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# store i32 1, i32* %7
	movq	$1, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %35
	jmp	tdefl_calculate_minimum_redundancy35
	.text
tdefl_calculate_minimum_redundancy35:
	# %36 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %37 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %38 = sub i32 %37, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %39 = icmp slt i32 %36, %38
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setl	%bl
	# br i1 %39, label %40, label %174
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy174
	jmp	tdefl_calculate_minimum_redundancy40
	.text
tdefl_calculate_minimum_redundancy40:
	# %41 = load i32, i32* %6
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %42 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %43 = icmp sge i32 %41, %42
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setge	%bl
	# br i1 %43, label %60, label %44
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy44
	jmp	tdefl_calculate_minimum_redundancy60
	.text
tdefl_calculate_minimum_redundancy44:
	# %45 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %46 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %47 = sext i32 %46 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %48 = getelementptr %struct.tdefl_sym_freq, i8* %45, i64 %47
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %49 = getelementptr %struct.tdefl_sym_freq, i8* %48, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %50 = load i16, i16* %49
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %51 = zext i16 %50 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %52 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %53 = load i32, i32* %6
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %54 = sext i32 %53 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %55 = getelementptr %struct.tdefl_sym_freq, i8* %52, i64 %54
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %56 = getelementptr %struct.tdefl_sym_freq, i8* %55, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %57 = load i16, i16* %56
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %58 = zext i16 %57 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %59 = icmp slt i32 %51, %58
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setl	%bl
	# br i1 %59, label %60, label %80
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy80
	jmp	tdefl_calculate_minimum_redundancy60
	.text
tdefl_calculate_minimum_redundancy60:
	# %61 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %62 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %63 = sext i32 %62 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %64 = getelementptr %struct.tdefl_sym_freq, i8* %61, i64 %63
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %65 = getelementptr %struct.tdefl_sym_freq, i8* %64, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %66 = load i16, i16* %65
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %67 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %68 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %69 = sext i32 %68 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %70 = getelementptr %struct.tdefl_sym_freq, i8* %67, i64 %69
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %71 = getelementptr %struct.tdefl_sym_freq, i8* %70, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %66, i16* %71
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %72 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %73 = trunc i32 %72 to i16
	movq	%rbx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %74 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %75 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %76 = add i32 %75, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %76, i32* %5
	movq	%rbx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %77 = sext i32 %75 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %78 = getelementptr %struct.tdefl_sym_freq, i8* %74, i64 %77
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %79 = getelementptr %struct.tdefl_sym_freq, i8* %78, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %73, i16* %79
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %93
	jmp	tdefl_calculate_minimum_redundancy93
	.text
tdefl_calculate_minimum_redundancy80:
	# %81 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %82 = load i32, i32* %6
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %83 = add i32 %82, 1
	movq	%rdi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %83, i32* %6
	movq	%rbx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %84 = sext i32 %82 to i64
	movq	%rdi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %85 = getelementptr %struct.tdefl_sym_freq, i8* %81, i64 %84
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %86 = getelementptr %struct.tdefl_sym_freq, i8* %85, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %87 = load i16, i16* %86
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# %88 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %89 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %90 = sext i32 %89 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %91 = getelementptr %struct.tdefl_sym_freq, i8* %88, i64 %90
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %92 = getelementptr %struct.tdefl_sym_freq, i8* %91, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %87, i16* %92
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %93
	jmp	tdefl_calculate_minimum_redundancy93
	.text
tdefl_calculate_minimum_redundancy93:
	# %94 = load i32, i32* %6
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %95 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %96 = icmp sge i32 %94, %95
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setge	%bl
	# br i1 %96, label %117, label %97
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy97
	jmp	tdefl_calculate_minimum_redundancy117
	.text
tdefl_calculate_minimum_redundancy97:
	# %98 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %99 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %100 = icmp slt i32 %98, %99
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setl	%bl
	# br i1 %100, label %101, label %147
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy147
	jmp	tdefl_calculate_minimum_redundancy101
	.text
tdefl_calculate_minimum_redundancy101:
	# %102 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %103 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %104 = sext i32 %103 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %105 = getelementptr %struct.tdefl_sym_freq, i8* %102, i64 %104
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %106 = getelementptr %struct.tdefl_sym_freq, i8* %105, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %107 = load i16, i16* %106
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %108 = zext i16 %107 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %109 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %110 = load i32, i32* %6
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %111 = sext i32 %110 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %112 = getelementptr %struct.tdefl_sym_freq, i8* %109, i64 %111
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %113 = getelementptr %struct.tdefl_sym_freq, i8* %112, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %114 = load i16, i16* %113
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %115 = zext i16 %114 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %116 = icmp slt i32 %108, %115
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setl	%bl
	# br i1 %116, label %117, label %147
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy147
	jmp	tdefl_calculate_minimum_redundancy117
	.text
tdefl_calculate_minimum_redundancy117:
	# %118 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %119 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %120 = sext i32 %119 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %121 = getelementptr %struct.tdefl_sym_freq, i8* %118, i64 %120
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %122 = getelementptr %struct.tdefl_sym_freq, i8* %121, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %123 = load i16, i16* %122
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %124 = zext i16 %123 to i32
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %125 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %126 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %127 = sext i32 %126 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %128 = getelementptr %struct.tdefl_sym_freq, i8* %125, i64 %127
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %129 = getelementptr %struct.tdefl_sym_freq, i8* %128, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %130 = load i16, i16* %129
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %131 = zext i16 %130 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %132 = add i32 %124, %131
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %133 = trunc i32 %132 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %134 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %135 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %136 = sext i32 %135 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %137 = getelementptr %struct.tdefl_sym_freq, i8* %134, i64 %136
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %138 = getelementptr %struct.tdefl_sym_freq, i8* %137, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %133, i16* %138
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %139 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %140 = trunc i32 %139 to i16
	movq	%rbx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %141 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %142 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %143 = add i32 %142, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %143, i32* %5
	movq	%rbx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %144 = sext i32 %142 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %145 = getelementptr %struct.tdefl_sym_freq, i8* %141, i64 %144
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %146 = getelementptr %struct.tdefl_sym_freq, i8* %145, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %140, i16* %146
	movq	%r8, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %170
	jmp	tdefl_calculate_minimum_redundancy170
	.text
tdefl_calculate_minimum_redundancy147:
	# %148 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %149 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %150 = sext i32 %149 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %151 = getelementptr %struct.tdefl_sym_freq, i8* %148, i64 %150
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %152 = getelementptr %struct.tdefl_sym_freq, i8* %151, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %153 = load i16, i16* %152
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %154 = zext i16 %153 to i32
	movq	%rbx, %rax
	movq	$0, %r8
	movw	%ax, %r8w
	# %155 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %156 = load i32, i32* %6
	movq	%r14, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %157 = add i32 %156, 1
	movq	%rsi, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %157, i32* %6
	movq	%rbx, %rax
	movq	%r14, %rcx
	movl	%eax, (%rcx)
	# %158 = sext i32 %156 to i64
	movq	%rsi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %159 = getelementptr %struct.tdefl_sym_freq, i8* %155, i64 %158
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %160 = getelementptr %struct.tdefl_sym_freq, i8* %159, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %161 = load i16, i16* %160
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %162 = zext i16 %161 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %163 = add i32 %154, %162
	movq	%r8, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %164 = trunc i32 %163 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %165 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %166 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %167 = sext i32 %166 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %168 = getelementptr %struct.tdefl_sym_freq, i8* %165, i64 %167
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %169 = getelementptr %struct.tdefl_sym_freq, i8* %168, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %164, i16* %169
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %170
	jmp	tdefl_calculate_minimum_redundancy170
	.text
tdefl_calculate_minimum_redundancy170:
	# br label %171
	jmp	tdefl_calculate_minimum_redundancy171
	.text
tdefl_calculate_minimum_redundancy171:
	# %172 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %173 = add i32 %172, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %173, i32* %7
	movq	%rbx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %35
	jmp	tdefl_calculate_minimum_redundancy35
	.text
tdefl_calculate_minimum_redundancy174:
	# %175 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %176 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %177 = sub i32 %176, 2
	movq	%rbx, %rax
	movq	$2, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %178 = sext i32 %177 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %179 = getelementptr %struct.tdefl_sym_freq, i8* %175, i64 %178
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %180 = getelementptr %struct.tdefl_sym_freq, i8* %179, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 0, i16* %180
	movq	$0, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %181 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %182 = sub i32 %181, 3
	movq	%rbx, %rax
	movq	$3, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %182, i32* %7
	movq	%rbx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %183
	jmp	tdefl_calculate_minimum_redundancy183
	.text
tdefl_calculate_minimum_redundancy183:
	# %184 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %185 = icmp sge i32 %184, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setge	%bl
	# br i1 %185, label %186, label %209
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy209
	jmp	tdefl_calculate_minimum_redundancy186
	.text
tdefl_calculate_minimum_redundancy186:
	# %187 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %188 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %189 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %190 = sext i32 %189 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %191 = getelementptr %struct.tdefl_sym_freq, i8* %188, i64 %190
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %192 = getelementptr %struct.tdefl_sym_freq, i8* %191, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %193 = load i16, i16* %192
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %194 = zext i16 %193 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %195 = getelementptr %struct.tdefl_sym_freq, i8* %187, i64 %194
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %196 = getelementptr %struct.tdefl_sym_freq, i8* %195, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %197 = load i16, i16* %196
	movq	%rbx, %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %198 = zext i16 %197 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %199 = add i32 %198, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %200 = trunc i32 %199 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %201 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %202 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %203 = sext i32 %202 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %204 = getelementptr %struct.tdefl_sym_freq, i8* %201, i64 %203
	movq	%rdi, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %205 = getelementptr %struct.tdefl_sym_freq, i8* %204, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %200, i16* %205
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# br label %206
	jmp	tdefl_calculate_minimum_redundancy206
	.text
tdefl_calculate_minimum_redundancy206:
	# %207 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %208 = add i32 %207, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %208, i32* %7
	movq	%rbx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %183
	jmp	tdefl_calculate_minimum_redundancy183
	.text
tdefl_calculate_minimum_redundancy209:
	# store i32 1, i32* %8
	movq	$1, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %10
	movq	$0, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %210 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %211 = sub i32 %210, 2
	movq	%rbx, %rax
	movq	$2, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %211, i32* %5
	movq	%rbx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# %212 = load i32, i32* %4
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %213 = sub i32 %212, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %213, i32* %7
	movq	%rbx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# br label %214
	jmp	tdefl_calculate_minimum_redundancy214
	.text
tdefl_calculate_minimum_redundancy214:
	# %215 = load i32, i32* %8
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %216 = icmp sgt i32 %215, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setg	%bl
	# br i1 %216, label %217, label %259
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy259
	jmp	tdefl_calculate_minimum_redundancy217
	.text
tdefl_calculate_minimum_redundancy217:
	# br label %218
	jmp	tdefl_calculate_minimum_redundancy218
	.text
tdefl_calculate_minimum_redundancy218:
	# %219 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %220 = icmp sge i32 %219, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setge	%bl
	# br i1 %220, label %221, label %231
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rbx
	je	tdefl_calculate_minimum_redundancy231
	jmp	tdefl_calculate_minimum_redundancy221
	.text
tdefl_calculate_minimum_redundancy221:
	# %222 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %223 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %224 = sext i32 %223 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %225 = getelementptr %struct.tdefl_sym_freq, i8* %222, i64 %224
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %226 = getelementptr %struct.tdefl_sym_freq, i8* %225, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %227 = load i16, i16* %226
	movq	%rdx, %rax
	movw	(%rax), %ax
	movq	$0, %rdx
	movw	%ax, %dx
	# %228 = zext i16 %227 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movw	%ax, %dx
	# %229 = load i32, i32* %10
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %230 = icmp eq i32 %228, %229
	movq	%rdx, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	sete	%dl
	# br label %231
	movq	%rdx, %rbx
	jmp	tdefl_calculate_minimum_redundancy231
	.text
tdefl_calculate_minimum_redundancy231:
	# %232 = phi i1 [0, %218], [%230, %221]
	# br i1 %232, label %233, label %238
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy238
	jmp	tdefl_calculate_minimum_redundancy233
	.text
tdefl_calculate_minimum_redundancy233:
	# %234 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %235 = add i32 %234, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %235, i32* %9
	movq	%rbx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %236 = load i32, i32* %5
	movq	%r15, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %237 = add i32 %236, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %237, i32* %5
	movq	%rbx, %rax
	movq	%r15, %rcx
	movl	%eax, (%rcx)
	# br label %218
	jmp	tdefl_calculate_minimum_redundancy218
	.text
tdefl_calculate_minimum_redundancy238:
	# br label %239
	jmp	tdefl_calculate_minimum_redundancy239
	.text
tdefl_calculate_minimum_redundancy239:
	# %240 = load i32, i32* %8
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %241 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %242 = icmp sgt i32 %240, %241
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setg	%bl
	# br i1 %242, label %243, label %254
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_calculate_minimum_redundancy254
	jmp	tdefl_calculate_minimum_redundancy243
	.text
tdefl_calculate_minimum_redundancy243:
	# %244 = load i32, i32* %10
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %245 = trunc i32 %244 to i16
	movq	%rbx, %rax
	movq	$0, %rsi
	movw	%ax, %si
	# %246 = load i8*, i8** %3
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %247 = load i32, i32* %7
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %248 = add i32 %247, -1
	movq	%rdi, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %248, i32* %7
	movq	%rbx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %249 = sext i32 %247 to i64
	movq	%rdi, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %250 = getelementptr %struct.tdefl_sym_freq, i8* %246, i64 %249
	movq	%r8, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %251 = getelementptr %struct.tdefl_sym_freq, i8* %250, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i16 %245, i16* %251
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %252 = load i32, i32* %8
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %253 = add i32 %252, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %253, i32* %8
	movq	%rbx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %239
	jmp	tdefl_calculate_minimum_redundancy239
	.text
tdefl_calculate_minimum_redundancy254:
	# %255 = load i32, i32* %9
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %256 = mul i32 2, %255
	movq	$2, %rax
	movq	%rbx, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %256, i32* %8
	movq	%rbx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# %257 = load i32, i32* %10
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %258 = add i32 %257, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %258, i32* %10
	movq	%rbx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %9
	movq	$0, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# br label %214
	jmp	tdefl_calculate_minimum_redundancy214
	.text
tdefl_calculate_minimum_redundancy259:
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_tdefl_huffman_enforce_max_code_size
_tdefl_huffman_enforce_max_code_size:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	popq	%rbx
	popq	%r10
	popq	%r11
	# %4 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %6 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# store i8* %0, i8** %4
	movq	%r11, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %5
	movq	%r10, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %6
	movq	%rbx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# store i32 0, i32* %8
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# %9 = load i32, i32* %5
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %10 = icmp sle i32 %9, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %10, label %11, label %12
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_huffman_enforce_max_code_size12
	jmp	tdefl_huffman_enforce_max_code_size11
	.text
tdefl_huffman_enforce_max_code_size11:
	# br label %101
	jmp	tdefl_huffman_enforce_max_code_size101
	.text
tdefl_huffman_enforce_max_code_size12:
	# %13 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %14 = add i32 %13, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %14, i32* %7
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %15
	jmp	tdefl_huffman_enforce_max_code_size15
	.text
tdefl_huffman_enforce_max_code_size15:
	# %16 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %17 = icmp sle i32 %16, 32
	movq	%rdx, %rax
	movq	$32, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %17, label %18, label %33
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_huffman_enforce_max_code_size33
	jmp	tdefl_huffman_enforce_max_code_size18
	.text
tdefl_huffman_enforce_max_code_size18:
	# %19 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %20 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %21 = sext i32 %20 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %22 = getelementptr i32, i8* %19, i64 %21
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %23 = load i32, i32* %22
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %24 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %25 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %26 = sext i32 %25 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %27 = getelementptr i32, i8* %24, i64 %26
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %28 = load i32, i32* %27
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %29 = add i32 %28, %23
	movq	%rdx, %rax
	movq	%r10, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %29, i32* %27
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %30
	jmp	tdefl_huffman_enforce_max_code_size30
	.text
tdefl_huffman_enforce_max_code_size30:
	# %31 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %32 = add i32 %31, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %32, i32* %7
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %15
	jmp	tdefl_huffman_enforce_max_code_size15
	.text
tdefl_huffman_enforce_max_code_size33:
	# %34 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %34, i32* %7
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %35
	jmp	tdefl_huffman_enforce_max_code_size35
	.text
tdefl_huffman_enforce_max_code_size35:
	# %36 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %37 = icmp sgt i32 %36, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setg	%dl
	# br i1 %37, label %38, label %53
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_huffman_enforce_max_code_size53
	jmp	tdefl_huffman_enforce_max_code_size38
	.text
tdefl_huffman_enforce_max_code_size38:
	# %39 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %41 = sext i32 %40 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %42 = getelementptr i32, i8* %39, i64 %41
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %43 = load i32, i32* %42
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %44 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %45 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %46 = sub i32 %44, %45
	movq	%rbx, %rax
	movq	%rdx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %47 = shl i32 %43, %46
	movq	%r10, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %48 = load i32, i32* %8
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %49 = add i32 %48, %47
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %49, i32* %8
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %50
	jmp	tdefl_huffman_enforce_max_code_size50
	.text
tdefl_huffman_enforce_max_code_size50:
	# %51 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %52 = add i32 %51, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %52, i32* %7
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %35
	jmp	tdefl_huffman_enforce_max_code_size35
	.text
tdefl_huffman_enforce_max_code_size53:
	# br label %54
	jmp	tdefl_huffman_enforce_max_code_size54
	.text
tdefl_huffman_enforce_max_code_size54:
	# %55 = load i32, i32* %8
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %56 = zext i32 %55 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %57 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %58 = zext i32 %57 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %59 = shl i64 1, %58
	movq	$1, %rax
	movq	%rdx, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %60 = icmp ne i64 %56, %59
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setne	%dl
	# br i1 %60, label %61, label %101
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_huffman_enforce_max_code_size101
	jmp	tdefl_huffman_enforce_max_code_size61
	.text
tdefl_huffman_enforce_max_code_size61:
	# %62 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %63 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %64 = sext i32 %63 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %65 = getelementptr i32, i8* %62, i64 %64
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %66 = load i32, i32* %65
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %67 = add i32 %66, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %67, i32* %65
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %68 = load i32, i32* %6
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %69 = sub i32 %68, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %69, i32* %7
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %70
	jmp	tdefl_huffman_enforce_max_code_size70
	.text
tdefl_huffman_enforce_max_code_size70:
	# %71 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %72 = icmp sgt i32 %71, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setg	%dl
	# br i1 %72, label %73, label %98
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_huffman_enforce_max_code_size98
	jmp	tdefl_huffman_enforce_max_code_size73
	.text
tdefl_huffman_enforce_max_code_size73:
	# %74 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %75 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %76 = sext i32 %75 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %77 = getelementptr i32, i8* %74, i64 %76
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %78 = load i32, i32* %77
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %79 = icmp ne i32 %78, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %79, label %80, label %94
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	tdefl_huffman_enforce_max_code_size94
	jmp	tdefl_huffman_enforce_max_code_size80
	.text
tdefl_huffman_enforce_max_code_size80:
	# %81 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %82 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %83 = sext i32 %82 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %84 = getelementptr i32, i8* %81, i64 %83
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %85 = load i32, i32* %84
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %86 = add i32 %85, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %86, i32* %84
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %87 = load i8*, i8** %4
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %88 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %89 = add i32 %88, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %90 = sext i32 %89 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %91 = getelementptr i32, i8* %87, i64 %90
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %92 = load i32, i32* %91
	movq	%rbx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %93 = add i32 %92, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %93, i32* %91
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# br label %98
	jmp	tdefl_huffman_enforce_max_code_size98
	.text
tdefl_huffman_enforce_max_code_size94:
	# br label %95
	jmp	tdefl_huffman_enforce_max_code_size95
	.text
tdefl_huffman_enforce_max_code_size95:
	# %96 = load i32, i32* %7
	movq	%rdi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %97 = add i32 %96, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %97, i32* %7
	movq	%rdx, %rax
	movq	%rdi, %rcx
	movl	%eax, (%rcx)
	# br label %70
	jmp	tdefl_huffman_enforce_max_code_size70
	.text
tdefl_huffman_enforce_max_code_size98:
	# %99 = load i32, i32* %8
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %100 = add i32 %99, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %100, i32* %8
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %54
	jmp	tdefl_huffman_enforce_max_code_size54
	.text
tdefl_huffman_enforce_max_code_size101:
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_locate_header_sig
_mz_zip_reader_locate_header_sig:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$32, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%rbx
	popq	%rdi
	popq	%r8
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -8(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -16(%rbp)
	# %7 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %8 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -32(%rbp)
	# %9 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r15
	# %10 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r14
	# %11 = alloca [1024 x i32]
	subq	$4096, %rsp
	movq	%rsp, %rsi
	# %12 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r13
	# %13 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r12
	# %14 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r11
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# store i8* %0, i8** %6
	movq	%r8, %rax
	movq	-16(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %1, i32* %7
	movq	%rdi, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %2, i32* %8
	movq	%rbx, %rax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8* %3, i8** %9
	movq	%rdx, %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# %16 = getelementptr [1024 x i32], i8* %11, i64 0, i64 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$4096, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8* %16, i8** %12
	movq	%rsi, %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# %17 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %18 = getelementptr %struct.mz_zip_archive, i8* %17, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %19 = load i64, i64* %18
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %20 = load i32, i32* %8
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %21 = zext i32 %20 to i64
	movq	%rsi, %rax
	movq	$0, %rsi
	movl	%eax, %esi
	# %22 = icmp ult i64 %19, %21
	movq	%rdi, %rax
	movq	%rsi, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setb	%sil
	# br i1 %22, label %23, label %24
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig24
	jmp	mz_zip_reader_locate_header_sig23
	.text
mz_zip_reader_locate_header_sig23:
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %167
	jmp	mz_zip_reader_locate_header_sig167
	.text
mz_zip_reader_locate_header_sig24:
	# %25 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %26 = getelementptr %struct.mz_zip_archive, i8* %25, i32 0, i32 0
	movq	%rsi, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %27 = load i64, i64* %26
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %28 = sub i64 %27, 4096
	movq	%rsi, %rax
	movq	$4096, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %29 = icmp sgt i64 %28, 0
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rsi
	setg	%sil
	# br i1 %29, label %30, label %35
	movq	%rsi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig35
	jmp	mz_zip_reader_locate_header_sig30
	.text
mz_zip_reader_locate_header_sig30:
	# %31 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %32 = getelementptr %struct.mz_zip_archive, i8* %31, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %33 = load i64, i64* %32
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %34 = sub i64 %33, 4096
	movq	%rbx, %rax
	movq	$4096, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# br label %36
	jmp	mz_zip_reader_locate_header_sig36
	.text
mz_zip_reader_locate_header_sig35:
	# br label %36
	movq	$0, %rbx
	jmp	mz_zip_reader_locate_header_sig36
	.text
mz_zip_reader_locate_header_sig36:
	# %37 = phi i64 [%34, %30], [0, %35]
	# store i64 %37, i64* %10
	movq	%rbx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# br label %38
	jmp	mz_zip_reader_locate_header_sig38
	.text
mz_zip_reader_locate_header_sig38:
	# %39 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %40 = getelementptr %struct.mz_zip_archive, i8* %39, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %41 = load i64, i64* %40
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %42 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %43 = sub i64 %41, %42
	movq	%rsi, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %44 = icmp ult i64 4096, %43
	movq	$4096, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %44, label %45, label %46
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig46
	jmp	mz_zip_reader_locate_header_sig45
	.text
mz_zip_reader_locate_header_sig45:
	# br label %52
	movq	$4096, %rbx
	jmp	mz_zip_reader_locate_header_sig52
	.text
mz_zip_reader_locate_header_sig46:
	# %47 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %48 = getelementptr %struct.mz_zip_archive, i8* %47, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %49 = load i64, i64* %48
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %50 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %51 = sub i64 %49, %50
	movq	%rsi, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %r9
	# br label %52
	movq	%r9, %rbx
	jmp	mz_zip_reader_locate_header_sig52
	.text
mz_zip_reader_locate_header_sig52:
	# %53 = phi i64 [4096, %45], [%51, %46]
	# %54 = trunc i64 %53 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i32 %54, i32* %14
	movq	%rbx, %rax
	movq	%r11, %rcx
	movl	%eax, (%rcx)
	# %55 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %56 = getelementptr %struct.mz_zip_archive, i8* %55, i32 0, i32 11
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$11, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %57 = load i8*, i8** %56
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %58 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %59 = getelementptr %struct.mz_zip_archive, i8* %58, i32 0, i32 14
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$14, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %60 = load i8*, i8** %59
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %61 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %62 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %63 = load i32, i32* %14
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %64 = sext i32 %63 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %65 = call i64 %57 (i8* %60, i64 %61, i8* %62, i64 %64)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	movq	%rsi, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rbx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rsi
	# %66 = load i32, i32* %14
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %67 = zext i32 %66 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %68 = icmp ne i64 %65, %67
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %68, label %69, label %70
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig70
	jmp	mz_zip_reader_locate_header_sig69
	.text
mz_zip_reader_locate_header_sig69:
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %167
	jmp	mz_zip_reader_locate_header_sig167
	.text
mz_zip_reader_locate_header_sig70:
	# %71 = load i32, i32* %14
	movq	%r11, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %72 = sub i32 %71, 4
	movq	%rbx, %rax
	movq	$4, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %72, i32* %13
	movq	%rbx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %73
	jmp	mz_zip_reader_locate_header_sig73
	.text
mz_zip_reader_locate_header_sig73:
	# %74 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %75 = icmp sge i32 %74, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setge	%bl
	# br i1 %75, label %76, label %132
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig132
	jmp	mz_zip_reader_locate_header_sig76
	.text
mz_zip_reader_locate_header_sig76:
	# %77 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %78 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %79 = sext i32 %78 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %80 = getelementptr i8, i8* %77, i64 %79
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %81 = getelementptr i8, i8* %80, i64 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %82 = load i8, i8* %81
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %83 = zext i8 %82 to i32
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %84 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %85 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %86 = sext i32 %85 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %87 = getelementptr i8, i8* %84, i64 %86
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %88 = getelementptr i8, i8* %87, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %89 = load i8, i8* %88
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %90 = zext i8 %89 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %91 = shl i32 %90, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %92 = or i32 %83, %91
	movq	%rdi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %93 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %94 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %95 = sext i32 %94 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %96 = getelementptr i8, i8* %93, i64 %95
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %97 = getelementptr i8, i8* %96, i64 2
	movq	%rbx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %98 = load i8, i8* %97
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %99 = zext i8 %98 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %100 = shl i32 %99, 16
	movq	%rbx, %rax
	movq	$16, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %101 = or i32 %92, %100
	movq	%rdi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdi
	# %102 = load i8*, i8** %12
	movq	%r13, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %103 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %104 = sext i32 %103 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %105 = getelementptr i8, i8* %102, i64 %104
	movq	%rsi, %rcx
	movq	%rbx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %106 = getelementptr i8, i8* %105, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %107 = load i8, i8* %106
	movq	%rbx, %rax
	movb	(%rax), %al
	movq	$0, %rbx
	movb	%al, %bl
	# %108 = zext i8 %107 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %109 = shl i32 %108, 24
	movq	%rbx, %rax
	movq	$24, %rcx
	shlq	%cl,%rax
	movq	%rax, %rbx
	# %110 = or i32 %101, %109
	movq	%rdi, %rax
	movq	%rbx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %110, i32* %15
	movq	%rbx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %111 = load i32, i32* %15
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %112 = load i32, i32* %7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %113 = icmp eq i32 %111, %112
	movq	%rbx, %rax
	movq	%rsi, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	sete	%bl
	# br i1 %113, label %114, label %128
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig128
	jmp	mz_zip_reader_locate_header_sig114
	.text
mz_zip_reader_locate_header_sig114:
	# %115 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %116 = getelementptr %struct.mz_zip_archive, i8* %115, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %117 = load i64, i64* %116
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %118 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %119 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %120 = sext i32 %119 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %121 = add i64 %118, %120
	movq	%rsi, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %122 = sub i64 %117, %121
	movq	%rdi, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %123 = load i32, i32* %8
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %124 = zext i32 %123 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %125 = icmp uge i64 %122, %124
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setnb	%bl
	# br i1 %125, label %126, label %127
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig127
	jmp	mz_zip_reader_locate_header_sig126
	.text
mz_zip_reader_locate_header_sig126:
	# br label %132
	jmp	mz_zip_reader_locate_header_sig132
	.text
mz_zip_reader_locate_header_sig127:
	# br label %128
	jmp	mz_zip_reader_locate_header_sig128
	.text
mz_zip_reader_locate_header_sig128:
	# br label %129
	jmp	mz_zip_reader_locate_header_sig129
	.text
mz_zip_reader_locate_header_sig129:
	# %130 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %131 = add i32 %130, -1
	movq	%rbx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i32 %131, i32* %13
	movq	%rbx, %rax
	movq	%r12, %rcx
	movl	%eax, (%rcx)
	# br label %73
	jmp	mz_zip_reader_locate_header_sig73
	.text
mz_zip_reader_locate_header_sig132:
	# %133 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %134 = icmp sge i32 %133, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rbx
	setge	%bl
	# br i1 %134, label %135, label %140
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig140
	jmp	mz_zip_reader_locate_header_sig135
	.text
mz_zip_reader_locate_header_sig135:
	# %136 = load i32, i32* %13
	movq	%r12, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %137 = sext i32 %136 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %138 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %139 = add i64 %138, %137
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %139, i64* %10
	movq	%rdx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# br label %164
	jmp	mz_zip_reader_locate_header_sig164
	.text
mz_zip_reader_locate_header_sig140:
	# %141 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %142 = icmp ne i64 %141, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setne	%bl
	# br i1 %142, label %143, label %153
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig153
	jmp	mz_zip_reader_locate_header_sig143
	.text
mz_zip_reader_locate_header_sig143:
	# %144 = load i8*, i8** %6
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %145 = getelementptr %struct.mz_zip_archive, i8* %144, i32 0, i32 0
	movq	%rbx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %146 = load i64, i64* %145
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %147 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %148 = sub i64 %146, %147
	movq	%rsi, %rax
	movq	%rbx, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %149 = load i32, i32* %8
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %150 = add i32 65535, %149
	movq	$65535, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %151 = zext i32 %150 to i64
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %152 = icmp uge i64 %148, %151
	movq	%rsi, %rax
	movq	%rbx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setnb	%bl
	# br i1 %152, label %153, label %154
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig154
	jmp	mz_zip_reader_locate_header_sig153
	.text
mz_zip_reader_locate_header_sig153:
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %167
	jmp	mz_zip_reader_locate_header_sig167
	.text
mz_zip_reader_locate_header_sig154:
	# %155 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %156 = sub i64 %155, 4093
	movq	%rbx, %rax
	movq	$4093, %rcx
	subq	%rcx, %rax
	movq	%rax, %rbx
	# %157 = icmp ugt i64 %156, 0
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	seta	%bl
	# br i1 %157, label %158, label %161
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_locate_header_sig161
	jmp	mz_zip_reader_locate_header_sig158
	.text
mz_zip_reader_locate_header_sig158:
	# %159 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %160 = sub i64 %159, 4093
	movq	%rdx, %rax
	movq	$4093, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# br label %162
	movq	%rdx, %rbx
	jmp	mz_zip_reader_locate_header_sig162
	.text
mz_zip_reader_locate_header_sig161:
	# br label %162
	movq	$0, %rbx
	jmp	mz_zip_reader_locate_header_sig162
	.text
mz_zip_reader_locate_header_sig162:
	# %163 = phi i64 [%160, %158], [0, %161]
	# store i64 %163, i64* %10
	movq	%rbx, %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# br label %38
	jmp	mz_zip_reader_locate_header_sig38
	.text
mz_zip_reader_locate_header_sig164:
	# %165 = load i64, i64* %10
	movq	%r14, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %166 = load i8*, i8** %9
	movq	%r15, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %165, i64* %166
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %5
	movq	$1, %rax
	movq	-8(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %167
	jmp	mz_zip_reader_locate_header_sig167
	.text
mz_zip_reader_locate_header_sig167:
	# %168 = load i32, i32* %5
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %168
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_reader_sort_central_dir_offsets_by_filename
_mz_zip_reader_sort_central_dir_offsets_by_filename:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$704, %rsp
	pushq	%rdi
	popq	%rdx
	# %2 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -8(%rbp)
	# %3 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -472(%rbp)
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -16(%rbp)
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -24(%rbp)
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -32(%rbp)
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -40(%rbp)
	# %8 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -48(%rbp)
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -56(%rbp)
	# %10 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -64(%rbp)
	# %11 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -72(%rbp)
	# %12 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -80(%rbp)
	# %13 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %14 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -96(%rbp)
	# %15 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -104(%rbp)
	# %16 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -112(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %18 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -128(%rbp)
	# %19 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %20 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -144(%rbp)
	# %21 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -152(%rbp)
	# %22 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -168(%rbp)
	# %23 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -160(%rbp)
	# %24 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -176(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -184(%rbp)
	# %26 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -192(%rbp)
	# %27 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -200(%rbp)
	# %28 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -208(%rbp)
	# %29 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -216(%rbp)
	# %30 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %31 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %32 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -240(%rbp)
	# %33 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -248(%rbp)
	# %34 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -256(%rbp)
	# %35 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -264(%rbp)
	# %36 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %37 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -280(%rbp)
	# %38 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -288(%rbp)
	# %39 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -296(%rbp)
	# %40 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %41 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -312(%rbp)
	# %42 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -320(%rbp)
	# %43 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -328(%rbp)
	# %44 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -336(%rbp)
	# %45 = alloca i8
	subq	$1, %rsp
	movq	%rsp, -344(%rbp)
	# %46 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rsi
	# %47 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %48 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -352(%rbp)
	# %49 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -360(%rbp)
	# %50 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -368(%rbp)
	# %51 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -376(%rbp)
	# %52 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -384(%rbp)
	# %53 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -392(%rbp)
	# %54 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -400(%rbp)
	# %55 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -408(%rbp)
	# %56 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -416(%rbp)
	# %57 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -424(%rbp)
	# %58 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -432(%rbp)
	# %59 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -440(%rbp)
	# %60 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -448(%rbp)
	# store i8* %0, i8** %46
	movq	%rdx, %rax
	movq	%rsi, %rcx
	movq	%rax, (%rcx)
	# %61 = load i8*, i8** %46
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = getelementptr %struct.mz_zip_archive, i8* %61, i32 0, i32 15
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$15, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %63 = load i8*, i8** %62
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8* %63, i8** %47
	movq	%rdx, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# %64 = load i8*, i8** %47
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = getelementptr %struct.mz_zip_internal_state_tag, i8* %64, i32 0, i32 1
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %65, i8** %48
	movq	%rdx, %rax
	movq	-352(%rbp), %rcx
	movq	%rax, (%rcx)
	# %66 = load i8*, i8** %47
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %67 = getelementptr %struct.mz_zip_internal_state_tag, i8* %66, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %67, i8** %49
	movq	%rdx, %rax
	movq	-360(%rbp), %rcx
	movq	%rax, (%rcx)
	# %68 = load i8*, i8** %46
	movq	%rsi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %69 = getelementptr %struct.mz_zip_archive, i8* %68, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %70 = load i32, i32* %69
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %70, i32* %53
	movq	%rdx, %rax
	movq	-392(%rbp), %rcx
	movl	%eax, (%rcx)
	# %71 = load i32, i32* %53
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %72 = icmp ule i32 %71, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setbe	%dl
	# br i1 %72, label %73, label %74
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename74
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename73
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename73:
	# br label %784
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename784
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename74:
	# %75 = load i8*, i8** %47
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %76 = getelementptr %struct.mz_zip_internal_state_tag, i8* %75, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$136, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %77 = getelementptr %struct.mz_zip_array, i8* %76, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %78 = load i8*, i8** %77
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %79 = getelementptr i32, i8* %78, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %79, i8** %50
	movq	%rdx, %rax
	movq	-368(%rbp), %rcx
	movq	%rax, (%rcx)
	# %80 = load i32, i32* %53
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %81 = sub i32 %80, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %82 = lshr i32 %81, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# store i32 %82, i32* %51
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %83
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename83
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename83:
	# %84 = load i32, i32* %51
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %85 = zext i32 %84 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i64 %85, i64* %55
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %86
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename86
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename86:
	# %87 = load i64, i64* %55
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %88 = shl i64 %87, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %89 = add i64 %88, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %89, i64* %54
	movq	%rbx, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# %90 = load i32, i32* %53
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %91 = zext i32 %90 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %92 = icmp uge i64 %89, %91
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %92, label %93, label %94
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename94
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename93
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename93:
	# br label %418
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename418
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename94:
	# %95 = load i64, i64* %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %96 = add i64 %95, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %97 = load i32, i32* %53
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %98 = zext i32 %97 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %99 = icmp ult i64 %96, %98
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %99, label %100, label %247
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename247
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename100
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename100:
	# %101 = load i8*, i8** %49
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -456(%rbp)
	# %102 = load i8*, i8** %48
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -464(%rbp)
	# %103 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %104 = load i64, i64* %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %105 = getelementptr i32, i8* %103, i64 %104
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %106 = load i32, i32* %105
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %107 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %108 = load i64, i64* %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %109 = add i64 %108, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %110 = getelementptr i32, i8* %107, i64 %109
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %111 = load i32, i32* %110
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %101, i8** %2
	movq	-456(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %102, i8** %3
	movq	-464(%rbp), %rax
	movq	-472(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %106, i32* %4
	movq	%rsi, %rax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %111, i32* %5
	movq	%rdx, %rax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	# %112 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %113 = load i8*, i8** %112
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %114 = load i8*, i8** %3
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %115 = load i8*, i8** %114
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %116 = load i32, i32* %4
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %117 = zext i32 %116 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %118 = getelementptr i32, i8* %115, i64 %117
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %119 = load i32, i32* %118
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %120 = zext i32 %119 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %121 = getelementptr i8, i8* %113, i64 %120
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %121, i8** %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# %122 = load i8*, i8** %2
	movq	-8(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %123 = load i8*, i8** %122
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %124 = load i8*, i8** %3
	movq	-472(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %125 = load i8*, i8** %124
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %126 = load i32, i32* %5
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %127 = zext i32 %126 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %128 = getelementptr i32, i8* %125, i64 %127
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %129 = load i32, i32* %128
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %130 = zext i32 %129 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %131 = getelementptr i8, i8* %123, i64 %130
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %131, i8** %8
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# %132 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %133 = getelementptr i8, i8* %132, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %134 = load i8, i8* %133
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %135 = zext i8 %134 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %136 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %137 = getelementptr i8, i8* %136, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %138 = getelementptr i8, i8* %137, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %139 = load i8, i8* %138
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %140 = zext i8 %139 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %141 = shl i32 %140, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %142 = or i32 %135, %141
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %142, i32* %9
	movq	%rdx, %rax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	# %143 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %144 = getelementptr i8, i8* %143, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %145 = load i8, i8* %144
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %146 = zext i8 %145 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %147 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %148 = getelementptr i8, i8* %147, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %149 = getelementptr i8, i8* %148, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %150 = load i8, i8* %149
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %151 = zext i8 %150 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %152 = shl i32 %151, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %153 = or i32 %146, %152
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %153, i32* %10
	movq	%rdx, %rax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8 0, i8* %11
	movq	$0, %rax
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	# store i8 0, i8* %12
	movq	$0, %rax
	movq	-80(%rbp), %rcx
	movb	%al, (%rcx)
	# %154 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %155 = getelementptr i8, i8* %154, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %155, i8** %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# %156 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %157 = getelementptr i8, i8* %156, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %157, i8** %8
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# %158 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %159 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %160 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %161 = icmp ult i32 %159, %160
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %161, label %162, label %164
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename164
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename162
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename162:
	# %163 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -488(%rbp)
	movl	%eax, -488(%rbp)
	# br label %166
	movq	-488(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename166
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename164:
	# %165 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -480(%rbp)
	movl	%eax, -480(%rbp)
	# br label %166
	movq	-480(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename166
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename166:
	# %167 = phi i32 [%163, %162], [%165, %164]
	# %168 = zext i32 %167 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %169 = getelementptr i8, i8* %158, i64 %168
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %169, i8** %7
	movq	%rdx, %rax
	movq	-40(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %170
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename170
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename170:
	# %171 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %172 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %173 = icmp ult i8* %171, %172
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %173, label %174, label %228
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename228
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename174
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename174:
	# %175 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %176 = load i8, i8* %175
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %177 = zext i8 %176 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %178 = icmp sge i32 %177, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %178, label %179, label %190
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename190
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename179
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename179:
	# %180 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %181 = load i8, i8* %180
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %182 = zext i8 %181 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %183 = icmp sle i32 %182, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %183, label %184, label %190
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename190
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename184
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename184:
	# %185 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %186 = load i8, i8* %185
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %187 = zext i8 %186 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %188 = sub i32 %187, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %189 = add i32 %188, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, -496(%rbp)
	# br label %194
	movq	-496(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename194
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename190:
	# %191 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %192 = load i8, i8* %191
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %193 = zext i8 %192 to i32
	movq	%rdx, %rax
	movq	$0, -504(%rbp)
	movb	%al, -504(%rbp)
	# br label %194
	movq	-504(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename194
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename194:
	# %195 = phi i32 [%189, %184], [%193, %190]
	# %196 = trunc i32 %195 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %196, i8* %11
	movq	%rdx, %rax
	movq	-72(%rbp), %rcx
	movb	%al, (%rcx)
	# %197 = zext i8 %196 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %198 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %199 = load i8, i8* %198
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %200 = zext i8 %199 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %201 = icmp sge i32 %200, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %201, label %202, label %213
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename213
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename202
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename202:
	# %203 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %204 = load i8, i8* %203
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %205 = zext i8 %204 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %206 = icmp sle i32 %205, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %206, label %207, label %213
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename213
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename207
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename207:
	# %208 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %209 = load i8, i8* %208
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %210 = zext i8 %209 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %211 = sub i32 %210, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %212 = add i32 %211, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, -512(%rbp)
	# br label %217
	movq	-512(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename217
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename213:
	# %214 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %215 = load i8, i8* %214
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %216 = zext i8 %215 to i32
	movq	%rdx, %rax
	movq	$0, -520(%rbp)
	movb	%al, -520(%rbp)
	# br label %217
	movq	-520(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename217
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename217:
	# %218 = phi i32 [%212, %207], [%216, %213]
	# %219 = trunc i32 %218 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %219, i8* %12
	movq	%rdx, %rax
	movq	-80(%rbp), %rcx
	movb	%al, (%rcx)
	# %220 = zext i8 %219 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %221 = icmp ne i32 %197, %220
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %221, label %222, label %223
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename223
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename222
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename222:
	# br label %228
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename228
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename223:
	# %224 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %225 = getelementptr i8, i8* %224, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %225, i8** %6
	movq	%rdx, %rax
	movq	-32(%rbp), %rcx
	movq	%rax, (%rcx)
	# %226 = load i8*, i8** %8
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %227 = getelementptr i8, i8* %226, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %227, i8** %8
	movq	%rdx, %rax
	movq	-48(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %170
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename170
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename228:
	# %229 = load i8*, i8** %6
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %230 = load i8*, i8** %7
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %231 = icmp eq i8* %229, %230
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %231, label %232, label %237
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename237
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename232
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename232:
	# %233 = load i32, i32* %9
	movq	-56(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %234 = load i32, i32* %10
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %235 = icmp ult i32 %233, %234
	movq	%rdx, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# %236 = zext i1 %235 to i32
	movq	%rdx, %rax
	movq	%rax, -536(%rbp)
	# br label %244
	movq	-536(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename244
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename237:
	# %238 = load i8, i8* %11
	movq	-72(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %239 = zext i8 %238 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %240 = load i8, i8* %12
	movq	-80(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %241 = zext i8 %240 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %242 = icmp slt i32 %239, %241
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# %243 = zext i1 %242 to i32
	movq	%rdx, %rax
	movq	%rax, -544(%rbp)
	# br label %244
	movq	-544(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename244
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename244:
	# %245 = phi i32 [%236, %232], [%243, %237]
	# %246 = icmp ne i32 %245, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, -552(%rbp)
	setne	-552(%rbp)
	# br label %247
	movq	-552(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename247
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename247:
	# %248 = phi i1 [0, %94], [%246, %244]
	# %249 = zext i1 %248 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %250 = sext i32 %249 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %251 = load i64, i64* %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %252 = add i64 %251, %250
	movq	%rdx, %rax
	movq	%rbx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %252, i64* %54
	movq	%rdx, %rax
	movq	-400(%rbp), %rcx
	movq	%rax, (%rcx)
	# %253 = load i8*, i8** %49
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -560(%rbp)
	# %254 = load i8*, i8** %48
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %255 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %256 = load i64, i64* %55
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %257 = getelementptr i32, i8* %255, i64 %256
	movq	%rdx, %rcx
	movq	%rbx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %258 = load i32, i32* %257
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %259 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %260 = load i64, i64* %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -528(%rbp)
	# %261 = getelementptr i32, i8* %259, i64 %260
	movq	%rdx, %rcx
	movq	-528(%rbp), %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %262 = load i32, i32* %261
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %253, i8** %13
	movq	-560(%rbp), %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %254, i8** %14
	movq	%rsi, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %258, i32* %15
	movq	%rbx, %rax
	movq	-104(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %262, i32* %16
	movq	%rdx, %rax
	movq	-112(%rbp), %rcx
	movl	%eax, (%rcx)
	# %263 = load i8*, i8** %13
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %264 = load i8*, i8** %263
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %265 = load i8*, i8** %14
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %266 = load i8*, i8** %265
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %267 = load i32, i32* %15
	movq	-104(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %268 = zext i32 %267 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %269 = getelementptr i32, i8* %266, i64 %268
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %270 = load i32, i32* %269
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %271 = zext i32 %270 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %272 = getelementptr i8, i8* %264, i64 %271
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %272, i8** %17
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %273 = load i8*, i8** %13
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %274 = load i8*, i8** %273
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %275 = load i8*, i8** %14
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %276 = load i8*, i8** %275
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %277 = load i32, i32* %16
	movq	-112(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %278 = zext i32 %277 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %279 = getelementptr i32, i8* %276, i64 %278
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %280 = load i32, i32* %279
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %281 = zext i32 %280 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %282 = getelementptr i8, i8* %274, i64 %281
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %282, i8** %19
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %283 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %284 = getelementptr i8, i8* %283, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %285 = load i8, i8* %284
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %286 = zext i8 %285 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %287 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %288 = getelementptr i8, i8* %287, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %289 = getelementptr i8, i8* %288, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %290 = load i8, i8* %289
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %291 = zext i8 %290 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %292 = shl i32 %291, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %293 = or i32 %286, %292
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %293, i32* %20
	movq	%rdx, %rax
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	# %294 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %295 = getelementptr i8, i8* %294, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %296 = load i8, i8* %295
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %297 = zext i8 %296 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %298 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %299 = getelementptr i8, i8* %298, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %300 = getelementptr i8, i8* %299, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %301 = load i8, i8* %300
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %302 = zext i8 %301 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %303 = shl i32 %302, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %304 = or i32 %297, %303
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %304, i32* %21
	movq	%rdx, %rax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8 0, i8* %22
	movq	$0, %rax
	movq	-168(%rbp), %rcx
	movb	%al, (%rcx)
	# store i8 0, i8* %23
	movq	$0, %rax
	movq	-160(%rbp), %rcx
	movb	%al, (%rcx)
	# %305 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %306 = getelementptr i8, i8* %305, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %306, i8** %17
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %307 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %308 = getelementptr i8, i8* %307, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %308, i8** %19
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# %309 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %310 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %311 = load i32, i32* %21
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %312 = icmp ult i32 %310, %311
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %312, label %313, label %315
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename315
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename313
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename313:
	# %314 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -568(%rbp)
	movl	%eax, -568(%rbp)
	# br label %317
	movq	-568(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename317
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename315:
	# %316 = load i32, i32* %21
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -576(%rbp)
	movl	%eax, -576(%rbp)
	# br label %317
	movq	-576(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename317
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename317:
	# %318 = phi i32 [%314, %313], [%316, %315]
	# %319 = zext i32 %318 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %320 = getelementptr i8, i8* %309, i64 %319
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %320, i8** %18
	movq	%rdx, %rax
	movq	-128(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %321
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename321
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename321:
	# %322 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %323 = load i8*, i8** %18
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %324 = icmp ult i8* %322, %323
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %324, label %325, label %379
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename379
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename325
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename325:
	# %326 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %327 = load i8, i8* %326
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %328 = zext i8 %327 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %329 = icmp sge i32 %328, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %329, label %330, label %341
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename341
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename330
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename330:
	# %331 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %332 = load i8, i8* %331
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %333 = zext i8 %332 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %334 = icmp sle i32 %333, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %334, label %335, label %341
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename341
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename335
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename335:
	# %336 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %337 = load i8, i8* %336
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %338 = zext i8 %337 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %339 = sub i32 %338, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %340 = add i32 %339, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, -584(%rbp)
	# br label %345
	movq	-584(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename345
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename341:
	# %342 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %343 = load i8, i8* %342
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %344 = zext i8 %343 to i32
	movq	%rdx, %rax
	movq	$0, -592(%rbp)
	movb	%al, -592(%rbp)
	# br label %345
	movq	-592(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename345
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename345:
	# %346 = phi i32 [%340, %335], [%344, %341]
	# %347 = trunc i32 %346 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %347, i8* %22
	movq	%rdx, %rax
	movq	-168(%rbp), %rcx
	movb	%al, (%rcx)
	# %348 = zext i8 %347 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %349 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %350 = load i8, i8* %349
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %351 = zext i8 %350 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %352 = icmp sge i32 %351, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %352, label %353, label %364
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename364
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename353
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename353:
	# %354 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %355 = load i8, i8* %354
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %356 = zext i8 %355 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %357 = icmp sle i32 %356, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %357, label %358, label %364
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename364
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename358
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename358:
	# %359 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %360 = load i8, i8* %359
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %361 = zext i8 %360 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %362 = sub i32 %361, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %363 = add i32 %362, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, -600(%rbp)
	# br label %368
	movq	-600(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename368
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename364:
	# %365 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %366 = load i8, i8* %365
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %367 = zext i8 %366 to i32
	movq	%rdx, %rax
	movq	$0, -608(%rbp)
	movb	%al, -608(%rbp)
	# br label %368
	movq	-608(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename368
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename368:
	# %369 = phi i32 [%363, %358], [%367, %364]
	# %370 = trunc i32 %369 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %370, i8* %23
	movq	%rdx, %rax
	movq	-160(%rbp), %rcx
	movb	%al, (%rcx)
	# %371 = zext i8 %370 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %372 = icmp ne i32 %348, %371
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %372, label %373, label %374
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename374
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename373
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename373:
	# br label %379
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename379
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename374:
	# %375 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %376 = getelementptr i8, i8* %375, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %376, i8** %17
	movq	%rdx, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# %377 = load i8*, i8** %19
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %378 = getelementptr i8, i8* %377, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %378, i8** %19
	movq	%rdx, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %321
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename321
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename379:
	# %380 = load i8*, i8** %17
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %381 = load i8*, i8** %18
	movq	-128(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %382 = icmp eq i8* %380, %381
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %382, label %383, label %388
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename388
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename383
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename383:
	# %384 = load i32, i32* %20
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %385 = load i32, i32* %21
	movq	-152(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %386 = icmp ult i32 %384, %385
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# %387 = zext i1 %386 to i32
	movq	%rdx, %rax
	movq	%rax, -616(%rbp)
	# br label %395
	movq	-616(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename395
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename388:
	# %389 = load i8, i8* %22
	movq	-168(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %390 = zext i8 %389 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %391 = load i8, i8* %23
	movq	-160(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %392 = zext i8 %391 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %393 = icmp slt i32 %390, %392
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# %394 = zext i1 %393 to i32
	movq	%rdx, %rax
	movq	%rax, %r15
	# br label %395
	movq	%r15, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename395
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename395:
	# %396 = phi i32 [%387, %383], [%394, %388]
	# %397 = icmp ne i32 %396, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %397, label %399, label %398
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename398
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename399
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename398:
	# br label %418
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename418
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename399:
	# br label %400
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename400
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename400:
	# %401 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %402 = load i64, i64* %55
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %403 = getelementptr i32, i8* %401, i64 %402
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %404 = load i32, i32* %403
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %404, i32* %56
	movq	%rdx, %rax
	movq	-416(%rbp), %rcx
	movl	%eax, (%rcx)
	# %405 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %406 = load i64, i64* %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %407 = getelementptr i32, i8* %405, i64 %406
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %408 = load i32, i32* %407
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %409 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %410 = load i64, i64* %55
	movq	-408(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %411 = getelementptr i32, i8* %409, i64 %410
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %408, i32* %411
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %412 = load i32, i32* %56
	movq	-416(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %413 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %414 = load i64, i64* %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %415 = getelementptr i32, i8* %413, i64 %414
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %412, i32* %415
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %416
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename416
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename416:
	# %417 = load i64, i64* %54
	movq	-400(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %417, i64* %55
	movq	%rdx, %rax
	movq	-408(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %86
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename86
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename418:
	# %419 = load i32, i32* %51
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %420 = icmp ne i32 %419, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %420, label %422, label %421
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename421
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename422
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename421:
	# br label %425
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename425
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename422:
	# %423 = load i32, i32* %51
	movq	-376(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %424 = add i32 %423, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %424, i32* %51
	movq	%rdx, %rax
	movq	-376(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %83
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename83
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename425:
	# %426 = load i32, i32* %53
	movq	-392(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %427 = sub i32 %426, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %427, i32* %52
	movq	%rdx, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %428
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename428
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename428:
	# %429 = load i32, i32* %52
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %430 = icmp ugt i32 %429, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	seta	%dl
	# br i1 %430, label %431, label %784
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename784
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename431
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename431:
	# store i64 0, i64* %58
	movq	$0, %rax
	movq	-432(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %432
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename432
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename432:
	# %433 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %434 = load i32, i32* %52
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %435 = zext i32 %434 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %436 = getelementptr i32, i8* %433, i64 %435
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %437 = load i32, i32* %436
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %437, i32* %59
	movq	%rdx, %rax
	movq	-440(%rbp), %rcx
	movl	%eax, (%rcx)
	# %438 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %439 = getelementptr i32, i8* %438, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %440 = load i32, i32* %439
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %441 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %442 = load i32, i32* %52
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %443 = zext i32 %442 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %444 = getelementptr i32, i8* %441, i64 %443
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %440, i32* %444
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %445 = load i32, i32* %59
	movq	-440(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %446 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %447 = getelementptr i32, i8* %446, i64 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %445, i32* %447
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %448
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename448
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename448:
	# br label %449
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename449
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename449:
	# %450 = load i64, i64* %58
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %451 = shl i64 %450, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %452 = add i64 %451, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# store i64 %452, i64* %57
	movq	%rbx, %rax
	movq	-424(%rbp), %rcx
	movq	%rax, (%rcx)
	# %453 = load i32, i32* %52
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %454 = zext i32 %453 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %455 = icmp uge i64 %452, %454
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setnb	%dl
	# br i1 %455, label %456, label %457
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename457
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename456
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename456:
	# br label %781
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename781
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename457:
	# %458 = load i64, i64* %57
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %459 = add i64 %458, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %460 = load i32, i32* %52
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %461 = zext i32 %460 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %462 = icmp ult i64 %459, %461
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %462, label %463, label %610
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	movq	$0, %rdx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename610
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename463
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename463:
	# %464 = load i8*, i8** %49
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -624(%rbp)
	# %465 = load i8*, i8** %48
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r15
	# %466 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %467 = load i64, i64* %57
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %468 = getelementptr i32, i8* %466, i64 %467
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %469 = load i32, i32* %468
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %470 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %471 = load i64, i64* %57
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %472 = add i64 %471, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# %473 = getelementptr i32, i8* %470, i64 %472
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %474 = load i32, i32* %473
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %464, i8** %24
	movq	-624(%rbp), %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %465, i8** %25
	movq	%r15, %rax
	movq	-184(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %469, i32* %26
	movq	%rsi, %rax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %474, i32* %27
	movq	%rdx, %rax
	movq	-200(%rbp), %rcx
	movl	%eax, (%rcx)
	# %475 = load i8*, i8** %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %476 = load i8*, i8** %475
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %477 = load i8*, i8** %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %478 = load i8*, i8** %477
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %479 = load i32, i32* %26
	movq	-192(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %480 = zext i32 %479 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %481 = getelementptr i32, i8* %478, i64 %480
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %482 = load i32, i32* %481
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %483 = zext i32 %482 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %484 = getelementptr i8, i8* %476, i64 %483
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %484, i8** %28
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# %485 = load i8*, i8** %24
	movq	-176(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %486 = load i8*, i8** %485
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %487 = load i8*, i8** %25
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %488 = load i8*, i8** %487
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %489 = load i32, i32* %27
	movq	-200(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %490 = zext i32 %489 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %491 = getelementptr i32, i8* %488, i64 %490
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %492 = load i32, i32* %491
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %493 = zext i32 %492 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %494 = getelementptr i8, i8* %486, i64 %493
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %494, i8** %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# %495 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %496 = getelementptr i8, i8* %495, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %497 = load i8, i8* %496
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %498 = zext i8 %497 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %499 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %500 = getelementptr i8, i8* %499, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %501 = getelementptr i8, i8* %500, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %502 = load i8, i8* %501
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %503 = zext i8 %502 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %504 = shl i32 %503, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %505 = or i32 %498, %504
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %505, i32* %31
	movq	%rdx, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %506 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %507 = getelementptr i8, i8* %506, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %508 = load i8, i8* %507
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %509 = zext i8 %508 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %510 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %511 = getelementptr i8, i8* %510, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %512 = getelementptr i8, i8* %511, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %513 = load i8, i8* %512
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %514 = zext i8 %513 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %515 = shl i32 %514, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %516 = or i32 %509, %515
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %516, i32* %32
	movq	%rdx, %rax
	movq	-240(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8 0, i8* %33
	movq	$0, %rax
	movq	-248(%rbp), %rcx
	movb	%al, (%rcx)
	# store i8 0, i8* %34
	movq	$0, %rax
	movq	-256(%rbp), %rcx
	movb	%al, (%rcx)
	# %517 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %518 = getelementptr i8, i8* %517, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %518, i8** %28
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# %519 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %520 = getelementptr i8, i8* %519, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %520, i8** %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# %521 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %522 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %523 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %524 = icmp ult i32 %522, %523
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %524, label %525, label %527
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename527
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename525
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename525:
	# %526 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -632(%rbp)
	movl	%eax, -632(%rbp)
	# br label %529
	movq	-632(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename529
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename527:
	# %528 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, -640(%rbp)
	movl	%eax, -640(%rbp)
	# br label %529
	movq	-640(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename529
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename529:
	# %530 = phi i32 [%526, %525], [%528, %527]
	# %531 = zext i32 %530 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %532 = getelementptr i8, i8* %521, i64 %531
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %532, i8** %29
	movq	%rdx, %rax
	movq	-216(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %533
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename533
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename533:
	# %534 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %535 = load i8*, i8** %29
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %536 = icmp ult i8* %534, %535
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %536, label %537, label %591
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename591
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename537
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename537:
	# %538 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %539 = load i8, i8* %538
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %540 = zext i8 %539 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %541 = icmp sge i32 %540, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %541, label %542, label %553
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename553
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename542
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename542:
	# %543 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %544 = load i8, i8* %543
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %545 = zext i8 %544 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %546 = icmp sle i32 %545, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %546, label %547, label %553
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename553
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename547
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename547:
	# %548 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %549 = load i8, i8* %548
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %550 = zext i8 %549 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %551 = sub i32 %550, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %552 = add i32 %551, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, -648(%rbp)
	# br label %557
	movq	-648(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename557
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename553:
	# %554 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %555 = load i8, i8* %554
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %556 = zext i8 %555 to i32
	movq	%rdx, %rax
	movq	$0, -656(%rbp)
	movb	%al, -656(%rbp)
	# br label %557
	movq	-656(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename557
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename557:
	# %558 = phi i32 [%552, %547], [%556, %553]
	# %559 = trunc i32 %558 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %559, i8* %33
	movq	%rdx, %rax
	movq	-248(%rbp), %rcx
	movb	%al, (%rcx)
	# %560 = zext i8 %559 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %561 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %562 = load i8, i8* %561
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %563 = zext i8 %562 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %564 = icmp sge i32 %563, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %564, label %565, label %576
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename576
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename565
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename565:
	# %566 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %567 = load i8, i8* %566
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %568 = zext i8 %567 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %569 = icmp sle i32 %568, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %569, label %570, label %576
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename576
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename570
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename570:
	# %571 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %572 = load i8, i8* %571
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %573 = zext i8 %572 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %574 = sub i32 %573, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %575 = add i32 %574, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, -672(%rbp)
	# br label %580
	movq	-672(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename580
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename576:
	# %577 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %578 = load i8, i8* %577
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %579 = zext i8 %578 to i32
	movq	%rdx, %rax
	movq	$0, -680(%rbp)
	movb	%al, -680(%rbp)
	# br label %580
	movq	-680(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename580
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename580:
	# %581 = phi i32 [%575, %570], [%579, %576]
	# %582 = trunc i32 %581 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %582, i8* %34
	movq	%rdx, %rax
	movq	-256(%rbp), %rcx
	movb	%al, (%rcx)
	# %583 = zext i8 %582 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %584 = icmp ne i32 %560, %583
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %584, label %585, label %586
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename586
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename585
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename585:
	# br label %591
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename591
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename586:
	# %587 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %588 = getelementptr i8, i8* %587, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %588, i8** %28
	movq	%rdx, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# %589 = load i8*, i8** %30
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %590 = getelementptr i8, i8* %589, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %590, i8** %30
	movq	%rdx, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %533
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename533
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename591:
	# %592 = load i8*, i8** %28
	movq	-208(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %593 = load i8*, i8** %29
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %594 = icmp eq i8* %592, %593
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %594, label %595, label %600
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename600
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename595
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename595:
	# %596 = load i32, i32* %31
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %597 = load i32, i32* %32
	movq	-240(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %598 = icmp ult i32 %596, %597
	movq	%rdx, %rax
	movq	%rbx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# %599 = zext i1 %598 to i32
	movq	%rdx, %rax
	movq	%rax, -688(%rbp)
	# br label %607
	movq	-688(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename607
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename600:
	# %601 = load i8, i8* %33
	movq	-248(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %602 = zext i8 %601 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %603 = load i8, i8* %34
	movq	-256(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %604 = zext i8 %603 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %605 = icmp slt i32 %602, %604
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# %606 = zext i1 %605 to i32
	movq	%rdx, %rax
	movq	%rax, -696(%rbp)
	# br label %607
	movq	-696(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename607
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename607:
	# %608 = phi i32 [%599, %595], [%606, %600]
	# %609 = icmp ne i32 %608, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, -704(%rbp)
	setne	-704(%rbp)
	# br label %610
	movq	-704(%rbp), %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename610
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename610:
	# %611 = phi i1 [0, %457], [%609, %607]
	# %612 = zext i1 %611 to i32
	movq	%rdx, %rax
	movq	%rax, %rdx
	# %613 = sext i32 %612 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %614 = load i64, i64* %57
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %615 = add i64 %614, %613
	movq	%rbx, %rax
	movq	%rdx, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %615, i64* %57
	movq	%rdx, %rax
	movq	-424(%rbp), %rcx
	movq	%rax, (%rcx)
	# %616 = load i8*, i8** %49
	movq	-360(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r15
	# %617 = load i8*, i8** %48
	movq	-352(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %618 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %619 = load i64, i64* %58
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %620 = getelementptr i32, i8* %618, i64 %619
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %621 = load i32, i32* %620
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %622 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %623 = load i64, i64* %57
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -664(%rbp)
	# %624 = getelementptr i32, i8* %622, i64 %623
	movq	%rdx, %rcx
	movq	-664(%rbp), %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %625 = load i32, i32* %624
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %616, i8** %35
	movq	%r15, %rax
	movq	-264(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i8* %617, i8** %36
	movq	%rsi, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %621, i32* %37
	movq	%rbx, %rax
	movq	-280(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i32 %625, i32* %38
	movq	%rdx, %rax
	movq	-288(%rbp), %rcx
	movl	%eax, (%rcx)
	# %626 = load i8*, i8** %35
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %627 = load i8*, i8** %626
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %628 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %629 = load i8*, i8** %628
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %630 = load i32, i32* %37
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %631 = zext i32 %630 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %632 = getelementptr i32, i8* %629, i64 %631
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %633 = load i32, i32* %632
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %634 = zext i32 %633 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %635 = getelementptr i8, i8* %627, i64 %634
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %635, i8** %39
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# %636 = load i8*, i8** %35
	movq	-264(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %637 = load i8*, i8** %636
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %638 = load i8*, i8** %36
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %639 = load i8*, i8** %638
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %640 = load i32, i32* %38
	movq	-288(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %641 = zext i32 %640 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %642 = getelementptr i32, i8* %639, i64 %641
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %643 = load i32, i32* %642
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %644 = zext i32 %643 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %645 = getelementptr i8, i8* %637, i64 %644
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %645, i8** %41
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %646 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %647 = getelementptr i8, i8* %646, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %648 = load i8, i8* %647
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %649 = zext i8 %648 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %650 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %651 = getelementptr i8, i8* %650, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %652 = getelementptr i8, i8* %651, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %653 = load i8, i8* %652
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %654 = zext i8 %653 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %655 = shl i32 %654, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %656 = or i32 %649, %655
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %656, i32* %42
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movl	%eax, (%rcx)
	# %657 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %658 = getelementptr i8, i8* %657, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %659 = load i8, i8* %658
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %660 = zext i8 %659 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %661 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %662 = getelementptr i8, i8* %661, i64 28
	movq	%rdx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %663 = getelementptr i8, i8* %662, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %664 = load i8, i8* %663
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %665 = zext i8 %664 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %666 = shl i32 %665, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %667 = or i32 %660, %666
	movq	%rbx, %rax
	movq	%rdx, %rcx
	orq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %667, i32* %43
	movq	%rdx, %rax
	movq	-328(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i8 0, i8* %44
	movq	$0, %rax
	movq	-336(%rbp), %rcx
	movb	%al, (%rcx)
	# store i8 0, i8* %45
	movq	$0, %rax
	movq	-344(%rbp), %rcx
	movb	%al, (%rcx)
	# %668 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %669 = getelementptr i8, i8* %668, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %669, i8** %39
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# %670 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %671 = getelementptr i8, i8* %670, i64 46
	movq	%rdx, %rcx
	movq	$46, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %671, i8** %41
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# %672 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %673 = load i32, i32* %42
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %674 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %675 = icmp ult i32 %673, %674
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# br i1 %675, label %676, label %678
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename678
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename676
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename676:
	# %677 = load i32, i32* %42
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r13
	movl	%eax, %r13d
	# br label %680
	movq	%r13, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename680
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename678:
	# %679 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %r12
	movl	%eax, %r12d
	# br label %680
	movq	%r12, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename680
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename680:
	# %681 = phi i32 [%677, %676], [%679, %678]
	# %682 = zext i32 %681 to i64
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# %683 = getelementptr i8, i8* %672, i64 %682
	movq	%rsi, %rcx
	movq	%rdx, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %683, i8** %40
	movq	%rdx, %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %684
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename684
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename684:
	# %685 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %686 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %687 = icmp ult i8* %685, %686
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %687, label %688, label %742
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename742
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename688
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename688:
	# %689 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %690 = load i8, i8* %689
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %691 = zext i8 %690 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %692 = icmp sge i32 %691, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %692, label %693, label %704
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename704
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename693
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename693:
	# %694 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %695 = load i8, i8* %694
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %696 = zext i8 %695 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %697 = icmp sle i32 %696, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %697, label %698, label %704
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename704
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename698
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename698:
	# %699 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %700 = load i8, i8* %699
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %701 = zext i8 %700 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %702 = sub i32 %701, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %703 = add i32 %702, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, %r10
	# br label %708
	movq	%r10, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename708
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename704:
	# %705 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %706 = load i8, i8* %705
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %707 = zext i8 %706 to i32
	movq	%rdx, %rax
	movq	$0, %r11
	movb	%al, %r11b
	# br label %708
	movq	%r11, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename708
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename708:
	# %709 = phi i32 [%703, %698], [%707, %704]
	# %710 = trunc i32 %709 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %710, i8* %44
	movq	%rdx, %rax
	movq	-336(%rbp), %rcx
	movb	%al, (%rcx)
	# %711 = zext i8 %710 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %712 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %713 = load i8, i8* %712
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %714 = zext i8 %713 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %715 = icmp sge i32 %714, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setge	%dl
	# br i1 %715, label %716, label %727
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename727
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename716
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename716:
	# %717 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %718 = load i8, i8* %717
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %719 = zext i8 %718 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %720 = icmp sle i32 %719, 90
	movq	%rdx, %rax
	movq	$90, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setle	%dl
	# br i1 %720, label %721, label %727
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename727
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename721
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename721:
	# %722 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %723 = load i8, i8* %722
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %724 = zext i8 %723 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %725 = sub i32 %724, 65
	movq	%rdx, %rax
	movq	$65, %rcx
	subq	%rcx, %rax
	movq	%rax, %rdx
	# %726 = add i32 %725, 97
	movq	%rdx, %rax
	movq	$97, %rcx
	addq	%rcx, %rax
	movq	%rax, %r9
	# br label %731
	movq	%r9, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename731
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename727:
	# %728 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %729 = load i8, i8* %728
	movq	%rdx, %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %730 = zext i8 %729 to i32
	movq	%rdx, %rax
	movq	$0, %r14
	movb	%al, %r14b
	# br label %731
	movq	%r14, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename731
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename731:
	# %732 = phi i32 [%726, %721], [%730, %727]
	# %733 = trunc i32 %732 to i8
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# store i8 %733, i8* %45
	movq	%rdx, %rax
	movq	-344(%rbp), %rcx
	movb	%al, (%rcx)
	# %734 = zext i8 %733 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %735 = icmp ne i32 %711, %734
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %735, label %736, label %737
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename737
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename736
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename736:
	# br label %742
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename742
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename737:
	# %738 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %739 = getelementptr i8, i8* %738, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %739, i8** %39
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movq	%rax, (%rcx)
	# %740 = load i8*, i8** %41
	movq	-312(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %741 = getelementptr i8, i8* %740, i32 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %741, i8** %41
	movq	%rdx, %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %684
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename684
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename742:
	# %743 = load i8*, i8** %39
	movq	-296(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %744 = load i8*, i8** %40
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %745 = icmp eq i8* %743, %744
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %745, label %746, label %751
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename751
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename746
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename746:
	# %747 = load i32, i32* %42
	movq	-320(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %748 = load i32, i32* %43
	movq	-328(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %749 = icmp ult i32 %747, %748
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setb	%dl
	# %750 = zext i1 %749 to i32
	movq	%rdx, %rax
	movq	%rax, %r8
	# br label %758
	movq	%r8, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename758
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename751:
	# %752 = load i8, i8* %44
	movq	-336(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %753 = zext i8 %752 to i32
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %754 = load i8, i8* %45
	movq	-344(%rbp), %rax
	movb	(%rax), %al
	movq	$0, %rdx
	movb	%al, %dl
	# %755 = zext i8 %754 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movb	%al, %dl
	# %756 = icmp slt i32 %753, %755
	movq	%rbx, %rax
	movq	%rdx, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setl	%dl
	# %757 = zext i1 %756 to i32
	movq	%rdx, %rax
	movq	%rax, %rdi
	# br label %758
	movq	%rdi, %rdx
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename758
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename758:
	# %759 = phi i32 [%750, %746], [%757, %751]
	# %760 = icmp ne i32 %759, 0
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %rdx
	setne	%dl
	# br i1 %760, label %762, label %761
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_reader_sort_central_dir_offsets_by_filename761
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename762
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename761:
	# br label %781
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename781
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename762:
	# br label %763
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename763
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename763:
	# %764 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %765 = load i64, i64* %58
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %766 = getelementptr i32, i8* %764, i64 %765
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %767 = load i32, i32* %766
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i32 %767, i32* %60
	movq	%rdx, %rax
	movq	-448(%rbp), %rcx
	movl	%eax, (%rcx)
	# %768 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %769 = load i64, i64* %57
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %770 = getelementptr i32, i8* %768, i64 %769
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %771 = load i32, i32* %770
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rsi
	movl	%eax, %esi
	# %772 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %773 = load i64, i64* %58
	movq	-432(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %774 = getelementptr i32, i8* %772, i64 %773
	movq	%rbx, %rcx
	movq	%rdx, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %771, i32* %774
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %775 = load i32, i32* %60
	movq	-448(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %776 = load i8*, i8** %50
	movq	-368(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %777 = load i64, i64* %57
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %778 = getelementptr i32, i8* %776, i64 %777
	movq	%rdx, %rcx
	movq	%rsi, %rax
	imulq	$4, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %775, i32* %778
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# br label %779
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename779
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename779:
	# %780 = load i64, i64* %57
	movq	-424(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i64 %780, i64* %58
	movq	%rdx, %rax
	movq	-432(%rbp), %rcx
	movq	%rax, (%rcx)
	# br label %449
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename449
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename781:
	# %782 = load i32, i32* %52
	movq	-384(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %783 = add i32 %782, -1
	movq	%rdx, %rax
	movq	$-1, %rcx
	addq	%rcx, %rax
	movq	%rax, %rdx
	# store i32 %783, i32* %52
	movq	%rdx, %rax
	movq	-384(%rbp), %rcx
	movl	%eax, (%rcx)
	# br label %428
	jmp	mz_zip_reader_sort_central_dir_offsets_by_filename428
	.text
mz_zip_reader_sort_central_dir_offsets_by_filename784:
	# ret void
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_dos_to_time_t
_mz_zip_dos_to_time_t:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	popq	%rbx
	popq	%rsi
	# %3 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rdx
	# %4 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r8
	# %5 = alloca %struct.tm
	subq	$52, %rsp
	movq	%rsp, %rdi
	# store i32 %0, i32* %3
	movq	%rsi, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# store i32 %1, i32* %4
	movq	%rbx, %rax
	movq	%r8, %rcx
	movl	%eax, (%rcx)
	# call void @memset (i8* %5, i8 0, i64 56, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$56, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	_memset
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# %6 = getelementptr %struct.tm, i8* %5, i32 0, i32 8
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$8, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 -1, i32* %6
	movq	$-1, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %7 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %8 = ashr i32 %7, 9
	movq	%rbx, %rax
	movq	$9, %rcx
	sarq	%cl,%rax
	movq	%rax, %rbx
	# %9 = and i32 %8, 127
	movq	%rbx, %rax
	movq	$127, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %10 = add i32 %9, 1980
	movq	%rbx, %rax
	movq	$1980, %rcx
	addq	%rcx, %rax
	movq	%rax, %rbx
	# %11 = sub i32 %10, 1900
	movq	%rbx, %rax
	movq	$1900, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %12 = getelementptr %struct.tm, i8* %5, i32 0, i32 5
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$5, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %11, i32* %12
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %13 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %14 = ashr i32 %13, 5
	movq	%rbx, %rax
	movq	$5, %rcx
	sarq	%cl,%rax
	movq	%rax, %rbx
	# %15 = and i32 %14, 15
	movq	%rbx, %rax
	movq	$15, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %16 = sub i32 %15, 1
	movq	%rbx, %rax
	movq	$1, %rcx
	subq	%rcx, %rax
	movq	%rax, %rsi
	# %17 = getelementptr %struct.tm, i8* %5, i32 0, i32 4
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$4, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %16, i32* %17
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %18 = load i32, i32* %4
	movq	%r8, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %19 = and i32 %18, 31
	movq	%rbx, %rax
	movq	$31, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %20 = getelementptr %struct.tm, i8* %5, i32 0, i32 3
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %19, i32* %20
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %21 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %22 = ashr i32 %21, 11
	movq	%rbx, %rax
	movq	$11, %rcx
	sarq	%cl,%rax
	movq	%rax, %rbx
	# %23 = and i32 %22, 31
	movq	%rbx, %rax
	movq	$31, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %24 = getelementptr %struct.tm, i8* %5, i32 0, i32 2
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %23, i32* %24
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %25 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %26 = ashr i32 %25, 5
	movq	%rbx, %rax
	movq	$5, %rcx
	sarq	%cl,%rax
	movq	%rax, %rbx
	# %27 = and i32 %26, 63
	movq	%rbx, %rax
	movq	$63, %rcx
	andq	%rcx, %rax
	movq	%rax, %rsi
	# %28 = getelementptr %struct.tm, i8* %5, i32 0, i32 1
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$1, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i32 %27, i32* %28
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movl	%eax, (%rcx)
	# %29 = load i32, i32* %3
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %30 = shl i32 %29, 1
	movq	%rdx, %rax
	movq	$1, %rcx
	shlq	%cl,%rax
	movq	%rax, %rdx
	# %31 = and i32 %30, 62
	movq	%rdx, %rax
	movq	$62, %rcx
	andq	%rcx, %rax
	movq	%rax, %rbx
	# %32 = getelementptr %struct.tm, i8* %5, i32 0, i32 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$52, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i32 %31, i32* %32
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movl	%eax, (%rcx)
	# %33 = call i64 @mktime (i8* %5)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	popq	%rdi
	xorq	%rax, %rax
	callq	_mktime
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# ret i64 %33
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_array_ensure_capacity
_mz_zip_array_ensure_capacity:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$0, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	popq	%rdx
	popq	%r10
	popq	%r12
	popq	%r14
	# %5 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %rsi
	# %6 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rbx
	# %7 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %8 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %9 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r13
	# %10 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %r9
	# %11 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r8
	# store i8* %0, i8** %6
	movq	%r14, %rax
	movq	%rbx, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %7
	movq	%r12, %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i64 %2, i64* %8
	movq	%r10, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %3, i32* %9
	movq	%rdx, %rax
	movq	%r13, %rcx
	movl	%eax, (%rcx)
	# %12 = load i64, i64* %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# store i64 %12, i64* %11
	movq	%r10, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# %13 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %14 = getelementptr %struct.mz_zip_array, i8* %13, i32 0, i32 3
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %15 = load i32, i32* %14
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %16 = icmp ne i32 %15, 0
	movq	%r10, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r10
	setne	%r10b
	# %17 = xor i1 %16, 1
	movq	%r10, %rax
	movq	$1, %rcx
	xorq	%rcx, %rax
	movq	%rax, %r10
	# %18 = zext i1 %17 to i32
	movq	%r10, %rax
	movq	%rax, %r10
	# %19 = sext i32 %18 to i64
	movq	%r10, %rax
	movq	$0, %r10
	movl	%eax, %r10d
	# %20 = icmp ne i64 %19, 0
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r10
	setne	%r10b
	# br i1 %20, label %21, label %23
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_array_ensure_capacity23
	jmp	mz_zip_array_ensure_capacity21
	.text
mz_zip_array_ensure_capacity21:
	# call void @__assert_rtn (i8* @__func__.mz_zip_array_ensure_capacity, i8* @.str.11, i32 4785, i8* @.str.78)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	leaq	___func__.mz_zip_array_ensure_capacity(%rip), %rax
	pushq	%rax
	leaq	_.str.11(%rip), %rax
	pushq	%rax
	movq	$4785, %rax
	pushq	%rax
	leaq	_.str.78(%rip), %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___assert_rtn
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	# unreachable
	.text
mz_zip_array_ensure_capacity22:
	# br label %24
	jmp	mz_zip_array_ensure_capacity24
	.text
mz_zip_array_ensure_capacity23:
	# br label %24
	jmp	mz_zip_array_ensure_capacity24
	.text
mz_zip_array_ensure_capacity24:
	# %25 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %26 = getelementptr %struct.mz_zip_array, i8* %25, i32 0, i32 2
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %27 = load i64, i64* %26
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r12
	# %28 = load i64, i64* %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %29 = icmp uge i64 %27, %28
	movq	%r12, %rax
	movq	%r10, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r10
	setnb	%r10b
	# br i1 %29, label %30, label %31
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_array_ensure_capacity31
	jmp	mz_zip_array_ensure_capacity30
	.text
mz_zip_array_ensure_capacity30:
	# store i32 1, i32* %5
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	mz_zip_array_ensure_capacity79
	.text
mz_zip_array_ensure_capacity31:
	# %32 = load i32, i32* %9
	movq	%r13, %rax
	movl	(%rax), %eax
	movq	$0, %r10
	movl	%eax, %r10d
	# %33 = icmp ne i32 %32, 0
	movq	%r10, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r10
	setne	%r10b
	# br i1 %33, label %34, label %54
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_array_ensure_capacity54
	jmp	mz_zip_array_ensure_capacity34
	.text
mz_zip_array_ensure_capacity34:
	# %35 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %36 = getelementptr %struct.mz_zip_array, i8* %35, i32 0, i32 2
	movq	%r10, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %r10
	# %37 = load i64, i64* %36
	movq	%r10, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %38 = icmp ugt i64 1, %37
	movq	$1, %rax
	movq	%r10, %rcx
	cmpq	%rcx, %rax
	movq	$0, %r10
	seta	%r10b
	# br i1 %38, label %39, label %40
	movq	%r10, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_array_ensure_capacity40
	jmp	mz_zip_array_ensure_capacity39
	.text
mz_zip_array_ensure_capacity39:
	# br label %44
	movq	$1, %rdx
	jmp	mz_zip_array_ensure_capacity44
	.text
mz_zip_array_ensure_capacity40:
	# %41 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %42 = getelementptr %struct.mz_zip_array, i8* %41, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %43 = load i64, i64* %42
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %44
	jmp	mz_zip_array_ensure_capacity44
	.text
mz_zip_array_ensure_capacity44:
	# %45 = phi i64 [1, %39], [%43, %40]
	# store i64 %45, i64* %11
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# br label %46
	jmp	mz_zip_array_ensure_capacity46
	.text
mz_zip_array_ensure_capacity46:
	# %47 = load i64, i64* %11
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %48 = load i64, i64* %8
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %49 = icmp ult i64 %47, %48
	movq	%r10, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	setb	%dl
	# br i1 %49, label %50, label %53
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_array_ensure_capacity53
	jmp	mz_zip_array_ensure_capacity50
	.text
mz_zip_array_ensure_capacity50:
	# %51 = load i64, i64* %11
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %52 = mul i64 %51, 2
	movq	%rdx, %rax
	movq	$2, %rcx
	imulq	%rcx, %rax
	movq	%rax, %rdx
	# store i64 %52, i64* %11
	movq	%rdx, %rax
	movq	%r8, %rcx
	movq	%rax, (%rcx)
	# br label %46
	jmp	mz_zip_array_ensure_capacity46
	.text
mz_zip_array_ensure_capacity53:
	# br label %54
	jmp	mz_zip_array_ensure_capacity54
	.text
mz_zip_array_ensure_capacity54:
	# %55 = load i8*, i8** %6
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %56 = getelementptr %struct.mz_zip_archive, i8* %55, i32 0, i32 9
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$9, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %57 = load i8*, i8** %56
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %58 = load i8*, i8** %6
	movq	%rbx, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %59 = getelementptr %struct.mz_zip_archive, i8* %58, i32 0, i32 10
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$112, %rax
	addq	%rax, %rcx
	movq	$10, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %60 = load i8*, i8** %59
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r11
	# %61 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %62 = getelementptr %struct.mz_zip_array, i8* %61, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %63 = load i8*, i8** %62
	movq	%rdx, %rax
	movq	(%rax), %rax
	movq	%rax, %r10
	# %64 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %65 = getelementptr %struct.mz_zip_array, i8* %64, i32 0, i32 3
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$3, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# %66 = load i32, i32* %65
	movq	%rdx, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %67 = zext i32 %66 to i64
	movq	%rdx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %68 = load i64, i64* %11
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %69 = call i8* %57 (i8* %60, i8* %63, i64 %67, i64 %68)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r11, %rax
	pushq	%rax
	movq	%r10, %rax
	pushq	%rax
	movq	%rbx, %rax
	pushq	%rax
	movq	%rdx, %rax
	pushq	%rax
	movq	%rdx, %rcx
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	*%rcx
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdx
	# store i8* %69, i8** %10
	movq	%rdx, %rax
	movq	%r9, %rcx
	movq	%rax, (%rcx)
	# %70 = icmp eq i8* null, %69
	movq	$0, %rax
	movq	%rdx, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdx
	sete	%dl
	# br i1 %70, label %71, label %72
	movq	%rdx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_array_ensure_capacity72
	jmp	mz_zip_array_ensure_capacity71
	.text
mz_zip_array_ensure_capacity71:
	# store i32 0, i32* %5
	movq	$0, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	mz_zip_array_ensure_capacity79
	.text
mz_zip_array_ensure_capacity72:
	# %73 = load i8*, i8** %10
	movq	%r9, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %74 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %75 = getelementptr %struct.mz_zip_array, i8* %74, i32 0, i32 0
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$0, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8* %73, i8** %75
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# %76 = load i64, i64* %11
	movq	%r8, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %77 = load i8*, i8** %7
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %78 = getelementptr %struct.mz_zip_array, i8* %77, i32 0, i32 2
	movq	%rdx, %rcx
	movq	$0, %rax
	imulq	$28, %rax
	addq	%rax, %rcx
	movq	$2, %rax
	imulq	$8, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i64 %76, i64* %78
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movq	%rax, (%rcx)
	# store i32 1, i32* %5
	movq	$1, %rax
	movq	%rsi, %rcx
	movl	%eax, (%rcx)
	# br label %79
	jmp	mz_zip_array_ensure_capacity79
	.text
mz_zip_array_ensure_capacity79:
	# %80 = load i32, i32* %5
	movq	%rsi, %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# ret i32 %80
	movq	%rdx, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
	.text
	.globl	_mz_zip_writer_create_central_dir_header
_mz_zip_writer_create_central_dir_header:
	pushq	%rbp
	pushq	%rbx
	pushq	%r12
	pushq	%r13
	pushq	%r14
	pushq	%r15
	movq	%rsp, %rbp
	subq	$352, %rsp
	pushq	%rdi
	pushq	%rsi
	pushq	%rdx
	pushq	%rcx
	pushq	%r8
	pushq	%r9
	pushq	24(%rbp)
	pushq	32(%rbp)
	pushq	40(%rbp)
	pushq	48(%rbp)
	pushq	56(%rbp)
	pushq	64(%rbp)
	pushq	72(%rbp)
	pushq	80(%rbp)
	popq	%rbx
	popq	%rsi
	popq	%r8
	popq	-80(%rbp)
	popq	-72(%rbp)
	popq	-64(%rbp)
	popq	-56(%rbp)
	popq	-48(%rbp)
	popq	-40(%rbp)
	popq	-32(%rbp)
	popq	%rdx
	popq	-24(%rbp)
	popq	-16(%rbp)
	popq	-8(%rbp)
	# %15 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -88(%rbp)
	# %16 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -96(%rbp)
	# %17 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -104(%rbp)
	# %18 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -112(%rbp)
	# %19 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -120(%rbp)
	# %20 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -128(%rbp)
	# %21 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -136(%rbp)
	# %22 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -152(%rbp)
	# %23 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -144(%rbp)
	# %24 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -160(%rbp)
	# %25 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -168(%rbp)
	# %26 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -176(%rbp)
	# %27 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -184(%rbp)
	# %28 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -192(%rbp)
	# %29 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -200(%rbp)
	# %30 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -208(%rbp)
	# %31 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -216(%rbp)
	# %32 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r9
	# %33 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -224(%rbp)
	# %34 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -232(%rbp)
	# %35 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -240(%rbp)
	# %36 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -248(%rbp)
	# %37 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -256(%rbp)
	# %38 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -264(%rbp)
	# %39 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -272(%rbp)
	# %40 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -280(%rbp)
	# %41 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -288(%rbp)
	# %42 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -296(%rbp)
	# %43 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, %rdi
	# %44 = alloca i8*
	subq	$8, %rsp
	movq	%rsp, -304(%rbp)
	# %45 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -312(%rbp)
	# %46 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -320(%rbp)
	# %47 = alloca i16
	subq	$2, %rsp
	movq	%rsp, -328(%rbp)
	# %48 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -336(%rbp)
	# %49 = alloca i64
	subq	$8, %rsp
	movq	%rsp, -344(%rbp)
	# %50 = alloca i32
	subq	$4, %rsp
	movq	%rsp, -352(%rbp)
	# %51 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r15
	# %52 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r14
	# %53 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r13
	# %54 = alloca i16
	subq	$2, %rsp
	movq	%rsp, %r12
	# %55 = alloca i64
	subq	$8, %rsp
	movq	%rsp, %r11
	# %56 = alloca i32
	subq	$4, %rsp
	movq	%rsp, %r10
	# store i8* %0, i8** %43
	movq	-8(%rbp), %rax
	movq	%rdi, %rcx
	movq	%rax, (%rcx)
	# store i8* %1, i8** %44
	movq	-16(%rbp), %rax
	movq	-304(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %2, i16* %45
	movq	-24(%rbp), %rax
	movq	-312(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %3, i16* %46
	movq	%rdx, %rax
	movq	-320(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %4, i16* %47
	movq	-32(%rbp), %rax
	movq	-328(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %5, i64* %48
	movq	-40(%rbp), %rax
	movq	-336(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i64 %6, i64* %49
	movq	-48(%rbp), %rax
	movq	-344(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %7, i32* %50
	movq	-56(%rbp), %rax
	movq	-352(%rbp), %rcx
	movl	%eax, (%rcx)
	# store i16 %8, i16* %51
	movq	-64(%rbp), %rax
	movq	%r15, %rcx
	movq	%rax, (%rcx)
	# store i16 %9, i16* %52
	movq	-72(%rbp), %rax
	movq	%r14, %rcx
	movq	%rax, (%rcx)
	# store i16 %10, i16* %53
	movq	-80(%rbp), %rax
	movq	%r13, %rcx
	movq	%rax, (%rcx)
	# store i16 %11, i16* %54
	movq	%r8, %rax
	movq	%r12, %rcx
	movq	%rax, (%rcx)
	# store i64 %12, i64* %55
	movq	%rsi, %rax
	movq	%r11, %rcx
	movq	%rax, (%rcx)
	# store i32 %13, i32* %56
	movq	%rbx, %rax
	movq	%r10, %rcx
	movl	%eax, (%rcx)
	# %57 = load i8*, i8** %43
	movq	%rdi, %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %58 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %r8
	# %59 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %60 = call i64 @llvm.objectsize.i64.p0 (i8* %59, i1 0, i1 1, i1 0)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%rdi, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$1, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	  movq $-1, %rax

	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %61 = call i8* @__memset_chk (i8* %58, i32 0, i64 46, i64 %60)
	pushq	%rcx
	pushq	%rdx
	pushq	%rsi
	pushq	%rdi
	pushq	%r8
	pushq	%r9
	pushq	%r10
	pushq	%r11
	movq	%r8, %rax
	pushq	%rax
	movq	$0, %rax
	pushq	%rax
	movq	$46, %rax
	pushq	%rax
	movq	%rdi, %rax
	pushq	%rax
	popq	%rcx
	popq	%rdx
	popq	%rsi
	popq	%rdi
	xorq	%rax, %rax
	callq	___memset_chk
	addq	$0, %rsp
	popq	%r11
	popq	%r10
	popq	%r9
	popq	%r8
	popq	%rdi
	popq	%rsi
	popq	%rdx
	popq	%rcx
	movq	%rax, %rdi
	# %62 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %63 = getelementptr i8, i8* %62, i64 0
	movq	%rdi, %rcx
	movq	$0, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8* %63, i8** %31
	movq	%rdi, %rax
	movq	-216(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 33639248, i32* %32
	movq	$33639248, %rax
	movq	%r9, %rcx
	movl	%eax, (%rcx)
	# %64 = load i32, i32* %32
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %65 = trunc i32 %64 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %66 = load i8*, i8** %31
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %65, i8* %66
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %67 = load i32, i32* %32
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %68 = lshr i32 %67, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# %69 = trunc i32 %68 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %70 = load i8*, i8** %31
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %71 = getelementptr i8, i8* %70, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %69, i8* %71
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %72 = load i32, i32* %32
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %73 = lshr i32 %72, 16
	movq	%rdi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# %74 = trunc i32 %73 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %75 = load i8*, i8** %31
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %76 = getelementptr i8, i8* %75, i64 2
	movq	%rdi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %74, i8* %76
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %77 = load i32, i32* %32
	movq	%r9, %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %78 = lshr i32 %77, 24
	movq	%rdi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# %79 = trunc i32 %78 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %80 = load i8*, i8** %31
	movq	-216(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %81 = getelementptr i8, i8* %80, i64 3
	movq	%rdi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %79, i8* %81
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %82 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %83 = getelementptr i8, i8* %82, i64 6
	movq	%rdi, %rcx
	movq	$6, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r9
	# %84 = load i16, i16* %51
	movq	%r15, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %85 = zext i16 %84 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %86 = icmp ne i32 %85, 0
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpl	%ecx, %eax
	movq	$0, %r8
	setne	%r8b
	# %87 = zext i1 %86 to i64
	movq	%r8, %rax
	movq	%rax, %rdi
	# %88 = select i1 %86, i32 20, i32 0
	pushq	%rdx
	movq	%r8, %rcx
	movq	$20, %rax
	movq	$0, %rdx
	cmpq	$0, %rcx
	cmoveq	%rdx, %rax
	movq	%rax, %rdi
	popq	%rdx
	# %89 = trunc i32 %88 to i16
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# store i8* %83, i8** %15
	movq	%r9, %rax
	movq	-88(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %89, i16* %16
	movq	%rdi, %rax
	movq	-96(%rbp), %rcx
	movq	%rax, (%rcx)
	# %90 = load i16, i16* %16
	movq	-96(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %91 = trunc i16 %90 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %92 = load i8*, i8** %15
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %91, i8* %92
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %93 = load i16, i16* %16
	movq	-96(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %94 = zext i16 %93 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %95 = ashr i32 %94, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdi
	# %96 = trunc i32 %95 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %97 = load i8*, i8** %15
	movq	-88(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %98 = getelementptr i8, i8* %97, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %96, i8* %98
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %99 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %100 = getelementptr i8, i8* %99, i64 8
	movq	%rdi, %rcx
	movq	$8, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %101 = load i16, i16* %52
	movq	%r14, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# store i8* %100, i8** %17
	movq	%r8, %rax
	movq	-104(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %101, i16* %18
	movq	%rdi, %rax
	movq	-112(%rbp), %rcx
	movq	%rax, (%rcx)
	# %102 = load i16, i16* %18
	movq	-112(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %103 = trunc i16 %102 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %104 = load i8*, i8** %17
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %103, i8* %104
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %105 = load i16, i16* %18
	movq	-112(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %106 = zext i16 %105 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %107 = ashr i32 %106, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdi
	# %108 = trunc i32 %107 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %109 = load i8*, i8** %17
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %110 = getelementptr i8, i8* %109, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %108, i8* %110
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %111 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %112 = getelementptr i8, i8* %111, i64 10
	movq	%rdi, %rcx
	movq	$10, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %113 = load i16, i16* %51
	movq	%r15, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# store i8* %112, i8** %19
	movq	%r8, %rax
	movq	-120(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %113, i16* %20
	movq	%rdi, %rax
	movq	-128(%rbp), %rcx
	movq	%rax, (%rcx)
	# %114 = load i16, i16* %20
	movq	-128(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %115 = trunc i16 %114 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %116 = load i8*, i8** %19
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %115, i8* %116
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %117 = load i16, i16* %20
	movq	-128(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %118 = zext i16 %117 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %119 = ashr i32 %118, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdi
	# %120 = trunc i32 %119 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %121 = load i8*, i8** %19
	movq	-120(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %122 = getelementptr i8, i8* %121, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %120, i8* %122
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %123 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %124 = getelementptr i8, i8* %123, i64 12
	movq	%rdi, %rcx
	movq	$12, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %125 = load i16, i16* %53
	movq	%r13, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# store i8* %124, i8** %21
	movq	%r8, %rax
	movq	-136(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %125, i16* %22
	movq	%rdi, %rax
	movq	-152(%rbp), %rcx
	movq	%rax, (%rcx)
	# %126 = load i16, i16* %22
	movq	-152(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %127 = trunc i16 %126 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %128 = load i8*, i8** %21
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %127, i8* %128
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %129 = load i16, i16* %22
	movq	-152(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %130 = zext i16 %129 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %131 = ashr i32 %130, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdi
	# %132 = trunc i32 %131 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %133 = load i8*, i8** %21
	movq	-136(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %134 = getelementptr i8, i8* %133, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %132, i8* %134
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %135 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %136 = getelementptr i8, i8* %135, i64 14
	movq	%rdi, %rcx
	movq	$14, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %137 = load i16, i16* %54
	movq	%r12, %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# store i8* %136, i8** %23
	movq	%r8, %rax
	movq	-144(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %137, i16* %24
	movq	%rdi, %rax
	movq	-160(%rbp), %rcx
	movq	%rax, (%rcx)
	# %138 = load i16, i16* %24
	movq	-160(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %139 = trunc i16 %138 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %140 = load i8*, i8** %23
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %139, i8* %140
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %141 = load i16, i16* %24
	movq	-160(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rdi
	movw	%ax, %di
	# %142 = zext i16 %141 to i32
	movq	%rdi, %rax
	movq	$0, %rdi
	movw	%ax, %di
	# %143 = ashr i32 %142, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rdi
	# %144 = trunc i32 %143 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %145 = load i8*, i8** %23
	movq	-144(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %146 = getelementptr i8, i8* %145, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %144, i8* %146
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %147 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %148 = getelementptr i8, i8* %147, i64 16
	movq	%rdi, %rcx
	movq	$16, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %149 = load i32, i32* %50
	movq	-352(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# store i8* %148, i8** %33
	movq	%r8, %rax
	movq	-224(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %149, i32* %34
	movq	%rdi, %rax
	movq	-232(%rbp), %rcx
	movl	%eax, (%rcx)
	# %150 = load i32, i32* %34
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %151 = trunc i32 %150 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %152 = load i8*, i8** %33
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# store i8 %151, i8* %152
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %153 = load i32, i32* %34
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %154 = lshr i32 %153, 8
	movq	%rdi, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# %155 = trunc i32 %154 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %156 = load i8*, i8** %33
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %157 = getelementptr i8, i8* %156, i64 1
	movq	%rdi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %155, i8* %157
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %158 = load i32, i32* %34
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %159 = lshr i32 %158, 16
	movq	%rdi, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# %160 = trunc i32 %159 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %161 = load i8*, i8** %33
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %162 = getelementptr i8, i8* %161, i64 2
	movq	%rdi, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %160, i8* %162
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %163 = load i32, i32* %34
	movq	-232(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdi
	movl	%eax, %edi
	# %164 = lshr i32 %163, 24
	movq	%rdi, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdi
	# %165 = trunc i32 %164 to i8
	movq	%rdi, %rax
	movq	$0, %r8
	movb	%al, %r8b
	# %166 = load i8*, i8** %33
	movq	-224(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %167 = getelementptr i8, i8* %166, i64 3
	movq	%rdi, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# store i8 %165, i8* %167
	movq	%r8, %rax
	movq	%rdi, %rcx
	movb	%al, (%rcx)
	# %168 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %169 = getelementptr i8, i8* %168, i64 20
	movq	%rdi, %rcx
	movq	$20, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %r8
	# %170 = load i64, i64* %49
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdi
	# %171 = icmp ult i64 %170, 4294967295
	movq	%rdi, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rdi
	setb	%dil
	# br i1 %171, label %172, label %174
	movq	%rdi, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_create_central_dir_header174
	jmp	mz_zip_writer_create_central_dir_header172
	.text
mz_zip_writer_create_central_dir_header172:
	# %173 = load i64, i64* %49
	movq	-344(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# br label %175
	jmp	mz_zip_writer_create_central_dir_header175
	.text
mz_zip_writer_create_central_dir_header174:
	# br label %175
	movq	$4294967295, %rbx
	jmp	mz_zip_writer_create_central_dir_header175
	.text
mz_zip_writer_create_central_dir_header175:
	# %176 = phi i64 [%173, %172], [4294967295, %174]
	# %177 = trunc i64 %176 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i8* %169, i8** %35
	movq	%r8, %rax
	movq	-240(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %177, i32* %36
	movq	%rbx, %rax
	movq	-248(%rbp), %rcx
	movl	%eax, (%rcx)
	# %178 = load i32, i32* %36
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %179 = trunc i32 %178 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %180 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %179, i8* %180
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %181 = load i32, i32* %36
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %182 = lshr i32 %181, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %183 = trunc i32 %182 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %184 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %185 = getelementptr i8, i8* %184, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %183, i8* %185
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %186 = load i32, i32* %36
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %187 = lshr i32 %186, 16
	movq	%rbx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %188 = trunc i32 %187 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %189 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %190 = getelementptr i8, i8* %189, i64 2
	movq	%rbx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %188, i8* %190
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %191 = load i32, i32* %36
	movq	-248(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %192 = lshr i32 %191, 24
	movq	%rbx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %193 = trunc i32 %192 to i8
	movq	%rbx, %rax
	movq	$0, %rdi
	movb	%al, %dil
	# %194 = load i8*, i8** %35
	movq	-240(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %195 = getelementptr i8, i8* %194, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %193, i8* %195
	movq	%rdi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %196 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %197 = getelementptr i8, i8* %196, i64 24
	movq	%rbx, %rcx
	movq	$24, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdi
	# %198 = load i64, i64* %48
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %199 = icmp ult i64 %198, 4294967295
	movq	%rbx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %199, label %200, label %202
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_create_central_dir_header202
	jmp	mz_zip_writer_create_central_dir_header200
	.text
mz_zip_writer_create_central_dir_header200:
	# %201 = load i64, i64* %48
	movq	-336(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# br label %203
	movq	%rsi, %rbx
	jmp	mz_zip_writer_create_central_dir_header203
	.text
mz_zip_writer_create_central_dir_header202:
	# br label %203
	movq	$4294967295, %rbx
	jmp	mz_zip_writer_create_central_dir_header203
	.text
mz_zip_writer_create_central_dir_header203:
	# %204 = phi i64 [%201, %200], [4294967295, %202]
	# %205 = trunc i64 %204 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i8* %197, i8** %37
	movq	%rdi, %rax
	movq	-256(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %205, i32* %38
	movq	%rbx, %rax
	movq	-264(%rbp), %rcx
	movl	%eax, (%rcx)
	# %206 = load i32, i32* %38
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %207 = trunc i32 %206 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %208 = load i8*, i8** %37
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %207, i8* %208
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %209 = load i32, i32* %38
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %210 = lshr i32 %209, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %211 = trunc i32 %210 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %212 = load i8*, i8** %37
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %213 = getelementptr i8, i8* %212, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %211, i8* %213
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %214 = load i32, i32* %38
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %215 = lshr i32 %214, 16
	movq	%rbx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %216 = trunc i32 %215 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %217 = load i8*, i8** %37
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %218 = getelementptr i8, i8* %217, i64 2
	movq	%rbx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %216, i8* %218
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %219 = load i32, i32* %38
	movq	-264(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %220 = lshr i32 %219, 24
	movq	%rbx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %221 = trunc i32 %220 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %222 = load i8*, i8** %37
	movq	-256(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %223 = getelementptr i8, i8* %222, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %221, i8* %223
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %224 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %225 = getelementptr i8, i8* %224, i64 28
	movq	%rbx, %rcx
	movq	$28, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %226 = load i16, i16* %45
	movq	-312(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# store i8* %225, i8** %25
	movq	%rsi, %rax
	movq	-168(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %226, i16* %26
	movq	%rbx, %rax
	movq	-176(%rbp), %rcx
	movq	%rax, (%rcx)
	# %227 = load i16, i16* %26
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %228 = trunc i16 %227 to i8
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %229 = load i8*, i8** %25
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# store i8 %228, i8* %229
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %230 = load i16, i16* %26
	movq	-176(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %231 = zext i16 %230 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %232 = ashr i32 %231, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rbx
	# %233 = trunc i32 %232 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %234 = load i8*, i8** %25
	movq	-168(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %235 = getelementptr i8, i8* %234, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %233, i8* %235
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %236 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %237 = getelementptr i8, i8* %236, i64 30
	movq	%rbx, %rcx
	movq	$30, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %238 = load i16, i16* %46
	movq	-320(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# store i8* %237, i8** %27
	movq	%rsi, %rax
	movq	-184(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %238, i16* %28
	movq	%rbx, %rax
	movq	-192(%rbp), %rcx
	movq	%rax, (%rcx)
	# %239 = load i16, i16* %28
	movq	-192(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %240 = trunc i16 %239 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %241 = load i8*, i8** %27
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %240, i8* %241
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %242 = load i16, i16* %28
	movq	-192(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %243 = zext i16 %242 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %244 = ashr i32 %243, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rbx
	# %245 = trunc i32 %244 to i8
	movq	%rbx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %246 = load i8*, i8** %27
	movq	-184(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rsi
	# %247 = getelementptr i8, i8* %246, i64 1
	movq	%rsi, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# store i8 %245, i8* %247
	movq	%rbx, %rax
	movq	%rsi, %rcx
	movb	%al, (%rcx)
	# %248 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %249 = getelementptr i8, i8* %248, i64 32
	movq	%rbx, %rcx
	movq	$32, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# %250 = load i16, i16* %47
	movq	-328(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rsi
	movw	%ax, %si
	# store i8* %249, i8** %29
	movq	%rbx, %rax
	movq	-200(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i16 %250, i16* %30
	movq	%rsi, %rax
	movq	-208(%rbp), %rcx
	movq	%rax, (%rcx)
	# %251 = load i16, i16* %30
	movq	-208(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %252 = trunc i16 %251 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %253 = load i8*, i8** %29
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %252, i8* %253
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %254 = load i16, i16* %30
	movq	-208(%rbp), %rax
	movw	(%rax), %ax
	movq	$0, %rbx
	movw	%ax, %bx
	# %255 = zext i16 %254 to i32
	movq	%rbx, %rax
	movq	$0, %rbx
	movw	%ax, %bx
	# %256 = ashr i32 %255, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	sarq	%cl,%rax
	movq	%rax, %rbx
	# %257 = trunc i32 %256 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %258 = load i8*, i8** %29
	movq	-200(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %259 = getelementptr i8, i8* %258, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %257, i8* %259
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %260 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %261 = getelementptr i8, i8* %260, i64 38
	movq	%rbx, %rcx
	movq	$38, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %262 = load i32, i32* %56
	movq	%r10, %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# store i8* %261, i8** %39
	movq	%rsi, %rax
	movq	-272(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %262, i32* %40
	movq	%rbx, %rax
	movq	-280(%rbp), %rcx
	movl	%eax, (%rcx)
	# %263 = load i32, i32* %40
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %264 = trunc i32 %263 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %265 = load i8*, i8** %39
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# store i8 %264, i8* %265
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %266 = load i32, i32* %40
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %267 = lshr i32 %266, 8
	movq	%rbx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %268 = trunc i32 %267 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %269 = load i8*, i8** %39
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %270 = getelementptr i8, i8* %269, i64 1
	movq	%rbx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %268, i8* %270
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %271 = load i32, i32* %40
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %272 = lshr i32 %271, 16
	movq	%rbx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %273 = trunc i32 %272 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %274 = load i8*, i8** %39
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %275 = getelementptr i8, i8* %274, i64 2
	movq	%rbx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %273, i8* %275
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %276 = load i32, i32* %40
	movq	-280(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rbx
	movl	%eax, %ebx
	# %277 = lshr i32 %276, 24
	movq	%rbx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rbx
	# %278 = trunc i32 %277 to i8
	movq	%rbx, %rax
	movq	$0, %rsi
	movb	%al, %sil
	# %279 = load i8*, i8** %39
	movq	-272(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %280 = getelementptr i8, i8* %279, i64 3
	movq	%rbx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rbx
	# store i8 %278, i8* %280
	movq	%rsi, %rax
	movq	%rbx, %rcx
	movb	%al, (%rcx)
	# %281 = load i8*, i8** %44
	movq	-304(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %282 = getelementptr i8, i8* %281, i64 42
	movq	%rbx, %rcx
	movq	$42, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rsi
	# %283 = load i64, i64* %55
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rbx
	# %284 = icmp ult i64 %283, 4294967295
	movq	%rbx, %rax
	movq	$4294967295, %rcx
	cmpq	%rcx, %rax
	movq	$0, %rbx
	setb	%bl
	# br i1 %284, label %285, label %287
	movq	%rbx, %rax
	movq	$0, %rcx
	cmpq	%rax, %rcx
	je	mz_zip_writer_create_central_dir_header287
	jmp	mz_zip_writer_create_central_dir_header285
	.text
mz_zip_writer_create_central_dir_header285:
	# %286 = load i64, i64* %55
	movq	%r11, %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# br label %288
	jmp	mz_zip_writer_create_central_dir_header288
	.text
mz_zip_writer_create_central_dir_header287:
	# br label %288
	movq	$4294967295, %rdx
	jmp	mz_zip_writer_create_central_dir_header288
	.text
mz_zip_writer_create_central_dir_header288:
	# %289 = phi i64 [%286, %285], [4294967295, %287]
	# %290 = trunc i64 %289 to i32
	movq	%rdx, %rax
	movq	$0, %rdx
	movl	%eax, %edx
	# store i8* %282, i8** %41
	movq	%rsi, %rax
	movq	-288(%rbp), %rcx
	movq	%rax, (%rcx)
	# store i32 %290, i32* %42
	movq	%rdx, %rax
	movq	-296(%rbp), %rcx
	movl	%eax, (%rcx)
	# %291 = load i32, i32* %42
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %292 = trunc i32 %291 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %293 = load i8*, i8** %41
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# store i8 %292, i8* %293
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %294 = load i32, i32* %42
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %295 = lshr i32 %294, 8
	movq	%rdx, %rax
	movq	$8, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %296 = trunc i32 %295 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %297 = load i8*, i8** %41
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %298 = getelementptr i8, i8* %297, i64 1
	movq	%rdx, %rcx
	movq	$1, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %296, i8* %298
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %299 = load i32, i32* %42
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %300 = lshr i32 %299, 16
	movq	%rdx, %rax
	movq	$16, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %301 = trunc i32 %300 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %302 = load i8*, i8** %41
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %303 = getelementptr i8, i8* %302, i64 2
	movq	%rdx, %rcx
	movq	$2, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %301, i8* %303
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# %304 = load i32, i32* %42
	movq	-296(%rbp), %rax
	movl	(%rax), %eax
	movq	$0, %rdx
	movl	%eax, %edx
	# %305 = lshr i32 %304, 24
	movq	%rdx, %rax
	movq	$24, %rcx
	shrl	%cl, %eax
	movq	%rax, %rdx
	# %306 = trunc i32 %305 to i8
	movq	%rdx, %rax
	movq	$0, %rbx
	movb	%al, %bl
	# %307 = load i8*, i8** %41
	movq	-288(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, %rdx
	# %308 = getelementptr i8, i8* %307, i64 3
	movq	%rdx, %rcx
	movq	$3, %rax
	imulq	$1, %rax
	addq	%rax, %rcx
	movq	%rcx, %rdx
	# store i8 %306, i8* %308
	movq	%rbx, %rax
	movq	%rdx, %rcx
	movb	%al, (%rcx)
	# ret i32 1
	movq	$1, %rax
	movq	%rbp, %rsp
	popq	%r15
	popq	%r14
	popq	%r13
	popq	%r12
	popq	%rbx
	popq	%rbp
	retq	
